
NUCLEO-G431RB-MSC_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca70  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800cc50  0800cc50  0001cc50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d250  0800d250  0002032c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d250  0800d250  0001d250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d258  0800d258  0002032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d258  0800d258  0001d258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d25c  0800d25c  0001d25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000032c  20000000  0800d260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  2000032c  0800d58c  0002032c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  0800d58c  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a92c  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe3  00000000  00000000  0003ac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  0003dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  0003f258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021963  00000000  00000000  00040718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001832a  00000000  00000000  0006207b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd6fd  00000000  00000000  0007a3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157aa2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000715c  00000000  00000000  00157af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000032c 	.word	0x2000032c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cc38 	.word	0x0800cc38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000330 	.word	0x20000330
 800021c:	0800cc38 	.word	0x0800cc38

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	0000      	movs	r0, r0
	...

08000fc0 <vitesse_de_rotation>:
/**
  * @brief donne la vitesse de rotation du moteur
  * @param None
  * @retval None
  */
void vitesse_de_rotation(){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

	if(htim4.Instance->CNT != 0){
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <vitesse_de_rotation+0x88>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <vitesse_de_rotation+0x14>

		int varibale =0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]

	}

	vitesse[0] = (1/4096.0)*(htim4.Instance->CNT - 32767.0) /(0.1/60);
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <vitesse_de_rotation+0x88>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff faca 	bl	8000574 <__aeabi_ui2d>
 8000fe0:	a315      	add	r3, pc, #84	; (adr r3, 8001038 <vitesse_de_rotation+0x78>)
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	f7ff f987 	bl	80002f8 <__aeabi_dsub>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <vitesse_de_rotation+0x8c>)
 8000ff8:	f7ff fb36 	bl	8000668 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	a30e      	add	r3, pc, #56	; (adr r3, 8001040 <vitesse_de_rotation+0x80>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fc57 	bl	80008bc <__aeabi_ddiv>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fdff 	bl	8000c18 <__aeabi_d2f>
 800101a:	4603      	mov	r3, r0
 800101c:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <vitesse_de_rotation+0x90>)
 800101e:	6013      	str	r3, [r2, #0]
	htim4.Instance->CNT=32767.0;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <vitesse_de_rotation+0x88>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001028:	625a      	str	r2, [r3, #36]	; 0x24



}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	f3af 8000 	nop.w
 8001038:	00000000 	.word	0x00000000
 800103c:	40dfffc0 	.word	0x40dfffc0
 8001040:	b4e81b4f 	.word	0xb4e81b4f
 8001044:	3f5b4e81 	.word	0x3f5b4e81
 8001048:	200004fc 	.word	0x200004fc
 800104c:	3f300000 	.word	0x3f300000
 8001050:	20000348 	.word	0x20000348

08001054 <start_PWM>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void start_PWM(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001058:	2100      	movs	r1, #0
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <start_PWM+0x28>)
 800105c:	f004 ffb0 	bl	8005fc0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001060:	2104      	movs	r1, #4
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <start_PWM+0x28>)
 8001064:	f004 ffac 	bl	8005fc0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001068:	2100      	movs	r1, #0
 800106a:	4804      	ldr	r0, [pc, #16]	; (800107c <start_PWM+0x28>)
 800106c:	f006 fa70 	bl	8007550 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001070:	2104      	movs	r1, #4
 8001072:	4802      	ldr	r0, [pc, #8]	; (800107c <start_PWM+0x28>)
 8001074:	f006 fa6c 	bl	8007550 <HAL_TIMEx_PWMN_Start>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000418 	.word	0x20000418

08001080 <stop_PWM>:

void stop_PWM(){
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001084:	2100      	movs	r1, #0
 8001086:	4808      	ldr	r0, [pc, #32]	; (80010a8 <stop_PWM+0x28>)
 8001088:	f005 f89a 	bl	80061c0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800108c:	2104      	movs	r1, #4
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <stop_PWM+0x28>)
 8001090:	f005 f896 	bl	80061c0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001094:	2100      	movs	r1, #0
 8001096:	4804      	ldr	r0, [pc, #16]	; (80010a8 <stop_PWM+0x28>)
 8001098:	f006 fb0e 	bl	80076b8 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800109c:	2104      	movs	r1, #4
 800109e:	4802      	ldr	r0, [pc, #8]	; (80010a8 <stop_PWM+0x28>)
 80010a0:	f006 fb0a 	bl	80076b8 <HAL_TIMEx_PWMN_Stop>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000418 	.word	0x20000418

080010ac <changement_alpha>:

void changement_alpha(int alpha){
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	if (alpha > 100){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b64      	cmp	r3, #100	; 0x64
 80010b8:	dd01      	ble.n	80010be <changement_alpha+0x12>
		alpha = 100;
 80010ba:	2364      	movs	r3, #100	; 0x64
 80010bc:	607b      	str	r3, [r7, #4]
	}
	TIM1->CCR1=(5312*alpha)/100;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <changement_alpha+0x44>)
 80010ca:	fb82 1203 	smull	r1, r2, r2, r3
 80010ce:	1152      	asrs	r2, r2, #5
 80010d0:	17db      	asrs	r3, r3, #31
 80010d2:	1ad2      	subs	r2, r2, r3
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <changement_alpha+0x48>)
 80010d6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=(5312-TIM1->CCR1);
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <changement_alpha+0x48>)
 80010da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010dc:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <changement_alpha+0x48>)
 80010de:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 80010e2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	51eb851f 	.word	0x51eb851f
 80010f4:	40012c00 	.word	0x40012c00

080010f8 <conversion_ADC>:

float conversion_ADC(int sortie_ADC_numerique ){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	int moyenne_sortie_ADC_numerique = sortie_ADC_numerique/20;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a27      	ldr	r2, [pc, #156]	; (80011a0 <conversion_ADC+0xa8>)
 8001104:	fb82 1203 	smull	r1, r2, r2, r3
 8001108:	10d2      	asrs	r2, r2, #3
 800110a:	17db      	asrs	r3, r3, #31
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	617b      	str	r3, [r7, #20]
	float tension_sortie_hacheur = moyenne_sortie_ADC_numerique * 3.3 / 4095;
 8001110:	6978      	ldr	r0, [r7, #20]
 8001112:	f7ff fa3f 	bl	8000594 <__aeabi_i2d>
 8001116:	a31c      	add	r3, pc, #112	; (adr r3, 8001188 <conversion_ADC+0x90>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff faa4 	bl	8000668 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	a319      	add	r3, pc, #100	; (adr r3, 8001190 <conversion_ADC+0x98>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fbc5 	bl	80008bc <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fd6d 	bl	8000c18 <__aeabi_d2f>
 800113e:	4603      	mov	r3, r0
 8001140:	613b      	str	r3, [r7, #16]
	float courant = (tension_sortie_hacheur -2.53)*12;
 8001142:	6938      	ldr	r0, [r7, #16]
 8001144:	f7ff fa38 	bl	80005b8 <__aeabi_f2d>
 8001148:	a313      	add	r3, pc, #76	; (adr r3, 8001198 <conversion_ADC+0xa0>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff f8d3 	bl	80002f8 <__aeabi_dsub>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <conversion_ADC+0xac>)
 8001160:	f7ff fa82 	bl	8000668 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fd54 	bl	8000c18 <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	60fb      	str	r3, [r7, #12]
	return (courant);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	ee07 3a90 	vmov	s15, r3
}
 800117a:	eeb0 0a67 	vmov.f32	s0, s15
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	f3af 8000 	nop.w
 8001188:	66666666 	.word	0x66666666
 800118c:	400a6666 	.word	0x400a6666
 8001190:	00000000 	.word	0x00000000
 8001194:	40affe00 	.word	0x40affe00
 8001198:	a3d70a3d 	.word	0xa3d70a3d
 800119c:	40043d70 	.word	0x40043d70
 80011a0:	66666667 	.word	0x66666667
 80011a4:	40280000 	.word	0x40280000

080011a8 <GPIO_ISO_RESET>:

void GPIO_ISO_RESET(){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2101      	movs	r1, #1
 80011b0:	4806      	ldr	r0, [pc, #24]	; (80011cc <GPIO_ISO_RESET+0x24>)
 80011b2:	f003 fd5f 	bl	8004c74 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f001 f9ec 	bl	8002594 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2101      	movs	r1, #1
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <GPIO_ISO_RESET+0x24>)
 80011c2:	f003 fd57 	bl	8004c74 <HAL_GPIO_WritePin>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	48000800 	.word	0x48000800

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0a4      	sub	sp, #144	; 0x90
 80011d4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	char*		token;
	int 		newCmdReady = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	67bb      	str	r3, [r7, #120]	; 0x78
	int 		alpha = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	66fb      	str	r3, [r7, #108]	; 0x6c
	int 		sortie_ADC_numerique = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	677b      	str	r3, [r7, #116]	; 0x74
	float 		courant = 0;
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ee:	f001 f99a 	bl	8002526 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f2:	f000 fa4f 	bl	8001694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f000 fd1d 	bl	8001c34 <MX_GPIO_Init>
  MX_DMA_Init();
 80011fa:	f000 fcf1 	bl	8001be0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011fe:	f000 fca3 	bl	8001b48 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001202:	f000 fb0d 	bl	8001820 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001206:	f000 fa91 	bl	800172c <MX_ADC1_Init>
  MX_TIM2_Init();
 800120a:	f000 fba9 	bl	8001960 <MX_TIM2_Init>
  MX_TIM4_Init();
 800120e:	f000 fc45 	bl	8001a9c <MX_TIM4_Init>
  MX_TIM3_Init();
 8001212:	f000 fbf3 	bl	80019fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // POUR LE SHELL
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2224      	movs	r2, #36	; 0x24
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f008 fcab 	bl	8009b78 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8001222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001226:	2240      	movs	r2, #64	; 0x40
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f008 fca4 	bl	8009b78 <memset>
 8001230:	4bb7      	ldr	r3, [pc, #732]	; (8001510 <main+0x340>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8001236:	2240      	movs	r2, #64	; 0x40
 8001238:	2100      	movs	r1, #0
 800123a:	48b6      	ldr	r0, [pc, #728]	; (8001514 <main+0x344>)
 800123c:	f008 fc9c 	bl	8009b78 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001240:	2201      	movs	r2, #1
 8001242:	49b3      	ldr	r1, [pc, #716]	; (8001510 <main+0x340>)
 8001244:	48b4      	ldr	r0, [pc, #720]	; (8001518 <main+0x348>)
 8001246:	f006 fd09 	bl	8007c5c <HAL_UART_Receive_IT>
	HAL_Delay(10);
 800124a:	200a      	movs	r0, #10
 800124c:	f001 f9a2 	bl	8002594 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	2266      	movs	r2, #102	; 0x66
 8001256:	49b1      	ldr	r1, [pc, #708]	; (800151c <main+0x34c>)
 8001258:	48af      	ldr	r0, [pc, #700]	; (8001518 <main+0x348>)
 800125a:	f006 fc68 	bl	8007b2e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	2218      	movs	r2, #24
 8001264:	49ae      	ldr	r1, [pc, #696]	; (8001520 <main+0x350>)
 8001266:	48ac      	ldr	r0, [pc, #688]	; (8001518 <main+0x348>)
 8001268:	f006 fc61 	bl	8007b2e <HAL_UART_Transmit>
 // FIN POUR LE SHELL

 // init PWM

	start_PWM();
 800126c:	f7ff fef2 	bl	8001054 <start_PWM>

 // initialisation de l'ADC pour la mesure du courant sur la phase RED

	if(HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED))
 8001270:	217f      	movs	r1, #127	; 0x7f
 8001272:	48ac      	ldr	r0, [pc, #688]	; (8001524 <main+0x354>)
 8001274:	f002 fe32 	bl	8003edc <HAL_ADCEx_Calibration_Start>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <main+0xb4>
		printf("probleme avec la calibration de l'ADC \r\n");
 800127e:	48aa      	ldr	r0, [pc, #680]	; (8001528 <main+0x358>)
 8001280:	f009 f95a 	bl	800a538 <puts>

	if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, ADC_Buffer, ADC_BUF_SIZE))
 8001284:	2214      	movs	r2, #20
 8001286:	49a9      	ldr	r1, [pc, #676]	; (800152c <main+0x35c>)
 8001288:	48a6      	ldr	r0, [pc, #664]	; (8001524 <main+0x354>)
 800128a:	f001 fd99 	bl	8002dc0 <HAL_ADC_Start_DMA>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <main+0xca>
		printf("probleme avec le demarrage du DMA \r\n");
 8001294:	48a6      	ldr	r0, [pc, #664]	; (8001530 <main+0x360>)
 8001296:	f009 f94f 	bl	800a538 <puts>

	if(HAL_OK != HAL_TIM_Base_Start(&htim2))
 800129a:	48a6      	ldr	r0, [pc, #664]	; (8001534 <main+0x364>)
 800129c:	f004 fd6c 	bl	8005d78 <HAL_TIM_Base_Start>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <main+0xdc>
		printf("probleme avec l'initialisation du Timer 2 \r\n");
 80012a6:	48a4      	ldr	r0, [pc, #656]	; (8001538 <main+0x368>)
 80012a8:	f009 f946 	bl	800a538 <puts>


 // initialisation du Timer 4 pour la mesure de vitesse avec le codeur incremental

	if(HAL_OK != HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL))
 80012ac:	213c      	movs	r1, #60	; 0x3c
 80012ae:	48a3      	ldr	r0, [pc, #652]	; (800153c <main+0x36c>)
 80012b0:	f005 f8c2 	bl	8006438 <HAL_TIM_Encoder_Start>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <main+0xf0>
			printf("probleme avec l'initialisation du Timer 4 \r\n");
 80012ba:	48a1      	ldr	r0, [pc, #644]	; (8001540 <main+0x370>)
 80012bc:	f009 f93c 	bl	800a538 <puts>

	if(HAL_OK != HAL_TIM_Base_Start_IT(&htim3))
 80012c0:	48a0      	ldr	r0, [pc, #640]	; (8001544 <main+0x374>)
 80012c2:	f004 fdbb 	bl	8005e3c <HAL_TIM_Base_Start_IT>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <main+0x102>
			printf("probleme avec l'initialisation du Timer 3 \r\n");
 80012cc:	489e      	ldr	r0, [pc, #632]	; (8001548 <main+0x378>)
 80012ce:	f009 f933 	bl	800a538 <puts>
	{

/******************** BEGIN SHELL **************************/

		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 80012d2:	4b9e      	ldr	r3, [pc, #632]	; (800154c <main+0x37c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d05f      	beq.n	800139a <main+0x1ca>
			switch(uartRxBuffer[0]){
 80012da:	4b8d      	ldr	r3, [pc, #564]	; (8001510 <main+0x340>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b0d      	cmp	r3, #13
 80012e0:	d002      	beq.n	80012e8 <main+0x118>
 80012e2:	2b7f      	cmp	r3, #127	; 0x7f
 80012e4:	d032      	beq.n	800134c <main+0x17c>
 80012e6:	e043      	b.n	8001370 <main+0x1a0>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	2203      	movs	r2, #3
 80012ee:	4998      	ldr	r1, [pc, #608]	; (8001550 <main+0x380>)
 80012f0:	4889      	ldr	r0, [pc, #548]	; (8001518 <main+0x348>)
 80012f2:	f006 fc1c 	bl	8007b2e <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 80012f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012fe:	4413      	add	r3, r2
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				token = strtok(cmdBuffer, " ");
 800130a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130e:	4991      	ldr	r1, [pc, #580]	; (8001554 <main+0x384>)
 8001310:	4618      	mov	r0, r3
 8001312:	f009 f94d 	bl	800a5b0 <strtok>
 8001316:	67f8      	str	r0, [r7, #124]	; 0x7c
				while(token!=NULL){
 8001318:	e00f      	b.n	800133a <main+0x16a>
					argv[argc++] = token;
 800131a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	3388      	adds	r3, #136	; 0x88
 8001328:	443b      	add	r3, r7
 800132a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800132c:	f843 2c84 	str.w	r2, [r3, #-132]
					token = strtok(NULL, " ");
 8001330:	4988      	ldr	r1, [pc, #544]	; (8001554 <main+0x384>)
 8001332:	2000      	movs	r0, #0
 8001334:	f009 f93c 	bl	800a5b0 <strtok>
 8001338:	67f8      	str	r0, [r7, #124]	; 0x7c
				while(token!=NULL){
 800133a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1ec      	bne.n	800131a <main+0x14a>
				}
				idx_cmd = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				newCmdReady = 1;
 8001346:	2301      	movs	r3, #1
 8001348:	67bb      	str	r3, [r7, #120]	; 0x78
				break;
 800134a:	e023      	b.n	8001394 <main+0x1c4>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 800134c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001350:	1e5a      	subs	r2, r3, #1
 8001352:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001356:	3388      	adds	r3, #136	; 0x88
 8001358:	443b      	add	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	f803 2c60 	strb.w	r2, [r3, #-96]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	2201      	movs	r2, #1
 8001366:	496a      	ldr	r1, [pc, #424]	; (8001510 <main+0x340>)
 8001368:	486b      	ldr	r0, [pc, #428]	; (8001518 <main+0x348>)
 800136a:	f006 fbe0 	bl	8007b2e <HAL_UART_Transmit>
				break;
 800136e:	e011      	b.n	8001394 <main+0x1c4>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800137a:	4a65      	ldr	r2, [pc, #404]	; (8001510 <main+0x340>)
 800137c:	7812      	ldrb	r2, [r2, #0]
 800137e:	3388      	adds	r3, #136	; 0x88
 8001380:	443b      	add	r3, r7
 8001382:	f803 2c60 	strb.w	r2, [r3, #-96]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	2201      	movs	r2, #1
 800138c:	4960      	ldr	r1, [pc, #384]	; (8001510 <main+0x340>)
 800138e:	4862      	ldr	r0, [pc, #392]	; (8001518 <main+0x348>)
 8001390:	f006 fbcd 	bl	8007b2e <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8001394:	4b6d      	ldr	r3, [pc, #436]	; (800154c <main+0x37c>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 800139a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 8160 	beq.w	8001662 <main+0x492>
			if(strcmp(argv[0],"set")==0){
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	496c      	ldr	r1, [pc, #432]	; (8001558 <main+0x388>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7fe ff3a 	bl	8000220 <strcmp>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d133      	bne.n	800141a <main+0x24a>
				if(strcmp(argv[1],"PA5")==0){
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	4969      	ldr	r1, [pc, #420]	; (800155c <main+0x38c>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7fe ff32 	bl	8000220 <strcmp>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d123      	bne.n	800140a <main+0x23a>
					HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f008 fba9 	bl	8009b1c <atoi>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	2120      	movs	r1, #32
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d6:	f003 fc4d 	bl	8004c74 <HAL_GPIO_WritePin>
					stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4618      	mov	r0, r3
 80013de:	f008 fb9d 	bl	8009b1c <atoi>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a5e      	ldr	r2, [pc, #376]	; (8001560 <main+0x390>)
 80013e6:	2140      	movs	r1, #64	; 0x40
 80013e8:	484a      	ldr	r0, [pc, #296]	; (8001514 <main+0x344>)
 80013ea:	f009 f8ad 	bl	800a548 <sniprintf>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b5c      	ldr	r3, [pc, #368]	; (8001564 <main+0x394>)
 80013f4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 80013f6:	4b5b      	ldr	r3, [pc, #364]	; (8001564 <main+0x394>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	4944      	ldr	r1, [pc, #272]	; (8001514 <main+0x344>)
 8001402:	4845      	ldr	r0, [pc, #276]	; (8001518 <main+0x348>)
 8001404:	f006 fb93 	bl	8007b2e <HAL_UART_Transmit>
 8001408:	e122      	b.n	8001650 <main+0x480>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	2214      	movs	r2, #20
 8001410:	4955      	ldr	r1, [pc, #340]	; (8001568 <main+0x398>)
 8001412:	4841      	ldr	r0, [pc, #260]	; (8001518 <main+0x348>)
 8001414:	f006 fb8b 	bl	8007b2e <HAL_UART_Transmit>
 8001418:	e11a      	b.n	8001650 <main+0x480>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4953      	ldr	r1, [pc, #332]	; (800156c <main+0x39c>)
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe fefe 	bl	8000220 <strcmp>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d107      	bne.n	800143a <main+0x26a>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	2214      	movs	r2, #20
 8001430:	494d      	ldr	r1, [pc, #308]	; (8001568 <main+0x398>)
 8001432:	4839      	ldr	r0, [pc, #228]	; (8001518 <main+0x348>)
 8001434:	f006 fb7b 	bl	8007b2e <HAL_UART_Transmit>
 8001438:	e10a      	b.n	8001650 <main+0x480>
			}

			else if (strcmp(argv[0],"help")==0){
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	494c      	ldr	r1, [pc, #304]	; (8001570 <main+0x3a0>)
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe feee 	bl	8000220 <strcmp>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d107      	bne.n	800145a <main+0x28a>
				HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	2237      	movs	r2, #55	; 0x37
 8001450:	4948      	ldr	r1, [pc, #288]	; (8001574 <main+0x3a4>)
 8001452:	4831      	ldr	r0, [pc, #196]	; (8001518 <main+0x348>)
 8001454:	f006 fb6b 	bl	8007b2e <HAL_UART_Transmit>
 8001458:	e0fa      	b.n	8001650 <main+0x480>

			}
			else if (strcmp(argv[0],"pinout")==0){
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4946      	ldr	r1, [pc, #280]	; (8001578 <main+0x3a8>)
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe fede 	bl	8000220 <strcmp>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d107      	bne.n	800147a <main+0x2aa>
				HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	2267      	movs	r2, #103	; 0x67
 8001470:	4942      	ldr	r1, [pc, #264]	; (800157c <main+0x3ac>)
 8001472:	4829      	ldr	r0, [pc, #164]	; (8001518 <main+0x348>)
 8001474:	f006 fb5b 	bl	8007b2e <HAL_UART_Transmit>
 8001478:	e0ea      	b.n	8001650 <main+0x480>
			}

			else if (strcmp(argv[0],"start")==0){
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4940      	ldr	r1, [pc, #256]	; (8001580 <main+0x3b0>)
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe fece 	bl	8000220 <strcmp>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d113      	bne.n	80014b2 <main+0x2e2>

				start_PWM();
 800148a:	f7ff fde3 	bl	8001054 <start_PWM>

				// on met le rapport cyclique à 50 à chaque lancement (le moteur ne tourne pas)
				TIM1->CCR1=2656;
 800148e:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <main+0x3b4>)
 8001490:	f44f 6226 	mov.w	r2, #2656	; 0xa60
 8001494:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2=2656;
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <main+0x3b4>)
 8001498:	f44f 6226 	mov.w	r2, #2656	; 0xa60
 800149c:	639a      	str	r2, [r3, #56]	; 0x38

				// Activation du GPIO pour l'allumage du hacheur (pin 33)
				// GPIOC Pin 0 à 1 pendant au moins 2micro s d'après la doc

				GPIO_ISO_RESET();
 800149e:	f7ff fe83 	bl	80011a8 <GPIO_ISO_RESET>

				HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	220b      	movs	r2, #11
 80014a8:	4937      	ldr	r1, [pc, #220]	; (8001588 <main+0x3b8>)
 80014aa:	481b      	ldr	r0, [pc, #108]	; (8001518 <main+0x348>)
 80014ac:	f006 fb3f 	bl	8007b2e <HAL_UART_Transmit>
 80014b0:	e0ce      	b.n	8001650 <main+0x480>
			}
			else if (strcmp(argv[0],"stop")==0){
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4935      	ldr	r1, [pc, #212]	; (800158c <main+0x3bc>)
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7fe feb2 	bl	8000220 <strcmp>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <main+0x306>

				// On stoppe les PWM
				stop_PWM();
 80014c2:	f7ff fddd 	bl	8001080 <stop_PWM>

				HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	220c      	movs	r2, #12
 80014cc:	4930      	ldr	r1, [pc, #192]	; (8001590 <main+0x3c0>)
 80014ce:	4812      	ldr	r0, [pc, #72]	; (8001518 <main+0x348>)
 80014d0:	f006 fb2d 	bl	8007b2e <HAL_UART_Transmit>
 80014d4:	e0bc      	b.n	8001650 <main+0x480>
			}

			else if(strcmp(argv[0],"alpha")==0){
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	492e      	ldr	r1, [pc, #184]	; (8001594 <main+0x3c4>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe fea0 	bl	8000220 <strcmp>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d108      	bne.n	80014f8 <main+0x328>
				alpha = atoi(argv[1]);
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f008 fb17 	bl	8009b1c <atoi>
 80014ee:	66f8      	str	r0, [r7, #108]	; 0x6c
				changement_alpha(alpha);
 80014f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80014f2:	f7ff fddb 	bl	80010ac <changement_alpha>
 80014f6:	e0ab      	b.n	8001650 <main+0x480>
			}
			else if(strcmp(argv[0],"ADC")==0){
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4927      	ldr	r1, [pc, #156]	; (8001598 <main+0x3c8>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe fe8f 	bl	8000220 <strcmp>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d178      	bne.n	80015fa <main+0x42a>

				for(int i=0;i<20;i++){
 8001508:	2300      	movs	r3, #0
 800150a:	673b      	str	r3, [r7, #112]	; 0x70
 800150c:	e051      	b.n	80015b2 <main+0x3e2>
 800150e:	bf00      	nop
 8001510:	200005dc 	.word	0x200005dc
 8001514:	200005e0 	.word	0x200005e0
 8001518:	20000548 	.word	0x20000548
 800151c:	20000018 	.word	0x20000018
 8001520:	20000000 	.word	0x20000000
 8001524:	2000034c 	.word	0x2000034c
 8001528:	0800cc50 	.word	0x0800cc50
 800152c:	20000624 	.word	0x20000624
 8001530:	0800cc78 	.word	0x0800cc78
 8001534:	20000464 	.word	0x20000464
 8001538:	0800cc9c 	.word	0x0800cc9c
 800153c:	200004fc 	.word	0x200004fc
 8001540:	0800ccc8 	.word	0x0800ccc8
 8001544:	200004b0 	.word	0x200004b0
 8001548:	0800ccf4 	.word	0x0800ccf4
 800154c:	200005d8 	.word	0x200005d8
 8001550:	20000080 	.word	0x20000080
 8001554:	0800cd20 	.word	0x0800cd20
 8001558:	0800cd24 	.word	0x0800cd24
 800155c:	0800cd28 	.word	0x0800cd28
 8001560:	0800cd2c 	.word	0x0800cd2c
 8001564:	20000620 	.word	0x20000620
 8001568:	20000084 	.word	0x20000084
 800156c:	0800cd48 	.word	0x0800cd48
 8001570:	0800cd4c 	.word	0x0800cd4c
 8001574:	20000098 	.word	0x20000098
 8001578:	0800cd54 	.word	0x0800cd54
 800157c:	200000d0 	.word	0x200000d0
 8001580:	0800cd5c 	.word	0x0800cd5c
 8001584:	40012c00 	.word	0x40012c00
 8001588:	20000138 	.word	0x20000138
 800158c:	0800cd64 	.word	0x0800cd64
 8001590:	20000144 	.word	0x20000144
 8001594:	0800cd6c 	.word	0x0800cd6c
 8001598:	0800cd74 	.word	0x0800cd74
					sortie_ADC_numerique = sortie_ADC_numerique + (int)(ADC_Buffer[i]);
 800159c:	4a33      	ldr	r2, [pc, #204]	; (800166c <main+0x49c>)
 800159e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015a4:	461a      	mov	r2, r3
 80015a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015a8:	4413      	add	r3, r2
 80015aa:	677b      	str	r3, [r7, #116]	; 0x74
				for(int i=0;i<20;i++){
 80015ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015ae:	3301      	adds	r3, #1
 80015b0:	673b      	str	r3, [r7, #112]	; 0x70
 80015b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015b4:	2b13      	cmp	r3, #19
 80015b6:	ddf1      	ble.n	800159c <main+0x3cc>
				}

				courant = conversion_ADC(sortie_ADC_numerique);
 80015b8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80015ba:	f7ff fd9d 	bl	80010f8 <conversion_ADC>
 80015be:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68

				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE,"Le courant dans la phase RED vaut : %.2f A \r\n", courant);
 80015c2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80015c4:	f7fe fff8 	bl	80005b8 <__aeabi_f2d>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	e9cd 2300 	strd	r2, r3, [sp]
 80015d0:	4a27      	ldr	r2, [pc, #156]	; (8001670 <main+0x4a0>)
 80015d2:	2140      	movs	r1, #64	; 0x40
 80015d4:	4827      	ldr	r0, [pc, #156]	; (8001674 <main+0x4a4>)
 80015d6:	f008 ffb7 	bl	800a548 <sniprintf>
 80015da:	4603      	mov	r3, r0
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b26      	ldr	r3, [pc, #152]	; (8001678 <main+0x4a8>)
 80015e0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 80015e2:	4b25      	ldr	r3, [pc, #148]	; (8001678 <main+0x4a8>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ec:	4921      	ldr	r1, [pc, #132]	; (8001674 <main+0x4a4>)
 80015ee:	4823      	ldr	r0, [pc, #140]	; (800167c <main+0x4ac>)
 80015f0:	f006 fa9d 	bl	8007b2e <HAL_UART_Transmit>

				sortie_ADC_numerique =0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	677b      	str	r3, [r7, #116]	; 0x74
 80015f8:	e02a      	b.n	8001650 <main+0x480>

			}
			else if(strcmp(argv[0],"vitesse")==0){
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4920      	ldr	r1, [pc, #128]	; (8001680 <main+0x4b0>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fe0e 	bl	8000220 <strcmp>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d11b      	bne.n	8001642 <main+0x472>

				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE,"La vitesse vaut : %.1f tr/min \r\n", vitesse[0]);
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <main+0x4b4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ffd2 	bl	80005b8 <__aeabi_f2d>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	e9cd 2300 	strd	r2, r3, [sp]
 800161c:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <main+0x4b8>)
 800161e:	2140      	movs	r1, #64	; 0x40
 8001620:	4814      	ldr	r0, [pc, #80]	; (8001674 <main+0x4a4>)
 8001622:	f008 ff91 	bl	800a548 <sniprintf>
 8001626:	4603      	mov	r3, r0
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <main+0x4a8>)
 800162c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <main+0x4a8>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b29a      	uxth	r2, r3
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	490e      	ldr	r1, [pc, #56]	; (8001674 <main+0x4a4>)
 800163a:	4810      	ldr	r0, [pc, #64]	; (800167c <main+0x4ac>)
 800163c:	f006 fa77 	bl	8007b2e <HAL_UART_Transmit>
 8001640:	e006      	b.n	8001650 <main+0x480>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	2214      	movs	r2, #20
 8001648:	4910      	ldr	r1, [pc, #64]	; (800168c <main+0x4bc>)
 800164a:	480c      	ldr	r0, [pc, #48]	; (800167c <main+0x4ac>)
 800164c:	f006 fa6f 	bl	8007b2e <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
 8001654:	2218      	movs	r2, #24
 8001656:	490e      	ldr	r1, [pc, #56]	; (8001690 <main+0x4c0>)
 8001658:	4808      	ldr	r0, [pc, #32]	; (800167c <main+0x4ac>)
 800165a:	f006 fa68 	bl	8007b2e <HAL_UART_Transmit>
			newCmdReady = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	67bb      	str	r3, [r7, #120]	; 0x78
		/*********************** END SHELL *****************************/


		/****************** BEGIN BLUE_BUTTON HACHEUR ******************/

		HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8001662:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001666:	f003 fb1d 	bl	8004ca4 <HAL_GPIO_EXTI_IRQHandler>
		if(uartRxReceived){
 800166a:	e632      	b.n	80012d2 <main+0x102>
 800166c:	20000624 	.word	0x20000624
 8001670:	0800cd78 	.word	0x0800cd78
 8001674:	200005e0 	.word	0x200005e0
 8001678:	20000620 	.word	0x20000620
 800167c:	20000548 	.word	0x20000548
 8001680:	0800cda8 	.word	0x0800cda8
 8001684:	20000348 	.word	0x20000348
 8001688:	0800cdb0 	.word	0x0800cdb0
 800168c:	20000084 	.word	0x20000084
 8001690:	20000000 	.word	0x20000000

08001694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b094      	sub	sp, #80	; 0x50
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	f107 0318 	add.w	r3, r7, #24
 800169e:	2238      	movs	r2, #56	; 0x38
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f008 fa68 	bl	8009b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f003 fb0c 	bl	8004cd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c6:	2340      	movs	r3, #64	; 0x40
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ca:	2302      	movs	r3, #2
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016ce:	2302      	movs	r3, #2
 80016d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80016d2:	2304      	movs	r3, #4
 80016d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016d6:	2355      	movs	r3, #85	; 0x55
 80016d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016da:	2302      	movs	r3, #2
 80016dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016de:	2302      	movs	r3, #2
 80016e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016e2:	2302      	movs	r3, #2
 80016e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e6:	f107 0318 	add.w	r3, r7, #24
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 fb96 	bl	8004e1c <HAL_RCC_OscConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016f6:	f000 fb4b 	bl	8001d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fa:	230f      	movs	r3, #15
 80016fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fe:	2303      	movs	r3, #3
 8001700:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2104      	movs	r1, #4
 8001712:	4618      	mov	r0, r3
 8001714:	f003 fe9a 	bl	800544c <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800171e:	f000 fb37 	bl	8001d90 <Error_Handler>
  }
}
 8001722:	bf00      	nop
 8001724:	3750      	adds	r7, #80	; 0x50
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	; 0x30
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2220      	movs	r2, #32
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f008 fa17 	bl	8009b78 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800174a:	4b33      	ldr	r3, [pc, #204]	; (8001818 <MX_ADC1_Init+0xec>)
 800174c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001750:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001752:	4b31      	ldr	r3, [pc, #196]	; (8001818 <MX_ADC1_Init+0xec>)
 8001754:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001758:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800175a:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <MX_ADC1_Init+0xec>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <MX_ADC1_Init+0xec>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001766:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <MX_ADC1_Init+0xec>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800176c:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <MX_ADC1_Init+0xec>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001772:	4b29      	ldr	r3, [pc, #164]	; (8001818 <MX_ADC1_Init+0xec>)
 8001774:	2204      	movs	r2, #4
 8001776:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <MX_ADC1_Init+0xec>)
 800177a:	2200      	movs	r2, #0
 800177c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800177e:	4b26      	ldr	r3, [pc, #152]	; (8001818 <MX_ADC1_Init+0xec>)
 8001780:	2200      	movs	r2, #0
 8001782:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <MX_ADC1_Init+0xec>)
 8001786:	2201      	movs	r2, #1
 8001788:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <MX_ADC1_Init+0xec>)
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <MX_ADC1_Init+0xec>)
 8001794:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001798:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <MX_ADC1_Init+0xec>)
 800179c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017a2:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <MX_ADC1_Init+0xec>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <MX_ADC1_Init+0xec>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <MX_ADC1_Init+0xec>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017b8:	4817      	ldr	r0, [pc, #92]	; (8001818 <MX_ADC1_Init+0xec>)
 80017ba:	f001 f977 	bl	8002aac <HAL_ADC_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80017c4:	f000 fae4 	bl	8001d90 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d0:	4619      	mov	r1, r3
 80017d2:	4811      	ldr	r0, [pc, #68]	; (8001818 <MX_ADC1_Init+0xec>)
 80017d4:	f002 fc16 	bl	8004004 <HAL_ADCEx_MultiModeConfigChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80017de:	f000 fad7 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_ADC1_Init+0xf0>)
 80017e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017e6:	2306      	movs	r3, #6
 80017e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017ee:	237f      	movs	r3, #127	; 0x7f
 80017f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017f2:	2304      	movs	r3, #4
 80017f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <MX_ADC1_Init+0xec>)
 8001800:	f001 fdd4 	bl	80033ac <HAL_ADC_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800180a:	f000 fac1 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	3730      	adds	r7, #48	; 0x30
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000034c 	.word	0x2000034c
 800181c:	04300002 	.word	0x04300002

08001820 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b098      	sub	sp, #96	; 0x60
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001826:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001832:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	615a      	str	r2, [r3, #20]
 8001844:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2234      	movs	r2, #52	; 0x34
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f008 f993 	bl	8009b78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001852:	4b41      	ldr	r3, [pc, #260]	; (8001958 <MX_TIM1_Init+0x138>)
 8001854:	4a41      	ldr	r2, [pc, #260]	; (800195c <MX_TIM1_Init+0x13c>)
 8001856:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001858:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <MX_TIM1_Init+0x138>)
 800185a:	2200      	movs	r2, #0
 800185c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800185e:	4b3e      	ldr	r3, [pc, #248]	; (8001958 <MX_TIM1_Init+0x138>)
 8001860:	2220      	movs	r2, #32
 8001862:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5311;
 8001864:	4b3c      	ldr	r3, [pc, #240]	; (8001958 <MX_TIM1_Init+0x138>)
 8001866:	f241 42bf 	movw	r2, #5311	; 0x14bf
 800186a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <MX_TIM1_Init+0x138>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001872:	4b39      	ldr	r3, [pc, #228]	; (8001958 <MX_TIM1_Init+0x138>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001878:	4b37      	ldr	r3, [pc, #220]	; (8001958 <MX_TIM1_Init+0x138>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800187e:	4836      	ldr	r0, [pc, #216]	; (8001958 <MX_TIM1_Init+0x138>)
 8001880:	f004 fb46 	bl	8005f10 <HAL_TIM_PWM_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800188a:	f000 fa81 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800189a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800189e:	4619      	mov	r1, r3
 80018a0:	482d      	ldr	r0, [pc, #180]	; (8001958 <MX_TIM1_Init+0x138>)
 80018a2:	f005 ff67 	bl	8007774 <HAL_TIMEx_MasterConfigSynchronization>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018ac:	f000 fa70 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b0:	2360      	movs	r3, #96	; 0x60
 80018b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 80018b4:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 80018b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ba:	2300      	movs	r3, #0
 80018bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018be:	2300      	movs	r3, #0
 80018c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018d2:	2200      	movs	r2, #0
 80018d4:	4619      	mov	r1, r3
 80018d6:	4820      	ldr	r0, [pc, #128]	; (8001958 <MX_TIM1_Init+0x138>)
 80018d8:	f004 ffbc 	bl	8006854 <HAL_TIM_PWM_ConfigChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80018e2:	f000 fa55 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018ea:	2204      	movs	r2, #4
 80018ec:	4619      	mov	r1, r3
 80018ee:	481a      	ldr	r0, [pc, #104]	; (8001958 <MX_TIM1_Init+0x138>)
 80018f0:	f004 ffb0 	bl	8006854 <HAL_TIM_PWM_ConfigChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80018fa:	f000 fa49 	bl	8001d90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 207;
 800190a:	23cf      	movs	r3, #207	; 0xcf
 800190c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001916:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800191c:	2300      	movs	r3, #0
 800191e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800192e:	2300      	movs	r3, #0
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	4619      	mov	r1, r3
 800193a:	4807      	ldr	r0, [pc, #28]	; (8001958 <MX_TIM1_Init+0x138>)
 800193c:	f005 ff9c 	bl	8007878 <HAL_TIMEx_ConfigBreakDeadTime>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001946:	f000 fa23 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800194a:	4803      	ldr	r0, [pc, #12]	; (8001958 <MX_TIM1_Init+0x138>)
 800194c:	f000 fb78 	bl	8002040 <HAL_TIM_MspPostInit>

}
 8001950:	bf00      	nop
 8001952:	3760      	adds	r7, #96	; 0x60
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000418 	.word	0x20000418
 800195c:	40012c00 	.word	0x40012c00

08001960 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0310 	add.w	r3, r7, #16
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800197e:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <MX_TIM2_Init+0x98>)
 8001980:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001984:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <MX_TIM2_Init+0x98>)
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198c:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <MX_TIM2_Init+0x98>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 531;
 8001992:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <MX_TIM2_Init+0x98>)
 8001994:	f240 2213 	movw	r2, #531	; 0x213
 8001998:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <MX_TIM2_Init+0x98>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <MX_TIM2_Init+0x98>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019a6:	4814      	ldr	r0, [pc, #80]	; (80019f8 <MX_TIM2_Init+0x98>)
 80019a8:	f004 f98e 	bl	8005cc8 <HAL_TIM_Base_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019b2:	f000 f9ed 	bl	8001d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	4619      	mov	r1, r3
 80019c2:	480d      	ldr	r0, [pc, #52]	; (80019f8 <MX_TIM2_Init+0x98>)
 80019c4:	f005 f85a 	bl	8006a7c <HAL_TIM_ConfigClockSource>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019ce:	f000 f9df 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019d2:	2320      	movs	r3, #32
 80019d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4806      	ldr	r0, [pc, #24]	; (80019f8 <MX_TIM2_Init+0x98>)
 80019e0:	f005 fec8 	bl	8007774 <HAL_TIMEx_MasterConfigSynchronization>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019ea:	f000 f9d1 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	3720      	adds	r7, #32
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000464 	.word	0x20000464

080019fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a02:	f107 0310 	add.w	r3, r7, #16
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <MX_TIM3_Init+0x98>)
 8001a1c:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <MX_TIM3_Init+0x9c>)
 8001a1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1699;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <MX_TIM3_Init+0x98>)
 8001a22:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001a26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a28:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <MX_TIM3_Init+0x98>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <MX_TIM3_Init+0x98>)
 8001a30:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <MX_TIM3_Init+0x98>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <MX_TIM3_Init+0x98>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a42:	4814      	ldr	r0, [pc, #80]	; (8001a94 <MX_TIM3_Init+0x98>)
 8001a44:	f004 f940 	bl	8005cc8 <HAL_TIM_Base_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001a4e:	f000 f99f 	bl	8001d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480d      	ldr	r0, [pc, #52]	; (8001a94 <MX_TIM3_Init+0x98>)
 8001a60:	f005 f80c 	bl	8006a7c <HAL_TIM_ConfigClockSource>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001a6a:	f000 f991 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4806      	ldr	r0, [pc, #24]	; (8001a94 <MX_TIM3_Init+0x98>)
 8001a7c:	f005 fe7a 	bl	8007774 <HAL_TIMEx_MasterConfigSynchronization>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001a86:	f000 f983 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	3720      	adds	r7, #32
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200004b0 	.word	0x200004b0
 8001a98:	40000400 	.word	0x40000400

08001a9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	2224      	movs	r2, #36	; 0x24
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f008 f864 	bl	8009b78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <MX_TIM4_Init+0xa4>)
 8001abc:	4a21      	ldr	r2, [pc, #132]	; (8001b44 <MX_TIM4_Init+0xa8>)
 8001abe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <MX_TIM4_Init+0xa4>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <MX_TIM4_Init+0xa4>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <MX_TIM4_Init+0xa4>)
 8001ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_TIM4_Init+0xa4>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <MX_TIM4_Init+0xa4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001af8:	2301      	movs	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480d      	ldr	r0, [pc, #52]	; (8001b40 <MX_TIM4_Init+0xa4>)
 8001b0c:	f004 fbee 	bl	80062ec <HAL_TIM_Encoder_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001b16:	f000 f93b 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001b1a:	2310      	movs	r3, #16
 8001b1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b22:	463b      	mov	r3, r7
 8001b24:	4619      	mov	r1, r3
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <MX_TIM4_Init+0xa4>)
 8001b28:	f005 fe24 	bl	8007774 <HAL_TIMEx_MasterConfigSynchronization>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001b32:	f000 f92d 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	3730      	adds	r7, #48	; 0x30
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200004fc 	.word	0x200004fc
 8001b44:	40000800 	.word	0x40000800

08001b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b4e:	4a23      	ldr	r2, [pc, #140]	; (8001bdc <MX_USART2_UART_Init+0x94>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b90:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b92:	f005 ff7c 	bl	8007a8e <HAL_UART_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b9c:	f000 f8f8 	bl	8001d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001ba4:	f007 feef 	bl	8009986 <HAL_UARTEx_SetTxFifoThreshold>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001bae:	f000 f8ef 	bl	8001d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4808      	ldr	r0, [pc, #32]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001bb6:	f007 ff24 	bl	8009a02 <HAL_UARTEx_SetRxFifoThreshold>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001bc0:	f000 f8e6 	bl	8001d90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bc4:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001bc6:	f007 fea5 	bl	8009914 <HAL_UARTEx_DisableFifoMode>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001bd0:	f000 f8de 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000548 	.word	0x20000548
 8001bdc:	40004400 	.word	0x40004400

08001be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <MX_DMA_Init+0x50>)
 8001be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bea:	4a11      	ldr	r2, [pc, #68]	; (8001c30 <MX_DMA_Init+0x50>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	6493      	str	r3, [r2, #72]	; 0x48
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <MX_DMA_Init+0x50>)
 8001bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_DMA_Init+0x50>)
 8001c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c02:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <MX_DMA_Init+0x50>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6493      	str	r3, [r2, #72]	; 0x48
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_DMA_Init+0x50>)
 8001c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	200b      	movs	r0, #11
 8001c1c:	f002 fb4e 	bl	80042bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c20:	200b      	movs	r0, #11
 8001c22:	f002 fb65 	bl	80042f0 <HAL_NVIC_EnableIRQ>

}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000

08001c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	4b35      	ldr	r3, [pc, #212]	; (8001d20 <MX_GPIO_Init+0xec>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	4a34      	ldr	r2, [pc, #208]	; (8001d20 <MX_GPIO_Init+0xec>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c56:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <MX_GPIO_Init+0xec>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c62:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <MX_GPIO_Init+0xec>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a2e      	ldr	r2, [pc, #184]	; (8001d20 <MX_GPIO_Init+0xec>)
 8001c68:	f043 0320 	orr.w	r3, r3, #32
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <MX_GPIO_Init+0xec>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <MX_GPIO_Init+0xec>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4a28      	ldr	r2, [pc, #160]	; (8001d20 <MX_GPIO_Init+0xec>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <MX_GPIO_Init+0xec>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <MX_GPIO_Init+0xec>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	4a22      	ldr	r2, [pc, #136]	; (8001d20 <MX_GPIO_Init+0xec>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <MX_GPIO_Init+0xec>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2101      	movs	r1, #1
 8001cae:	481d      	ldr	r0, [pc, #116]	; (8001d24 <MX_GPIO_Init+0xf0>)
 8001cb0:	f002 ffe0 	bl	8004c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbc:	f002 ffda 	bl	8004c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8001cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cc6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4813      	ldr	r0, [pc, #76]	; (8001d24 <MX_GPIO_Init+0xf0>)
 8001cd8:	f002 fe4a 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480c      	ldr	r0, [pc, #48]	; (8001d24 <MX_GPIO_Init+0xf0>)
 8001cf4:	f002 fe3c 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d12:	f002 fe2d 	bl	8004970 <HAL_GPIO_Init>

}
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	; 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	48000800 	.word	0x48000800

08001d28 <HAL_UART_RxCpltCallback>:
  * @brief fonction de gestion de la communication (uart) entre le programme et l'utilisateur.
  * @note   La fonction est appelee lorsque le programme detecte une entree de l'utilisateur sur le shell
  * @param  huart : UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_UART_RxCpltCallback+0x20>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001d36:	2201      	movs	r2, #1
 8001d38:	4904      	ldr	r1, [pc, #16]	; (8001d4c <HAL_UART_RxCpltCallback+0x24>)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <HAL_UART_RxCpltCallback+0x28>)
 8001d3c:	f005 ff8e 	bl	8007c5c <HAL_UART_Receive_IT>
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200005d8 	.word	0x200005d8
 8001d4c:	200005dc 	.word	0x200005dc
 8001d50:	20000548 	.word	0x20000548

08001d54 <HAL_GPIO_EXTI_Callback>:
		   GPIOC Pin 0 à 1 pendant au moins 2micro s d'après la doc
  * @param  GPIO_Pin : Pin handler
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	80fb      	strh	r3, [r7, #6]
	GPIO_ISO_RESET();
 8001d5e:	f7ff fa23 	bl	80011a8 <GPIO_ISO_RESET>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d7e:	f000 fbeb 	bl	8002558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40001000 	.word	0x40001000

08001d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
}
 8001d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d98:	e7fe      	b.n	8001d98 <Error_Handler+0x8>
	...

08001d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_MspInit+0x44>)
 8001da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da6:	4a0e      	ldr	r2, [pc, #56]	; (8001de0 <HAL_MspInit+0x44>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6613      	str	r3, [r2, #96]	; 0x60
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_MspInit+0x44>)
 8001db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_MspInit+0x44>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	4a08      	ldr	r2, [pc, #32]	; (8001de0 <HAL_MspInit+0x44>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_MspInit+0x44>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b09a      	sub	sp, #104	; 0x68
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	2244      	movs	r2, #68	; 0x44
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f007 feb7 	bl	8009b78 <memset>
  if(hadc->Instance==ADC1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e12:	d167      	bne.n	8001ee4 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001e1a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 fd5f 	bl	80058e8 <HAL_RCCEx_PeriphCLKConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e30:	f7ff ffae 	bl	8001d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e34:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_ADC_MspInit+0x108>)
 8001e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e38:	4a2c      	ldr	r2, [pc, #176]	; (8001eec <HAL_ADC_MspInit+0x108>)
 8001e3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_ADC_MspInit+0x108>)
 8001e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	4b27      	ldr	r3, [pc, #156]	; (8001eec <HAL_ADC_MspInit+0x108>)
 8001e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e50:	4a26      	ldr	r2, [pc, #152]	; (8001eec <HAL_ADC_MspInit+0x108>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e58:	4b24      	ldr	r3, [pc, #144]	; (8001eec <HAL_ADC_MspInit+0x108>)
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e64:	2301      	movs	r3, #1
 8001e66:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e74:	4619      	mov	r1, r3
 8001e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7a:	f002 fd79 	bl	8004970 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <HAL_ADC_MspInit+0x10c>)
 8001e80:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <HAL_ADC_MspInit+0x110>)
 8001e82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_ADC_MspInit+0x10c>)
 8001e86:	2205      	movs	r2, #5
 8001e88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_ADC_MspInit+0x10c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_ADC_MspInit+0x10c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <HAL_ADC_MspInit+0x10c>)
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_ADC_MspInit+0x10c>)
 8001e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ea2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_ADC_MspInit+0x10c>)
 8001ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eaa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eac:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_ADC_MspInit+0x10c>)
 8001eae:	2220      	movs	r2, #32
 8001eb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <HAL_ADC_MspInit+0x10c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001eb8:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <HAL_ADC_MspInit+0x10c>)
 8001eba:	f002 fa27 	bl	800430c <HAL_DMA_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001ec4:	f7ff ff64 	bl	8001d90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <HAL_ADC_MspInit+0x10c>)
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_ADC_MspInit+0x10c>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	2012      	movs	r0, #18
 8001eda:	f002 f9ef 	bl	80042bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001ede:	2012      	movs	r0, #18
 8001ee0:	f002 fa06 	bl	80042f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ee4:	bf00      	nop
 8001ee6:	3768      	adds	r7, #104	; 0x68
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	200003b8 	.word	0x200003b8
 8001ef4:	40020008 	.word	0x40020008

08001ef8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <HAL_TIM_PWM_MspInit+0x38>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10b      	bne.n	8001f22 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f14:	6613      	str	r3, [r2, #96]	; 0x60
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40012c00 	.word	0x40012c00
 8001f34:	40021000 	.word	0x40021000

08001f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f48:	d10c      	bne.n	8001f64 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_TIM_Base_MspInit+0x68>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <HAL_TIM_Base_MspInit+0x68>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6593      	str	r3, [r2, #88]	; 0x58
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_TIM_Base_MspInit+0x68>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f62:	e018      	b.n	8001f96 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_TIM_Base_MspInit+0x6c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d113      	bne.n	8001f96 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_TIM_Base_MspInit+0x68>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <HAL_TIM_Base_MspInit+0x68>)
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_TIM_Base_MspInit+0x68>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	201d      	movs	r0, #29
 8001f8c:	f002 f996 	bl	80042bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f90:	201d      	movs	r0, #29
 8001f92:	f002 f9ad 	bl	80042f0 <HAL_NVIC_EnableIRQ>
}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40000400 	.word	0x40000400

08001fa8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d12f      	bne.n	800202a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_TIM_Encoder_MspInit+0x90>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	4a1a      	ldr	r2, [pc, #104]	; (8002038 <HAL_TIM_Encoder_MspInit+0x90>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <HAL_TIM_Encoder_MspInit+0x90>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_TIM_Encoder_MspInit+0x90>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4a14      	ldr	r2, [pc, #80]	; (8002038 <HAL_TIM_Encoder_MspInit+0x90>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ffa:	23c0      	movs	r3, #192	; 0xc0
 8001ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800200a:	2302      	movs	r3, #2
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	4809      	ldr	r0, [pc, #36]	; (800203c <HAL_TIM_Encoder_MspInit+0x94>)
 8002016:	f002 fcab 	bl	8004970 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	201e      	movs	r0, #30
 8002020:	f002 f94c 	bl	80042bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002024:	201e      	movs	r0, #30
 8002026:	f002 f963 	bl	80042f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800202a:	bf00      	nop
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40000800 	.word	0x40000800
 8002038:	40021000 	.word	0x40021000
 800203c:	48000400 	.word	0x48000400

08002040 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <HAL_TIM_MspPostInit+0x68>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d11d      	bne.n	800209e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_TIM_MspPostInit+0x6c>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	4a11      	ldr	r2, [pc, #68]	; (80020ac <HAL_TIM_MspPostInit+0x6c>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_TIM_MspPostInit+0x6c>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 800207a:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800207e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800208c:	2306      	movs	r3, #6
 800208e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	4619      	mov	r1, r3
 8002096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209a:	f002 fc69 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800209e:	bf00      	nop
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40012c00 	.word	0x40012c00
 80020ac:	40021000 	.word	0x40021000

080020b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b09a      	sub	sp, #104	; 0x68
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	2244      	movs	r2, #68	; 0x44
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f007 fd51 	bl	8009b78 <memset>
  if(huart->Instance==USART2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a23      	ldr	r2, [pc, #140]	; (8002168 <HAL_UART_MspInit+0xb8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d13e      	bne.n	800215e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020e0:	2302      	movs	r3, #2
 80020e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e8:	f107 0310 	add.w	r3, r7, #16
 80020ec:	4618      	mov	r0, r3
 80020ee:	f003 fbfb 	bl	80058e8 <HAL_RCCEx_PeriphCLKConfig>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020f8:	f7ff fe4a 	bl	8001d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_UART_MspInit+0xbc>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	4a1a      	ldr	r2, [pc, #104]	; (800216c <HAL_UART_MspInit+0xbc>)
 8002102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002106:	6593      	str	r3, [r2, #88]	; 0x58
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <HAL_UART_MspInit+0xbc>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_UART_MspInit+0xbc>)
 8002116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002118:	4a14      	ldr	r2, [pc, #80]	; (800216c <HAL_UART_MspInit+0xbc>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_UART_MspInit+0xbc>)
 8002122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800212c:	230c      	movs	r3, #12
 800212e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800213c:	2307      	movs	r3, #7
 800213e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002144:	4619      	mov	r1, r3
 8002146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214a:	f002 fc11 	bl	8004970 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	2026      	movs	r0, #38	; 0x26
 8002154:	f002 f8b2 	bl	80042bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002158:	2026      	movs	r0, #38	; 0x26
 800215a:	f002 f8c9 	bl	80042f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800215e:	bf00      	nop
 8002160:	3768      	adds	r7, #104	; 0x68
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40004400 	.word	0x40004400
 800216c:	40021000 	.word	0x40021000

08002170 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	; 0x30
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002186:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_InitTick+0xcc>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	4a2c      	ldr	r2, [pc, #176]	; (800223c <HAL_InitTick+0xcc>)
 800218c:	f043 0310 	orr.w	r3, r3, #16
 8002190:	6593      	str	r3, [r2, #88]	; 0x58
 8002192:	4b2a      	ldr	r3, [pc, #168]	; (800223c <HAL_InitTick+0xcc>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800219e:	f107 020c 	add.w	r2, r7, #12
 80021a2:	f107 0310 	add.w	r3, r7, #16
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f003 fb25 	bl	80057f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021ae:	f003 faf7 	bl	80057a0 <HAL_RCC_GetPCLK1Freq>
 80021b2:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	4a22      	ldr	r2, [pc, #136]	; (8002240 <HAL_InitTick+0xd0>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	0c9b      	lsrs	r3, r3, #18
 80021be:	3b01      	subs	r3, #1
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_InitTick+0xd4>)
 80021c4:	4a20      	ldr	r2, [pc, #128]	; (8002248 <HAL_InitTick+0xd8>)
 80021c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021c8:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_InitTick+0xd4>)
 80021ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021ce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021d0:	4a1c      	ldr	r2, [pc, #112]	; (8002244 <HAL_InitTick+0xd4>)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_InitTick+0xd4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_InitTick+0xd4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80021e2:	4818      	ldr	r0, [pc, #96]	; (8002244 <HAL_InitTick+0xd4>)
 80021e4:	f003 fd70 	bl	8005cc8 <HAL_TIM_Base_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80021ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d11b      	bne.n	800222e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80021f6:	4813      	ldr	r0, [pc, #76]	; (8002244 <HAL_InitTick+0xd4>)
 80021f8:	f003 fe20 	bl	8005e3c <HAL_TIM_Base_Start_IT>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002206:	2b00      	cmp	r3, #0
 8002208:	d111      	bne.n	800222e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800220a:	2036      	movs	r0, #54	; 0x36
 800220c:	f002 f870 	bl	80042f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b0f      	cmp	r3, #15
 8002214:	d808      	bhi.n	8002228 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002216:	2200      	movs	r2, #0
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	2036      	movs	r0, #54	; 0x36
 800221c:	f002 f84e 	bl	80042bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002220:	4a0a      	ldr	r2, [pc, #40]	; (800224c <HAL_InitTick+0xdc>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e002      	b.n	800222e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800222e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002232:	4618      	mov	r0, r3
 8002234:	3730      	adds	r7, #48	; 0x30
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	431bde83 	.word	0x431bde83
 8002244:	2000064c 	.word	0x2000064c
 8002248:	40001000 	.word	0x40001000
 800224c:	20000154 	.word	0x20000154

08002250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <NMI_Handler+0x4>

08002256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225a:	e7fe      	b.n	800225a <HardFault_Handler+0x4>

0800225c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002260:	e7fe      	b.n	8002260 <MemManage_Handler+0x4>

08002262 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002266:	e7fe      	b.n	8002266 <BusFault_Handler+0x4>

08002268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800226c:	e7fe      	b.n	800226c <UsageFault_Handler+0x4>

0800226e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <DMA1_Channel1_IRQHandler+0x10>)
 80022ae:	f002 fa10 	bl	80046d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200003b8 	.word	0x200003b8

080022bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <ADC1_2_IRQHandler+0x10>)
 80022c2:	f000 fe31 	bl	8002f28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000034c 	.word	0x2000034c

080022d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022d4:	4803      	ldr	r0, [pc, #12]	; (80022e4 <TIM3_IRQHandler+0x14>)
 80022d6:	f004 f93d 	bl	8006554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  	 vitesse_de_rotation();
 80022da:	f7fe fe71 	bl	8000fc0 <vitesse_de_rotation>

  /* USER CODE END TIM3_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200004b0 	.word	0x200004b0

080022e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <TIM4_IRQHandler+0x10>)
 80022ee:	f004 f931 	bl	8006554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200004fc 	.word	0x200004fc

080022fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <USART2_IRQHandler+0x10>)
 8002302:	f005 fd01 	bl	8007d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000548 	.word	0x20000548

08002310 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <TIM6_DAC_IRQHandler+0x10>)
 8002316:	f004 f91d 	bl	8006554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	2000064c 	.word	0x2000064c

08002324 <_getpid>:
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
 8002328:	2301      	movs	r3, #1
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_kill>:
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	f007 fbf1 	bl	8009b24 <__errno>
 8002342:	4603      	mov	r3, r0
 8002344:	2216      	movs	r2, #22
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f04f 33ff 	mov.w	r3, #4294967295
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <_exit>:
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	f04f 31ff 	mov.w	r1, #4294967295
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ffe7 	bl	8002334 <_kill>
 8002366:	e7fe      	b.n	8002366 <_exit+0x12>

08002368 <_read>:
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	e00a      	b.n	8002390 <_read+0x28>
 800237a:	f3af 8000 	nop.w
 800237e:	4601      	mov	r1, r0
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	60ba      	str	r2, [r7, #8]
 8002386:	b2ca      	uxtb	r2, r1
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	dbf0      	blt.n	800237a <_read+0x12>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_write>:
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e009      	b.n	80023c8 <_write+0x26>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	60ba      	str	r2, [r7, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f3af 8000 	nop.w
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	3301      	adds	r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	dbf1      	blt.n	80023b4 <_write+0x12>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <_close>:
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <_fstat>:
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6039      	str	r1, [r7, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	2300      	movs	r3, #0
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <_isatty>:
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	2301      	movs	r3, #1
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <_lseek>:
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	2300      	movs	r3, #0
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <_sbrk>:
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <_sbrk+0x5c>)
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <_sbrk+0x60>)
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <_sbrk+0x22>
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <_sbrk+0x64>)
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <_sbrk+0x68>)
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <_sbrk+0x64>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	429a      	cmp	r2, r3
 8002472:	d207      	bcs.n	8002484 <_sbrk+0x40>
 8002474:	f007 fb56 	bl	8009b24 <__errno>
 8002478:	4603      	mov	r3, r0
 800247a:	220c      	movs	r2, #12
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
 8002482:	e009      	b.n	8002498 <_sbrk+0x54>
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <_sbrk+0x64>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <_sbrk+0x64>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <_sbrk+0x64>)
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20008000 	.word	0x20008000
 80024a4:	00000400 	.word	0x00000400
 80024a8:	20000698 	.word	0x20000698
 80024ac:	200006b0 	.word	0x200006b0

080024b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <SystemInit+0x20>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <SystemInit+0x20>)
 80024bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024d4:	480d      	ldr	r0, [pc, #52]	; (800250c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d8:	480d      	ldr	r0, [pc, #52]	; (8002510 <LoopForever+0x6>)
  ldr r1, =_edata
 80024da:	490e      	ldr	r1, [pc, #56]	; (8002514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024dc:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <LoopForever+0xe>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024e0:	e002      	b.n	80024e8 <LoopCopyDataInit>

080024e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e6:	3304      	adds	r3, #4

080024e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ec:	d3f9      	bcc.n	80024e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ee:	4a0b      	ldr	r2, [pc, #44]	; (800251c <LoopForever+0x12>)
  ldr r4, =_ebss
 80024f0:	4c0b      	ldr	r4, [pc, #44]	; (8002520 <LoopForever+0x16>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f4:	e001      	b.n	80024fa <LoopFillZerobss>

080024f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f8:	3204      	adds	r2, #4

080024fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024fc:	d3fb      	bcc.n	80024f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024fe:	f7ff ffd7 	bl	80024b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002502:	f007 fb15 	bl	8009b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002506:	f7fe fe63 	bl	80011d0 <main>

0800250a <LoopForever>:

LoopForever:
    b LoopForever
 800250a:	e7fe      	b.n	800250a <LoopForever>
  ldr   r0, =_estack
 800250c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002514:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 8002518:	0800d260 	.word	0x0800d260
  ldr r2, =_sbss
 800251c:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 8002520:	200006b0 	.word	0x200006b0

08002524 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002524:	e7fe      	b.n	8002524 <COMP1_2_3_IRQHandler>

08002526 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002530:	2003      	movs	r0, #3
 8002532:	f001 feb8 	bl	80042a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002536:	200f      	movs	r0, #15
 8002538:	f7ff fe1a 	bl	8002170 <HAL_InitTick>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	71fb      	strb	r3, [r7, #7]
 8002546:	e001      	b.n	800254c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002548:	f7ff fc28 	bl	8001d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800254c:	79fb      	ldrb	r3, [r7, #7]

}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_IncTick+0x1c>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_IncTick+0x20>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4413      	add	r3, r2
 8002566:	4a03      	ldr	r2, [pc, #12]	; (8002574 <HAL_IncTick+0x1c>)
 8002568:	6013      	str	r3, [r2, #0]
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	2000069c 	.word	0x2000069c
 8002578:	20000158 	.word	0x20000158

0800257c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return uwTick;
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <HAL_GetTick+0x14>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	2000069c 	.word	0x2000069c

08002594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800259c:	f7ff ffee 	bl	800257c <HAL_GetTick>
 80025a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ac:	d004      	beq.n	80025b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_Delay+0x40>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4413      	add	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025b8:	bf00      	nop
 80025ba:	f7ff ffdf 	bl	800257c <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d8f7      	bhi.n	80025ba <HAL_Delay+0x26>
  {
  }
}
 80025ca:	bf00      	nop
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000158 	.word	0x20000158

080025d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	609a      	str	r2, [r3, #8]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	609a      	str	r2, [r3, #8]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3360      	adds	r3, #96	; 0x60
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <LL_ADC_SetOffset+0x44>)
 8002662:	4013      	ands	r3, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	4313      	orrs	r3, r2
 8002670:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002678:	bf00      	nop
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	03fff000 	.word	0x03fff000

08002688 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3360      	adds	r3, #96	; 0x60
 8002696:	461a      	mov	r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3360      	adds	r3, #96	; 0x60
 80026c4:	461a      	mov	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	431a      	orrs	r2, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026de:	bf00      	nop
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b087      	sub	sp, #28
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3360      	adds	r3, #96	; 0x60
 80026fa:	461a      	mov	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	431a      	orrs	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002714:	bf00      	nop
 8002716:	371c      	adds	r7, #28
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3360      	adds	r3, #96	; 0x60
 8002730:	461a      	mov	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	431a      	orrs	r2, r3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800274a:	bf00      	nop
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	615a      	str	r2, [r3, #20]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b087      	sub	sp, #28
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3330      	adds	r3, #48	; 0x30
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	4413      	add	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	211f      	movs	r1, #31
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	401a      	ands	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	0e9b      	lsrs	r3, r3, #26
 80027da:	f003 011f 	and.w	r1, r3, #31
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	431a      	orrs	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	3314      	adds	r3, #20
 8002830:	461a      	mov	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	0e5b      	lsrs	r3, r3, #25
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	4413      	add	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	0d1b      	lsrs	r3, r3, #20
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	2107      	movs	r1, #7
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	401a      	ands	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	0d1b      	lsrs	r3, r3, #20
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	431a      	orrs	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d10a      	bne.n	80028a2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002898:	431a      	orrs	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80028a0:	e00a      	b.n	80028b8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ae:	43db      	mvns	r3, r3
 80028b0:	401a      	ands	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	407f0000 	.word	0x407f0000

080028c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 031f 	and.w	r3, r3, #31
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002910:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6093      	str	r3, [r2, #8]
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002938:	d101      	bne.n	800293e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800295c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002960:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002988:	d101      	bne.n	800298e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029d8:	f043 0202 	orr.w	r2, r3, #2
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <LL_ADC_IsEnabled+0x18>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <LL_ADC_IsEnabled+0x1a>
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d101      	bne.n	8002a2a <LL_ADC_IsDisableOngoing+0x18>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <LL_ADC_IsDisableOngoing+0x1a>
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a4c:	f043 0204 	orr.w	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d101      	bne.n	8002a78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d101      	bne.n	8002a9e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b089      	sub	sp, #36	; 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e177      	b.n	8002db6 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d109      	bne.n	8002ae8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff f985 	bl	8001de4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff19 	bl	8002924 <LL_ADC_IsDeepPowerDownEnabled>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d004      	beq.n	8002b02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff feff 	bl	8002900 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff ff34 	bl	8002974 <LL_ADC_IsInternalRegulatorEnabled>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d115      	bne.n	8002b3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff ff18 	bl	800294c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b1c:	4b9c      	ldr	r3, [pc, #624]	; (8002d90 <HAL_ADC_Init+0x2e4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	4a9c      	ldr	r2, [pc, #624]	; (8002d94 <HAL_ADC_Init+0x2e8>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	099b      	lsrs	r3, r3, #6
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b30:	e002      	b.n	8002b38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f9      	bne.n	8002b32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff16 	bl	8002974 <LL_ADC_IsInternalRegulatorEnabled>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10d      	bne.n	8002b6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	f043 0210 	orr.w	r2, r3, #16
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ff76 	bl	8002a60 <LL_ADC_REG_IsConversionOngoing>
 8002b74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 8110 	bne.w	8002da4 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 810c 	bne.w	8002da4 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b94:	f043 0202 	orr.w	r2, r3, #2
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff23 	bl	80029ec <LL_ADC_IsEnabled>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d111      	bne.n	8002bd0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bb0:	f7ff ff1c 	bl	80029ec <LL_ADC_IsEnabled>
 8002bb4:	4604      	mov	r4, r0
 8002bb6:	4878      	ldr	r0, [pc, #480]	; (8002d98 <HAL_ADC_Init+0x2ec>)
 8002bb8:	f7ff ff18 	bl	80029ec <LL_ADC_IsEnabled>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	4323      	orrs	r3, r4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4874      	ldr	r0, [pc, #464]	; (8002d9c <HAL_ADC_Init+0x2f0>)
 8002bcc:	f7ff fd04 	bl	80025d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7f5b      	ldrb	r3, [r3, #29]
 8002bd4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bda:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002be0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002be6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d106      	bne.n	8002c0c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	3b01      	subs	r3, #1
 8002c04:	045b      	lsls	r3, r3, #17
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d009      	beq.n	8002c28 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	4b5c      	ldr	r3, [pc, #368]	; (8002da0 <HAL_ADC_Init+0x2f4>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	69b9      	ldr	r1, [r7, #24]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff ff02 	bl	8002a60 <LL_ADC_REG_IsConversionOngoing>
 8002c5c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff ff0f 	bl	8002a86 <LL_ADC_INJ_IsConversionOngoing>
 8002c68:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d16d      	bne.n	8002d4c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d16a      	bne.n	8002d4c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c7a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c82:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c92:	f023 0302 	bic.w	r3, r3, #2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	69b9      	ldr	r1, [r7, #24]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d017      	beq.n	8002cd8 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002cb6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cc0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6911      	ldr	r1, [r2, #16]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002cd6:	e013      	b.n	8002d00 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ce6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cfc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d118      	bne.n	8002d3c <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d14:	f023 0304 	bic.w	r3, r3, #4
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d20:	4311      	orrs	r1, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d26:	4311      	orrs	r1, r2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	611a      	str	r2, [r3, #16]
 8002d3a:	e007      	b.n	8002d4c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d10c      	bne.n	8002d6e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f023 010f 	bic.w	r1, r3, #15
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	1e5a      	subs	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d6c:	e007      	b.n	8002d7e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 020f 	bic.w	r2, r2, #15
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d82:	f023 0303 	bic.w	r3, r3, #3
 8002d86:	f043 0201 	orr.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d8e:	e011      	b.n	8002db4 <HAL_ADC_Init+0x308>
 8002d90:	20000150 	.word	0x20000150
 8002d94:	053e2d63 	.word	0x053e2d63
 8002d98:	50000100 	.word	0x50000100
 8002d9c:	50000300 	.word	0x50000300
 8002da0:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	f043 0210 	orr.w	r2, r3, #16
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002db4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3724      	adds	r7, #36	; 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd90      	pop	{r4, r7, pc}
 8002dbe:	bf00      	nop

08002dc0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dcc:	4851      	ldr	r0, [pc, #324]	; (8002f14 <HAL_ADC_Start_DMA+0x154>)
 8002dce:	f7ff fd7b 	bl	80028c8 <LL_ADC_GetMultimode>
 8002dd2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fe41 	bl	8002a60 <LL_ADC_REG_IsConversionOngoing>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f040 808f 	bne.w	8002f04 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_Start_DMA+0x34>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e08a      	b.n	8002f0a <HAL_ADC_Start_DMA+0x14a>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d002      	beq.n	8002e0e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b09      	cmp	r3, #9
 8002e0c:	d173      	bne.n	8002ef6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 febc 	bl	8003b8c <ADC_Enable>
 8002e14:	4603      	mov	r3, r0
 8002e16:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d166      	bne.n	8002eec <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a38      	ldr	r2, [pc, #224]	; (8002f18 <HAL_ADC_Start_DMA+0x158>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d002      	beq.n	8002e42 <HAL_ADC_Start_DMA+0x82>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	e001      	b.n	8002e46 <HAL_ADC_Start_DMA+0x86>
 8002e42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d002      	beq.n	8002e54 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d105      	bne.n	8002e60 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e58:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d006      	beq.n	8002e7a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e70:	f023 0206 	bic.w	r2, r3, #6
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	661a      	str	r2, [r3, #96]	; 0x60
 8002e78:	e002      	b.n	8002e80 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e84:	4a25      	ldr	r2, [pc, #148]	; (8002f1c <HAL_ADC_Start_DMA+0x15c>)
 8002e86:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8c:	4a24      	ldr	r2, [pc, #144]	; (8002f20 <HAL_ADC_Start_DMA+0x160>)
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e94:	4a23      	ldr	r2, [pc, #140]	; (8002f24 <HAL_ADC_Start_DMA+0x164>)
 8002e96:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	221c      	movs	r2, #28
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0210 	orr.w	r2, r2, #16
 8002eb6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3340      	adds	r3, #64	; 0x40
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f001 fac0 	bl	800445c <HAL_DMA_Start_IT>
 8002edc:	4603      	mov	r3, r0
 8002ede:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fda7 	bl	8002a38 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002eea:	e00d      	b.n	8002f08 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002ef4:	e008      	b.n	8002f08 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002f02:	e001      	b.n	8002f08 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
 8002f06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	50000300 	.word	0x50000300
 8002f18:	50000100 	.word	0x50000100
 8002f1c:	08003d0f 	.word	0x08003d0f
 8002f20:	08003de7 	.word	0x08003de7
 8002f24:	08003e03 	.word	0x08003e03

08002f28 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f44:	4883      	ldr	r0, [pc, #524]	; (8003154 <HAL_ADC_IRQHandler+0x22c>)
 8002f46:	f7ff fcbf 	bl	80028c8 <LL_ADC_GetMultimode>
 8002f4a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d017      	beq.n	8002f86 <HAL_ADC_IRQHandler+0x5e>
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d012      	beq.n	8002f86 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f70:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f001 f839 	bl	8003ff0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2202      	movs	r2, #2
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d004      	beq.n	8002f9a <HAL_ADC_IRQHandler+0x72>
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8085 	beq.w	80030b0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d07f      	beq.n	80030b0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d105      	bne.n	8002fc8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff fbd5 	bl	800277c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d064      	beq.n	80030a2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a5e      	ldr	r2, [pc, #376]	; (8003158 <HAL_ADC_IRQHandler+0x230>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d002      	beq.n	8002fe8 <HAL_ADC_IRQHandler+0xc0>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	e001      	b.n	8002fec <HAL_ADC_IRQHandler+0xc4>
 8002fe8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d008      	beq.n	8003006 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2b05      	cmp	r3, #5
 8002ffe:	d002      	beq.n	8003006 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b09      	cmp	r3, #9
 8003004:	d104      	bne.n	8003010 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	623b      	str	r3, [r7, #32]
 800300e:	e00d      	b.n	800302c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a50      	ldr	r2, [pc, #320]	; (8003158 <HAL_ADC_IRQHandler+0x230>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d002      	beq.n	8003020 <HAL_ADC_IRQHandler+0xf8>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	e001      	b.n	8003024 <HAL_ADC_IRQHandler+0xfc>
 8003020:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003024:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d135      	bne.n	80030a2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b08      	cmp	r3, #8
 8003042:	d12e      	bne.n	80030a2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fd09 	bl	8002a60 <LL_ADC_REG_IsConversionOngoing>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d11a      	bne.n	800308a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 020c 	bic.w	r2, r2, #12
 8003062:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d112      	bne.n	80030a2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	f043 0201 	orr.w	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	65da      	str	r2, [r3, #92]	; 0x5c
 8003088:	e00b      	b.n	80030a2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308e:	f043 0210 	orr.w	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f95a 	bl	800335c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	220c      	movs	r2, #12
 80030ae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <HAL_ADC_IRQHandler+0x19c>
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10b      	bne.n	80030dc <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 809e 	beq.w	800320c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8098 	beq.w	800320c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fb7e 	bl	80027fa <LL_ADC_INJ_IsTriggerSourceSWStart>
 80030fe:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fb39 	bl	800277c <LL_ADC_REG_IsTriggerSourceSWStart>
 800310a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a11      	ldr	r2, [pc, #68]	; (8003158 <HAL_ADC_IRQHandler+0x230>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d002      	beq.n	800311c <HAL_ADC_IRQHandler+0x1f4>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	e001      	b.n	8003120 <HAL_ADC_IRQHandler+0x1f8>
 800311c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	4293      	cmp	r3, r2
 8003126:	d008      	beq.n	800313a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b06      	cmp	r3, #6
 8003132:	d002      	beq.n	800313a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2b07      	cmp	r3, #7
 8003138:	d104      	bne.n	8003144 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	623b      	str	r3, [r7, #32]
 8003142:	e011      	b.n	8003168 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a03      	ldr	r2, [pc, #12]	; (8003158 <HAL_ADC_IRQHandler+0x230>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d006      	beq.n	800315c <HAL_ADC_IRQHandler+0x234>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	e005      	b.n	8003160 <HAL_ADC_IRQHandler+0x238>
 8003154:	50000300 	.word	0x50000300
 8003158:	50000100 	.word	0x50000100
 800315c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003160:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d047      	beq.n	80031fe <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d007      	beq.n	8003188 <HAL_ADC_IRQHandler+0x260>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d03f      	beq.n	80031fe <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003184:	2b00      	cmp	r3, #0
 8003186:	d13a      	bne.n	80031fe <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003192:	2b40      	cmp	r3, #64	; 0x40
 8003194:	d133      	bne.n	80031fe <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d12e      	bne.n	80031fe <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fc6e 	bl	8002a86 <LL_ADC_INJ_IsConversionOngoing>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11a      	bne.n	80031e6 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031be:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d112      	bne.n	80031fe <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	f043 0201 	orr.w	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80031e4:	e00b      	b.n	80031fe <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	f043 0210 	orr.w	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f6:	f043 0201 	orr.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fece 	bl	8003fa0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2260      	movs	r2, #96	; 0x60
 800320a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003212:	2b00      	cmp	r3, #0
 8003214:	d011      	beq.n	800323a <HAL_ADC_IRQHandler+0x312>
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00c      	beq.n	800323a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003224:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f8a9 	bl	8003384 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d012      	beq.n	800326a <HAL_ADC_IRQHandler+0x342>
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 feb4 	bl	8003fc8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003268:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003270:	2b00      	cmp	r3, #0
 8003272:	d012      	beq.n	800329a <HAL_ADC_IRQHandler+0x372>
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00d      	beq.n	800329a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003282:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fea6 	bl	8003fdc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003298:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d036      	beq.n	8003312 <HAL_ADC_IRQHandler+0x3ea>
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d031      	beq.n	8003312 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80032b6:	2301      	movs	r3, #1
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ba:	e014      	b.n	80032e6 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80032c2:	4825      	ldr	r0, [pc, #148]	; (8003358 <HAL_ADC_IRQHandler+0x430>)
 80032c4:	f7ff fb0e 	bl	80028e4 <LL_ADC_GetMultiDMATransfer>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80032ce:	2301      	movs	r3, #1
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
 80032d2:	e008      	b.n	80032e6 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80032e2:	2301      	movs	r3, #1
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d10e      	bne.n	800330a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fc:	f043 0202 	orr.w	r2, r3, #2
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f847 	bl	8003398 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2210      	movs	r2, #16
 8003310:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	2b00      	cmp	r3, #0
 800331a:	d018      	beq.n	800334e <HAL_ADC_IRQHandler+0x426>
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003322:	2b00      	cmp	r3, #0
 8003324:	d013      	beq.n	800334e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003336:	f043 0208 	orr.w	r2, r3, #8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003346:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fe33 	bl	8003fb4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800334e:	bf00      	nop
 8003350:	3728      	adds	r7, #40	; 0x28
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	50000300 	.word	0x50000300

0800335c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b0b6      	sub	sp, #216	; 0xd8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x22>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e3c8      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x7b4>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fb40 	bl	8002a60 <LL_ADC_REG_IsConversionOngoing>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f040 83ad 	bne.w	8003b42 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	f7ff f9d4 	bl	80027a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fb2e 	bl	8002a60 <LL_ADC_REG_IsConversionOngoing>
 8003404:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fb3a 	bl	8002a86 <LL_ADC_INJ_IsConversionOngoing>
 8003412:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003416:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 81d9 	bne.w	80037d2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003420:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003424:	2b00      	cmp	r3, #0
 8003426:	f040 81d4 	bne.w	80037d2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003432:	d10f      	bne.n	8003454 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2200      	movs	r2, #0
 800343e:	4619      	mov	r1, r3
 8003440:	f7ff f9ee 	bl	8002820 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff f982 	bl	8002756 <LL_ADC_SetSamplingTimeCommonConfig>
 8003452:	e00e      	b.n	8003472 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6819      	ldr	r1, [r3, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	461a      	mov	r2, r3
 8003462:	f7ff f9dd 	bl	8002820 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2100      	movs	r1, #0
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff f972 	bl	8002756 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	08db      	lsrs	r3, r3, #3
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	2b04      	cmp	r3, #4
 8003492:	d022      	beq.n	80034da <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6919      	ldr	r1, [r3, #16]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034a4:	f7ff f8cc 	bl	8002640 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6919      	ldr	r1, [r3, #16]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	461a      	mov	r2, r3
 80034b6:	f7ff f918 	bl	80026ea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6919      	ldr	r1, [r3, #16]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	7f1b      	ldrb	r3, [r3, #28]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d102      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x124>
 80034ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ce:	e000      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x126>
 80034d0:	2300      	movs	r3, #0
 80034d2:	461a      	mov	r2, r3
 80034d4:	f7ff f924 	bl	8002720 <LL_ADC_SetOffsetSaturation>
 80034d8:	e17b      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff f8d1 	bl	8002688 <LL_ADC_GetOffsetChannel>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10a      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x15a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2100      	movs	r1, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff f8c6 	bl	8002688 <LL_ADC_GetOffsetChannel>
 80034fc:	4603      	mov	r3, r0
 80034fe:	0e9b      	lsrs	r3, r3, #26
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	e01e      	b.n	8003544 <HAL_ADC_ConfigChannel+0x198>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2100      	movs	r1, #0
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff f8bb 	bl	8002688 <LL_ADC_GetOffsetChannel>
 8003512:	4603      	mov	r3, r0
 8003514:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003524:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003528:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800352c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003534:	2320      	movs	r3, #32
 8003536:	e004      	b.n	8003542 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003538:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800353c:	fab3 f383 	clz	r3, r3
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354c:	2b00      	cmp	r3, #0
 800354e:	d105      	bne.n	800355c <HAL_ADC_ConfigChannel+0x1b0>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0e9b      	lsrs	r3, r3, #26
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	e018      	b.n	800358e <HAL_ADC_ConfigChannel+0x1e2>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003578:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003580:	2320      	movs	r3, #32
 8003582:	e004      	b.n	800358e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003584:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003588:	fab3 f383 	clz	r3, r3
 800358c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800358e:	429a      	cmp	r2, r3
 8003590:	d106      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2200      	movs	r2, #0
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff f88a 	bl	80026b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2101      	movs	r1, #1
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff f86e 	bl	8002688 <LL_ADC_GetOffsetChannel>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10a      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x220>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2101      	movs	r1, #1
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff f863 	bl	8002688 <LL_ADC_GetOffsetChannel>
 80035c2:	4603      	mov	r3, r0
 80035c4:	0e9b      	lsrs	r3, r3, #26
 80035c6:	f003 021f 	and.w	r2, r3, #31
 80035ca:	e01e      	b.n	800360a <HAL_ADC_ConfigChannel+0x25e>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2101      	movs	r1, #1
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff f858 	bl	8002688 <LL_ADC_GetOffsetChannel>
 80035d8:	4603      	mov	r3, r0
 80035da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80035ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80035f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80035fa:	2320      	movs	r3, #32
 80035fc:	e004      	b.n	8003608 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80035fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003612:	2b00      	cmp	r3, #0
 8003614:	d105      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x276>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	0e9b      	lsrs	r3, r3, #26
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	e018      	b.n	8003654 <HAL_ADC_ConfigChannel+0x2a8>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800362e:	fa93 f3a3 	rbit	r3, r3
 8003632:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003636:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800363a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800363e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003646:	2320      	movs	r3, #32
 8003648:	e004      	b.n	8003654 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800364a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003654:	429a      	cmp	r2, r3
 8003656:	d106      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2200      	movs	r2, #0
 800365e:	2101      	movs	r1, #1
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff f827 	bl	80026b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2102      	movs	r1, #2
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff f80b 	bl	8002688 <LL_ADC_GetOffsetChannel>
 8003672:	4603      	mov	r3, r0
 8003674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x2e6>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2102      	movs	r1, #2
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff f800 	bl	8002688 <LL_ADC_GetOffsetChannel>
 8003688:	4603      	mov	r3, r0
 800368a:	0e9b      	lsrs	r3, r3, #26
 800368c:	f003 021f 	and.w	r2, r3, #31
 8003690:	e01e      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x324>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2102      	movs	r1, #2
 8003698:	4618      	mov	r0, r3
 800369a:	f7fe fff5 	bl	8002688 <LL_ADC_GetOffsetChannel>
 800369e:	4603      	mov	r3, r0
 80036a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80036b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80036b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80036c0:	2320      	movs	r3, #32
 80036c2:	e004      	b.n	80036ce <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80036c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036c8:	fab3 f383 	clz	r3, r3
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x33c>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	0e9b      	lsrs	r3, r3, #26
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	e016      	b.n	8003716 <HAL_ADC_ConfigChannel+0x36a>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80036fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003708:	2320      	movs	r3, #32
 800370a:	e004      	b.n	8003716 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800370c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003710:	fab3 f383 	clz	r3, r3
 8003714:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003716:	429a      	cmp	r2, r3
 8003718:	d106      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	2102      	movs	r1, #2
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe ffc6 	bl	80026b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2103      	movs	r1, #3
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe ffaa 	bl	8002688 <LL_ADC_GetOffsetChannel>
 8003734:	4603      	mov	r3, r0
 8003736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10a      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x3a8>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2103      	movs	r1, #3
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe ff9f 	bl	8002688 <LL_ADC_GetOffsetChannel>
 800374a:	4603      	mov	r3, r0
 800374c:	0e9b      	lsrs	r3, r3, #26
 800374e:	f003 021f 	and.w	r2, r3, #31
 8003752:	e017      	b.n	8003784 <HAL_ADC_ConfigChannel+0x3d8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2103      	movs	r1, #3
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe ff94 	bl	8002688 <LL_ADC_GetOffsetChannel>
 8003760:	4603      	mov	r3, r0
 8003762:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800376c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800376e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003776:	2320      	movs	r3, #32
 8003778:	e003      	b.n	8003782 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800377a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800377c:	fab3 f383 	clz	r3, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378c:	2b00      	cmp	r3, #0
 800378e:	d105      	bne.n	800379c <HAL_ADC_ConfigChannel+0x3f0>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	0e9b      	lsrs	r3, r3, #26
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	e011      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x414>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80037aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80037ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80037b4:	2320      	movs	r3, #32
 80037b6:	e003      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80037b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d106      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2200      	movs	r2, #0
 80037ca:	2103      	movs	r1, #3
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe ff71 	bl	80026b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff f908 	bl	80029ec <LL_ADC_IsEnabled>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f040 8140 	bne.w	8003a64 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	6819      	ldr	r1, [r3, #0]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	461a      	mov	r2, r3
 80037f2:	f7ff f841 	bl	8002878 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	4a8f      	ldr	r2, [pc, #572]	; (8003a38 <HAL_ADC_ConfigChannel+0x68c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	f040 8131 	bne.w	8003a64 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <HAL_ADC_ConfigChannel+0x47e>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	0e9b      	lsrs	r3, r3, #26
 8003818:	3301      	adds	r3, #1
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	2b09      	cmp	r3, #9
 8003820:	bf94      	ite	ls
 8003822:	2301      	movls	r3, #1
 8003824:	2300      	movhi	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	e019      	b.n	800385e <HAL_ADC_ConfigChannel+0x4b2>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800383a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800383c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003842:	2320      	movs	r3, #32
 8003844:	e003      	b.n	800384e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003848:	fab3 f383 	clz	r3, r3
 800384c:	b2db      	uxtb	r3, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	2b09      	cmp	r3, #9
 8003856:	bf94      	ite	ls
 8003858:	2301      	movls	r3, #1
 800385a:	2300      	movhi	r3, #0
 800385c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800385e:	2b00      	cmp	r3, #0
 8003860:	d079      	beq.n	8003956 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386a:	2b00      	cmp	r3, #0
 800386c:	d107      	bne.n	800387e <HAL_ADC_ConfigChannel+0x4d2>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	0e9b      	lsrs	r3, r3, #26
 8003874:	3301      	adds	r3, #1
 8003876:	069b      	lsls	r3, r3, #26
 8003878:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800387c:	e015      	b.n	80038aa <HAL_ADC_ConfigChannel+0x4fe>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003886:	fa93 f3a3 	rbit	r3, r3
 800388a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800388c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003896:	2320      	movs	r3, #32
 8003898:	e003      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800389a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800389c:	fab3 f383 	clz	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	069b      	lsls	r3, r3, #26
 80038a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x51e>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	0e9b      	lsrs	r3, r3, #26
 80038bc:	3301      	adds	r3, #1
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	2101      	movs	r1, #1
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	e017      	b.n	80038fa <HAL_ADC_ConfigChannel+0x54e>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80038d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80038dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80038e2:	2320      	movs	r3, #32
 80038e4:	e003      	b.n	80038ee <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80038e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038e8:	fab3 f383 	clz	r3, r3
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	2101      	movs	r1, #1
 80038f6:	fa01 f303 	lsl.w	r3, r1, r3
 80038fa:	ea42 0103 	orr.w	r1, r2, r3
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10a      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x574>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	0e9b      	lsrs	r3, r3, #26
 8003910:	3301      	adds	r3, #1
 8003912:	f003 021f 	and.w	r2, r3, #31
 8003916:	4613      	mov	r3, r2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	4413      	add	r3, r2
 800391c:	051b      	lsls	r3, r3, #20
 800391e:	e018      	b.n	8003952 <HAL_ADC_ConfigChannel+0x5a6>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800392e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003930:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003938:	2320      	movs	r3, #32
 800393a:	e003      	b.n	8003944 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800393c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393e:	fab3 f383 	clz	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	3301      	adds	r3, #1
 8003946:	f003 021f 	and.w	r2, r3, #31
 800394a:	4613      	mov	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4413      	add	r3, r2
 8003950:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003952:	430b      	orrs	r3, r1
 8003954:	e081      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395e:	2b00      	cmp	r3, #0
 8003960:	d107      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x5c6>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	0e9b      	lsrs	r3, r3, #26
 8003968:	3301      	adds	r3, #1
 800396a:	069b      	lsls	r3, r3, #26
 800396c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003970:	e015      	b.n	800399e <HAL_ADC_ConfigChannel+0x5f2>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	fa93 f3a3 	rbit	r3, r3
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800398a:	2320      	movs	r3, #32
 800398c:	e003      	b.n	8003996 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	fab3 f383 	clz	r3, r3
 8003994:	b2db      	uxtb	r3, r3
 8003996:	3301      	adds	r3, #1
 8003998:	069b      	lsls	r3, r3, #26
 800399a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HAL_ADC_ConfigChannel+0x612>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	0e9b      	lsrs	r3, r3, #26
 80039b0:	3301      	adds	r3, #1
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	2101      	movs	r1, #1
 80039b8:	fa01 f303 	lsl.w	r3, r1, r3
 80039bc:	e017      	b.n	80039ee <HAL_ADC_ConfigChannel+0x642>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	fa93 f3a3 	rbit	r3, r3
 80039ca:	61fb      	str	r3, [r7, #28]
  return result;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80039d6:	2320      	movs	r3, #32
 80039d8:	e003      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	fab3 f383 	clz	r3, r3
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	3301      	adds	r3, #1
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	2101      	movs	r1, #1
 80039ea:	fa01 f303 	lsl.w	r3, r1, r3
 80039ee:	ea42 0103 	orr.w	r1, r2, r3
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10d      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x66e>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	0e9b      	lsrs	r3, r3, #26
 8003a04:	3301      	adds	r3, #1
 8003a06:	f003 021f 	and.w	r2, r3, #31
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	4413      	add	r3, r2
 8003a10:	3b1e      	subs	r3, #30
 8003a12:	051b      	lsls	r3, r3, #20
 8003a14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a18:	e01e      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x6ac>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fa93 f3a3 	rbit	r3, r3
 8003a26:	613b      	str	r3, [r7, #16]
  return result;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d104      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003a32:	2320      	movs	r3, #32
 8003a34:	e006      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x698>
 8003a36:	bf00      	nop
 8003a38:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	3301      	adds	r3, #1
 8003a46:	f003 021f 	and.w	r2, r3, #31
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4413      	add	r3, r2
 8003a50:	3b1e      	subs	r3, #30
 8003a52:	051b      	lsls	r3, r3, #20
 8003a54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	6892      	ldr	r2, [r2, #8]
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f7fe fede 	bl	8002820 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b3f      	ldr	r3, [pc, #252]	; (8003b68 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d071      	beq.n	8003b54 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a70:	483e      	ldr	r0, [pc, #248]	; (8003b6c <HAL_ADC_ConfigChannel+0x7c0>)
 8003a72:	f7fe fdd7 	bl	8002624 <LL_ADC_GetCommonPathInternalCh>
 8003a76:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a3c      	ldr	r2, [pc, #240]	; (8003b70 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_ADC_ConfigChannel+0x6e2>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a3a      	ldr	r2, [pc, #232]	; (8003b74 <HAL_ADC_ConfigChannel+0x7c8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d127      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d121      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aa2:	d157      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003aa8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003aac:	4619      	mov	r1, r3
 8003aae:	482f      	ldr	r0, [pc, #188]	; (8003b6c <HAL_ADC_ConfigChannel+0x7c0>)
 8003ab0:	f7fe fda5 	bl	80025fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ab4:	4b30      	ldr	r3, [pc, #192]	; (8003b78 <HAL_ADC_ConfigChannel+0x7cc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	099b      	lsrs	r3, r3, #6
 8003aba:	4a30      	ldr	r2, [pc, #192]	; (8003b7c <HAL_ADC_ConfigChannel+0x7d0>)
 8003abc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac0:	099b      	lsrs	r3, r3, #6
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ace:	e002      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f9      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003adc:	e03a      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a27      	ldr	r2, [pc, #156]	; (8003b80 <HAL_ADC_ConfigChannel+0x7d4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d113      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x764>
 8003ae8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10d      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a22      	ldr	r2, [pc, #136]	; (8003b84 <HAL_ADC_ConfigChannel+0x7d8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d02a      	beq.n	8003b54 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003afe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b06:	4619      	mov	r1, r3
 8003b08:	4818      	ldr	r0, [pc, #96]	; (8003b6c <HAL_ADC_ConfigChannel+0x7c0>)
 8003b0a:	f7fe fd78 	bl	80025fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b0e:	e021      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1c      	ldr	r2, [pc, #112]	; (8003b88 <HAL_ADC_ConfigChannel+0x7dc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d11c      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d116      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a16      	ldr	r2, [pc, #88]	; (8003b84 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d011      	beq.n	8003b54 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b38:	4619      	mov	r1, r3
 8003b3a:	480c      	ldr	r0, [pc, #48]	; (8003b6c <HAL_ADC_ConfigChannel+0x7c0>)
 8003b3c:	f7fe fd5f 	bl	80025fe <LL_ADC_SetCommonPathInternalCh>
 8003b40:	e008      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b46:	f043 0220 	orr.w	r2, r3, #32
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b5c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	37d8      	adds	r7, #216	; 0xd8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	80080000 	.word	0x80080000
 8003b6c:	50000300 	.word	0x50000300
 8003b70:	c3210000 	.word	0xc3210000
 8003b74:	90c00010 	.word	0x90c00010
 8003b78:	20000150 	.word	0x20000150
 8003b7c:	053e2d63 	.word	0x053e2d63
 8003b80:	c7520000 	.word	0xc7520000
 8003b84:	50000100 	.word	0x50000100
 8003b88:	cb840000 	.word	0xcb840000

08003b8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fe ff27 	bl	80029ec <LL_ADC_IsEnabled>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d14d      	bne.n	8003c40 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <ADC_Enable+0xc0>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00d      	beq.n	8003bce <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	f043 0210 	orr.w	r2, r3, #16
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc2:	f043 0201 	orr.w	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e039      	b.n	8003c42 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe fee2 	bl	800299c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bd8:	f7fe fcd0 	bl	800257c <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bde:	e028      	b.n	8003c32 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fe ff01 	bl	80029ec <LL_ADC_IsEnabled>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d104      	bne.n	8003bfa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe fed1 	bl	800299c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bfa:	f7fe fcbf 	bl	800257c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d914      	bls.n	8003c32 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d00d      	beq.n	8003c32 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1a:	f043 0210 	orr.w	r2, r3, #16
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c26:	f043 0201 	orr.w	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e007      	b.n	8003c42 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d1cf      	bne.n	8003be0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	8000003f 	.word	0x8000003f

08003c50 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe fed8 	bl	8002a12 <LL_ADC_IsDisableOngoing>
 8003c62:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fe febf 	bl	80029ec <LL_ADC_IsEnabled>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d047      	beq.n	8003d04 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d144      	bne.n	8003d04 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030d 	and.w	r3, r3, #13
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d10c      	bne.n	8003ca2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fe fe99 	bl	80029c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2203      	movs	r2, #3
 8003c98:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c9a:	f7fe fc6f 	bl	800257c <HAL_GetTick>
 8003c9e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ca0:	e029      	b.n	8003cf6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca6:	f043 0210 	orr.w	r2, r3, #16
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb2:	f043 0201 	orr.w	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e023      	b.n	8003d06 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cbe:	f7fe fc5d 	bl	800257c <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d914      	bls.n	8003cf6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00d      	beq.n	8003cf6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cde:	f043 0210 	orr.w	r2, r3, #16
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cea:	f043 0201 	orr.w	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e007      	b.n	8003d06 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1dc      	bne.n	8003cbe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d14b      	bne.n	8003dc0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d021      	beq.n	8003d86 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe fd18 	bl	800277c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d032      	beq.n	8003db8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d12b      	bne.n	8003db8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d11f      	bne.n	8003db8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7c:	f043 0201 	orr.w	r2, r3, #1
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d84:	e018      	b.n	8003db8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d111      	bne.n	8003db8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	f043 0201 	orr.w	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f7ff facf 	bl	800335c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003dbe:	e00e      	b.n	8003dde <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff fae3 	bl	8003398 <HAL_ADC_ErrorCallback>
}
 8003dd2:	e004      	b.n	8003dde <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	4798      	blx	r3
}
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f7ff fabb 	bl	8003370 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dfa:	bf00      	nop
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e20:	f043 0204 	orr.w	r2, r3, #4
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f7ff fab5 	bl	8003398 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <LL_ADC_IsEnabled>:
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <LL_ADC_IsEnabled+0x18>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <LL_ADC_IsEnabled+0x1a>
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_ADC_StartCalibration>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	609a      	str	r2, [r3, #8]
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <LL_ADC_IsCalibrationOnGoing>:
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ea2:	d101      	bne.n	8003ea8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <LL_ADC_REG_IsConversionOngoing>:
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d101      	bne.n	8003ece <LL_ADC_REG_IsConversionOngoing+0x18>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_ADCEx_Calibration_Start+0x1c>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e04d      	b.n	8003f94 <HAL_ADCEx_Calibration_Start+0xb8>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff fea5 	bl	8003c50 <ADC_Disable>
 8003f06:	4603      	mov	r3, r0
 8003f08:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d136      	bne.n	8003f7e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f18:	f023 0302 	bic.w	r3, r3, #2
 8003f1c:	f043 0202 	orr.w	r2, r3, #2
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6839      	ldr	r1, [r7, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff ff96 	bl	8003e5c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f30:	e014      	b.n	8003f5c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	3301      	adds	r3, #1
 8003f36:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d90d      	bls.n	8003f5c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f44:	f023 0312 	bic.w	r3, r3, #18
 8003f48:	f043 0210 	orr.w	r2, r3, #16
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e01b      	b.n	8003f94 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff94 	bl	8003e8e <LL_ADC_IsCalibrationOnGoing>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e2      	bne.n	8003f32 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f70:	f023 0303 	bic.w	r3, r3, #3
 8003f74:	f043 0201 	orr.w	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f7c:	e005      	b.n	8003f8a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f82:	f043 0210 	orr.w	r2, r3, #16
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	0004de01 	.word	0x0004de01

08003fa0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004004:	b590      	push	{r4, r7, lr}
 8004006:	b0a1      	sub	sp, #132	; 0x84
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800401e:	2302      	movs	r3, #2
 8004020:	e08b      	b.n	800413a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800402a:	2300      	movs	r3, #0
 800402c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800402e:	2300      	movs	r3, #0
 8004030:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800403a:	d102      	bne.n	8004042 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800403c:	4b41      	ldr	r3, [pc, #260]	; (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	e001      	b.n	8004046 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004042:	2300      	movs	r3, #0
 8004044:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10b      	bne.n	8004064 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	f043 0220 	orr.w	r2, r3, #32
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e06a      	b.n	800413a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff ff25 	bl	8003eb6 <LL_ADC_REG_IsConversionOngoing>
 800406c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff ff1f 	bl	8003eb6 <LL_ADC_REG_IsConversionOngoing>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d14c      	bne.n	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800407e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004080:	2b00      	cmp	r3, #0
 8004082:	d149      	bne.n	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004084:	4b30      	ldr	r3, [pc, #192]	; (8004148 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004086:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d028      	beq.n	80040e2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	6859      	ldr	r1, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040a2:	035b      	lsls	r3, r3, #13
 80040a4:	430b      	orrs	r3, r1
 80040a6:	431a      	orrs	r2, r3
 80040a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80040b0:	f7ff fec1 	bl	8003e36 <LL_ADC_IsEnabled>
 80040b4:	4604      	mov	r4, r0
 80040b6:	4823      	ldr	r0, [pc, #140]	; (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80040b8:	f7ff febd 	bl	8003e36 <LL_ADC_IsEnabled>
 80040bc:	4603      	mov	r3, r0
 80040be:	4323      	orrs	r3, r4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d133      	bne.n	800412c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040cc:	f023 030f 	bic.w	r3, r3, #15
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	6811      	ldr	r1, [r2, #0]
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	6892      	ldr	r2, [r2, #8]
 80040d8:	430a      	orrs	r2, r1
 80040da:	431a      	orrs	r2, r3
 80040dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040de:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040e0:	e024      	b.n	800412c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040ee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80040f2:	f7ff fea0 	bl	8003e36 <LL_ADC_IsEnabled>
 80040f6:	4604      	mov	r4, r0
 80040f8:	4812      	ldr	r0, [pc, #72]	; (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80040fa:	f7ff fe9c 	bl	8003e36 <LL_ADC_IsEnabled>
 80040fe:	4603      	mov	r3, r0
 8004100:	4323      	orrs	r3, r4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d112      	bne.n	800412c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800410e:	f023 030f 	bic.w	r3, r3, #15
 8004112:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004114:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004116:	e009      	b.n	800412c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411c:	f043 0220 	orr.w	r2, r3, #32
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800412a:	e000      	b.n	800412e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800412c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004136:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800413a:	4618      	mov	r0, r3
 800413c:	3784      	adds	r7, #132	; 0x84
 800413e:	46bd      	mov	sp, r7
 8004140:	bd90      	pop	{r4, r7, pc}
 8004142:	bf00      	nop
 8004144:	50000100 	.word	0x50000100
 8004148:	50000300 	.word	0x50000300

0800414c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <__NVIC_SetPriorityGrouping+0x44>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004168:	4013      	ands	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800417e:	4a04      	ldr	r2, [pc, #16]	; (8004190 <__NVIC_SetPriorityGrouping+0x44>)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	60d3      	str	r3, [r2, #12]
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__NVIC_GetPriorityGrouping+0x18>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	0a1b      	lsrs	r3, r3, #8
 800419e:	f003 0307 	and.w	r3, r3, #7
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	e000ed00 	.word	0xe000ed00

080041b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	db0b      	blt.n	80041da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	4907      	ldr	r1, [pc, #28]	; (80041e8 <__NVIC_EnableIRQ+0x38>)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2001      	movs	r0, #1
 80041d2:	fa00 f202 	lsl.w	r2, r0, r2
 80041d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	e000e100 	.word	0xe000e100

080041ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	db0a      	blt.n	8004216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	490c      	ldr	r1, [pc, #48]	; (8004238 <__NVIC_SetPriority+0x4c>)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	0112      	lsls	r2, r2, #4
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	440b      	add	r3, r1
 8004210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004214:	e00a      	b.n	800422c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4908      	ldr	r1, [pc, #32]	; (800423c <__NVIC_SetPriority+0x50>)
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	3b04      	subs	r3, #4
 8004224:	0112      	lsls	r2, r2, #4
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	440b      	add	r3, r1
 800422a:	761a      	strb	r2, [r3, #24]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	e000e100 	.word	0xe000e100
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004240:	b480      	push	{r7}
 8004242:	b089      	sub	sp, #36	; 0x24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f1c3 0307 	rsb	r3, r3, #7
 800425a:	2b04      	cmp	r3, #4
 800425c:	bf28      	it	cs
 800425e:	2304      	movcs	r3, #4
 8004260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3304      	adds	r3, #4
 8004266:	2b06      	cmp	r3, #6
 8004268:	d902      	bls.n	8004270 <NVIC_EncodePriority+0x30>
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3b03      	subs	r3, #3
 800426e:	e000      	b.n	8004272 <NVIC_EncodePriority+0x32>
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004274:	f04f 32ff 	mov.w	r2, #4294967295
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	401a      	ands	r2, r3
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004288:	f04f 31ff 	mov.w	r1, #4294967295
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	fa01 f303 	lsl.w	r3, r1, r3
 8004292:	43d9      	mvns	r1, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004298:	4313      	orrs	r3, r2
         );
}
 800429a:	4618      	mov	r0, r3
 800429c:	3724      	adds	r7, #36	; 0x24
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ff4c 	bl	800414c <__NVIC_SetPriorityGrouping>
}
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042ca:	f7ff ff63 	bl	8004194 <__NVIC_GetPriorityGrouping>
 80042ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	6978      	ldr	r0, [r7, #20]
 80042d6:	f7ff ffb3 	bl	8004240 <NVIC_EncodePriority>
 80042da:	4602      	mov	r2, r0
 80042dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e0:	4611      	mov	r1, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff ff82 	bl	80041ec <__NVIC_SetPriority>
}
 80042e8:	bf00      	nop
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff ff56 	bl	80041b0 <__NVIC_EnableIRQ>
}
 8004304:	bf00      	nop
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e08d      	b.n	800443a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	4b47      	ldr	r3, [pc, #284]	; (8004444 <HAL_DMA_Init+0x138>)
 8004326:	429a      	cmp	r2, r3
 8004328:	d80f      	bhi.n	800434a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	4b45      	ldr	r3, [pc, #276]	; (8004448 <HAL_DMA_Init+0x13c>)
 8004332:	4413      	add	r3, r2
 8004334:	4a45      	ldr	r2, [pc, #276]	; (800444c <HAL_DMA_Init+0x140>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	009a      	lsls	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a42      	ldr	r2, [pc, #264]	; (8004450 <HAL_DMA_Init+0x144>)
 8004346:	641a      	str	r2, [r3, #64]	; 0x40
 8004348:	e00e      	b.n	8004368 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	4b40      	ldr	r3, [pc, #256]	; (8004454 <HAL_DMA_Init+0x148>)
 8004352:	4413      	add	r3, r2
 8004354:	4a3d      	ldr	r2, [pc, #244]	; (800444c <HAL_DMA_Init+0x140>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	091b      	lsrs	r3, r3, #4
 800435c:	009a      	lsls	r2, r3, #2
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a3c      	ldr	r2, [pc, #240]	; (8004458 <HAL_DMA_Init+0x14c>)
 8004366:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800437e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004382:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800438c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004398:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fa76 	bl	80048ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043c8:	d102      	bne.n	80043d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d010      	beq.n	8004410 <HAL_DMA_Init+0x104>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d80c      	bhi.n	8004410 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fa96 	bl	8004928 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	e008      	b.n	8004422 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40020407 	.word	0x40020407
 8004448:	bffdfff8 	.word	0xbffdfff8
 800444c:	cccccccd 	.word	0xcccccccd
 8004450:	40020000 	.word	0x40020000
 8004454:	bffdfbf8 	.word	0xbffdfbf8
 8004458:	40020400 	.word	0x40020400

0800445c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_DMA_Start_IT+0x20>
 8004478:	2302      	movs	r3, #2
 800447a:	e066      	b.n	800454a <HAL_DMA_Start_IT+0xee>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d155      	bne.n	800453c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0201 	bic.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f9bb 	bl	8004830 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 020e 	orr.w	r2, r2, #14
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e00f      	b.n	80044f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0204 	bic.w	r2, r2, #4
 80044e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 020a 	orr.w	r2, r2, #10
 80044f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004510:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004528:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0201 	orr.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e005      	b.n	8004548 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004544:	2302      	movs	r3, #2
 8004546:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004548:	7dfb      	ldrb	r3, [r7, #23]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d005      	beq.n	8004576 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2204      	movs	r2, #4
 800456e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
 8004574:	e037      	b.n	80045e6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 020e 	bic.w	r2, r2, #14
 8004584:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004594:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	f003 021f 	and.w	r2, r3, #31
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	2101      	movs	r1, #1
 80045b4:	fa01 f202 	lsl.w	r2, r1, r2
 80045b8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045c2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00c      	beq.n	80045e6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045da:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045e4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d00d      	beq.n	8004638 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2204      	movs	r2, #4
 8004620:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
 8004636:	e047      	b.n	80046c8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 020e 	bic.w	r2, r2, #14
 8004646:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004662:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004666:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466c:	f003 021f 	and.w	r2, r3, #31
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	2101      	movs	r1, #1
 8004676:	fa01 f202 	lsl.w	r2, r1, r2
 800467a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004684:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00c      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800469c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	4798      	blx	r3
    }
  }
  return status;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	2204      	movs	r2, #4
 80046f4:	409a      	lsls	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4013      	ands	r3, r2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d026      	beq.n	800474c <HAL_DMA_IRQHandler+0x7a>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d021      	beq.n	800474c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b00      	cmp	r3, #0
 8004714:	d107      	bne.n	8004726 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0204 	bic.w	r2, r2, #4
 8004724:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	f003 021f 	and.w	r2, r3, #31
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	2104      	movs	r1, #4
 8004734:	fa01 f202 	lsl.w	r2, r1, r2
 8004738:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	2b00      	cmp	r3, #0
 8004740:	d071      	beq.n	8004826 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800474a:	e06c      	b.n	8004826 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	2202      	movs	r2, #2
 8004756:	409a      	lsls	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d02e      	beq.n	80047be <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d029      	beq.n	80047be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10b      	bne.n	8004790 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 020a 	bic.w	r2, r2, #10
 8004786:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004794:	f003 021f 	and.w	r2, r3, #31
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	2102      	movs	r1, #2
 800479e:	fa01 f202 	lsl.w	r2, r1, r2
 80047a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d038      	beq.n	8004826 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80047bc:	e033      	b.n	8004826 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	2208      	movs	r2, #8
 80047c8:	409a      	lsls	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d02a      	beq.n	8004828 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d025      	beq.n	8004828 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 020e 	bic.w	r2, r2, #14
 80047ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f0:	f003 021f 	and.w	r2, r3, #31
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	2101      	movs	r1, #1
 80047fa:	fa01 f202 	lsl.w	r2, r1, r2
 80047fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	2b00      	cmp	r3, #0
 800481c:	d004      	beq.n	8004828 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004826:	bf00      	nop
 8004828:	bf00      	nop
}
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004846:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484c:	2b00      	cmp	r3, #0
 800484e:	d004      	beq.n	800485a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004858:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	f003 021f 	and.w	r2, r3, #31
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	2101      	movs	r1, #1
 8004868:	fa01 f202 	lsl.w	r2, r1, r2
 800486c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b10      	cmp	r3, #16
 800487c:	d108      	bne.n	8004890 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800488e:	e007      	b.n	80048a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]
}
 80048a0:	bf00      	nop
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	4b16      	ldr	r3, [pc, #88]	; (8004914 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80048bc:	429a      	cmp	r2, r3
 80048be:	d802      	bhi.n	80048c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80048c0:	4b15      	ldr	r3, [pc, #84]	; (8004918 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	e001      	b.n	80048ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80048c6:	4b15      	ldr	r3, [pc, #84]	; (800491c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80048c8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	3b08      	subs	r3, #8
 80048d6:	4a12      	ldr	r2, [pc, #72]	; (8004920 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	009a      	lsls	r2, r3, #2
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4413      	add	r3, r2
 80048ec:	461a      	mov	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a0b      	ldr	r2, [pc, #44]	; (8004924 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80048f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	2201      	movs	r2, #1
 8004900:	409a      	lsls	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40020407 	.word	0x40020407
 8004918:	40020800 	.word	0x40020800
 800491c:	40020820 	.word	0x40020820
 8004920:	cccccccd 	.word	0xcccccccd
 8004924:	40020880 	.word	0x40020880

08004928 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800493c:	4413      	add	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	461a      	mov	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a08      	ldr	r2, [pc, #32]	; (800496c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800494a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3b01      	subs	r3, #1
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2201      	movs	r2, #1
 8004956:	409a      	lsls	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800495c:	bf00      	nop
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	1000823f 	.word	0x1000823f
 800496c:	40020940 	.word	0x40020940

08004970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800497e:	e15a      	b.n	8004c36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	2101      	movs	r1, #1
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	4013      	ands	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 814c 	beq.w	8004c30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d005      	beq.n	80049b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d130      	bne.n	8004a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	2203      	movs	r2, #3
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4013      	ands	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049e6:	2201      	movs	r2, #1
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4013      	ands	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	f003 0201 	and.w	r2, r3, #1
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d017      	beq.n	8004a4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	2203      	movs	r2, #3
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4013      	ands	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d123      	bne.n	8004aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	08da      	lsrs	r2, r3, #3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3208      	adds	r2, #8
 8004a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	220f      	movs	r2, #15
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	43db      	mvns	r3, r3
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	08da      	lsrs	r2, r3, #3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3208      	adds	r2, #8
 8004a9c:	6939      	ldr	r1, [r7, #16]
 8004a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	2203      	movs	r2, #3
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f003 0203 	and.w	r2, r3, #3
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 80a6 	beq.w	8004c30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ae4:	4b5b      	ldr	r3, [pc, #364]	; (8004c54 <HAL_GPIO_Init+0x2e4>)
 8004ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae8:	4a5a      	ldr	r2, [pc, #360]	; (8004c54 <HAL_GPIO_Init+0x2e4>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	6613      	str	r3, [r2, #96]	; 0x60
 8004af0:	4b58      	ldr	r3, [pc, #352]	; (8004c54 <HAL_GPIO_Init+0x2e4>)
 8004af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004afc:	4a56      	ldr	r2, [pc, #344]	; (8004c58 <HAL_GPIO_Init+0x2e8>)
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	089b      	lsrs	r3, r3, #2
 8004b02:	3302      	adds	r3, #2
 8004b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	220f      	movs	r2, #15
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b26:	d01f      	beq.n	8004b68 <HAL_GPIO_Init+0x1f8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a4c      	ldr	r2, [pc, #304]	; (8004c5c <HAL_GPIO_Init+0x2ec>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d019      	beq.n	8004b64 <HAL_GPIO_Init+0x1f4>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a4b      	ldr	r2, [pc, #300]	; (8004c60 <HAL_GPIO_Init+0x2f0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d013      	beq.n	8004b60 <HAL_GPIO_Init+0x1f0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a4a      	ldr	r2, [pc, #296]	; (8004c64 <HAL_GPIO_Init+0x2f4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00d      	beq.n	8004b5c <HAL_GPIO_Init+0x1ec>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a49      	ldr	r2, [pc, #292]	; (8004c68 <HAL_GPIO_Init+0x2f8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d007      	beq.n	8004b58 <HAL_GPIO_Init+0x1e8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a48      	ldr	r2, [pc, #288]	; (8004c6c <HAL_GPIO_Init+0x2fc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <HAL_GPIO_Init+0x1e4>
 8004b50:	2305      	movs	r3, #5
 8004b52:	e00a      	b.n	8004b6a <HAL_GPIO_Init+0x1fa>
 8004b54:	2306      	movs	r3, #6
 8004b56:	e008      	b.n	8004b6a <HAL_GPIO_Init+0x1fa>
 8004b58:	2304      	movs	r3, #4
 8004b5a:	e006      	b.n	8004b6a <HAL_GPIO_Init+0x1fa>
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e004      	b.n	8004b6a <HAL_GPIO_Init+0x1fa>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e002      	b.n	8004b6a <HAL_GPIO_Init+0x1fa>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <HAL_GPIO_Init+0x1fa>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	f002 0203 	and.w	r2, r2, #3
 8004b70:	0092      	lsls	r2, r2, #2
 8004b72:	4093      	lsls	r3, r2
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b7a:	4937      	ldr	r1, [pc, #220]	; (8004c58 <HAL_GPIO_Init+0x2e8>)
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	089b      	lsrs	r3, r3, #2
 8004b80:	3302      	adds	r3, #2
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b88:	4b39      	ldr	r3, [pc, #228]	; (8004c70 <HAL_GPIO_Init+0x300>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	43db      	mvns	r3, r3
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4013      	ands	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bac:	4a30      	ldr	r2, [pc, #192]	; (8004c70 <HAL_GPIO_Init+0x300>)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004bb2:	4b2f      	ldr	r3, [pc, #188]	; (8004c70 <HAL_GPIO_Init+0x300>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004bd6:	4a26      	ldr	r2, [pc, #152]	; (8004c70 <HAL_GPIO_Init+0x300>)
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004bdc:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <HAL_GPIO_Init+0x300>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4013      	ands	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c00:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <HAL_GPIO_Init+0x300>)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c06:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <HAL_GPIO_Init+0x300>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4013      	ands	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c2a:	4a11      	ldr	r2, [pc, #68]	; (8004c70 <HAL_GPIO_Init+0x300>)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	3301      	adds	r3, #1
 8004c34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f47f ae9d 	bne.w	8004980 <HAL_GPIO_Init+0x10>
  }
}
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40010000 	.word	0x40010000
 8004c5c:	48000400 	.word	0x48000400
 8004c60:	48000800 	.word	0x48000800
 8004c64:	48000c00 	.word	0x48000c00
 8004c68:	48001000 	.word	0x48001000
 8004c6c:	48001400 	.word	0x48001400
 8004c70:	40010400 	.word	0x40010400

08004c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	807b      	strh	r3, [r7, #2]
 8004c80:	4613      	mov	r3, r2
 8004c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c84:	787b      	ldrb	r3, [r7, #1]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c8a:	887a      	ldrh	r2, [r7, #2]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c90:	e002      	b.n	8004c98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c92:	887a      	ldrh	r2, [r7, #2]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	4603      	mov	r3, r0
 8004cac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004cae:	4b08      	ldr	r3, [pc, #32]	; (8004cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cb0:	695a      	ldr	r2, [r3, #20]
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d006      	beq.n	8004cc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cba:	4a05      	ldr	r2, [pc, #20]	; (8004cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cbc:	88fb      	ldrh	r3, [r7, #6]
 8004cbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cc0:	88fb      	ldrh	r3, [r7, #6]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fd f846 	bl	8001d54 <HAL_GPIO_EXTI_Callback>
  }
}
 8004cc8:	bf00      	nop
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40010400 	.word	0x40010400

08004cd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d141      	bne.n	8004d66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ce2:	4b4b      	ldr	r3, [pc, #300]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cee:	d131      	bne.n	8004d54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cf0:	4b47      	ldr	r3, [pc, #284]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf6:	4a46      	ldr	r2, [pc, #280]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d00:	4b43      	ldr	r3, [pc, #268]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d08:	4a41      	ldr	r2, [pc, #260]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d10:	4b40      	ldr	r3, [pc, #256]	; (8004e14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2232      	movs	r2, #50	; 0x32
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	4a3f      	ldr	r2, [pc, #252]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	0c9b      	lsrs	r3, r3, #18
 8004d22:	3301      	adds	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d26:	e002      	b.n	8004d2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d2e:	4b38      	ldr	r3, [pc, #224]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3a:	d102      	bne.n	8004d42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f2      	bne.n	8004d28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d42:	4b33      	ldr	r3, [pc, #204]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4e:	d158      	bne.n	8004e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e057      	b.n	8004e04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d54:	4b2e      	ldr	r3, [pc, #184]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d5a:	4a2d      	ldr	r2, [pc, #180]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d64:	e04d      	b.n	8004e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d6c:	d141      	bne.n	8004df2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d6e:	4b28      	ldr	r3, [pc, #160]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7a:	d131      	bne.n	8004de0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d7c:	4b24      	ldr	r3, [pc, #144]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d82:	4a23      	ldr	r2, [pc, #140]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d8c:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d94:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2232      	movs	r2, #50	; 0x32
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	4a1c      	ldr	r2, [pc, #112]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004da8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dac:	0c9b      	lsrs	r3, r3, #18
 8004dae:	3301      	adds	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004db2:	e002      	b.n	8004dba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dba:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc6:	d102      	bne.n	8004dce <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f2      	bne.n	8004db4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dce:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dda:	d112      	bne.n	8004e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e011      	b.n	8004e04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de6:	4a0a      	ldr	r2, [pc, #40]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004df0:	e007      	b.n	8004e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004df2:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dfa:	4a05      	ldr	r2, [pc, #20]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	40007000 	.word	0x40007000
 8004e14:	20000150 	.word	0x20000150
 8004e18:	431bde83 	.word	0x431bde83

08004e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e306      	b.n	800543c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d075      	beq.n	8004f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e3a:	4b97      	ldr	r3, [pc, #604]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e44:	4b94      	ldr	r3, [pc, #592]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b0c      	cmp	r3, #12
 8004e52:	d102      	bne.n	8004e5a <HAL_RCC_OscConfig+0x3e>
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d002      	beq.n	8004e60 <HAL_RCC_OscConfig+0x44>
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d10b      	bne.n	8004e78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e60:	4b8d      	ldr	r3, [pc, #564]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d05b      	beq.n	8004f24 <HAL_RCC_OscConfig+0x108>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d157      	bne.n	8004f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e2e1      	b.n	800543c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e80:	d106      	bne.n	8004e90 <HAL_RCC_OscConfig+0x74>
 8004e82:	4b85      	ldr	r3, [pc, #532]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a84      	ldr	r2, [pc, #528]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	e01d      	b.n	8004ecc <HAL_RCC_OscConfig+0xb0>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x98>
 8004e9a:	4b7f      	ldr	r3, [pc, #508]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a7e      	ldr	r2, [pc, #504]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	4b7c      	ldr	r3, [pc, #496]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a7b      	ldr	r2, [pc, #492]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e00b      	b.n	8004ecc <HAL_RCC_OscConfig+0xb0>
 8004eb4:	4b78      	ldr	r3, [pc, #480]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a77      	ldr	r2, [pc, #476]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	4b75      	ldr	r3, [pc, #468]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a74      	ldr	r2, [pc, #464]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d013      	beq.n	8004efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed4:	f7fd fb52 	bl	800257c <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004edc:	f7fd fb4e 	bl	800257c <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	; 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e2a6      	b.n	800543c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eee:	4b6a      	ldr	r3, [pc, #424]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0xc0>
 8004efa:	e014      	b.n	8004f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fd fb3e 	bl	800257c <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f04:	f7fd fb3a 	bl	800257c <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	; 0x64
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e292      	b.n	800543c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f16:	4b60      	ldr	r3, [pc, #384]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0xe8>
 8004f22:	e000      	b.n	8004f26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d075      	beq.n	800501e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f32:	4b59      	ldr	r3, [pc, #356]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
 8004f3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f3c:	4b56      	ldr	r3, [pc, #344]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0303 	and.w	r3, r3, #3
 8004f44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b0c      	cmp	r3, #12
 8004f4a:	d102      	bne.n	8004f52 <HAL_RCC_OscConfig+0x136>
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d002      	beq.n	8004f58 <HAL_RCC_OscConfig+0x13c>
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d11f      	bne.n	8004f98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f58:	4b4f      	ldr	r3, [pc, #316]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <HAL_RCC_OscConfig+0x154>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e265      	b.n	800543c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f70:	4b49      	ldr	r3, [pc, #292]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	061b      	lsls	r3, r3, #24
 8004f7e:	4946      	ldr	r1, [pc, #280]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f84:	4b45      	ldr	r3, [pc, #276]	; (800509c <HAL_RCC_OscConfig+0x280>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fd f8f1 	bl	8002170 <HAL_InitTick>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d043      	beq.n	800501c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e251      	b.n	800543c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d023      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fa0:	4b3d      	ldr	r3, [pc, #244]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a3c      	ldr	r2, [pc, #240]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fd fae6 	bl	800257c <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fb4:	f7fd fae2 	bl	800257c <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e23a      	b.n	800543c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fc6:	4b34      	ldr	r3, [pc, #208]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd2:	4b31      	ldr	r3, [pc, #196]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	061b      	lsls	r3, r3, #24
 8004fe0:	492d      	ldr	r1, [pc, #180]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	604b      	str	r3, [r1, #4]
 8004fe6:	e01a      	b.n	800501e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fe8:	4b2b      	ldr	r3, [pc, #172]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004fee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fd fac2 	bl	800257c <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ffc:	f7fd fabe 	bl	800257c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e216      	b.n	800543c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800500e:	4b22      	ldr	r3, [pc, #136]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <HAL_RCC_OscConfig+0x1e0>
 800501a:	e000      	b.n	800501e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800501c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d041      	beq.n	80050ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d01c      	beq.n	800506c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005032:	4b19      	ldr	r3, [pc, #100]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8005034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005038:	4a17      	ldr	r2, [pc, #92]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005042:	f7fd fa9b 	bl	800257c <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800504a:	f7fd fa97 	bl	800257c <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e1ef      	b.n	800543c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800505c:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 800505e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0ef      	beq.n	800504a <HAL_RCC_OscConfig+0x22e>
 800506a:	e020      	b.n	80050ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 800506e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005072:	4a09      	ldr	r2, [pc, #36]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507c:	f7fd fa7e 	bl	800257c <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005082:	e00d      	b.n	80050a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005084:	f7fd fa7a 	bl	800257c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d906      	bls.n	80050a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e1d2      	b.n	800543c <HAL_RCC_OscConfig+0x620>
 8005096:	bf00      	nop
 8005098:	40021000 	.word	0x40021000
 800509c:	20000154 	.word	0x20000154
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050a0:	4b8c      	ldr	r3, [pc, #560]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 80050a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1ea      	bne.n	8005084 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 80a6 	beq.w	8005208 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050bc:	2300      	movs	r3, #0
 80050be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050c0:	4b84      	ldr	r3, [pc, #528]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 80050c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_RCC_OscConfig+0x2b4>
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <HAL_RCC_OscConfig+0x2b6>
 80050d0:	2300      	movs	r3, #0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00d      	beq.n	80050f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d6:	4b7f      	ldr	r3, [pc, #508]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 80050d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050da:	4a7e      	ldr	r2, [pc, #504]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 80050dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e0:	6593      	str	r3, [r2, #88]	; 0x58
 80050e2:	4b7c      	ldr	r3, [pc, #496]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80050ee:	2301      	movs	r3, #1
 80050f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050f2:	4b79      	ldr	r3, [pc, #484]	; (80052d8 <HAL_RCC_OscConfig+0x4bc>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d118      	bne.n	8005130 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050fe:	4b76      	ldr	r3, [pc, #472]	; (80052d8 <HAL_RCC_OscConfig+0x4bc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a75      	ldr	r2, [pc, #468]	; (80052d8 <HAL_RCC_OscConfig+0x4bc>)
 8005104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800510a:	f7fd fa37 	bl	800257c <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005112:	f7fd fa33 	bl	800257c <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e18b      	b.n	800543c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005124:	4b6c      	ldr	r3, [pc, #432]	; (80052d8 <HAL_RCC_OscConfig+0x4bc>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d108      	bne.n	800514a <HAL_RCC_OscConfig+0x32e>
 8005138:	4b66      	ldr	r3, [pc, #408]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	4a65      	ldr	r2, [pc, #404]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005148:	e024      	b.n	8005194 <HAL_RCC_OscConfig+0x378>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b05      	cmp	r3, #5
 8005150:	d110      	bne.n	8005174 <HAL_RCC_OscConfig+0x358>
 8005152:	4b60      	ldr	r3, [pc, #384]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 8005154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005158:	4a5e      	ldr	r2, [pc, #376]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 800515a:	f043 0304 	orr.w	r3, r3, #4
 800515e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005162:	4b5c      	ldr	r3, [pc, #368]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005168:	4a5a      	ldr	r2, [pc, #360]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005172:	e00f      	b.n	8005194 <HAL_RCC_OscConfig+0x378>
 8005174:	4b57      	ldr	r3, [pc, #348]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 8005176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517a:	4a56      	ldr	r2, [pc, #344]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005184:	4b53      	ldr	r3, [pc, #332]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518a:	4a52      	ldr	r2, [pc, #328]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 800518c:	f023 0304 	bic.w	r3, r3, #4
 8005190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d016      	beq.n	80051ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519c:	f7fd f9ee 	bl	800257c <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051a2:	e00a      	b.n	80051ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a4:	f7fd f9ea 	bl	800257c <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e140      	b.n	800543c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ba:	4b46      	ldr	r3, [pc, #280]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 80051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0ed      	beq.n	80051a4 <HAL_RCC_OscConfig+0x388>
 80051c8:	e015      	b.n	80051f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ca:	f7fd f9d7 	bl	800257c <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051d0:	e00a      	b.n	80051e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051d2:	f7fd f9d3 	bl	800257c <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e129      	b.n	800543c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051e8:	4b3a      	ldr	r3, [pc, #232]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1ed      	bne.n	80051d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051f6:	7ffb      	ldrb	r3, [r7, #31]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d105      	bne.n	8005208 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051fc:	4b35      	ldr	r3, [pc, #212]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 80051fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005200:	4a34      	ldr	r2, [pc, #208]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 8005202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005206:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b00      	cmp	r3, #0
 8005212:	d03c      	beq.n	800528e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01c      	beq.n	8005256 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800521c:	4b2d      	ldr	r3, [pc, #180]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 800521e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005222:	4a2c      	ldr	r2, [pc, #176]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 8005224:	f043 0301 	orr.w	r3, r3, #1
 8005228:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522c:	f7fd f9a6 	bl	800257c <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005234:	f7fd f9a2 	bl	800257c <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e0fa      	b.n	800543c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005246:	4b23      	ldr	r3, [pc, #140]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 8005248:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0ef      	beq.n	8005234 <HAL_RCC_OscConfig+0x418>
 8005254:	e01b      	b.n	800528e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005256:	4b1f      	ldr	r3, [pc, #124]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 8005258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800525c:	4a1d      	ldr	r2, [pc, #116]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005266:	f7fd f989 	bl	800257c <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800526e:	f7fd f985 	bl	800257c <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e0dd      	b.n	800543c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005280:	4b14      	ldr	r3, [pc, #80]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 8005282:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1ef      	bne.n	800526e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 80d1 	beq.w	800543a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005298:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 030c 	and.w	r3, r3, #12
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	f000 808b 	beq.w	80053bc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d15e      	bne.n	800536c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ae:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <HAL_RCC_OscConfig+0x4b8>)
 80052b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ba:	f7fd f95f 	bl	800257c <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052c0:	e00c      	b.n	80052dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c2:	f7fd f95b 	bl	800257c <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d905      	bls.n	80052dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e0b3      	b.n	800543c <HAL_RCC_OscConfig+0x620>
 80052d4:	40021000 	.word	0x40021000
 80052d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052dc:	4b59      	ldr	r3, [pc, #356]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1ec      	bne.n	80052c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052e8:	4b56      	ldr	r3, [pc, #344]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	4b56      	ldr	r3, [pc, #344]	; (8005448 <HAL_RCC_OscConfig+0x62c>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6a11      	ldr	r1, [r2, #32]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052f8:	3a01      	subs	r2, #1
 80052fa:	0112      	lsls	r2, r2, #4
 80052fc:	4311      	orrs	r1, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005302:	0212      	lsls	r2, r2, #8
 8005304:	4311      	orrs	r1, r2
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800530a:	0852      	lsrs	r2, r2, #1
 800530c:	3a01      	subs	r2, #1
 800530e:	0552      	lsls	r2, r2, #21
 8005310:	4311      	orrs	r1, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005316:	0852      	lsrs	r2, r2, #1
 8005318:	3a01      	subs	r2, #1
 800531a:	0652      	lsls	r2, r2, #25
 800531c:	4311      	orrs	r1, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005322:	06d2      	lsls	r2, r2, #27
 8005324:	430a      	orrs	r2, r1
 8005326:	4947      	ldr	r1, [pc, #284]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 8005328:	4313      	orrs	r3, r2
 800532a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800532c:	4b45      	ldr	r3, [pc, #276]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a44      	ldr	r2, [pc, #272]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 8005332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005336:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005338:	4b42      	ldr	r3, [pc, #264]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	4a41      	ldr	r2, [pc, #260]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 800533e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005342:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005344:	f7fd f91a 	bl	800257c <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800534c:	f7fd f916 	bl	800257c <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e06e      	b.n	800543c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800535e:	4b39      	ldr	r3, [pc, #228]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0x530>
 800536a:	e066      	b.n	800543a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536c:	4b35      	ldr	r3, [pc, #212]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a34      	ldr	r2, [pc, #208]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 8005372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005376:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005378:	4b32      	ldr	r3, [pc, #200]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4a31      	ldr	r2, [pc, #196]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005384:	4b2f      	ldr	r3, [pc, #188]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	4a2e      	ldr	r2, [pc, #184]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 800538a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800538e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005392:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005394:	f7fd f8f2 	bl	800257c <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539c:	f7fd f8ee 	bl	800257c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e046      	b.n	800543c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ae:	4b25      	ldr	r3, [pc, #148]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f0      	bne.n	800539c <HAL_RCC_OscConfig+0x580>
 80053ba:	e03e      	b.n	800543a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e039      	b.n	800543c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80053c8:	4b1e      	ldr	r3, [pc, #120]	; (8005444 <HAL_RCC_OscConfig+0x628>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f003 0203 	and.w	r2, r3, #3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d12c      	bne.n	8005436 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	3b01      	subs	r3, #1
 80053e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d123      	bne.n	8005436 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d11b      	bne.n	8005436 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005408:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800540a:	429a      	cmp	r2, r3
 800540c:	d113      	bne.n	8005436 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	085b      	lsrs	r3, r3, #1
 800541a:	3b01      	subs	r3, #1
 800541c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800541e:	429a      	cmp	r2, r3
 8005420:	d109      	bne.n	8005436 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542c:	085b      	lsrs	r3, r3, #1
 800542e:	3b01      	subs	r3, #1
 8005430:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005432:	429a      	cmp	r2, r3
 8005434:	d001      	beq.n	800543a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40021000 	.word	0x40021000
 8005448:	019f800c 	.word	0x019f800c

0800544c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e11e      	b.n	80056a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005464:	4b91      	ldr	r3, [pc, #580]	; (80056ac <HAL_RCC_ClockConfig+0x260>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d910      	bls.n	8005494 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005472:	4b8e      	ldr	r3, [pc, #568]	; (80056ac <HAL_RCC_ClockConfig+0x260>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f023 020f 	bic.w	r2, r3, #15
 800547a:	498c      	ldr	r1, [pc, #560]	; (80056ac <HAL_RCC_ClockConfig+0x260>)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	4313      	orrs	r3, r2
 8005480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005482:	4b8a      	ldr	r3, [pc, #552]	; (80056ac <HAL_RCC_ClockConfig+0x260>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d001      	beq.n	8005494 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e106      	b.n	80056a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d073      	beq.n	8005588 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d129      	bne.n	80054fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054a8:	4b81      	ldr	r3, [pc, #516]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e0f4      	b.n	80056a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80054b8:	f000 f9d0 	bl	800585c <RCC_GetSysClockFreqFromPLLSource>
 80054bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4a7c      	ldr	r2, [pc, #496]	; (80056b4 <HAL_RCC_ClockConfig+0x268>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d93f      	bls.n	8005546 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80054c6:	4b7a      	ldr	r3, [pc, #488]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d033      	beq.n	8005546 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d12f      	bne.n	8005546 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054e6:	4b72      	ldr	r3, [pc, #456]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ee:	4a70      	ldr	r2, [pc, #448]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 80054f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80054f6:	2380      	movs	r3, #128	; 0x80
 80054f8:	617b      	str	r3, [r7, #20]
 80054fa:	e024      	b.n	8005546 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d107      	bne.n	8005514 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005504:	4b6a      	ldr	r3, [pc, #424]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d109      	bne.n	8005524 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0c6      	b.n	80056a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005514:	4b66      	ldr	r3, [pc, #408]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e0be      	b.n	80056a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005524:	f000 f8ce 	bl	80056c4 <HAL_RCC_GetSysClockFreq>
 8005528:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4a61      	ldr	r2, [pc, #388]	; (80056b4 <HAL_RCC_ClockConfig+0x268>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d909      	bls.n	8005546 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005532:	4b5f      	ldr	r3, [pc, #380]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800553a:	4a5d      	ldr	r2, [pc, #372]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 800553c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005540:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005542:	2380      	movs	r3, #128	; 0x80
 8005544:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005546:	4b5a      	ldr	r3, [pc, #360]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f023 0203 	bic.w	r2, r3, #3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4957      	ldr	r1, [pc, #348]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 8005554:	4313      	orrs	r3, r2
 8005556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005558:	f7fd f810 	bl	800257c <HAL_GetTick>
 800555c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555e:	e00a      	b.n	8005576 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005560:	f7fd f80c 	bl	800257c <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	; 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e095      	b.n	80056a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005576:	4b4e      	ldr	r3, [pc, #312]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 020c 	and.w	r2, r3, #12
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	429a      	cmp	r2, r3
 8005586:	d1eb      	bne.n	8005560 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d023      	beq.n	80055dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055a0:	4b43      	ldr	r3, [pc, #268]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	4a42      	ldr	r2, [pc, #264]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 80055a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80055b8:	4b3d      	ldr	r3, [pc, #244]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80055c0:	4a3b      	ldr	r2, [pc, #236]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 80055c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055c8:	4b39      	ldr	r3, [pc, #228]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	4936      	ldr	r1, [pc, #216]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	608b      	str	r3, [r1, #8]
 80055da:	e008      	b.n	80055ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2b80      	cmp	r3, #128	; 0x80
 80055e0:	d105      	bne.n	80055ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80055e2:	4b33      	ldr	r3, [pc, #204]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	4a32      	ldr	r2, [pc, #200]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 80055e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055ee:	4b2f      	ldr	r3, [pc, #188]	; (80056ac <HAL_RCC_ClockConfig+0x260>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d21d      	bcs.n	8005638 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fc:	4b2b      	ldr	r3, [pc, #172]	; (80056ac <HAL_RCC_ClockConfig+0x260>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f023 020f 	bic.w	r2, r3, #15
 8005604:	4929      	ldr	r1, [pc, #164]	; (80056ac <HAL_RCC_ClockConfig+0x260>)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	4313      	orrs	r3, r2
 800560a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800560c:	f7fc ffb6 	bl	800257c <HAL_GetTick>
 8005610:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005612:	e00a      	b.n	800562a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005614:	f7fc ffb2 	bl	800257c <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e03b      	b.n	80056a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562a:	4b20      	ldr	r3, [pc, #128]	; (80056ac <HAL_RCC_ClockConfig+0x260>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d1ed      	bne.n	8005614 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d008      	beq.n	8005656 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005644:	4b1a      	ldr	r3, [pc, #104]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4917      	ldr	r1, [pc, #92]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 8005652:	4313      	orrs	r3, r2
 8005654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005662:	4b13      	ldr	r3, [pc, #76]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	490f      	ldr	r1, [pc, #60]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 8005672:	4313      	orrs	r3, r2
 8005674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005676:	f000 f825 	bl	80056c4 <HAL_RCC_GetSysClockFreq>
 800567a:	4602      	mov	r2, r0
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <HAL_RCC_ClockConfig+0x264>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	490c      	ldr	r1, [pc, #48]	; (80056b8 <HAL_RCC_ClockConfig+0x26c>)
 8005688:	5ccb      	ldrb	r3, [r1, r3]
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	fa22 f303 	lsr.w	r3, r2, r3
 8005692:	4a0a      	ldr	r2, [pc, #40]	; (80056bc <HAL_RCC_ClockConfig+0x270>)
 8005694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005696:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <HAL_RCC_ClockConfig+0x274>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f7fc fd68 	bl	8002170 <HAL_InitTick>
 80056a0:	4603      	mov	r3, r0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40022000 	.word	0x40022000
 80056b0:	40021000 	.word	0x40021000
 80056b4:	04c4b400 	.word	0x04c4b400
 80056b8:	0800cdd4 	.word	0x0800cdd4
 80056bc:	20000150 	.word	0x20000150
 80056c0:	20000154 	.word	0x20000154

080056c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80056ca:	4b2c      	ldr	r3, [pc, #176]	; (800577c <HAL_RCC_GetSysClockFreq+0xb8>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 030c 	and.w	r3, r3, #12
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d102      	bne.n	80056dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80056d6:	4b2a      	ldr	r3, [pc, #168]	; (8005780 <HAL_RCC_GetSysClockFreq+0xbc>)
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	e047      	b.n	800576c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80056dc:	4b27      	ldr	r3, [pc, #156]	; (800577c <HAL_RCC_GetSysClockFreq+0xb8>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 030c 	and.w	r3, r3, #12
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d102      	bne.n	80056ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056e8:	4b26      	ldr	r3, [pc, #152]	; (8005784 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	e03e      	b.n	800576c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80056ee:	4b23      	ldr	r3, [pc, #140]	; (800577c <HAL_RCC_GetSysClockFreq+0xb8>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 030c 	and.w	r3, r3, #12
 80056f6:	2b0c      	cmp	r3, #12
 80056f8:	d136      	bne.n	8005768 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056fa:	4b20      	ldr	r3, [pc, #128]	; (800577c <HAL_RCC_GetSysClockFreq+0xb8>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005704:	4b1d      	ldr	r3, [pc, #116]	; (800577c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	091b      	lsrs	r3, r3, #4
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	3301      	adds	r3, #1
 8005710:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d10c      	bne.n	8005732 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005718:	4a1a      	ldr	r2, [pc, #104]	; (8005784 <HAL_RCC_GetSysClockFreq+0xc0>)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	4a16      	ldr	r2, [pc, #88]	; (800577c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005722:	68d2      	ldr	r2, [r2, #12]
 8005724:	0a12      	lsrs	r2, r2, #8
 8005726:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800572a:	fb02 f303 	mul.w	r3, r2, r3
 800572e:	617b      	str	r3, [r7, #20]
      break;
 8005730:	e00c      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005732:	4a13      	ldr	r2, [pc, #76]	; (8005780 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	fbb2 f3f3 	udiv	r3, r2, r3
 800573a:	4a10      	ldr	r2, [pc, #64]	; (800577c <HAL_RCC_GetSysClockFreq+0xb8>)
 800573c:	68d2      	ldr	r2, [r2, #12]
 800573e:	0a12      	lsrs	r2, r2, #8
 8005740:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005744:	fb02 f303 	mul.w	r3, r2, r3
 8005748:	617b      	str	r3, [r7, #20]
      break;
 800574a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800574c:	4b0b      	ldr	r3, [pc, #44]	; (800577c <HAL_RCC_GetSysClockFreq+0xb8>)
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	0e5b      	lsrs	r3, r3, #25
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	3301      	adds	r3, #1
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	fbb2 f3f3 	udiv	r3, r2, r3
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	e001      	b.n	800576c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800576c:	693b      	ldr	r3, [r7, #16]
}
 800576e:	4618      	mov	r0, r3
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40021000 	.word	0x40021000
 8005780:	00f42400 	.word	0x00f42400
 8005784:	016e3600 	.word	0x016e3600

08005788 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800578c:	4b03      	ldr	r3, [pc, #12]	; (800579c <HAL_RCC_GetHCLKFreq+0x14>)
 800578e:	681b      	ldr	r3, [r3, #0]
}
 8005790:	4618      	mov	r0, r3
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20000150 	.word	0x20000150

080057a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057a4:	f7ff fff0 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057a8:	4602      	mov	r2, r0
 80057aa:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	0a1b      	lsrs	r3, r3, #8
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	4904      	ldr	r1, [pc, #16]	; (80057c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057b6:	5ccb      	ldrb	r3, [r1, r3]
 80057b8:	f003 031f 	and.w	r3, r3, #31
 80057bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40021000 	.word	0x40021000
 80057c8:	0800cde4 	.word	0x0800cde4

080057cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057d0:	f7ff ffda 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057d4:	4602      	mov	r2, r0
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	0adb      	lsrs	r3, r3, #11
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	4904      	ldr	r1, [pc, #16]	; (80057f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057e2:	5ccb      	ldrb	r3, [r1, r3]
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40021000 	.word	0x40021000
 80057f4:	0800cde4 	.word	0x0800cde4

080057f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	220f      	movs	r2, #15
 8005806:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005808:	4b12      	ldr	r3, [pc, #72]	; (8005854 <HAL_RCC_GetClockConfig+0x5c>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 0203 	and.w	r2, r3, #3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <HAL_RCC_GetClockConfig+0x5c>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <HAL_RCC_GetClockConfig+0x5c>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800582c:	4b09      	ldr	r3, [pc, #36]	; (8005854 <HAL_RCC_GetClockConfig+0x5c>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	08db      	lsrs	r3, r3, #3
 8005832:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800583a:	4b07      	ldr	r3, [pc, #28]	; (8005858 <HAL_RCC_GetClockConfig+0x60>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 020f 	and.w	r2, r3, #15
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	601a      	str	r2, [r3, #0]
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40021000 	.word	0x40021000
 8005858:	40022000 	.word	0x40022000

0800585c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005862:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800586c:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	091b      	lsrs	r3, r3, #4
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	3301      	adds	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b03      	cmp	r3, #3
 800587e:	d10c      	bne.n	800589a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005880:	4a17      	ldr	r2, [pc, #92]	; (80058e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	fbb2 f3f3 	udiv	r3, r2, r3
 8005888:	4a14      	ldr	r2, [pc, #80]	; (80058dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800588a:	68d2      	ldr	r2, [r2, #12]
 800588c:	0a12      	lsrs	r2, r2, #8
 800588e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005892:	fb02 f303 	mul.w	r3, r2, r3
 8005896:	617b      	str	r3, [r7, #20]
    break;
 8005898:	e00c      	b.n	80058b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800589a:	4a12      	ldr	r2, [pc, #72]	; (80058e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a2:	4a0e      	ldr	r2, [pc, #56]	; (80058dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058a4:	68d2      	ldr	r2, [r2, #12]
 80058a6:	0a12      	lsrs	r2, r2, #8
 80058a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058ac:	fb02 f303 	mul.w	r3, r2, r3
 80058b0:	617b      	str	r3, [r7, #20]
    break;
 80058b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058b4:	4b09      	ldr	r3, [pc, #36]	; (80058dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	0e5b      	lsrs	r3, r3, #25
 80058ba:	f003 0303 	and.w	r3, r3, #3
 80058be:	3301      	adds	r3, #1
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80058ce:	687b      	ldr	r3, [r7, #4]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	371c      	adds	r7, #28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	40021000 	.word	0x40021000
 80058e0:	016e3600 	.word	0x016e3600
 80058e4:	00f42400 	.word	0x00f42400

080058e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058f0:	2300      	movs	r3, #0
 80058f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058f4:	2300      	movs	r3, #0
 80058f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8098 	beq.w	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005906:	2300      	movs	r3, #0
 8005908:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800590a:	4b43      	ldr	r3, [pc, #268]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800590c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10d      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005916:	4b40      	ldr	r3, [pc, #256]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591a:	4a3f      	ldr	r2, [pc, #252]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800591c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005920:	6593      	str	r3, [r2, #88]	; 0x58
 8005922:	4b3d      	ldr	r3, [pc, #244]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592a:	60bb      	str	r3, [r7, #8]
 800592c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800592e:	2301      	movs	r3, #1
 8005930:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005932:	4b3a      	ldr	r3, [pc, #232]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a39      	ldr	r2, [pc, #228]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800593c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800593e:	f7fc fe1d 	bl	800257c <HAL_GetTick>
 8005942:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005944:	e009      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005946:	f7fc fe19 	bl	800257c <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d902      	bls.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	74fb      	strb	r3, [r7, #19]
        break;
 8005958:	e005      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800595a:	4b30      	ldr	r3, [pc, #192]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0ef      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005966:	7cfb      	ldrb	r3, [r7, #19]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d159      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800596c:	4b2a      	ldr	r3, [pc, #168]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800596e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005976:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d01e      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	429a      	cmp	r2, r3
 8005986:	d019      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005988:	4b23      	ldr	r3, [pc, #140]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005992:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005994:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	4a1f      	ldr	r2, [pc, #124]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800599c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059a4:	4b1c      	ldr	r3, [pc, #112]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059aa:	4a1b      	ldr	r2, [pc, #108]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059b4:	4a18      	ldr	r2, [pc, #96]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d016      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c6:	f7fc fdd9 	bl	800257c <HAL_GetTick>
 80059ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059cc:	e00b      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ce:	f7fc fdd5 	bl	800257c <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059dc:	4293      	cmp	r3, r2
 80059de:	d902      	bls.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	74fb      	strb	r3, [r7, #19]
            break;
 80059e4:	e006      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059e6:	4b0c      	ldr	r3, [pc, #48]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0ec      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80059f4:	7cfb      	ldrb	r3, [r7, #19]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10b      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059fa:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a08:	4903      	ldr	r1, [pc, #12]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a10:	e008      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a12:	7cfb      	ldrb	r3, [r7, #19]
 8005a14:	74bb      	strb	r3, [r7, #18]
 8005a16:	e005      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a20:	7cfb      	ldrb	r3, [r7, #19]
 8005a22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a24:	7c7b      	ldrb	r3, [r7, #17]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d105      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a2a:	4ba6      	ldr	r3, [pc, #664]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2e:	4aa5      	ldr	r2, [pc, #660]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a42:	4ba0      	ldr	r3, [pc, #640]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a48:	f023 0203 	bic.w	r2, r3, #3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	499c      	ldr	r1, [pc, #624]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a64:	4b97      	ldr	r3, [pc, #604]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6a:	f023 020c 	bic.w	r2, r3, #12
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	4994      	ldr	r1, [pc, #592]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0304 	and.w	r3, r3, #4
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a86:	4b8f      	ldr	r3, [pc, #572]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	498b      	ldr	r1, [pc, #556]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00a      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005aa8:	4b86      	ldr	r3, [pc, #536]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	4983      	ldr	r1, [pc, #524]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0320 	and.w	r3, r3, #32
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005aca:	4b7e      	ldr	r3, [pc, #504]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	497a      	ldr	r1, [pc, #488]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aec:	4b75      	ldr	r3, [pc, #468]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	4972      	ldr	r1, [pc, #456]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b0e:	4b6d      	ldr	r3, [pc, #436]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	4969      	ldr	r1, [pc, #420]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00a      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b30:	4b64      	ldr	r3, [pc, #400]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	4961      	ldr	r1, [pc, #388]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b52:	4b5c      	ldr	r3, [pc, #368]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	4958      	ldr	r1, [pc, #352]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d015      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b74:	4b53      	ldr	r3, [pc, #332]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	4950      	ldr	r1, [pc, #320]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b92:	d105      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b94:	4b4b      	ldr	r3, [pc, #300]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	4a4a      	ldr	r2, [pc, #296]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d015      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005bac:	4b45      	ldr	r3, [pc, #276]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	4942      	ldr	r1, [pc, #264]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bca:	d105      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bcc:	4b3d      	ldr	r3, [pc, #244]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	4a3c      	ldr	r2, [pc, #240]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bd6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d015      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005be4:	4b37      	ldr	r3, [pc, #220]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf2:	4934      	ldr	r1, [pc, #208]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c02:	d105      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c04:	4b2f      	ldr	r3, [pc, #188]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	4a2e      	ldr	r2, [pc, #184]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d015      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c1c:	4b29      	ldr	r3, [pc, #164]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2a:	4926      	ldr	r1, [pc, #152]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c3a:	d105      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c3c:	4b21      	ldr	r3, [pc, #132]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4a20      	ldr	r2, [pc, #128]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d015      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c54:	4b1b      	ldr	r3, [pc, #108]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	4918      	ldr	r1, [pc, #96]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c72:	d105      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c74:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	4a12      	ldr	r2, [pc, #72]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d015      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c8c:	4b0d      	ldr	r3, [pc, #52]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9a:	490a      	ldr	r1, [pc, #40]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005caa:	d105      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	4a04      	ldr	r2, [pc, #16]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005cb8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40021000 	.word	0x40021000

08005cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e049      	b.n	8005d6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fc f922 	bl	8001f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3304      	adds	r3, #4
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f000 ffda 	bl	8006cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d001      	beq.n	8005d90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e042      	b.n	8005e16 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a21      	ldr	r2, [pc, #132]	; (8005e24 <HAL_TIM_Base_Start+0xac>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d018      	beq.n	8005dd4 <HAL_TIM_Base_Start+0x5c>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005daa:	d013      	beq.n	8005dd4 <HAL_TIM_Base_Start+0x5c>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1d      	ldr	r2, [pc, #116]	; (8005e28 <HAL_TIM_Base_Start+0xb0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00e      	beq.n	8005dd4 <HAL_TIM_Base_Start+0x5c>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1c      	ldr	r2, [pc, #112]	; (8005e2c <HAL_TIM_Base_Start+0xb4>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d009      	beq.n	8005dd4 <HAL_TIM_Base_Start+0x5c>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1a      	ldr	r2, [pc, #104]	; (8005e30 <HAL_TIM_Base_Start+0xb8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d004      	beq.n	8005dd4 <HAL_TIM_Base_Start+0x5c>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a19      	ldr	r2, [pc, #100]	; (8005e34 <HAL_TIM_Base_Start+0xbc>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d115      	bne.n	8005e00 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	4b17      	ldr	r3, [pc, #92]	; (8005e38 <HAL_TIM_Base_Start+0xc0>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b06      	cmp	r3, #6
 8005de4:	d015      	beq.n	8005e12 <HAL_TIM_Base_Start+0x9a>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dec:	d011      	beq.n	8005e12 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0201 	orr.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfe:	e008      	b.n	8005e12 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	e000      	b.n	8005e14 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40000400 	.word	0x40000400
 8005e2c:	40000800 	.word	0x40000800
 8005e30:	40013400 	.word	0x40013400
 8005e34:	40014000 	.word	0x40014000
 8005e38:	00010007 	.word	0x00010007

08005e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d001      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e04a      	b.n	8005eea <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a21      	ldr	r2, [pc, #132]	; (8005ef8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d018      	beq.n	8005ea8 <HAL_TIM_Base_Start_IT+0x6c>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7e:	d013      	beq.n	8005ea8 <HAL_TIM_Base_Start_IT+0x6c>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a1d      	ldr	r2, [pc, #116]	; (8005efc <HAL_TIM_Base_Start_IT+0xc0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00e      	beq.n	8005ea8 <HAL_TIM_Base_Start_IT+0x6c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1c      	ldr	r2, [pc, #112]	; (8005f00 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d009      	beq.n	8005ea8 <HAL_TIM_Base_Start_IT+0x6c>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1a      	ldr	r2, [pc, #104]	; (8005f04 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d004      	beq.n	8005ea8 <HAL_TIM_Base_Start_IT+0x6c>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a19      	ldr	r2, [pc, #100]	; (8005f08 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d115      	bne.n	8005ed4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	4b17      	ldr	r3, [pc, #92]	; (8005f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b06      	cmp	r3, #6
 8005eb8:	d015      	beq.n	8005ee6 <HAL_TIM_Base_Start_IT+0xaa>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec0:	d011      	beq.n	8005ee6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 0201 	orr.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed2:	e008      	b.n	8005ee6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	e000      	b.n	8005ee8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	40012c00 	.word	0x40012c00
 8005efc:	40000400 	.word	0x40000400
 8005f00:	40000800 	.word	0x40000800
 8005f04:	40013400 	.word	0x40013400
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	00010007 	.word	0x00010007

08005f10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e049      	b.n	8005fb6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fb ffde 	bl	8001ef8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f000 feb6 	bl	8006cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <HAL_TIM_PWM_Start+0x24>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	bf14      	ite	ne
 8005fdc:	2301      	movne	r3, #1
 8005fde:	2300      	moveq	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	e03c      	b.n	800605e <HAL_TIM_PWM_Start+0x9e>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d109      	bne.n	8005ffe <HAL_TIM_PWM_Start+0x3e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	bf14      	ite	ne
 8005ff6:	2301      	movne	r3, #1
 8005ff8:	2300      	moveq	r3, #0
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	e02f      	b.n	800605e <HAL_TIM_PWM_Start+0x9e>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b08      	cmp	r3, #8
 8006002:	d109      	bne.n	8006018 <HAL_TIM_PWM_Start+0x58>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b01      	cmp	r3, #1
 800600e:	bf14      	ite	ne
 8006010:	2301      	movne	r3, #1
 8006012:	2300      	moveq	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	e022      	b.n	800605e <HAL_TIM_PWM_Start+0x9e>
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2b0c      	cmp	r3, #12
 800601c:	d109      	bne.n	8006032 <HAL_TIM_PWM_Start+0x72>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b01      	cmp	r3, #1
 8006028:	bf14      	ite	ne
 800602a:	2301      	movne	r3, #1
 800602c:	2300      	moveq	r3, #0
 800602e:	b2db      	uxtb	r3, r3
 8006030:	e015      	b.n	800605e <HAL_TIM_PWM_Start+0x9e>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b10      	cmp	r3, #16
 8006036:	d109      	bne.n	800604c <HAL_TIM_PWM_Start+0x8c>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b01      	cmp	r3, #1
 8006042:	bf14      	ite	ne
 8006044:	2301      	movne	r3, #1
 8006046:	2300      	moveq	r3, #0
 8006048:	b2db      	uxtb	r3, r3
 800604a:	e008      	b.n	800605e <HAL_TIM_PWM_Start+0x9e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	bf14      	ite	ne
 8006058:	2301      	movne	r3, #1
 800605a:	2300      	moveq	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e097      	b.n	8006196 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <HAL_TIM_PWM_Start+0xb6>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006074:	e023      	b.n	80060be <HAL_TIM_PWM_Start+0xfe>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b04      	cmp	r3, #4
 800607a:	d104      	bne.n	8006086 <HAL_TIM_PWM_Start+0xc6>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006084:	e01b      	b.n	80060be <HAL_TIM_PWM_Start+0xfe>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b08      	cmp	r3, #8
 800608a:	d104      	bne.n	8006096 <HAL_TIM_PWM_Start+0xd6>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006094:	e013      	b.n	80060be <HAL_TIM_PWM_Start+0xfe>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b0c      	cmp	r3, #12
 800609a:	d104      	bne.n	80060a6 <HAL_TIM_PWM_Start+0xe6>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060a4:	e00b      	b.n	80060be <HAL_TIM_PWM_Start+0xfe>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d104      	bne.n	80060b6 <HAL_TIM_PWM_Start+0xf6>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060b4:	e003      	b.n	80060be <HAL_TIM_PWM_Start+0xfe>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2201      	movs	r2, #1
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 fa1c 	bl	8007504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a33      	ldr	r2, [pc, #204]	; (80061a0 <HAL_TIM_PWM_Start+0x1e0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <HAL_TIM_PWM_Start+0x13e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a32      	ldr	r2, [pc, #200]	; (80061a4 <HAL_TIM_PWM_Start+0x1e4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00e      	beq.n	80060fe <HAL_TIM_PWM_Start+0x13e>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a30      	ldr	r2, [pc, #192]	; (80061a8 <HAL_TIM_PWM_Start+0x1e8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d009      	beq.n	80060fe <HAL_TIM_PWM_Start+0x13e>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a2f      	ldr	r2, [pc, #188]	; (80061ac <HAL_TIM_PWM_Start+0x1ec>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_TIM_PWM_Start+0x13e>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a2d      	ldr	r2, [pc, #180]	; (80061b0 <HAL_TIM_PWM_Start+0x1f0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d101      	bne.n	8006102 <HAL_TIM_PWM_Start+0x142>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <HAL_TIM_PWM_Start+0x144>
 8006102:	2300      	movs	r3, #0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006116:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a20      	ldr	r2, [pc, #128]	; (80061a0 <HAL_TIM_PWM_Start+0x1e0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d018      	beq.n	8006154 <HAL_TIM_PWM_Start+0x194>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612a:	d013      	beq.n	8006154 <HAL_TIM_PWM_Start+0x194>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a20      	ldr	r2, [pc, #128]	; (80061b4 <HAL_TIM_PWM_Start+0x1f4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00e      	beq.n	8006154 <HAL_TIM_PWM_Start+0x194>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1f      	ldr	r2, [pc, #124]	; (80061b8 <HAL_TIM_PWM_Start+0x1f8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d009      	beq.n	8006154 <HAL_TIM_PWM_Start+0x194>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a17      	ldr	r2, [pc, #92]	; (80061a4 <HAL_TIM_PWM_Start+0x1e4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d004      	beq.n	8006154 <HAL_TIM_PWM_Start+0x194>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a16      	ldr	r2, [pc, #88]	; (80061a8 <HAL_TIM_PWM_Start+0x1e8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d115      	bne.n	8006180 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	4b18      	ldr	r3, [pc, #96]	; (80061bc <HAL_TIM_PWM_Start+0x1fc>)
 800615c:	4013      	ands	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b06      	cmp	r3, #6
 8006164:	d015      	beq.n	8006192 <HAL_TIM_PWM_Start+0x1d2>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800616c:	d011      	beq.n	8006192 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f042 0201 	orr.w	r2, r2, #1
 800617c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617e:	e008      	b.n	8006192 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	e000      	b.n	8006194 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006192:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40012c00 	.word	0x40012c00
 80061a4:	40013400 	.word	0x40013400
 80061a8:	40014000 	.word	0x40014000
 80061ac:	40014400 	.word	0x40014400
 80061b0:	40014800 	.word	0x40014800
 80061b4:	40000400 	.word	0x40000400
 80061b8:	40000800 	.word	0x40000800
 80061bc:	00010007 	.word	0x00010007

080061c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2200      	movs	r2, #0
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f001 f996 	bl	8007504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a3e      	ldr	r2, [pc, #248]	; (80062d8 <HAL_TIM_PWM_Stop+0x118>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <HAL_TIM_PWM_Stop+0x4a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a3d      	ldr	r2, [pc, #244]	; (80062dc <HAL_TIM_PWM_Stop+0x11c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00e      	beq.n	800620a <HAL_TIM_PWM_Stop+0x4a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a3b      	ldr	r2, [pc, #236]	; (80062e0 <HAL_TIM_PWM_Stop+0x120>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d009      	beq.n	800620a <HAL_TIM_PWM_Stop+0x4a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a3a      	ldr	r2, [pc, #232]	; (80062e4 <HAL_TIM_PWM_Stop+0x124>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d004      	beq.n	800620a <HAL_TIM_PWM_Stop+0x4a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a38      	ldr	r2, [pc, #224]	; (80062e8 <HAL_TIM_PWM_Stop+0x128>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d101      	bne.n	800620e <HAL_TIM_PWM_Stop+0x4e>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <HAL_TIM_PWM_Stop+0x50>
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d017      	beq.n	8006244 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6a1a      	ldr	r2, [r3, #32]
 800621a:	f241 1311 	movw	r3, #4369	; 0x1111
 800621e:	4013      	ands	r3, r2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10f      	bne.n	8006244 <HAL_TIM_PWM_Stop+0x84>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6a1a      	ldr	r2, [r3, #32]
 800622a:	f244 4344 	movw	r3, #17476	; 0x4444
 800622e:	4013      	ands	r3, r2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d107      	bne.n	8006244 <HAL_TIM_PWM_Stop+0x84>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006242:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6a1a      	ldr	r2, [r3, #32]
 800624a:	f241 1311 	movw	r3, #4369	; 0x1111
 800624e:	4013      	ands	r3, r2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10f      	bne.n	8006274 <HAL_TIM_PWM_Stop+0xb4>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6a1a      	ldr	r2, [r3, #32]
 800625a:	f244 4344 	movw	r3, #17476	; 0x4444
 800625e:	4013      	ands	r3, r2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d107      	bne.n	8006274 <HAL_TIM_PWM_Stop+0xb4>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0201 	bic.w	r2, r2, #1
 8006272:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <HAL_TIM_PWM_Stop+0xc4>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006282:	e023      	b.n	80062cc <HAL_TIM_PWM_Stop+0x10c>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b04      	cmp	r3, #4
 8006288:	d104      	bne.n	8006294 <HAL_TIM_PWM_Stop+0xd4>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006292:	e01b      	b.n	80062cc <HAL_TIM_PWM_Stop+0x10c>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2b08      	cmp	r3, #8
 8006298:	d104      	bne.n	80062a4 <HAL_TIM_PWM_Stop+0xe4>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062a2:	e013      	b.n	80062cc <HAL_TIM_PWM_Stop+0x10c>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b0c      	cmp	r3, #12
 80062a8:	d104      	bne.n	80062b4 <HAL_TIM_PWM_Stop+0xf4>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062b2:	e00b      	b.n	80062cc <HAL_TIM_PWM_Stop+0x10c>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b10      	cmp	r3, #16
 80062b8:	d104      	bne.n	80062c4 <HAL_TIM_PWM_Stop+0x104>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062c2:	e003      	b.n	80062cc <HAL_TIM_PWM_Stop+0x10c>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40012c00 	.word	0x40012c00
 80062dc:	40013400 	.word	0x40013400
 80062e0:	40014000 	.word	0x40014000
 80062e4:	40014400 	.word	0x40014400
 80062e8:	40014800 	.word	0x40014800

080062ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e097      	b.n	8006430 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d106      	bne.n	800631a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7fb fe47 	bl	8001fa8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2202      	movs	r2, #2
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6812      	ldr	r2, [r2, #0]
 800632c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006330:	f023 0307 	bic.w	r3, r3, #7
 8006334:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3304      	adds	r3, #4
 800633e:	4619      	mov	r1, r3
 8006340:	4610      	mov	r0, r2
 8006342:	f000 fcbd 	bl	8006cc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800636e:	f023 0303 	bic.w	r3, r3, #3
 8006372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	4313      	orrs	r3, r2
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800638c:	f023 030c 	bic.w	r3, r3, #12
 8006390:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006398:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800639c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	4313      	orrs	r3, r2
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	011a      	lsls	r2, r3, #4
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	031b      	lsls	r3, r3, #12
 80063bc:	4313      	orrs	r3, r2
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80063ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80063d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	011b      	lsls	r3, r3, #4
 80063de:	4313      	orrs	r3, r2
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006448:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006450:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006458:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006460:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d110      	bne.n	800648a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d102      	bne.n	8006474 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800646e:	7b7b      	ldrb	r3, [r7, #13]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d001      	beq.n	8006478 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e069      	b.n	800654c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006488:	e031      	b.n	80064ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b04      	cmp	r3, #4
 800648e:	d110      	bne.n	80064b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d102      	bne.n	800649c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006496:	7b3b      	ldrb	r3, [r7, #12]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d001      	beq.n	80064a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e055      	b.n	800654c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064b0:	e01d      	b.n	80064ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d108      	bne.n	80064ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064b8:	7bbb      	ldrb	r3, [r7, #14]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d105      	bne.n	80064ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064be:	7b7b      	ldrb	r3, [r7, #13]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d102      	bne.n	80064ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064c4:	7b3b      	ldrb	r3, [r7, #12]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d001      	beq.n	80064ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e03e      	b.n	800654c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2202      	movs	r2, #2
 80064d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2202      	movs	r2, #2
 80064da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2202      	movs	r2, #2
 80064e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2202      	movs	r2, #2
 80064ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <HAL_TIM_Encoder_Start+0xc4>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d008      	beq.n	800650c <HAL_TIM_Encoder_Start+0xd4>
 80064fa:	e00f      	b.n	800651c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2201      	movs	r2, #1
 8006502:	2100      	movs	r1, #0
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fffd 	bl	8007504 <TIM_CCxChannelCmd>
      break;
 800650a:	e016      	b.n	800653a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2201      	movs	r2, #1
 8006512:	2104      	movs	r1, #4
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fff5 	bl	8007504 <TIM_CCxChannelCmd>
      break;
 800651a:	e00e      	b.n	800653a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2201      	movs	r2, #1
 8006522:	2100      	movs	r1, #0
 8006524:	4618      	mov	r0, r3
 8006526:	f000 ffed 	bl	8007504 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2201      	movs	r2, #1
 8006530:	2104      	movs	r1, #4
 8006532:	4618      	mov	r0, r3
 8006534:	f000 ffe6 	bl	8007504 <TIM_CCxChannelCmd>
      break;
 8006538:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0201 	orr.w	r2, r2, #1
 8006548:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b02      	cmp	r3, #2
 8006568:	d122      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b02      	cmp	r3, #2
 8006576:	d11b      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f06f 0202 	mvn.w	r2, #2
 8006580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fb74 	bl	8006c84 <HAL_TIM_IC_CaptureCallback>
 800659c:	e005      	b.n	80065aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fb66 	bl	8006c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fb77 	bl	8006c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d122      	bne.n	8006604 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d11b      	bne.n	8006604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0204 	mvn.w	r2, #4
 80065d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fb4a 	bl	8006c84 <HAL_TIM_IC_CaptureCallback>
 80065f0:	e005      	b.n	80065fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fb3c 	bl	8006c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fb4d 	bl	8006c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b08      	cmp	r3, #8
 8006610:	d122      	bne.n	8006658 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b08      	cmp	r3, #8
 800661e:	d11b      	bne.n	8006658 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0208 	mvn.w	r2, #8
 8006628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2204      	movs	r2, #4
 800662e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fb20 	bl	8006c84 <HAL_TIM_IC_CaptureCallback>
 8006644:	e005      	b.n	8006652 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fb12 	bl	8006c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fb23 	bl	8006c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 0310 	and.w	r3, r3, #16
 8006662:	2b10      	cmp	r3, #16
 8006664:	d122      	bne.n	80066ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	2b10      	cmp	r3, #16
 8006672:	d11b      	bne.n	80066ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0210 	mvn.w	r2, #16
 800667c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2208      	movs	r2, #8
 8006682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 faf6 	bl	8006c84 <HAL_TIM_IC_CaptureCallback>
 8006698:	e005      	b.n	80066a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fae8 	bl	8006c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 faf9 	bl	8006c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d10e      	bne.n	80066d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d107      	bne.n	80066d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f06f 0201 	mvn.w	r2, #1
 80066d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7fb fb4a 	bl	8001d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e2:	2b80      	cmp	r3, #128	; 0x80
 80066e4:	d10e      	bne.n	8006704 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f0:	2b80      	cmp	r3, #128	; 0x80
 80066f2:	d107      	bne.n	8006704 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f001 f964 	bl	80079cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800670e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006712:	d10e      	bne.n	8006732 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671e:	2b80      	cmp	r3, #128	; 0x80
 8006720:	d107      	bne.n	8006732 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800672a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 f957 	bl	80079e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d10e      	bne.n	800675e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674a:	2b40      	cmp	r3, #64	; 0x40
 800674c:	d107      	bne.n	800675e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 faa7 	bl	8006cac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b20      	cmp	r3, #32
 800676a:	d10e      	bne.n	800678a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b20      	cmp	r3, #32
 8006778:	d107      	bne.n	800678a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f06f 0220 	mvn.w	r2, #32
 8006782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 f917 	bl	80079b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006798:	d10f      	bne.n	80067ba <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067a8:	d107      	bne.n	80067ba <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80067b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 f91d 	bl	80079f4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067c8:	d10f      	bne.n	80067ea <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067d8:	d107      	bne.n	80067ea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80067e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f001 f90f 	bl	8007a08 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067f8:	d10f      	bne.n	800681a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006808:	d107      	bne.n	800681a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f001 f901 	bl	8007a1c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006824:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006828:	d10f      	bne.n	800684a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006838:	d107      	bne.n	800684a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f001 f8f3 	bl	8007a30 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800684a:	bf00      	nop
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800686a:	2b01      	cmp	r3, #1
 800686c:	d101      	bne.n	8006872 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800686e:	2302      	movs	r3, #2
 8006870:	e0ff      	b.n	8006a72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b14      	cmp	r3, #20
 800687e:	f200 80f0 	bhi.w	8006a62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006882:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006888:	080068dd 	.word	0x080068dd
 800688c:	08006a63 	.word	0x08006a63
 8006890:	08006a63 	.word	0x08006a63
 8006894:	08006a63 	.word	0x08006a63
 8006898:	0800691d 	.word	0x0800691d
 800689c:	08006a63 	.word	0x08006a63
 80068a0:	08006a63 	.word	0x08006a63
 80068a4:	08006a63 	.word	0x08006a63
 80068a8:	0800695f 	.word	0x0800695f
 80068ac:	08006a63 	.word	0x08006a63
 80068b0:	08006a63 	.word	0x08006a63
 80068b4:	08006a63 	.word	0x08006a63
 80068b8:	0800699f 	.word	0x0800699f
 80068bc:	08006a63 	.word	0x08006a63
 80068c0:	08006a63 	.word	0x08006a63
 80068c4:	08006a63 	.word	0x08006a63
 80068c8:	080069e1 	.word	0x080069e1
 80068cc:	08006a63 	.word	0x08006a63
 80068d0:	08006a63 	.word	0x08006a63
 80068d4:	08006a63 	.word	0x08006a63
 80068d8:	08006a21 	.word	0x08006a21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fa7c 	bl	8006de0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0208 	orr.w	r2, r2, #8
 80068f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699a      	ldr	r2, [r3, #24]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0204 	bic.w	r2, r2, #4
 8006906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6999      	ldr	r1, [r3, #24]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	619a      	str	r2, [r3, #24]
      break;
 800691a:	e0a5      	b.n	8006a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	4618      	mov	r0, r3
 8006924:	f000 faec 	bl	8006f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6999      	ldr	r1, [r3, #24]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	021a      	lsls	r2, r3, #8
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	619a      	str	r2, [r3, #24]
      break;
 800695c:	e084      	b.n	8006a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68b9      	ldr	r1, [r7, #8]
 8006964:	4618      	mov	r0, r3
 8006966:	f000 fb55 	bl	8007014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69da      	ldr	r2, [r3, #28]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f042 0208 	orr.w	r2, r2, #8
 8006978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69da      	ldr	r2, [r3, #28]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0204 	bic.w	r2, r2, #4
 8006988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69d9      	ldr	r1, [r3, #28]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	61da      	str	r2, [r3, #28]
      break;
 800699c:	e064      	b.n	8006a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 fbbd 	bl	8007124 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69da      	ldr	r2, [r3, #28]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69da      	ldr	r2, [r3, #28]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69d9      	ldr	r1, [r3, #28]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	021a      	lsls	r2, r3, #8
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	61da      	str	r2, [r3, #28]
      break;
 80069de:	e043      	b.n	8006a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fc26 	bl	8007238 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0208 	orr.w	r2, r2, #8
 80069fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0204 	bic.w	r2, r2, #4
 8006a0a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	691a      	ldr	r2, [r3, #16]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006a1e:	e023      	b.n	8006a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 fc6a 	bl	8007300 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	021a      	lsls	r2, r3, #8
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006a60:	e002      	b.n	8006a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	75fb      	strb	r3, [r7, #23]
      break;
 8006a66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop

08006a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_TIM_ConfigClockSource+0x1c>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e0de      	b.n	8006c56 <HAL_TIM_ConfigClockSource+0x1da>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006ab6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ac2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a63      	ldr	r2, [pc, #396]	; (8006c60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	f000 80a9 	beq.w	8006c2a <HAL_TIM_ConfigClockSource+0x1ae>
 8006ad8:	4a61      	ldr	r2, [pc, #388]	; (8006c60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	f200 80ae 	bhi.w	8006c3c <HAL_TIM_ConfigClockSource+0x1c0>
 8006ae0:	4a60      	ldr	r2, [pc, #384]	; (8006c64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	f000 80a1 	beq.w	8006c2a <HAL_TIM_ConfigClockSource+0x1ae>
 8006ae8:	4a5e      	ldr	r2, [pc, #376]	; (8006c64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	f200 80a6 	bhi.w	8006c3c <HAL_TIM_ConfigClockSource+0x1c0>
 8006af0:	4a5d      	ldr	r2, [pc, #372]	; (8006c68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	f000 8099 	beq.w	8006c2a <HAL_TIM_ConfigClockSource+0x1ae>
 8006af8:	4a5b      	ldr	r2, [pc, #364]	; (8006c68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	f200 809e 	bhi.w	8006c3c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b00:	4a5a      	ldr	r2, [pc, #360]	; (8006c6c <HAL_TIM_ConfigClockSource+0x1f0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	f000 8091 	beq.w	8006c2a <HAL_TIM_ConfigClockSource+0x1ae>
 8006b08:	4a58      	ldr	r2, [pc, #352]	; (8006c6c <HAL_TIM_ConfigClockSource+0x1f0>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	f200 8096 	bhi.w	8006c3c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b14:	f000 8089 	beq.w	8006c2a <HAL_TIM_ConfigClockSource+0x1ae>
 8006b18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b1c:	f200 808e 	bhi.w	8006c3c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b24:	d03e      	beq.n	8006ba4 <HAL_TIM_ConfigClockSource+0x128>
 8006b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b2a:	f200 8087 	bhi.w	8006c3c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b32:	f000 8086 	beq.w	8006c42 <HAL_TIM_ConfigClockSource+0x1c6>
 8006b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b3a:	d87f      	bhi.n	8006c3c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b3c:	2b70      	cmp	r3, #112	; 0x70
 8006b3e:	d01a      	beq.n	8006b76 <HAL_TIM_ConfigClockSource+0xfa>
 8006b40:	2b70      	cmp	r3, #112	; 0x70
 8006b42:	d87b      	bhi.n	8006c3c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b44:	2b60      	cmp	r3, #96	; 0x60
 8006b46:	d050      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x16e>
 8006b48:	2b60      	cmp	r3, #96	; 0x60
 8006b4a:	d877      	bhi.n	8006c3c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b4c:	2b50      	cmp	r3, #80	; 0x50
 8006b4e:	d03c      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x14e>
 8006b50:	2b50      	cmp	r3, #80	; 0x50
 8006b52:	d873      	bhi.n	8006c3c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b54:	2b40      	cmp	r3, #64	; 0x40
 8006b56:	d058      	beq.n	8006c0a <HAL_TIM_ConfigClockSource+0x18e>
 8006b58:	2b40      	cmp	r3, #64	; 0x40
 8006b5a:	d86f      	bhi.n	8006c3c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b5c:	2b30      	cmp	r3, #48	; 0x30
 8006b5e:	d064      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x1ae>
 8006b60:	2b30      	cmp	r3, #48	; 0x30
 8006b62:	d86b      	bhi.n	8006c3c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d060      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x1ae>
 8006b68:	2b20      	cmp	r3, #32
 8006b6a:	d867      	bhi.n	8006c3c <HAL_TIM_ConfigClockSource+0x1c0>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d05c      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x1ae>
 8006b70:	2b10      	cmp	r3, #16
 8006b72:	d05a      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x1ae>
 8006b74:	e062      	b.n	8006c3c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	6899      	ldr	r1, [r3, #8]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f000 fc9d 	bl	80074c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	609a      	str	r2, [r3, #8]
      break;
 8006ba2:	e04f      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6818      	ldr	r0, [r3, #0]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	6899      	ldr	r1, [r3, #8]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f000 fc86 	bl	80074c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bc6:	609a      	str	r2, [r3, #8]
      break;
 8006bc8:	e03c      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6859      	ldr	r1, [r3, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f000 fbf8 	bl	80073cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2150      	movs	r1, #80	; 0x50
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fc51 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 8006be8:	e02c      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	6859      	ldr	r1, [r3, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f000 fc17 	bl	800742a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2160      	movs	r1, #96	; 0x60
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fc41 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 8006c08:	e01c      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6859      	ldr	r1, [r3, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	461a      	mov	r2, r3
 8006c18:	f000 fbd8 	bl	80073cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2140      	movs	r1, #64	; 0x40
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fc31 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 8006c28:	e00c      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4619      	mov	r1, r3
 8006c34:	4610      	mov	r0, r2
 8006c36:	f000 fc28 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 8006c3a:	e003      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c40:	e000      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006c42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	00100070 	.word	0x00100070
 8006c64:	00100040 	.word	0x00100040
 8006c68:	00100030 	.word	0x00100030
 8006c6c:	00100020 	.word	0x00100020

08006c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a3c      	ldr	r2, [pc, #240]	; (8006dc4 <TIM_Base_SetConfig+0x104>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00f      	beq.n	8006cf8 <TIM_Base_SetConfig+0x38>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cde:	d00b      	beq.n	8006cf8 <TIM_Base_SetConfig+0x38>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a39      	ldr	r2, [pc, #228]	; (8006dc8 <TIM_Base_SetConfig+0x108>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d007      	beq.n	8006cf8 <TIM_Base_SetConfig+0x38>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a38      	ldr	r2, [pc, #224]	; (8006dcc <TIM_Base_SetConfig+0x10c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d003      	beq.n	8006cf8 <TIM_Base_SetConfig+0x38>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a37      	ldr	r2, [pc, #220]	; (8006dd0 <TIM_Base_SetConfig+0x110>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d108      	bne.n	8006d0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a2d      	ldr	r2, [pc, #180]	; (8006dc4 <TIM_Base_SetConfig+0x104>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d01b      	beq.n	8006d4a <TIM_Base_SetConfig+0x8a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d18:	d017      	beq.n	8006d4a <TIM_Base_SetConfig+0x8a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a2a      	ldr	r2, [pc, #168]	; (8006dc8 <TIM_Base_SetConfig+0x108>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d013      	beq.n	8006d4a <TIM_Base_SetConfig+0x8a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a29      	ldr	r2, [pc, #164]	; (8006dcc <TIM_Base_SetConfig+0x10c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00f      	beq.n	8006d4a <TIM_Base_SetConfig+0x8a>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a28      	ldr	r2, [pc, #160]	; (8006dd0 <TIM_Base_SetConfig+0x110>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00b      	beq.n	8006d4a <TIM_Base_SetConfig+0x8a>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a27      	ldr	r2, [pc, #156]	; (8006dd4 <TIM_Base_SetConfig+0x114>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d007      	beq.n	8006d4a <TIM_Base_SetConfig+0x8a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a26      	ldr	r2, [pc, #152]	; (8006dd8 <TIM_Base_SetConfig+0x118>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d003      	beq.n	8006d4a <TIM_Base_SetConfig+0x8a>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a25      	ldr	r2, [pc, #148]	; (8006ddc <TIM_Base_SetConfig+0x11c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d108      	bne.n	8006d5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a10      	ldr	r2, [pc, #64]	; (8006dc4 <TIM_Base_SetConfig+0x104>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d00f      	beq.n	8006da8 <TIM_Base_SetConfig+0xe8>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a11      	ldr	r2, [pc, #68]	; (8006dd0 <TIM_Base_SetConfig+0x110>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d00b      	beq.n	8006da8 <TIM_Base_SetConfig+0xe8>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a10      	ldr	r2, [pc, #64]	; (8006dd4 <TIM_Base_SetConfig+0x114>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d007      	beq.n	8006da8 <TIM_Base_SetConfig+0xe8>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a0f      	ldr	r2, [pc, #60]	; (8006dd8 <TIM_Base_SetConfig+0x118>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d003      	beq.n	8006da8 <TIM_Base_SetConfig+0xe8>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a0e      	ldr	r2, [pc, #56]	; (8006ddc <TIM_Base_SetConfig+0x11c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d103      	bne.n	8006db0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	615a      	str	r2, [r3, #20]
}
 8006db6:	bf00      	nop
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40012c00 	.word	0x40012c00
 8006dc8:	40000400 	.word	0x40000400
 8006dcc:	40000800 	.word	0x40000800
 8006dd0:	40013400 	.word	0x40013400
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	40014400 	.word	0x40014400
 8006ddc:	40014800 	.word	0x40014800

08006de0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	f023 0201 	bic.w	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 0303 	bic.w	r3, r3, #3
 8006e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f023 0302 	bic.w	r3, r3, #2
 8006e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a2c      	ldr	r2, [pc, #176]	; (8006eec <TIM_OC1_SetConfig+0x10c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00f      	beq.n	8006e60 <TIM_OC1_SetConfig+0x80>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a2b      	ldr	r2, [pc, #172]	; (8006ef0 <TIM_OC1_SetConfig+0x110>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00b      	beq.n	8006e60 <TIM_OC1_SetConfig+0x80>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a2a      	ldr	r2, [pc, #168]	; (8006ef4 <TIM_OC1_SetConfig+0x114>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d007      	beq.n	8006e60 <TIM_OC1_SetConfig+0x80>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a29      	ldr	r2, [pc, #164]	; (8006ef8 <TIM_OC1_SetConfig+0x118>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <TIM_OC1_SetConfig+0x80>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a28      	ldr	r2, [pc, #160]	; (8006efc <TIM_OC1_SetConfig+0x11c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d10c      	bne.n	8006e7a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f023 0308 	bic.w	r3, r3, #8
 8006e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f023 0304 	bic.w	r3, r3, #4
 8006e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <TIM_OC1_SetConfig+0x10c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00f      	beq.n	8006ea2 <TIM_OC1_SetConfig+0xc2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a1a      	ldr	r2, [pc, #104]	; (8006ef0 <TIM_OC1_SetConfig+0x110>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d00b      	beq.n	8006ea2 <TIM_OC1_SetConfig+0xc2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a19      	ldr	r2, [pc, #100]	; (8006ef4 <TIM_OC1_SetConfig+0x114>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d007      	beq.n	8006ea2 <TIM_OC1_SetConfig+0xc2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a18      	ldr	r2, [pc, #96]	; (8006ef8 <TIM_OC1_SetConfig+0x118>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d003      	beq.n	8006ea2 <TIM_OC1_SetConfig+0xc2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a17      	ldr	r2, [pc, #92]	; (8006efc <TIM_OC1_SetConfig+0x11c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d111      	bne.n	8006ec6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	621a      	str	r2, [r3, #32]
}
 8006ee0:	bf00      	nop
 8006ee2:	371c      	adds	r7, #28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	40012c00 	.word	0x40012c00
 8006ef0:	40013400 	.word	0x40013400
 8006ef4:	40014000 	.word	0x40014000
 8006ef8:	40014400 	.word	0x40014400
 8006efc:	40014800 	.word	0x40014800

08006f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f023 0210 	bic.w	r2, r3, #16
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	021b      	lsls	r3, r3, #8
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f023 0320 	bic.w	r3, r3, #32
 8006f4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	011b      	lsls	r3, r3, #4
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a28      	ldr	r2, [pc, #160]	; (8007000 <TIM_OC2_SetConfig+0x100>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d003      	beq.n	8006f6c <TIM_OC2_SetConfig+0x6c>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a27      	ldr	r2, [pc, #156]	; (8007004 <TIM_OC2_SetConfig+0x104>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d10d      	bne.n	8006f88 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a1d      	ldr	r2, [pc, #116]	; (8007000 <TIM_OC2_SetConfig+0x100>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00f      	beq.n	8006fb0 <TIM_OC2_SetConfig+0xb0>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a1c      	ldr	r2, [pc, #112]	; (8007004 <TIM_OC2_SetConfig+0x104>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00b      	beq.n	8006fb0 <TIM_OC2_SetConfig+0xb0>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a1b      	ldr	r2, [pc, #108]	; (8007008 <TIM_OC2_SetConfig+0x108>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d007      	beq.n	8006fb0 <TIM_OC2_SetConfig+0xb0>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a1a      	ldr	r2, [pc, #104]	; (800700c <TIM_OC2_SetConfig+0x10c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <TIM_OC2_SetConfig+0xb0>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a19      	ldr	r2, [pc, #100]	; (8007010 <TIM_OC2_SetConfig+0x110>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d113      	bne.n	8006fd8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	621a      	str	r2, [r3, #32]
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40012c00 	.word	0x40012c00
 8007004:	40013400 	.word	0x40013400
 8007008:	40014000 	.word	0x40014000
 800700c:	40014400 	.word	0x40014400
 8007010:	40014800 	.word	0x40014800

08007014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0303 	bic.w	r3, r3, #3
 800704e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	4313      	orrs	r3, r2
 800706c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a27      	ldr	r2, [pc, #156]	; (8007110 <TIM_OC3_SetConfig+0xfc>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d003      	beq.n	800707e <TIM_OC3_SetConfig+0x6a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a26      	ldr	r2, [pc, #152]	; (8007114 <TIM_OC3_SetConfig+0x100>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d10d      	bne.n	800709a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007084:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	021b      	lsls	r3, r3, #8
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a1c      	ldr	r2, [pc, #112]	; (8007110 <TIM_OC3_SetConfig+0xfc>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d00f      	beq.n	80070c2 <TIM_OC3_SetConfig+0xae>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a1b      	ldr	r2, [pc, #108]	; (8007114 <TIM_OC3_SetConfig+0x100>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d00b      	beq.n	80070c2 <TIM_OC3_SetConfig+0xae>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a1a      	ldr	r2, [pc, #104]	; (8007118 <TIM_OC3_SetConfig+0x104>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d007      	beq.n	80070c2 <TIM_OC3_SetConfig+0xae>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a19      	ldr	r2, [pc, #100]	; (800711c <TIM_OC3_SetConfig+0x108>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d003      	beq.n	80070c2 <TIM_OC3_SetConfig+0xae>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a18      	ldr	r2, [pc, #96]	; (8007120 <TIM_OC3_SetConfig+0x10c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d113      	bne.n	80070ea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	4313      	orrs	r3, r2
 80070dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	621a      	str	r2, [r3, #32]
}
 8007104:	bf00      	nop
 8007106:	371c      	adds	r7, #28
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40013400 	.word	0x40013400
 8007118:	40014000 	.word	0x40014000
 800711c:	40014400 	.word	0x40014400
 8007120:	40014800 	.word	0x40014800

08007124 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800715e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	021b      	lsls	r3, r3, #8
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	4313      	orrs	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	031b      	lsls	r3, r3, #12
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	4313      	orrs	r3, r2
 800717e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a28      	ldr	r2, [pc, #160]	; (8007224 <TIM_OC4_SetConfig+0x100>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d003      	beq.n	8007190 <TIM_OC4_SetConfig+0x6c>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a27      	ldr	r2, [pc, #156]	; (8007228 <TIM_OC4_SetConfig+0x104>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d10d      	bne.n	80071ac <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	031b      	lsls	r3, r3, #12
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a1d      	ldr	r2, [pc, #116]	; (8007224 <TIM_OC4_SetConfig+0x100>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00f      	beq.n	80071d4 <TIM_OC4_SetConfig+0xb0>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a1c      	ldr	r2, [pc, #112]	; (8007228 <TIM_OC4_SetConfig+0x104>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00b      	beq.n	80071d4 <TIM_OC4_SetConfig+0xb0>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a1b      	ldr	r2, [pc, #108]	; (800722c <TIM_OC4_SetConfig+0x108>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d007      	beq.n	80071d4 <TIM_OC4_SetConfig+0xb0>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a1a      	ldr	r2, [pc, #104]	; (8007230 <TIM_OC4_SetConfig+0x10c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d003      	beq.n	80071d4 <TIM_OC4_SetConfig+0xb0>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a19      	ldr	r2, [pc, #100]	; (8007234 <TIM_OC4_SetConfig+0x110>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d113      	bne.n	80071fc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	019b      	lsls	r3, r3, #6
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	019b      	lsls	r3, r3, #6
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	40012c00 	.word	0x40012c00
 8007228:	40013400 	.word	0x40013400
 800722c:	40014000 	.word	0x40014000
 8007230:	40014400 	.word	0x40014400
 8007234:	40014800 	.word	0x40014800

08007238 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800725e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4313      	orrs	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800727c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	041b      	lsls	r3, r3, #16
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a17      	ldr	r2, [pc, #92]	; (80072ec <TIM_OC5_SetConfig+0xb4>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00f      	beq.n	80072b2 <TIM_OC5_SetConfig+0x7a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a16      	ldr	r2, [pc, #88]	; (80072f0 <TIM_OC5_SetConfig+0xb8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00b      	beq.n	80072b2 <TIM_OC5_SetConfig+0x7a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a15      	ldr	r2, [pc, #84]	; (80072f4 <TIM_OC5_SetConfig+0xbc>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d007      	beq.n	80072b2 <TIM_OC5_SetConfig+0x7a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a14      	ldr	r2, [pc, #80]	; (80072f8 <TIM_OC5_SetConfig+0xc0>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d003      	beq.n	80072b2 <TIM_OC5_SetConfig+0x7a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a13      	ldr	r2, [pc, #76]	; (80072fc <TIM_OC5_SetConfig+0xc4>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d109      	bne.n	80072c6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	021b      	lsls	r3, r3, #8
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	621a      	str	r2, [r3, #32]
}
 80072e0:	bf00      	nop
 80072e2:	371c      	adds	r7, #28
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	40012c00 	.word	0x40012c00
 80072f0:	40013400 	.word	0x40013400
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40014400 	.word	0x40014400
 80072fc:	40014800 	.word	0x40014800

08007300 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800732e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	051b      	lsls	r3, r3, #20
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a18      	ldr	r2, [pc, #96]	; (80073b8 <TIM_OC6_SetConfig+0xb8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00f      	beq.n	800737c <TIM_OC6_SetConfig+0x7c>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a17      	ldr	r2, [pc, #92]	; (80073bc <TIM_OC6_SetConfig+0xbc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d00b      	beq.n	800737c <TIM_OC6_SetConfig+0x7c>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a16      	ldr	r2, [pc, #88]	; (80073c0 <TIM_OC6_SetConfig+0xc0>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d007      	beq.n	800737c <TIM_OC6_SetConfig+0x7c>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a15      	ldr	r2, [pc, #84]	; (80073c4 <TIM_OC6_SetConfig+0xc4>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d003      	beq.n	800737c <TIM_OC6_SetConfig+0x7c>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a14      	ldr	r2, [pc, #80]	; (80073c8 <TIM_OC6_SetConfig+0xc8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d109      	bne.n	8007390 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007382:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	029b      	lsls	r3, r3, #10
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	4313      	orrs	r3, r2
 800738e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	621a      	str	r2, [r3, #32]
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40012c00 	.word	0x40012c00
 80073bc:	40013400 	.word	0x40013400
 80073c0:	40014000 	.word	0x40014000
 80073c4:	40014400 	.word	0x40014400
 80073c8:	40014800 	.word	0x40014800

080073cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f023 0201 	bic.w	r2, r3, #1
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	4313      	orrs	r3, r2
 8007400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f023 030a 	bic.w	r3, r3, #10
 8007408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	621a      	str	r2, [r3, #32]
}
 800741e:	bf00      	nop
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800742a:	b480      	push	{r7}
 800742c:	b087      	sub	sp, #28
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	f023 0210 	bic.w	r2, r3, #16
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	031b      	lsls	r3, r3, #12
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	4313      	orrs	r3, r2
 800745e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007466:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	011b      	lsls	r3, r3, #4
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	4313      	orrs	r3, r2
 8007470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	621a      	str	r2, [r3, #32]
}
 800747e:	bf00      	nop
 8007480:	371c      	adds	r7, #28
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80074a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f043 0307 	orr.w	r3, r3, #7
 80074b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	609a      	str	r2, [r3, #8]
}
 80074b8:	bf00      	nop
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	021a      	lsls	r2, r3, #8
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	609a      	str	r2, [r3, #8]
}
 80074f8:	bf00      	nop
 80074fa:	371c      	adds	r7, #28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f003 031f 	and.w	r3, r3, #31
 8007516:	2201      	movs	r2, #1
 8007518:	fa02 f303 	lsl.w	r3, r2, r3
 800751c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6a1a      	ldr	r2, [r3, #32]
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	43db      	mvns	r3, r3
 8007526:	401a      	ands	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a1a      	ldr	r2, [r3, #32]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f003 031f 	and.w	r3, r3, #31
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	fa01 f303 	lsl.w	r3, r1, r3
 800753c:	431a      	orrs	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	621a      	str	r2, [r3, #32]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d109      	bne.n	8007574 <HAL_TIMEx_PWMN_Start+0x24>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	bf14      	ite	ne
 800756c:	2301      	movne	r3, #1
 800756e:	2300      	moveq	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	e022      	b.n	80075ba <HAL_TIMEx_PWMN_Start+0x6a>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b04      	cmp	r3, #4
 8007578:	d109      	bne.n	800758e <HAL_TIMEx_PWMN_Start+0x3e>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b01      	cmp	r3, #1
 8007584:	bf14      	ite	ne
 8007586:	2301      	movne	r3, #1
 8007588:	2300      	moveq	r3, #0
 800758a:	b2db      	uxtb	r3, r3
 800758c:	e015      	b.n	80075ba <HAL_TIMEx_PWMN_Start+0x6a>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b08      	cmp	r3, #8
 8007592:	d109      	bne.n	80075a8 <HAL_TIMEx_PWMN_Start+0x58>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b01      	cmp	r3, #1
 800759e:	bf14      	ite	ne
 80075a0:	2301      	movne	r3, #1
 80075a2:	2300      	moveq	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	e008      	b.n	80075ba <HAL_TIMEx_PWMN_Start+0x6a>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	bf14      	ite	ne
 80075b4:	2301      	movne	r3, #1
 80075b6:	2300      	moveq	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e069      	b.n	8007696 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d104      	bne.n	80075d2 <HAL_TIMEx_PWMN_Start+0x82>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d0:	e013      	b.n	80075fa <HAL_TIMEx_PWMN_Start+0xaa>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	d104      	bne.n	80075e2 <HAL_TIMEx_PWMN_Start+0x92>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075e0:	e00b      	b.n	80075fa <HAL_TIMEx_PWMN_Start+0xaa>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d104      	bne.n	80075f2 <HAL_TIMEx_PWMN_Start+0xa2>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075f0:	e003      	b.n	80075fa <HAL_TIMEx_PWMN_Start+0xaa>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2202      	movs	r2, #2
 80075f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2204      	movs	r2, #4
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fa1e 	bl	8007a44 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007616:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a20      	ldr	r2, [pc, #128]	; (80076a0 <HAL_TIMEx_PWMN_Start+0x150>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d018      	beq.n	8007654 <HAL_TIMEx_PWMN_Start+0x104>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762a:	d013      	beq.n	8007654 <HAL_TIMEx_PWMN_Start+0x104>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a1c      	ldr	r2, [pc, #112]	; (80076a4 <HAL_TIMEx_PWMN_Start+0x154>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d00e      	beq.n	8007654 <HAL_TIMEx_PWMN_Start+0x104>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a1b      	ldr	r2, [pc, #108]	; (80076a8 <HAL_TIMEx_PWMN_Start+0x158>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d009      	beq.n	8007654 <HAL_TIMEx_PWMN_Start+0x104>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a19      	ldr	r2, [pc, #100]	; (80076ac <HAL_TIMEx_PWMN_Start+0x15c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d004      	beq.n	8007654 <HAL_TIMEx_PWMN_Start+0x104>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a18      	ldr	r2, [pc, #96]	; (80076b0 <HAL_TIMEx_PWMN_Start+0x160>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d115      	bne.n	8007680 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	4b16      	ldr	r3, [pc, #88]	; (80076b4 <HAL_TIMEx_PWMN_Start+0x164>)
 800765c:	4013      	ands	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b06      	cmp	r3, #6
 8007664:	d015      	beq.n	8007692 <HAL_TIMEx_PWMN_Start+0x142>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800766c:	d011      	beq.n	8007692 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f042 0201 	orr.w	r2, r2, #1
 800767c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800767e:	e008      	b.n	8007692 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0201 	orr.w	r2, r2, #1
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	e000      	b.n	8007694 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007692:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	40012c00 	.word	0x40012c00
 80076a4:	40000400 	.word	0x40000400
 80076a8:	40000800 	.word	0x40000800
 80076ac:	40013400 	.word	0x40013400
 80076b0:	40014000 	.word	0x40014000
 80076b4:	00010007 	.word	0x00010007

080076b8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2200      	movs	r2, #0
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 f9ba 	bl	8007a44 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6a1a      	ldr	r2, [r3, #32]
 80076d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80076da:	4013      	ands	r3, r2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10f      	bne.n	8007700 <HAL_TIMEx_PWMN_Stop+0x48>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6a1a      	ldr	r2, [r3, #32]
 80076e6:	f244 4344 	movw	r3, #17476	; 0x4444
 80076ea:	4013      	ands	r3, r2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d107      	bne.n	8007700 <HAL_TIMEx_PWMN_Stop+0x48>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6a1a      	ldr	r2, [r3, #32]
 8007706:	f241 1311 	movw	r3, #4369	; 0x1111
 800770a:	4013      	ands	r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10f      	bne.n	8007730 <HAL_TIMEx_PWMN_Stop+0x78>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6a1a      	ldr	r2, [r3, #32]
 8007716:	f244 4344 	movw	r3, #17476	; 0x4444
 800771a:	4013      	ands	r3, r2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d107      	bne.n	8007730 <HAL_TIMEx_PWMN_Stop+0x78>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0201 	bic.w	r2, r2, #1
 800772e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d104      	bne.n	8007740 <HAL_TIMEx_PWMN_Stop+0x88>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800773e:	e013      	b.n	8007768 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b04      	cmp	r3, #4
 8007744:	d104      	bne.n	8007750 <HAL_TIMEx_PWMN_Stop+0x98>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800774e:	e00b      	b.n	8007768 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2b08      	cmp	r3, #8
 8007754:	d104      	bne.n	8007760 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800775e:	e003      	b.n	8007768 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007784:	2b01      	cmp	r3, #1
 8007786:	d101      	bne.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007788:	2302      	movs	r3, #2
 800778a:	e065      	b.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2202      	movs	r2, #2
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a2c      	ldr	r2, [pc, #176]	; (8007864 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d004      	beq.n	80077c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a2b      	ldr	r2, [pc, #172]	; (8007868 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d108      	bne.n	80077d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80077d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a1b      	ldr	r2, [pc, #108]	; (8007864 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d018      	beq.n	800782c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007802:	d013      	beq.n	800782c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a18      	ldr	r2, [pc, #96]	; (800786c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d00e      	beq.n	800782c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a17      	ldr	r2, [pc, #92]	; (8007870 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d009      	beq.n	800782c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a12      	ldr	r2, [pc, #72]	; (8007868 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d004      	beq.n	800782c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a13      	ldr	r2, [pc, #76]	; (8007874 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d10c      	bne.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007832:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	4313      	orrs	r3, r2
 800783c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	40012c00 	.word	0x40012c00
 8007868:	40013400 	.word	0x40013400
 800786c:	40000400 	.word	0x40000400
 8007870:	40000800 	.word	0x40000800
 8007874:	40014000 	.word	0x40014000

08007878 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007890:	2302      	movs	r3, #2
 8007892:	e087      	b.n	80079a4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	041b      	lsls	r3, r3, #16
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a27      	ldr	r2, [pc, #156]	; (80079b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d004      	beq.n	8007922 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a25      	ldr	r2, [pc, #148]	; (80079b4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d106      	bne.n	8007930 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	4313      	orrs	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a1e      	ldr	r2, [pc, #120]	; (80079b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d004      	beq.n	8007944 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a1d      	ldr	r2, [pc, #116]	; (80079b4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d126      	bne.n	8007992 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794e:	051b      	lsls	r3, r3, #20
 8007950:	4313      	orrs	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	4313      	orrs	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a0e      	ldr	r2, [pc, #56]	; (80079b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d004      	beq.n	8007984 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a0d      	ldr	r2, [pc, #52]	; (80079b4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d106      	bne.n	8007992 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	40012c00 	.word	0x40012c00
 80079b4:	40013400 	.word	0x40013400

080079b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f003 031f 	and.w	r3, r3, #31
 8007a56:	2204      	movs	r2, #4
 8007a58:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6a1a      	ldr	r2, [r3, #32]
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	43db      	mvns	r3, r3
 8007a66:	401a      	ands	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a1a      	ldr	r2, [r3, #32]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	f003 031f 	and.w	r3, r3, #31
 8007a76:	6879      	ldr	r1, [r7, #4]
 8007a78:	fa01 f303 	lsl.w	r3, r1, r3
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	621a      	str	r2, [r3, #32]
}
 8007a82:	bf00      	nop
 8007a84:	371c      	adds	r7, #28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b082      	sub	sp, #8
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e042      	b.n	8007b26 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d106      	bne.n	8007ab8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fa fafc 	bl	80020b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2224      	movs	r2, #36	; 0x24
 8007abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0201 	bic.w	r2, r2, #1
 8007ace:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fc51 	bl	8008378 <UART_SetConfig>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e022      	b.n	8007b26 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 ff11 	bl	8008910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007afc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f042 0201 	orr.w	r2, r2, #1
 8007b1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 ff98 	bl	8008a54 <UART_CheckIdleState>
 8007b24:	4603      	mov	r3, r0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b08a      	sub	sp, #40	; 0x28
 8007b32:	af02      	add	r7, sp, #8
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	603b      	str	r3, [r7, #0]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	f040 8083 	bne.w	8007c50 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <HAL_UART_Transmit+0x28>
 8007b50:	88fb      	ldrh	r3, [r7, #6]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e07b      	b.n	8007c52 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d101      	bne.n	8007b68 <HAL_UART_Transmit+0x3a>
 8007b64:	2302      	movs	r3, #2
 8007b66:	e074      	b.n	8007c52 <HAL_UART_Transmit+0x124>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2221      	movs	r2, #33	; 0x21
 8007b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b80:	f7fa fcfc 	bl	800257c <HAL_GetTick>
 8007b84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	88fa      	ldrh	r2, [r7, #6]
 8007b8a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	88fa      	ldrh	r2, [r7, #6]
 8007b92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b9e:	d108      	bne.n	8007bb2 <HAL_UART_Transmit+0x84>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d104      	bne.n	8007bb2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	61bb      	str	r3, [r7, #24]
 8007bb0:	e003      	b.n	8007bba <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007bc2:	e02c      	b.n	8007c1e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2180      	movs	r1, #128	; 0x80
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 ff8b 	bl	8008aea <UART_WaitOnFlagUntilTimeout>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e039      	b.n	8007c52 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10b      	bne.n	8007bfc <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bf2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	3302      	adds	r3, #2
 8007bf8:	61bb      	str	r3, [r7, #24]
 8007bfa:	e007      	b.n	8007c0c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	781a      	ldrb	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	3b01      	subs	r3, #1
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1cc      	bne.n	8007bc4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2200      	movs	r2, #0
 8007c32:	2140      	movs	r1, #64	; 0x40
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 ff58 	bl	8008aea <UART_WaitOnFlagUntilTimeout>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e006      	b.n	8007c52 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e000      	b.n	8007c52 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007c50:	2302      	movs	r3, #2
  }
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3720      	adds	r7, #32
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
	...

08007c5c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08a      	sub	sp, #40	; 0x28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	4613      	mov	r3, r2
 8007c68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d142      	bne.n	8007cfa <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <HAL_UART_Receive_IT+0x24>
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e03b      	b.n	8007cfc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d101      	bne.n	8007c92 <HAL_UART_Receive_IT+0x36>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e034      	b.n	8007cfc <HAL_UART_Receive_IT+0xa0>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a17      	ldr	r2, [pc, #92]	; (8007d04 <HAL_UART_Receive_IT+0xa8>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d01f      	beq.n	8007cea <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d018      	beq.n	8007cea <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	623b      	str	r3, [r7, #32]
 8007cd8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	69f9      	ldr	r1, [r7, #28]
 8007cdc:	6a3a      	ldr	r2, [r7, #32]
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e6      	bne.n	8007cb8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007cea:	88fb      	ldrh	r3, [r7, #6]
 8007cec:	461a      	mov	r2, r3
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 ffc3 	bl	8008c7c <UART_Start_Receive_IT>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	e000      	b.n	8007cfc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007cfa:	2302      	movs	r3, #2
  }
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3728      	adds	r7, #40	; 0x28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	40008000 	.word	0x40008000

08007d08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b0ba      	sub	sp, #232	; 0xe8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007d32:	f640 030f 	movw	r3, #2063	; 0x80f
 8007d36:	4013      	ands	r3, r2
 8007d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007d3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d11b      	bne.n	8007d7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d48:	f003 0320 	and.w	r3, r3, #32
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d015      	beq.n	8007d7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d54:	f003 0320 	and.w	r3, r3, #32
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d105      	bne.n	8007d68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d009      	beq.n	8007d7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 82d6 	beq.w	800831e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
      }
      return;
 8007d7a:	e2d0      	b.n	800831e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007d7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 811f 	beq.w	8007fc4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007d86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007d8a:	4b8b      	ldr	r3, [pc, #556]	; (8007fb8 <HAL_UART_IRQHandler+0x2b0>)
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d106      	bne.n	8007da0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007d92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007d96:	4b89      	ldr	r3, [pc, #548]	; (8007fbc <HAL_UART_IRQHandler+0x2b4>)
 8007d98:	4013      	ands	r3, r2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 8112 	beq.w	8007fc4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d011      	beq.n	8007dd0 <HAL_UART_IRQHandler+0xc8>
 8007dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00b      	beq.n	8007dd0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dc6:	f043 0201 	orr.w	r2, r3, #1
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd4:	f003 0302 	and.w	r3, r3, #2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d011      	beq.n	8007e00 <HAL_UART_IRQHandler+0xf8>
 8007ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00b      	beq.n	8007e00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2202      	movs	r2, #2
 8007dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007df6:	f043 0204 	orr.w	r2, r3, #4
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e04:	f003 0304 	and.w	r3, r3, #4
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d011      	beq.n	8007e30 <HAL_UART_IRQHandler+0x128>
 8007e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00b      	beq.n	8007e30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2204      	movs	r2, #4
 8007e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e26:	f043 0202 	orr.w	r2, r3, #2
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e34:	f003 0308 	and.w	r3, r3, #8
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d017      	beq.n	8007e6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e40:	f003 0320 	and.w	r3, r3, #32
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d105      	bne.n	8007e54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007e48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007e4c:	4b5a      	ldr	r3, [pc, #360]	; (8007fb8 <HAL_UART_IRQHandler+0x2b0>)
 8007e4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00b      	beq.n	8007e6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2208      	movs	r2, #8
 8007e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e62:	f043 0208 	orr.w	r2, r3, #8
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d012      	beq.n	8007e9e <HAL_UART_IRQHandler+0x196>
 8007e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00c      	beq.n	8007e9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e94:	f043 0220 	orr.w	r2, r3, #32
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 823c 	beq.w	8008322 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eae:	f003 0320 	and.w	r3, r3, #32
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d013      	beq.n	8007ede <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d105      	bne.n	8007ece <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d007      	beq.n	8007ede <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ee4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef2:	2b40      	cmp	r3, #64	; 0x40
 8007ef4:	d005      	beq.n	8007f02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007efa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d04f      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 ffe4 	bl	8008ed0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f12:	2b40      	cmp	r3, #64	; 0x40
 8007f14:	d141      	bne.n	8007f9a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f24:	e853 3f00 	ldrex	r3, [r3]
 8007f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f52:	e841 2300 	strex	r3, r2, [r1]
 8007f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1d9      	bne.n	8007f16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d013      	beq.n	8007f92 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f6e:	4a14      	ldr	r2, [pc, #80]	; (8007fc0 <HAL_UART_IRQHandler+0x2b8>)
 8007f70:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fc fb44 	bl	8004604 <HAL_DMA_Abort_IT>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d017      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f90:	e00f      	b.n	8007fb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f9da 	bl	800834c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f98:	e00b      	b.n	8007fb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f9d6 	bl	800834c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fa0:	e007      	b.n	8007fb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f9d2 	bl	800834c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007fb0:	e1b7      	b.n	8008322 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb2:	bf00      	nop
    return;
 8007fb4:	e1b5      	b.n	8008322 <HAL_UART_IRQHandler+0x61a>
 8007fb6:	bf00      	nop
 8007fb8:	10000001 	.word	0x10000001
 8007fbc:	04000120 	.word	0x04000120
 8007fc0:	08008f9d 	.word	0x08008f9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	f040 814a 	bne.w	8008262 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd2:	f003 0310 	and.w	r3, r3, #16
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 8143 	beq.w	8008262 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fe0:	f003 0310 	and.w	r3, r3, #16
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 813c 	beq.w	8008262 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2210      	movs	r2, #16
 8007ff0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffc:	2b40      	cmp	r3, #64	; 0x40
 8007ffe:	f040 80b5 	bne.w	800816c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800800e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 8187 	beq.w	8008326 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800801e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008022:	429a      	cmp	r2, r3
 8008024:	f080 817f 	bcs.w	8008326 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800802e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0320 	and.w	r3, r3, #32
 800803e:	2b00      	cmp	r3, #0
 8008040:	f040 8086 	bne.w	8008150 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008058:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800805c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
 800806a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800806e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008072:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008076:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800807a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800807e:	e841 2300 	strex	r3, r2, [r1]
 8008082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008086:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1da      	bne.n	8008044 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3308      	adds	r3, #8
 8008094:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800809e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080a0:	f023 0301 	bic.w	r3, r3, #1
 80080a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3308      	adds	r3, #8
 80080ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80080b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80080ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080be:	e841 2300 	strex	r3, r2, [r1]
 80080c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80080c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e1      	bne.n	800808e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3308      	adds	r3, #8
 80080d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80080da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3308      	adds	r3, #8
 80080ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80080ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80080f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80080fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e3      	bne.n	80080ca <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2220      	movs	r2, #32
 8008106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800811e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008120:	f023 0310 	bic.w	r3, r3, #16
 8008124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	461a      	mov	r2, r3
 800812e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008132:	65bb      	str	r3, [r7, #88]	; 0x58
 8008134:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008138:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e4      	bne.n	8008110 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800814a:	4618      	mov	r0, r3
 800814c:	f7fc fa01 	bl	8004552 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800815c:	b29b      	uxth	r3, r3
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	b29b      	uxth	r3, r3
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f8fb 	bl	8008360 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800816a:	e0dc      	b.n	8008326 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008178:	b29b      	uxth	r3, r3
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008186:	b29b      	uxth	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 80ce 	beq.w	800832a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800818e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 80c9 	beq.w	800832a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	461a      	mov	r2, r3
 80081b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081ba:	647b      	str	r3, [r7, #68]	; 0x44
 80081bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081c2:	e841 2300 	strex	r3, r2, [r1]
 80081c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e4      	bne.n	8008198 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3308      	adds	r3, #8
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	e853 3f00 	ldrex	r3, [r3]
 80081dc:	623b      	str	r3, [r7, #32]
   return(result);
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081e4:	f023 0301 	bic.w	r3, r3, #1
 80081e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3308      	adds	r3, #8
 80081f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80081f6:	633a      	str	r2, [r7, #48]	; 0x30
 80081f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1e1      	bne.n	80081ce <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2220      	movs	r2, #32
 800820e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	e853 3f00 	ldrex	r3, [r3]
 800822a:	60fb      	str	r3, [r7, #12]
   return(result);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f023 0310 	bic.w	r3, r3, #16
 8008232:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008240:	61fb      	str	r3, [r7, #28]
 8008242:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008244:	69b9      	ldr	r1, [r7, #24]
 8008246:	69fa      	ldr	r2, [r7, #28]
 8008248:	e841 2300 	strex	r3, r2, [r1]
 800824c:	617b      	str	r3, [r7, #20]
   return(result);
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1e4      	bne.n	800821e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008258:	4619      	mov	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f880 	bl	8008360 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008260:	e063      	b.n	800832a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00e      	beq.n	800828c <HAL_UART_IRQHandler+0x584>
 800826e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d008      	beq.n	800828c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008282:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f001 fb27 	bl	80098d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800828a:	e051      	b.n	8008330 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800828c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008294:	2b00      	cmp	r3, #0
 8008296:	d014      	beq.n	80082c2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800829c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d105      	bne.n	80082b0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80082a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d008      	beq.n	80082c2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d03a      	beq.n	800832e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	4798      	blx	r3
    }
    return;
 80082c0:	e035      	b.n	800832e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80082c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d009      	beq.n	80082e2 <HAL_UART_IRQHandler+0x5da>
 80082ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fe74 	bl	8008fc8 <UART_EndTransmit_IT>
    return;
 80082e0:	e026      	b.n	8008330 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80082e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d009      	beq.n	8008302 <HAL_UART_IRQHandler+0x5fa>
 80082ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f001 fb00 	bl	8009900 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008300:	e016      	b.n	8008330 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008306:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d010      	beq.n	8008330 <HAL_UART_IRQHandler+0x628>
 800830e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008312:	2b00      	cmp	r3, #0
 8008314:	da0c      	bge.n	8008330 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 fae8 	bl	80098ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800831c:	e008      	b.n	8008330 <HAL_UART_IRQHandler+0x628>
      return;
 800831e:	bf00      	nop
 8008320:	e006      	b.n	8008330 <HAL_UART_IRQHandler+0x628>
    return;
 8008322:	bf00      	nop
 8008324:	e004      	b.n	8008330 <HAL_UART_IRQHandler+0x628>
      return;
 8008326:	bf00      	nop
 8008328:	e002      	b.n	8008330 <HAL_UART_IRQHandler+0x628>
      return;
 800832a:	bf00      	nop
 800832c:	e000      	b.n	8008330 <HAL_UART_IRQHandler+0x628>
    return;
 800832e:	bf00      	nop
  }
}
 8008330:	37e8      	adds	r7, #232	; 0xe8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop

08008338 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800837c:	b08c      	sub	sp, #48	; 0x30
 800837e:	af00      	add	r7, sp, #0
 8008380:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	431a      	orrs	r2, r3
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	431a      	orrs	r2, r3
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	69db      	ldr	r3, [r3, #28]
 800839c:	4313      	orrs	r3, r2
 800839e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	4bab      	ldr	r3, [pc, #684]	; (8008654 <UART_SetConfig+0x2dc>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	6812      	ldr	r2, [r2, #0]
 80083ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083b0:	430b      	orrs	r3, r1
 80083b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	68da      	ldr	r2, [r3, #12]
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4aa0      	ldr	r2, [pc, #640]	; (8008658 <UART_SetConfig+0x2e0>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d004      	beq.n	80083e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083e0:	4313      	orrs	r3, r2
 80083e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80083ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	6812      	ldr	r2, [r2, #0]
 80083f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083f8:	430b      	orrs	r3, r1
 80083fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008402:	f023 010f 	bic.w	r1, r3, #15
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	430a      	orrs	r2, r1
 8008410:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a91      	ldr	r2, [pc, #580]	; (800865c <UART_SetConfig+0x2e4>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d125      	bne.n	8008468 <UART_SetConfig+0xf0>
 800841c:	4b90      	ldr	r3, [pc, #576]	; (8008660 <UART_SetConfig+0x2e8>)
 800841e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008422:	f003 0303 	and.w	r3, r3, #3
 8008426:	2b03      	cmp	r3, #3
 8008428:	d81a      	bhi.n	8008460 <UART_SetConfig+0xe8>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <UART_SetConfig+0xb8>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	08008441 	.word	0x08008441
 8008434:	08008451 	.word	0x08008451
 8008438:	08008449 	.word	0x08008449
 800843c:	08008459 	.word	0x08008459
 8008440:	2301      	movs	r3, #1
 8008442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008446:	e0d6      	b.n	80085f6 <UART_SetConfig+0x27e>
 8008448:	2302      	movs	r3, #2
 800844a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800844e:	e0d2      	b.n	80085f6 <UART_SetConfig+0x27e>
 8008450:	2304      	movs	r3, #4
 8008452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008456:	e0ce      	b.n	80085f6 <UART_SetConfig+0x27e>
 8008458:	2308      	movs	r3, #8
 800845a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800845e:	e0ca      	b.n	80085f6 <UART_SetConfig+0x27e>
 8008460:	2310      	movs	r3, #16
 8008462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008466:	e0c6      	b.n	80085f6 <UART_SetConfig+0x27e>
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a7d      	ldr	r2, [pc, #500]	; (8008664 <UART_SetConfig+0x2ec>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d138      	bne.n	80084e4 <UART_SetConfig+0x16c>
 8008472:	4b7b      	ldr	r3, [pc, #492]	; (8008660 <UART_SetConfig+0x2e8>)
 8008474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008478:	f003 030c 	and.w	r3, r3, #12
 800847c:	2b0c      	cmp	r3, #12
 800847e:	d82d      	bhi.n	80084dc <UART_SetConfig+0x164>
 8008480:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <UART_SetConfig+0x110>)
 8008482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008486:	bf00      	nop
 8008488:	080084bd 	.word	0x080084bd
 800848c:	080084dd 	.word	0x080084dd
 8008490:	080084dd 	.word	0x080084dd
 8008494:	080084dd 	.word	0x080084dd
 8008498:	080084cd 	.word	0x080084cd
 800849c:	080084dd 	.word	0x080084dd
 80084a0:	080084dd 	.word	0x080084dd
 80084a4:	080084dd 	.word	0x080084dd
 80084a8:	080084c5 	.word	0x080084c5
 80084ac:	080084dd 	.word	0x080084dd
 80084b0:	080084dd 	.word	0x080084dd
 80084b4:	080084dd 	.word	0x080084dd
 80084b8:	080084d5 	.word	0x080084d5
 80084bc:	2300      	movs	r3, #0
 80084be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c2:	e098      	b.n	80085f6 <UART_SetConfig+0x27e>
 80084c4:	2302      	movs	r3, #2
 80084c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ca:	e094      	b.n	80085f6 <UART_SetConfig+0x27e>
 80084cc:	2304      	movs	r3, #4
 80084ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084d2:	e090      	b.n	80085f6 <UART_SetConfig+0x27e>
 80084d4:	2308      	movs	r3, #8
 80084d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084da:	e08c      	b.n	80085f6 <UART_SetConfig+0x27e>
 80084dc:	2310      	movs	r3, #16
 80084de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084e2:	e088      	b.n	80085f6 <UART_SetConfig+0x27e>
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a5f      	ldr	r2, [pc, #380]	; (8008668 <UART_SetConfig+0x2f0>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d125      	bne.n	800853a <UART_SetConfig+0x1c2>
 80084ee:	4b5c      	ldr	r3, [pc, #368]	; (8008660 <UART_SetConfig+0x2e8>)
 80084f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084f8:	2b30      	cmp	r3, #48	; 0x30
 80084fa:	d016      	beq.n	800852a <UART_SetConfig+0x1b2>
 80084fc:	2b30      	cmp	r3, #48	; 0x30
 80084fe:	d818      	bhi.n	8008532 <UART_SetConfig+0x1ba>
 8008500:	2b20      	cmp	r3, #32
 8008502:	d00a      	beq.n	800851a <UART_SetConfig+0x1a2>
 8008504:	2b20      	cmp	r3, #32
 8008506:	d814      	bhi.n	8008532 <UART_SetConfig+0x1ba>
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <UART_SetConfig+0x19a>
 800850c:	2b10      	cmp	r3, #16
 800850e:	d008      	beq.n	8008522 <UART_SetConfig+0x1aa>
 8008510:	e00f      	b.n	8008532 <UART_SetConfig+0x1ba>
 8008512:	2300      	movs	r3, #0
 8008514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008518:	e06d      	b.n	80085f6 <UART_SetConfig+0x27e>
 800851a:	2302      	movs	r3, #2
 800851c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008520:	e069      	b.n	80085f6 <UART_SetConfig+0x27e>
 8008522:	2304      	movs	r3, #4
 8008524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008528:	e065      	b.n	80085f6 <UART_SetConfig+0x27e>
 800852a:	2308      	movs	r3, #8
 800852c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008530:	e061      	b.n	80085f6 <UART_SetConfig+0x27e>
 8008532:	2310      	movs	r3, #16
 8008534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008538:	e05d      	b.n	80085f6 <UART_SetConfig+0x27e>
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a4b      	ldr	r2, [pc, #300]	; (800866c <UART_SetConfig+0x2f4>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d125      	bne.n	8008590 <UART_SetConfig+0x218>
 8008544:	4b46      	ldr	r3, [pc, #280]	; (8008660 <UART_SetConfig+0x2e8>)
 8008546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800854a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800854e:	2bc0      	cmp	r3, #192	; 0xc0
 8008550:	d016      	beq.n	8008580 <UART_SetConfig+0x208>
 8008552:	2bc0      	cmp	r3, #192	; 0xc0
 8008554:	d818      	bhi.n	8008588 <UART_SetConfig+0x210>
 8008556:	2b80      	cmp	r3, #128	; 0x80
 8008558:	d00a      	beq.n	8008570 <UART_SetConfig+0x1f8>
 800855a:	2b80      	cmp	r3, #128	; 0x80
 800855c:	d814      	bhi.n	8008588 <UART_SetConfig+0x210>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <UART_SetConfig+0x1f0>
 8008562:	2b40      	cmp	r3, #64	; 0x40
 8008564:	d008      	beq.n	8008578 <UART_SetConfig+0x200>
 8008566:	e00f      	b.n	8008588 <UART_SetConfig+0x210>
 8008568:	2300      	movs	r3, #0
 800856a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800856e:	e042      	b.n	80085f6 <UART_SetConfig+0x27e>
 8008570:	2302      	movs	r3, #2
 8008572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008576:	e03e      	b.n	80085f6 <UART_SetConfig+0x27e>
 8008578:	2304      	movs	r3, #4
 800857a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800857e:	e03a      	b.n	80085f6 <UART_SetConfig+0x27e>
 8008580:	2308      	movs	r3, #8
 8008582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008586:	e036      	b.n	80085f6 <UART_SetConfig+0x27e>
 8008588:	2310      	movs	r3, #16
 800858a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800858e:	e032      	b.n	80085f6 <UART_SetConfig+0x27e>
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a30      	ldr	r2, [pc, #192]	; (8008658 <UART_SetConfig+0x2e0>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d12a      	bne.n	80085f0 <UART_SetConfig+0x278>
 800859a:	4b31      	ldr	r3, [pc, #196]	; (8008660 <UART_SetConfig+0x2e8>)
 800859c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80085a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085a8:	d01a      	beq.n	80085e0 <UART_SetConfig+0x268>
 80085aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085ae:	d81b      	bhi.n	80085e8 <UART_SetConfig+0x270>
 80085b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085b4:	d00c      	beq.n	80085d0 <UART_SetConfig+0x258>
 80085b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085ba:	d815      	bhi.n	80085e8 <UART_SetConfig+0x270>
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <UART_SetConfig+0x250>
 80085c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085c4:	d008      	beq.n	80085d8 <UART_SetConfig+0x260>
 80085c6:	e00f      	b.n	80085e8 <UART_SetConfig+0x270>
 80085c8:	2300      	movs	r3, #0
 80085ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ce:	e012      	b.n	80085f6 <UART_SetConfig+0x27e>
 80085d0:	2302      	movs	r3, #2
 80085d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085d6:	e00e      	b.n	80085f6 <UART_SetConfig+0x27e>
 80085d8:	2304      	movs	r3, #4
 80085da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085de:	e00a      	b.n	80085f6 <UART_SetConfig+0x27e>
 80085e0:	2308      	movs	r3, #8
 80085e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085e6:	e006      	b.n	80085f6 <UART_SetConfig+0x27e>
 80085e8:	2310      	movs	r3, #16
 80085ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ee:	e002      	b.n	80085f6 <UART_SetConfig+0x27e>
 80085f0:	2310      	movs	r3, #16
 80085f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a17      	ldr	r2, [pc, #92]	; (8008658 <UART_SetConfig+0x2e0>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	f040 80a8 	bne.w	8008752 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008602:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008606:	2b08      	cmp	r3, #8
 8008608:	d834      	bhi.n	8008674 <UART_SetConfig+0x2fc>
 800860a:	a201      	add	r2, pc, #4	; (adr r2, 8008610 <UART_SetConfig+0x298>)
 800860c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008610:	08008635 	.word	0x08008635
 8008614:	08008675 	.word	0x08008675
 8008618:	0800863d 	.word	0x0800863d
 800861c:	08008675 	.word	0x08008675
 8008620:	08008643 	.word	0x08008643
 8008624:	08008675 	.word	0x08008675
 8008628:	08008675 	.word	0x08008675
 800862c:	08008675 	.word	0x08008675
 8008630:	0800864b 	.word	0x0800864b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008634:	f7fd f8b4 	bl	80057a0 <HAL_RCC_GetPCLK1Freq>
 8008638:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800863a:	e021      	b.n	8008680 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800863c:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <UART_SetConfig+0x2f8>)
 800863e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008640:	e01e      	b.n	8008680 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008642:	f7fd f83f 	bl	80056c4 <HAL_RCC_GetSysClockFreq>
 8008646:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008648:	e01a      	b.n	8008680 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800864a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008650:	e016      	b.n	8008680 <UART_SetConfig+0x308>
 8008652:	bf00      	nop
 8008654:	cfff69f3 	.word	0xcfff69f3
 8008658:	40008000 	.word	0x40008000
 800865c:	40013800 	.word	0x40013800
 8008660:	40021000 	.word	0x40021000
 8008664:	40004400 	.word	0x40004400
 8008668:	40004800 	.word	0x40004800
 800866c:	40004c00 	.word	0x40004c00
 8008670:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800867e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 812a 	beq.w	80088dc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	4a9e      	ldr	r2, [pc, #632]	; (8008908 <UART_SetConfig+0x590>)
 800868e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008692:	461a      	mov	r2, r3
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	fbb3 f3f2 	udiv	r3, r3, r2
 800869a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	4613      	mov	r3, r2
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	4413      	add	r3, r2
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d305      	bcc.n	80086b8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d903      	bls.n	80086c0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086be:	e10d      	b.n	80088dc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	2200      	movs	r2, #0
 80086c4:	60bb      	str	r3, [r7, #8]
 80086c6:	60fa      	str	r2, [r7, #12]
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	4a8e      	ldr	r2, [pc, #568]	; (8008908 <UART_SetConfig+0x590>)
 80086ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	2200      	movs	r2, #0
 80086d6:	603b      	str	r3, [r7, #0]
 80086d8:	607a      	str	r2, [r7, #4]
 80086da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086e2:	f7f8 fae9 	bl	8000cb8 <__aeabi_uldivmod>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4610      	mov	r0, r2
 80086ec:	4619      	mov	r1, r3
 80086ee:	f04f 0200 	mov.w	r2, #0
 80086f2:	f04f 0300 	mov.w	r3, #0
 80086f6:	020b      	lsls	r3, r1, #8
 80086f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086fc:	0202      	lsls	r2, r0, #8
 80086fe:	6979      	ldr	r1, [r7, #20]
 8008700:	6849      	ldr	r1, [r1, #4]
 8008702:	0849      	lsrs	r1, r1, #1
 8008704:	2000      	movs	r0, #0
 8008706:	460c      	mov	r4, r1
 8008708:	4605      	mov	r5, r0
 800870a:	eb12 0804 	adds.w	r8, r2, r4
 800870e:	eb43 0905 	adc.w	r9, r3, r5
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	469a      	mov	sl, r3
 800871a:	4693      	mov	fp, r2
 800871c:	4652      	mov	r2, sl
 800871e:	465b      	mov	r3, fp
 8008720:	4640      	mov	r0, r8
 8008722:	4649      	mov	r1, r9
 8008724:	f7f8 fac8 	bl	8000cb8 <__aeabi_uldivmod>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	4613      	mov	r3, r2
 800872e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008736:	d308      	bcc.n	800874a <UART_SetConfig+0x3d2>
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800873e:	d204      	bcs.n	800874a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6a3a      	ldr	r2, [r7, #32]
 8008746:	60da      	str	r2, [r3, #12]
 8008748:	e0c8      	b.n	80088dc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008750:	e0c4      	b.n	80088dc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800875a:	d167      	bne.n	800882c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800875c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008760:	2b08      	cmp	r3, #8
 8008762:	d828      	bhi.n	80087b6 <UART_SetConfig+0x43e>
 8008764:	a201      	add	r2, pc, #4	; (adr r2, 800876c <UART_SetConfig+0x3f4>)
 8008766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876a:	bf00      	nop
 800876c:	08008791 	.word	0x08008791
 8008770:	08008799 	.word	0x08008799
 8008774:	080087a1 	.word	0x080087a1
 8008778:	080087b7 	.word	0x080087b7
 800877c:	080087a7 	.word	0x080087a7
 8008780:	080087b7 	.word	0x080087b7
 8008784:	080087b7 	.word	0x080087b7
 8008788:	080087b7 	.word	0x080087b7
 800878c:	080087af 	.word	0x080087af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008790:	f7fd f806 	bl	80057a0 <HAL_RCC_GetPCLK1Freq>
 8008794:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008796:	e014      	b.n	80087c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008798:	f7fd f818 	bl	80057cc <HAL_RCC_GetPCLK2Freq>
 800879c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800879e:	e010      	b.n	80087c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087a0:	4b5a      	ldr	r3, [pc, #360]	; (800890c <UART_SetConfig+0x594>)
 80087a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087a4:	e00d      	b.n	80087c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087a6:	f7fc ff8d 	bl	80056c4 <HAL_RCC_GetSysClockFreq>
 80087aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087ac:	e009      	b.n	80087c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087b4:	e005      	b.n	80087c2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80087c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 8089 	beq.w	80088dc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	4a4e      	ldr	r2, [pc, #312]	; (8008908 <UART_SetConfig+0x590>)
 80087d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087d4:	461a      	mov	r2, r3
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80087dc:	005a      	lsls	r2, r3, #1
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	085b      	lsrs	r3, r3, #1
 80087e4:	441a      	add	r2, r3
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	2b0f      	cmp	r3, #15
 80087f4:	d916      	bls.n	8008824 <UART_SetConfig+0x4ac>
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087fc:	d212      	bcs.n	8008824 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	b29b      	uxth	r3, r3
 8008802:	f023 030f 	bic.w	r3, r3, #15
 8008806:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008808:	6a3b      	ldr	r3, [r7, #32]
 800880a:	085b      	lsrs	r3, r3, #1
 800880c:	b29b      	uxth	r3, r3
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	b29a      	uxth	r2, r3
 8008814:	8bfb      	ldrh	r3, [r7, #30]
 8008816:	4313      	orrs	r3, r2
 8008818:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	8bfa      	ldrh	r2, [r7, #30]
 8008820:	60da      	str	r2, [r3, #12]
 8008822:	e05b      	b.n	80088dc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800882a:	e057      	b.n	80088dc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800882c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008830:	2b08      	cmp	r3, #8
 8008832:	d828      	bhi.n	8008886 <UART_SetConfig+0x50e>
 8008834:	a201      	add	r2, pc, #4	; (adr r2, 800883c <UART_SetConfig+0x4c4>)
 8008836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883a:	bf00      	nop
 800883c:	08008861 	.word	0x08008861
 8008840:	08008869 	.word	0x08008869
 8008844:	08008871 	.word	0x08008871
 8008848:	08008887 	.word	0x08008887
 800884c:	08008877 	.word	0x08008877
 8008850:	08008887 	.word	0x08008887
 8008854:	08008887 	.word	0x08008887
 8008858:	08008887 	.word	0x08008887
 800885c:	0800887f 	.word	0x0800887f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008860:	f7fc ff9e 	bl	80057a0 <HAL_RCC_GetPCLK1Freq>
 8008864:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008866:	e014      	b.n	8008892 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008868:	f7fc ffb0 	bl	80057cc <HAL_RCC_GetPCLK2Freq>
 800886c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800886e:	e010      	b.n	8008892 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008870:	4b26      	ldr	r3, [pc, #152]	; (800890c <UART_SetConfig+0x594>)
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008874:	e00d      	b.n	8008892 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008876:	f7fc ff25 	bl	80056c4 <HAL_RCC_GetSysClockFreq>
 800887a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800887c:	e009      	b.n	8008892 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800887e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008882:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008884:	e005      	b.n	8008892 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008886:	2300      	movs	r3, #0
 8008888:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008890:	bf00      	nop
    }

    if (pclk != 0U)
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	2b00      	cmp	r3, #0
 8008896:	d021      	beq.n	80088dc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	4a1a      	ldr	r2, [pc, #104]	; (8008908 <UART_SetConfig+0x590>)
 800889e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088a2:	461a      	mov	r2, r3
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	085b      	lsrs	r3, r3, #1
 80088b0:	441a      	add	r2, r3
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	2b0f      	cmp	r3, #15
 80088c0:	d909      	bls.n	80088d6 <UART_SetConfig+0x55e>
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088c8:	d205      	bcs.n	80088d6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	60da      	str	r2, [r3, #12]
 80088d4:	e002      	b.n	80088dc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	2201      	movs	r2, #1
 80088e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	2200      	movs	r2, #0
 80088f0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2200      	movs	r2, #0
 80088f6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80088f8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3730      	adds	r7, #48	; 0x30
 8008900:	46bd      	mov	sp, r7
 8008902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008906:	bf00      	nop
 8008908:	0800cdec 	.word	0x0800cdec
 800890c:	00f42400 	.word	0x00f42400

08008910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00a      	beq.n	800893a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893e:	f003 0302 	and.w	r3, r3, #2
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00a      	beq.n	800895c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008960:	f003 0304 	and.w	r3, r3, #4
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00a      	beq.n	800897e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	430a      	orrs	r2, r1
 800897c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008982:	f003 0308 	and.w	r3, r3, #8
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00a      	beq.n	80089a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	430a      	orrs	r2, r1
 800899e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a4:	f003 0310 	and.w	r3, r3, #16
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00a      	beq.n	80089c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c6:	f003 0320 	and.w	r3, r3, #32
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00a      	beq.n	80089e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	430a      	orrs	r2, r1
 80089e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d01a      	beq.n	8008a26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	430a      	orrs	r2, r1
 8008a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a0e:	d10a      	bne.n	8008a26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00a      	beq.n	8008a48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	430a      	orrs	r2, r1
 8008a46:	605a      	str	r2, [r3, #4]
  }
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a64:	f7f9 fd8a 	bl	800257c <HAL_GetTick>
 8008a68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 0308 	and.w	r3, r3, #8
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d10e      	bne.n	8008a96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f82f 	bl	8008aea <UART_WaitOnFlagUntilTimeout>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e025      	b.n	8008ae2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0304 	and.w	r3, r3, #4
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d10e      	bne.n	8008ac2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008aa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f819 	bl	8008aea <UART_WaitOnFlagUntilTimeout>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e00f      	b.n	8008ae2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2220      	movs	r2, #32
 8008ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b09c      	sub	sp, #112	; 0x70
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	603b      	str	r3, [r7, #0]
 8008af6:	4613      	mov	r3, r2
 8008af8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008afa:	e0a9      	b.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b02:	f000 80a5 	beq.w	8008c50 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b06:	f7f9 fd39 	bl	800257c <HAL_GetTick>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d302      	bcc.n	8008b1c <UART_WaitOnFlagUntilTimeout+0x32>
 8008b16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d140      	bne.n	8008b9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b24:	e853 3f00 	ldrex	r3, [r3]
 8008b28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b30:	667b      	str	r3, [r7, #100]	; 0x64
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b3c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b42:	e841 2300 	strex	r3, r2, [r1]
 8008b46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1e6      	bne.n	8008b1c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	3308      	adds	r3, #8
 8008b54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b58:	e853 3f00 	ldrex	r3, [r3]
 8008b5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b60:	f023 0301 	bic.w	r3, r3, #1
 8008b64:	663b      	str	r3, [r7, #96]	; 0x60
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3308      	adds	r3, #8
 8008b6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e5      	bne.n	8008b4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2220      	movs	r2, #32
 8008b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2220      	movs	r2, #32
 8008b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e069      	b.n	8008c72 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0304 	and.w	r3, r3, #4
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d051      	beq.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bba:	d149      	bne.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	e853 3f00 	ldrex	r3, [r3]
 8008bd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	461a      	mov	r2, r3
 8008be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be4:	637b      	str	r3, [r7, #52]	; 0x34
 8008be6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bec:	e841 2300 	strex	r3, r2, [r1]
 8008bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1e6      	bne.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3308      	adds	r3, #8
 8008bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	e853 3f00 	ldrex	r3, [r3]
 8008c06:	613b      	str	r3, [r7, #16]
   return(result);
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f023 0301 	bic.w	r3, r3, #1
 8008c0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3308      	adds	r3, #8
 8008c16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c18:	623a      	str	r2, [r7, #32]
 8008c1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1c:	69f9      	ldr	r1, [r7, #28]
 8008c1e:	6a3a      	ldr	r2, [r7, #32]
 8008c20:	e841 2300 	strex	r3, r2, [r1]
 8008c24:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1e5      	bne.n	8008bf8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e010      	b.n	8008c72 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	69da      	ldr	r2, [r3, #28]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	4013      	ands	r3, r2
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	bf0c      	ite	eq
 8008c60:	2301      	moveq	r3, #1
 8008c62:	2300      	movne	r3, #0
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	461a      	mov	r2, r3
 8008c68:	79fb      	ldrb	r3, [r7, #7]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	f43f af46 	beq.w	8008afc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3770      	adds	r7, #112	; 0x70
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
	...

08008c7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b0a3      	sub	sp, #140	; 0x8c
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	4613      	mov	r3, r2
 8008c88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	88fa      	ldrh	r2, [r7, #6]
 8008c94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	88fa      	ldrh	r2, [r7, #6]
 8008c9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cae:	d10e      	bne.n	8008cce <UART_Start_Receive_IT+0x52>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d105      	bne.n	8008cc4 <UART_Start_Receive_IT+0x48>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008cbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cc2:	e02d      	b.n	8008d20 <UART_Start_Receive_IT+0xa4>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	22ff      	movs	r2, #255	; 0xff
 8008cc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ccc:	e028      	b.n	8008d20 <UART_Start_Receive_IT+0xa4>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10d      	bne.n	8008cf2 <UART_Start_Receive_IT+0x76>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <UART_Start_Receive_IT+0x6c>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	22ff      	movs	r2, #255	; 0xff
 8008ce2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ce6:	e01b      	b.n	8008d20 <UART_Start_Receive_IT+0xa4>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	227f      	movs	r2, #127	; 0x7f
 8008cec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cf0:	e016      	b.n	8008d20 <UART_Start_Receive_IT+0xa4>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cfa:	d10d      	bne.n	8008d18 <UART_Start_Receive_IT+0x9c>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d104      	bne.n	8008d0e <UART_Start_Receive_IT+0x92>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	227f      	movs	r2, #127	; 0x7f
 8008d08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d0c:	e008      	b.n	8008d20 <UART_Start_Receive_IT+0xa4>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	223f      	movs	r2, #63	; 0x3f
 8008d12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d16:	e003      	b.n	8008d20 <UART_Start_Receive_IT+0xa4>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2222      	movs	r2, #34	; 0x22
 8008d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3308      	adds	r3, #8
 8008d36:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d42:	f043 0301 	orr.w	r3, r3, #1
 8008d46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3308      	adds	r3, #8
 8008d50:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d54:	673a      	str	r2, [r7, #112]	; 0x70
 8008d56:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d58:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008d5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008d5c:	e841 2300 	strex	r3, r2, [r1]
 8008d60:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1e3      	bne.n	8008d30 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d70:	d153      	bne.n	8008e1a <UART_Start_Receive_IT+0x19e>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d78:	88fa      	ldrh	r2, [r7, #6]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d34d      	bcc.n	8008e1a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d86:	d107      	bne.n	8008d98 <UART_Start_Receive_IT+0x11c>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d103      	bne.n	8008d98 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	4a4b      	ldr	r2, [pc, #300]	; (8008ec0 <UART_Start_Receive_IT+0x244>)
 8008d94:	671a      	str	r2, [r3, #112]	; 0x70
 8008d96:	e002      	b.n	8008d9e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4a4a      	ldr	r2, [pc, #296]	; (8008ec4 <UART_Start_Receive_IT+0x248>)
 8008d9c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d01a      	beq.n	8008de4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008db6:	e853 3f00 	ldrex	r3, [r3]
 8008dba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dd2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dd6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e4      	bne.n	8008dae <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3308      	adds	r3, #8
 8008dea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dfa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3308      	adds	r3, #8
 8008e02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008e04:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e06:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e5      	bne.n	8008de4 <UART_Start_Receive_IT+0x168>
 8008e18:	e04a      	b.n	8008eb0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e22:	d107      	bne.n	8008e34 <UART_Start_Receive_IT+0x1b8>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d103      	bne.n	8008e34 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	4a26      	ldr	r2, [pc, #152]	; (8008ec8 <UART_Start_Receive_IT+0x24c>)
 8008e30:	671a      	str	r2, [r3, #112]	; 0x70
 8008e32:	e002      	b.n	8008e3a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	4a25      	ldr	r2, [pc, #148]	; (8008ecc <UART_Start_Receive_IT+0x250>)
 8008e38:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d019      	beq.n	8008e7e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e52:	e853 3f00 	ldrex	r3, [r3]
 8008e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008e5e:	677b      	str	r3, [r7, #116]	; 0x74
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	461a      	mov	r2, r3
 8008e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e68:	637b      	str	r3, [r7, #52]	; 0x34
 8008e6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e70:	e841 2300 	strex	r3, r2, [r1]
 8008e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1e6      	bne.n	8008e4a <UART_Start_Receive_IT+0x1ce>
 8008e7c:	e018      	b.n	8008eb0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	e853 3f00 	ldrex	r3, [r3]
 8008e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f043 0320 	orr.w	r3, r3, #32
 8008e92:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	461a      	mov	r2, r3
 8008e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e9c:	623b      	str	r3, [r7, #32]
 8008e9e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea0:	69f9      	ldr	r1, [r7, #28]
 8008ea2:	6a3a      	ldr	r2, [r7, #32]
 8008ea4:	e841 2300 	strex	r3, r2, [r1]
 8008ea8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e6      	bne.n	8008e7e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	378c      	adds	r7, #140	; 0x8c
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	080095d9 	.word	0x080095d9
 8008ec4:	080092e1 	.word	0x080092e1
 8008ec8:	0800917f 	.word	0x0800917f
 8008ecc:	0800901f 	.word	0x0800901f

08008ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b095      	sub	sp, #84	; 0x54
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee0:	e853 3f00 	ldrex	r3, [r3]
 8008ee4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008eec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ef8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008efc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008efe:	e841 2300 	strex	r3, r2, [r1]
 8008f02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1e6      	bne.n	8008ed8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3308      	adds	r3, #8
 8008f10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	e853 3f00 	ldrex	r3, [r3]
 8008f18:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f20:	f023 0301 	bic.w	r3, r3, #1
 8008f24:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3308      	adds	r3, #8
 8008f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e3      	bne.n	8008f0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d118      	bne.n	8008f7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	e853 3f00 	ldrex	r3, [r3]
 8008f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	f023 0310 	bic.w	r3, r3, #16
 8008f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	461a      	mov	r2, r3
 8008f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f68:	61bb      	str	r3, [r7, #24]
 8008f6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6c:	6979      	ldr	r1, [r7, #20]
 8008f6e:	69ba      	ldr	r2, [r7, #24]
 8008f70:	e841 2300 	strex	r3, r2, [r1]
 8008f74:	613b      	str	r3, [r7, #16]
   return(result);
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1e6      	bne.n	8008f4a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2220      	movs	r2, #32
 8008f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008f90:	bf00      	nop
 8008f92:	3754      	adds	r7, #84	; 0x54
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f7ff f9c6 	bl	800834c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fc0:	bf00      	nop
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	e853 3f00 	ldrex	r3, [r3]
 8008fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fe4:	61fb      	str	r3, [r7, #28]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	61bb      	str	r3, [r7, #24]
 8008ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff2:	6979      	ldr	r1, [r7, #20]
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	e841 2300 	strex	r3, r2, [r1]
 8008ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1e6      	bne.n	8008fd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2220      	movs	r2, #32
 8009006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff f991 	bl	8008338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009016:	bf00      	nop
 8009018:	3720      	adds	r7, #32
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b096      	sub	sp, #88	; 0x58
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800902c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009036:	2b22      	cmp	r3, #34	; 0x22
 8009038:	f040 8095 	bne.w	8009166 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009046:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800904a:	b2d9      	uxtb	r1, r3
 800904c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009050:	b2da      	uxtb	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009056:	400a      	ands	r2, r1
 8009058:	b2d2      	uxtb	r2, r2
 800905a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009060:	1c5a      	adds	r2, r3, #1
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800906c:	b29b      	uxth	r3, r3
 800906e:	3b01      	subs	r3, #1
 8009070:	b29a      	uxth	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800907e:	b29b      	uxth	r3, r3
 8009080:	2b00      	cmp	r3, #0
 8009082:	d178      	bne.n	8009176 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908c:	e853 3f00 	ldrex	r3, [r3]
 8009090:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009098:	653b      	str	r3, [r7, #80]	; 0x50
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090a2:	647b      	str	r3, [r7, #68]	; 0x44
 80090a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090aa:	e841 2300 	strex	r3, r2, [r1]
 80090ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1e6      	bne.n	8009084 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3308      	adds	r3, #8
 80090bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	623b      	str	r3, [r7, #32]
   return(result);
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	f023 0301 	bic.w	r3, r3, #1
 80090cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3308      	adds	r3, #8
 80090d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090d6:	633a      	str	r2, [r7, #48]	; 0x30
 80090d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e5      	bne.n	80090b6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d12e      	bne.n	800915e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	e853 3f00 	ldrex	r3, [r3]
 8009112:	60fb      	str	r3, [r7, #12]
   return(result);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f023 0310 	bic.w	r3, r3, #16
 800911a:	64bb      	str	r3, [r7, #72]	; 0x48
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	461a      	mov	r2, r3
 8009122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009124:	61fb      	str	r3, [r7, #28]
 8009126:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009128:	69b9      	ldr	r1, [r7, #24]
 800912a:	69fa      	ldr	r2, [r7, #28]
 800912c:	e841 2300 	strex	r3, r2, [r1]
 8009130:	617b      	str	r3, [r7, #20]
   return(result);
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1e6      	bne.n	8009106 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	f003 0310 	and.w	r3, r3, #16
 8009142:	2b10      	cmp	r3, #16
 8009144:	d103      	bne.n	800914e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2210      	movs	r2, #16
 800914c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7ff f902 	bl	8008360 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800915c:	e00b      	b.n	8009176 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7f8 fde2 	bl	8001d28 <HAL_UART_RxCpltCallback>
}
 8009164:	e007      	b.n	8009176 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	699a      	ldr	r2, [r3, #24]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f042 0208 	orr.w	r2, r2, #8
 8009174:	619a      	str	r2, [r3, #24]
}
 8009176:	bf00      	nop
 8009178:	3758      	adds	r7, #88	; 0x58
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b096      	sub	sp, #88	; 0x58
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800918c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009196:	2b22      	cmp	r3, #34	; 0x22
 8009198:	f040 8095 	bne.w	80092c6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091aa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80091ac:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80091b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80091b4:	4013      	ands	r3, r2
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091ba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c0:	1c9a      	adds	r2, r3, #2
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	3b01      	subs	r3, #1
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091de:	b29b      	uxth	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d178      	bne.n	80092d6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ec:	e853 3f00 	ldrex	r3, [r3]
 80091f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009202:	643b      	str	r3, [r7, #64]	; 0x40
 8009204:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009206:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009208:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800920a:	e841 2300 	strex	r3, r2, [r1]
 800920e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1e6      	bne.n	80091e4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3308      	adds	r3, #8
 800921c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	e853 3f00 	ldrex	r3, [r3]
 8009224:	61fb      	str	r3, [r7, #28]
   return(result);
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	f023 0301 	bic.w	r3, r3, #1
 800922c:	64bb      	str	r3, [r7, #72]	; 0x48
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3308      	adds	r3, #8
 8009234:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009236:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009238:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800923c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e5      	bne.n	8009216 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2220      	movs	r2, #32
 800924e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800925c:	2b01      	cmp	r3, #1
 800925e:	d12e      	bne.n	80092be <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	60bb      	str	r3, [r7, #8]
   return(result);
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f023 0310 	bic.w	r3, r3, #16
 800927a:	647b      	str	r3, [r7, #68]	; 0x44
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	461a      	mov	r2, r3
 8009282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009284:	61bb      	str	r3, [r7, #24]
 8009286:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	6979      	ldr	r1, [r7, #20]
 800928a:	69ba      	ldr	r2, [r7, #24]
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	613b      	str	r3, [r7, #16]
   return(result);
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e6      	bne.n	8009266 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	f003 0310 	and.w	r3, r3, #16
 80092a2:	2b10      	cmp	r3, #16
 80092a4:	d103      	bne.n	80092ae <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2210      	movs	r2, #16
 80092ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff f852 	bl	8008360 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092bc:	e00b      	b.n	80092d6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7f8 fd32 	bl	8001d28 <HAL_UART_RxCpltCallback>
}
 80092c4:	e007      	b.n	80092d6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	699a      	ldr	r2, [r3, #24]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f042 0208 	orr.w	r2, r2, #8
 80092d4:	619a      	str	r2, [r3, #24]
}
 80092d6:	bf00      	nop
 80092d8:	3758      	adds	r7, #88	; 0x58
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
	...

080092e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b0a6      	sub	sp, #152	; 0x98
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092ee:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	69db      	ldr	r3, [r3, #28]
 80092f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009316:	2b22      	cmp	r3, #34	; 0x22
 8009318:	f040 814f 	bne.w	80095ba <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009322:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009326:	e0f6      	b.n	8009516 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009332:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009336:	b2d9      	uxtb	r1, r3
 8009338:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800933c:	b2da      	uxtb	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009342:	400a      	ands	r2, r1
 8009344:	b2d2      	uxtb	r2, r2
 8009346:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009358:	b29b      	uxth	r3, r3
 800935a:	3b01      	subs	r3, #1
 800935c:	b29a      	uxth	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	69db      	ldr	r3, [r3, #28]
 800936a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800936e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009372:	f003 0307 	and.w	r3, r3, #7
 8009376:	2b00      	cmp	r3, #0
 8009378:	d053      	beq.n	8009422 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800937a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d011      	beq.n	80093aa <UART_RxISR_8BIT_FIFOEN+0xca>
 8009386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800938a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00b      	beq.n	80093aa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2201      	movs	r2, #1
 8009398:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093a0:	f043 0201 	orr.w	r2, r3, #1
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d011      	beq.n	80093da <UART_RxISR_8BIT_FIFOEN+0xfa>
 80093b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00b      	beq.n	80093da <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2202      	movs	r2, #2
 80093c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093d0:	f043 0204 	orr.w	r2, r3, #4
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093de:	f003 0304 	and.w	r3, r3, #4
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d011      	beq.n	800940a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80093e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00b      	beq.n	800940a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2204      	movs	r2, #4
 80093f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009400:	f043 0202 	orr.w	r2, r3, #2
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009410:	2b00      	cmp	r3, #0
 8009412:	d006      	beq.n	8009422 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7fe ff99 	bl	800834c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009428:	b29b      	uxth	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d173      	bne.n	8009516 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009436:	e853 3f00 	ldrex	r3, [r3]
 800943a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800943c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800943e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009442:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009450:	66bb      	str	r3, [r7, #104]	; 0x68
 8009452:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009456:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009458:	e841 2300 	strex	r3, r2, [r1]
 800945c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800945e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e4      	bne.n	800942e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3308      	adds	r3, #8
 800946a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800946e:	e853 3f00 	ldrex	r3, [r3]
 8009472:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800947a:	f023 0301 	bic.w	r3, r3, #1
 800947e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3308      	adds	r3, #8
 8009486:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009488:	657a      	str	r2, [r7, #84]	; 0x54
 800948a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800948e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009490:	e841 2300 	strex	r3, r2, [r1]
 8009494:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e3      	bne.n	8009464 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2220      	movs	r2, #32
 80094a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d12e      	bne.n	8009510 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c8:	f023 0310 	bic.w	r3, r3, #16
 80094cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094d6:	643b      	str	r3, [r7, #64]	; 0x40
 80094d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e6      	bne.n	80094b8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	69db      	ldr	r3, [r3, #28]
 80094f0:	f003 0310 	and.w	r3, r3, #16
 80094f4:	2b10      	cmp	r3, #16
 80094f6:	d103      	bne.n	8009500 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2210      	movs	r2, #16
 80094fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7fe ff29 	bl	8008360 <HAL_UARTEx_RxEventCallback>
 800950e:	e002      	b.n	8009516 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f7f8 fc09 	bl	8001d28 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009516:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800951a:	2b00      	cmp	r3, #0
 800951c:	d006      	beq.n	800952c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800951e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009522:	f003 0320 	and.w	r3, r3, #32
 8009526:	2b00      	cmp	r3, #0
 8009528:	f47f aefe 	bne.w	8009328 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009532:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009536:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800953a:	2b00      	cmp	r3, #0
 800953c:	d045      	beq.n	80095ca <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009544:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009548:	429a      	cmp	r2, r3
 800954a:	d23e      	bcs.n	80095ca <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3308      	adds	r3, #8
 8009552:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	e853 3f00 	ldrex	r3, [r3]
 800955a:	61fb      	str	r3, [r7, #28]
   return(result);
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009562:	673b      	str	r3, [r7, #112]	; 0x70
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3308      	adds	r3, #8
 800956a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800956c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800956e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009574:	e841 2300 	strex	r3, r2, [r1]
 8009578:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1e5      	bne.n	800954c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a14      	ldr	r2, [pc, #80]	; (80095d4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009584:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	e853 3f00 	ldrex	r3, [r3]
 8009592:	60bb      	str	r3, [r7, #8]
   return(result);
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f043 0320 	orr.w	r3, r3, #32
 800959a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095a4:	61bb      	str	r3, [r7, #24]
 80095a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a8:	6979      	ldr	r1, [r7, #20]
 80095aa:	69ba      	ldr	r2, [r7, #24]
 80095ac:	e841 2300 	strex	r3, r2, [r1]
 80095b0:	613b      	str	r3, [r7, #16]
   return(result);
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e6      	bne.n	8009586 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095b8:	e007      	b.n	80095ca <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	699a      	ldr	r2, [r3, #24]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f042 0208 	orr.w	r2, r2, #8
 80095c8:	619a      	str	r2, [r3, #24]
}
 80095ca:	bf00      	nop
 80095cc:	3798      	adds	r7, #152	; 0x98
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	0800901f 	.word	0x0800901f

080095d8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b0a8      	sub	sp, #160	; 0xa0
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095e6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800960e:	2b22      	cmp	r3, #34	; 0x22
 8009610:	f040 8153 	bne.w	80098ba <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800961a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800961e:	e0fa      	b.n	8009816 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800962e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009632:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009636:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800963a:	4013      	ands	r3, r2
 800963c:	b29a      	uxth	r2, r3
 800963e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009642:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009648:	1c9a      	adds	r2, r3, #2
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009654:	b29b      	uxth	r3, r3
 8009656:	3b01      	subs	r3, #1
 8009658:	b29a      	uxth	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	69db      	ldr	r3, [r3, #28]
 8009666:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800966a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800966e:	f003 0307 	and.w	r3, r3, #7
 8009672:	2b00      	cmp	r3, #0
 8009674:	d053      	beq.n	800971e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009676:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	2b00      	cmp	r3, #0
 8009680:	d011      	beq.n	80096a6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009682:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00b      	beq.n	80096a6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2201      	movs	r2, #1
 8009694:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800969c:	f043 0201 	orr.w	r2, r3, #1
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096aa:	f003 0302 	and.w	r3, r3, #2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d011      	beq.n	80096d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80096b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00b      	beq.n	80096d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2202      	movs	r2, #2
 80096c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096cc:	f043 0204 	orr.w	r2, r3, #4
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096da:	f003 0304 	and.w	r3, r3, #4
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d011      	beq.n	8009706 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80096e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00b      	beq.n	8009706 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2204      	movs	r2, #4
 80096f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096fc:	f043 0202 	orr.w	r2, r3, #2
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800970c:	2b00      	cmp	r3, #0
 800970e:	d006      	beq.n	800971e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7fe fe1b 	bl	800834c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009724:	b29b      	uxth	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	d175      	bne.n	8009816 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009732:	e853 3f00 	ldrex	r3, [r3]
 8009736:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800973a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800973e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800974c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800974e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009750:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009752:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009754:	e841 2300 	strex	r3, r2, [r1]
 8009758:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800975a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e4      	bne.n	800972a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	3308      	adds	r3, #8
 8009766:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800976a:	e853 3f00 	ldrex	r3, [r3]
 800976e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009776:	f023 0301 	bic.w	r3, r3, #1
 800977a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3308      	adds	r3, #8
 8009784:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009788:	65ba      	str	r2, [r7, #88]	; 0x58
 800978a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800978e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009790:	e841 2300 	strex	r3, r2, [r1]
 8009794:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e1      	bne.n	8009760 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2220      	movs	r2, #32
 80097a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d12e      	bne.n	8009810 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c0:	e853 3f00 	ldrex	r3, [r3]
 80097c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c8:	f023 0310 	bic.w	r3, r3, #16
 80097cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	461a      	mov	r2, r3
 80097d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097d6:	647b      	str	r3, [r7, #68]	; 0x44
 80097d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097de:	e841 2300 	strex	r3, r2, [r1]
 80097e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1e6      	bne.n	80097b8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	f003 0310 	and.w	r3, r3, #16
 80097f4:	2b10      	cmp	r3, #16
 80097f6:	d103      	bne.n	8009800 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2210      	movs	r2, #16
 80097fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009806:	4619      	mov	r1, r3
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7fe fda9 	bl	8008360 <HAL_UARTEx_RxEventCallback>
 800980e:	e002      	b.n	8009816 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7f8 fa89 	bl	8001d28 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009816:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800981a:	2b00      	cmp	r3, #0
 800981c:	d006      	beq.n	800982c <UART_RxISR_16BIT_FIFOEN+0x254>
 800981e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009822:	f003 0320 	and.w	r3, r3, #32
 8009826:	2b00      	cmp	r3, #0
 8009828:	f47f aefa 	bne.w	8009620 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009832:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009836:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800983a:	2b00      	cmp	r3, #0
 800983c:	d045      	beq.n	80098ca <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009844:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009848:	429a      	cmp	r2, r3
 800984a:	d23e      	bcs.n	80098ca <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	3308      	adds	r3, #8
 8009852:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	e853 3f00 	ldrex	r3, [r3]
 800985a:	623b      	str	r3, [r7, #32]
   return(result);
 800985c:	6a3b      	ldr	r3, [r7, #32]
 800985e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009862:	677b      	str	r3, [r7, #116]	; 0x74
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	3308      	adds	r3, #8
 800986a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800986c:	633a      	str	r2, [r7, #48]	; 0x30
 800986e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009870:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009874:	e841 2300 	strex	r3, r2, [r1]
 8009878:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1e5      	bne.n	800984c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a14      	ldr	r2, [pc, #80]	; (80098d4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009884:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	e853 3f00 	ldrex	r3, [r3]
 8009892:	60fb      	str	r3, [r7, #12]
   return(result);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f043 0320 	orr.w	r3, r3, #32
 800989a:	673b      	str	r3, [r7, #112]	; 0x70
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	461a      	mov	r2, r3
 80098a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098a4:	61fb      	str	r3, [r7, #28]
 80098a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a8:	69b9      	ldr	r1, [r7, #24]
 80098aa:	69fa      	ldr	r2, [r7, #28]
 80098ac:	e841 2300 	strex	r3, r2, [r1]
 80098b0:	617b      	str	r3, [r7, #20]
   return(result);
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1e6      	bne.n	8009886 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098b8:	e007      	b.n	80098ca <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	699a      	ldr	r2, [r3, #24]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f042 0208 	orr.w	r2, r2, #8
 80098c8:	619a      	str	r2, [r3, #24]
}
 80098ca:	bf00      	nop
 80098cc:	37a0      	adds	r7, #160	; 0xa0
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	0800917f 	.word	0x0800917f

080098d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009922:	2b01      	cmp	r3, #1
 8009924:	d101      	bne.n	800992a <HAL_UARTEx_DisableFifoMode+0x16>
 8009926:	2302      	movs	r3, #2
 8009928:	e027      	b.n	800997a <HAL_UARTEx_DisableFifoMode+0x66>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2224      	movs	r2, #36	; 0x24
 8009936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f022 0201 	bic.w	r2, r2, #1
 8009950:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009958:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2220      	movs	r2, #32
 800996c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009996:	2b01      	cmp	r3, #1
 8009998:	d101      	bne.n	800999e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800999a:	2302      	movs	r3, #2
 800999c:	e02d      	b.n	80099fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2224      	movs	r2, #36	; 0x24
 80099aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f022 0201 	bic.w	r2, r2, #1
 80099c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	430a      	orrs	r2, r1
 80099d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f850 	bl	8009a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2220      	movs	r2, #32
 80099ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d101      	bne.n	8009a1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a16:	2302      	movs	r3, #2
 8009a18:	e02d      	b.n	8009a76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2224      	movs	r2, #36	; 0x24
 8009a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f022 0201 	bic.w	r2, r2, #1
 8009a40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	683a      	ldr	r2, [r7, #0]
 8009a52:	430a      	orrs	r2, r1
 8009a54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f812 	bl	8009a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2220      	movs	r2, #32
 8009a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d108      	bne.n	8009aa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009aa0:	e031      	b.n	8009b06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009aa2:	2308      	movs	r3, #8
 8009aa4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009aa6:	2308      	movs	r3, #8
 8009aa8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	0e5b      	lsrs	r3, r3, #25
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	f003 0307 	and.w	r3, r3, #7
 8009ab8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	0f5b      	lsrs	r3, r3, #29
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	f003 0307 	and.w	r3, r3, #7
 8009ac8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	7b3a      	ldrb	r2, [r7, #12]
 8009ace:	4911      	ldr	r1, [pc, #68]	; (8009b14 <UARTEx_SetNbDataToProcess+0x94>)
 8009ad0:	5c8a      	ldrb	r2, [r1, r2]
 8009ad2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ad6:	7b3a      	ldrb	r2, [r7, #12]
 8009ad8:	490f      	ldr	r1, [pc, #60]	; (8009b18 <UARTEx_SetNbDataToProcess+0x98>)
 8009ada:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009adc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	7b7a      	ldrb	r2, [r7, #13]
 8009aec:	4909      	ldr	r1, [pc, #36]	; (8009b14 <UARTEx_SetNbDataToProcess+0x94>)
 8009aee:	5c8a      	ldrb	r2, [r1, r2]
 8009af0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009af4:	7b7a      	ldrb	r2, [r7, #13]
 8009af6:	4908      	ldr	r1, [pc, #32]	; (8009b18 <UARTEx_SetNbDataToProcess+0x98>)
 8009af8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009afa:	fb93 f3f2 	sdiv	r3, r3, r2
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009b06:	bf00      	nop
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	0800ce04 	.word	0x0800ce04
 8009b18:	0800ce0c 	.word	0x0800ce0c

08009b1c <atoi>:
 8009b1c:	220a      	movs	r2, #10
 8009b1e:	2100      	movs	r1, #0
 8009b20:	f000 be24 	b.w	800a76c <strtol>

08009b24 <__errno>:
 8009b24:	4b01      	ldr	r3, [pc, #4]	; (8009b2c <__errno+0x8>)
 8009b26:	6818      	ldr	r0, [r3, #0]
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	2000015c 	.word	0x2000015c

08009b30 <__libc_init_array>:
 8009b30:	b570      	push	{r4, r5, r6, lr}
 8009b32:	4d0d      	ldr	r5, [pc, #52]	; (8009b68 <__libc_init_array+0x38>)
 8009b34:	4c0d      	ldr	r4, [pc, #52]	; (8009b6c <__libc_init_array+0x3c>)
 8009b36:	1b64      	subs	r4, r4, r5
 8009b38:	10a4      	asrs	r4, r4, #2
 8009b3a:	2600      	movs	r6, #0
 8009b3c:	42a6      	cmp	r6, r4
 8009b3e:	d109      	bne.n	8009b54 <__libc_init_array+0x24>
 8009b40:	4d0b      	ldr	r5, [pc, #44]	; (8009b70 <__libc_init_array+0x40>)
 8009b42:	4c0c      	ldr	r4, [pc, #48]	; (8009b74 <__libc_init_array+0x44>)
 8009b44:	f003 f878 	bl	800cc38 <_init>
 8009b48:	1b64      	subs	r4, r4, r5
 8009b4a:	10a4      	asrs	r4, r4, #2
 8009b4c:	2600      	movs	r6, #0
 8009b4e:	42a6      	cmp	r6, r4
 8009b50:	d105      	bne.n	8009b5e <__libc_init_array+0x2e>
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
 8009b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b58:	4798      	blx	r3
 8009b5a:	3601      	adds	r6, #1
 8009b5c:	e7ee      	b.n	8009b3c <__libc_init_array+0xc>
 8009b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b62:	4798      	blx	r3
 8009b64:	3601      	adds	r6, #1
 8009b66:	e7f2      	b.n	8009b4e <__libc_init_array+0x1e>
 8009b68:	0800d258 	.word	0x0800d258
 8009b6c:	0800d258 	.word	0x0800d258
 8009b70:	0800d258 	.word	0x0800d258
 8009b74:	0800d25c 	.word	0x0800d25c

08009b78 <memset>:
 8009b78:	4402      	add	r2, r0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d100      	bne.n	8009b82 <memset+0xa>
 8009b80:	4770      	bx	lr
 8009b82:	f803 1b01 	strb.w	r1, [r3], #1
 8009b86:	e7f9      	b.n	8009b7c <memset+0x4>

08009b88 <__cvt>:
 8009b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b8c:	ec55 4b10 	vmov	r4, r5, d0
 8009b90:	2d00      	cmp	r5, #0
 8009b92:	460e      	mov	r6, r1
 8009b94:	4619      	mov	r1, r3
 8009b96:	462b      	mov	r3, r5
 8009b98:	bfbb      	ittet	lt
 8009b9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b9e:	461d      	movlt	r5, r3
 8009ba0:	2300      	movge	r3, #0
 8009ba2:	232d      	movlt	r3, #45	; 0x2d
 8009ba4:	700b      	strb	r3, [r1, #0]
 8009ba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ba8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009bac:	4691      	mov	r9, r2
 8009bae:	f023 0820 	bic.w	r8, r3, #32
 8009bb2:	bfbc      	itt	lt
 8009bb4:	4622      	movlt	r2, r4
 8009bb6:	4614      	movlt	r4, r2
 8009bb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bbc:	d005      	beq.n	8009bca <__cvt+0x42>
 8009bbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009bc2:	d100      	bne.n	8009bc6 <__cvt+0x3e>
 8009bc4:	3601      	adds	r6, #1
 8009bc6:	2102      	movs	r1, #2
 8009bc8:	e000      	b.n	8009bcc <__cvt+0x44>
 8009bca:	2103      	movs	r1, #3
 8009bcc:	ab03      	add	r3, sp, #12
 8009bce:	9301      	str	r3, [sp, #4]
 8009bd0:	ab02      	add	r3, sp, #8
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	ec45 4b10 	vmov	d0, r4, r5
 8009bd8:	4653      	mov	r3, sl
 8009bda:	4632      	mov	r2, r6
 8009bdc:	f000 ff3c 	bl	800aa58 <_dtoa_r>
 8009be0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009be4:	4607      	mov	r7, r0
 8009be6:	d102      	bne.n	8009bee <__cvt+0x66>
 8009be8:	f019 0f01 	tst.w	r9, #1
 8009bec:	d022      	beq.n	8009c34 <__cvt+0xac>
 8009bee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bf2:	eb07 0906 	add.w	r9, r7, r6
 8009bf6:	d110      	bne.n	8009c1a <__cvt+0x92>
 8009bf8:	783b      	ldrb	r3, [r7, #0]
 8009bfa:	2b30      	cmp	r3, #48	; 0x30
 8009bfc:	d10a      	bne.n	8009c14 <__cvt+0x8c>
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2300      	movs	r3, #0
 8009c02:	4620      	mov	r0, r4
 8009c04:	4629      	mov	r1, r5
 8009c06:	f7f6 ff97 	bl	8000b38 <__aeabi_dcmpeq>
 8009c0a:	b918      	cbnz	r0, 8009c14 <__cvt+0x8c>
 8009c0c:	f1c6 0601 	rsb	r6, r6, #1
 8009c10:	f8ca 6000 	str.w	r6, [sl]
 8009c14:	f8da 3000 	ldr.w	r3, [sl]
 8009c18:	4499      	add	r9, r3
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4620      	mov	r0, r4
 8009c20:	4629      	mov	r1, r5
 8009c22:	f7f6 ff89 	bl	8000b38 <__aeabi_dcmpeq>
 8009c26:	b108      	cbz	r0, 8009c2c <__cvt+0xa4>
 8009c28:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c2c:	2230      	movs	r2, #48	; 0x30
 8009c2e:	9b03      	ldr	r3, [sp, #12]
 8009c30:	454b      	cmp	r3, r9
 8009c32:	d307      	bcc.n	8009c44 <__cvt+0xbc>
 8009c34:	9b03      	ldr	r3, [sp, #12]
 8009c36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c38:	1bdb      	subs	r3, r3, r7
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	b004      	add	sp, #16
 8009c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c44:	1c59      	adds	r1, r3, #1
 8009c46:	9103      	str	r1, [sp, #12]
 8009c48:	701a      	strb	r2, [r3, #0]
 8009c4a:	e7f0      	b.n	8009c2e <__cvt+0xa6>

08009c4c <__exponent>:
 8009c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2900      	cmp	r1, #0
 8009c52:	bfb8      	it	lt
 8009c54:	4249      	neglt	r1, r1
 8009c56:	f803 2b02 	strb.w	r2, [r3], #2
 8009c5a:	bfb4      	ite	lt
 8009c5c:	222d      	movlt	r2, #45	; 0x2d
 8009c5e:	222b      	movge	r2, #43	; 0x2b
 8009c60:	2909      	cmp	r1, #9
 8009c62:	7042      	strb	r2, [r0, #1]
 8009c64:	dd2a      	ble.n	8009cbc <__exponent+0x70>
 8009c66:	f10d 0407 	add.w	r4, sp, #7
 8009c6a:	46a4      	mov	ip, r4
 8009c6c:	270a      	movs	r7, #10
 8009c6e:	46a6      	mov	lr, r4
 8009c70:	460a      	mov	r2, r1
 8009c72:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c76:	fb07 1516 	mls	r5, r7, r6, r1
 8009c7a:	3530      	adds	r5, #48	; 0x30
 8009c7c:	2a63      	cmp	r2, #99	; 0x63
 8009c7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c86:	4631      	mov	r1, r6
 8009c88:	dcf1      	bgt.n	8009c6e <__exponent+0x22>
 8009c8a:	3130      	adds	r1, #48	; 0x30
 8009c8c:	f1ae 0502 	sub.w	r5, lr, #2
 8009c90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c94:	1c44      	adds	r4, r0, #1
 8009c96:	4629      	mov	r1, r5
 8009c98:	4561      	cmp	r1, ip
 8009c9a:	d30a      	bcc.n	8009cb2 <__exponent+0x66>
 8009c9c:	f10d 0209 	add.w	r2, sp, #9
 8009ca0:	eba2 020e 	sub.w	r2, r2, lr
 8009ca4:	4565      	cmp	r5, ip
 8009ca6:	bf88      	it	hi
 8009ca8:	2200      	movhi	r2, #0
 8009caa:	4413      	add	r3, r2
 8009cac:	1a18      	subs	r0, r3, r0
 8009cae:	b003      	add	sp, #12
 8009cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009cba:	e7ed      	b.n	8009c98 <__exponent+0x4c>
 8009cbc:	2330      	movs	r3, #48	; 0x30
 8009cbe:	3130      	adds	r1, #48	; 0x30
 8009cc0:	7083      	strb	r3, [r0, #2]
 8009cc2:	70c1      	strb	r1, [r0, #3]
 8009cc4:	1d03      	adds	r3, r0, #4
 8009cc6:	e7f1      	b.n	8009cac <__exponent+0x60>

08009cc8 <_printf_float>:
 8009cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ccc:	ed2d 8b02 	vpush	{d8}
 8009cd0:	b08d      	sub	sp, #52	; 0x34
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009cd8:	4616      	mov	r6, r2
 8009cda:	461f      	mov	r7, r3
 8009cdc:	4605      	mov	r5, r0
 8009cde:	f001 fe73 	bl	800b9c8 <_localeconv_r>
 8009ce2:	f8d0 a000 	ldr.w	sl, [r0]
 8009ce6:	4650      	mov	r0, sl
 8009ce8:	f7f6 faa4 	bl	8000234 <strlen>
 8009cec:	2300      	movs	r3, #0
 8009cee:	930a      	str	r3, [sp, #40]	; 0x28
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	9305      	str	r3, [sp, #20]
 8009cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8009cf8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009cfc:	3307      	adds	r3, #7
 8009cfe:	f023 0307 	bic.w	r3, r3, #7
 8009d02:	f103 0208 	add.w	r2, r3, #8
 8009d06:	f8c8 2000 	str.w	r2, [r8]
 8009d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009d16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d1a:	9307      	str	r3, [sp, #28]
 8009d1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d20:	ee08 0a10 	vmov	s16, r0
 8009d24:	4b9f      	ldr	r3, [pc, #636]	; (8009fa4 <_printf_float+0x2dc>)
 8009d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2e:	f7f6 ff35 	bl	8000b9c <__aeabi_dcmpun>
 8009d32:	bb88      	cbnz	r0, 8009d98 <_printf_float+0xd0>
 8009d34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d38:	4b9a      	ldr	r3, [pc, #616]	; (8009fa4 <_printf_float+0x2dc>)
 8009d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3e:	f7f6 ff0f 	bl	8000b60 <__aeabi_dcmple>
 8009d42:	bb48      	cbnz	r0, 8009d98 <_printf_float+0xd0>
 8009d44:	2200      	movs	r2, #0
 8009d46:	2300      	movs	r3, #0
 8009d48:	4640      	mov	r0, r8
 8009d4a:	4649      	mov	r1, r9
 8009d4c:	f7f6 fefe 	bl	8000b4c <__aeabi_dcmplt>
 8009d50:	b110      	cbz	r0, 8009d58 <_printf_float+0x90>
 8009d52:	232d      	movs	r3, #45	; 0x2d
 8009d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d58:	4b93      	ldr	r3, [pc, #588]	; (8009fa8 <_printf_float+0x2e0>)
 8009d5a:	4894      	ldr	r0, [pc, #592]	; (8009fac <_printf_float+0x2e4>)
 8009d5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d60:	bf94      	ite	ls
 8009d62:	4698      	movls	r8, r3
 8009d64:	4680      	movhi	r8, r0
 8009d66:	2303      	movs	r3, #3
 8009d68:	6123      	str	r3, [r4, #16]
 8009d6a:	9b05      	ldr	r3, [sp, #20]
 8009d6c:	f023 0204 	bic.w	r2, r3, #4
 8009d70:	6022      	str	r2, [r4, #0]
 8009d72:	f04f 0900 	mov.w	r9, #0
 8009d76:	9700      	str	r7, [sp, #0]
 8009d78:	4633      	mov	r3, r6
 8009d7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f000 f9d8 	bl	800a134 <_printf_common>
 8009d84:	3001      	adds	r0, #1
 8009d86:	f040 8090 	bne.w	8009eaa <_printf_float+0x1e2>
 8009d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8e:	b00d      	add	sp, #52	; 0x34
 8009d90:	ecbd 8b02 	vpop	{d8}
 8009d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d98:	4642      	mov	r2, r8
 8009d9a:	464b      	mov	r3, r9
 8009d9c:	4640      	mov	r0, r8
 8009d9e:	4649      	mov	r1, r9
 8009da0:	f7f6 fefc 	bl	8000b9c <__aeabi_dcmpun>
 8009da4:	b140      	cbz	r0, 8009db8 <_printf_float+0xf0>
 8009da6:	464b      	mov	r3, r9
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	bfbc      	itt	lt
 8009dac:	232d      	movlt	r3, #45	; 0x2d
 8009dae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009db2:	487f      	ldr	r0, [pc, #508]	; (8009fb0 <_printf_float+0x2e8>)
 8009db4:	4b7f      	ldr	r3, [pc, #508]	; (8009fb4 <_printf_float+0x2ec>)
 8009db6:	e7d1      	b.n	8009d5c <_printf_float+0x94>
 8009db8:	6863      	ldr	r3, [r4, #4]
 8009dba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009dbe:	9206      	str	r2, [sp, #24]
 8009dc0:	1c5a      	adds	r2, r3, #1
 8009dc2:	d13f      	bne.n	8009e44 <_printf_float+0x17c>
 8009dc4:	2306      	movs	r3, #6
 8009dc6:	6063      	str	r3, [r4, #4]
 8009dc8:	9b05      	ldr	r3, [sp, #20]
 8009dca:	6861      	ldr	r1, [r4, #4]
 8009dcc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	9303      	str	r3, [sp, #12]
 8009dd4:	ab0a      	add	r3, sp, #40	; 0x28
 8009dd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009dda:	ab09      	add	r3, sp, #36	; 0x24
 8009ddc:	ec49 8b10 	vmov	d0, r8, r9
 8009de0:	9300      	str	r3, [sp, #0]
 8009de2:	6022      	str	r2, [r4, #0]
 8009de4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009de8:	4628      	mov	r0, r5
 8009dea:	f7ff fecd 	bl	8009b88 <__cvt>
 8009dee:	9b06      	ldr	r3, [sp, #24]
 8009df0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009df2:	2b47      	cmp	r3, #71	; 0x47
 8009df4:	4680      	mov	r8, r0
 8009df6:	d108      	bne.n	8009e0a <_printf_float+0x142>
 8009df8:	1cc8      	adds	r0, r1, #3
 8009dfa:	db02      	blt.n	8009e02 <_printf_float+0x13a>
 8009dfc:	6863      	ldr	r3, [r4, #4]
 8009dfe:	4299      	cmp	r1, r3
 8009e00:	dd41      	ble.n	8009e86 <_printf_float+0x1be>
 8009e02:	f1ab 0b02 	sub.w	fp, fp, #2
 8009e06:	fa5f fb8b 	uxtb.w	fp, fp
 8009e0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e0e:	d820      	bhi.n	8009e52 <_printf_float+0x18a>
 8009e10:	3901      	subs	r1, #1
 8009e12:	465a      	mov	r2, fp
 8009e14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e18:	9109      	str	r1, [sp, #36]	; 0x24
 8009e1a:	f7ff ff17 	bl	8009c4c <__exponent>
 8009e1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e20:	1813      	adds	r3, r2, r0
 8009e22:	2a01      	cmp	r2, #1
 8009e24:	4681      	mov	r9, r0
 8009e26:	6123      	str	r3, [r4, #16]
 8009e28:	dc02      	bgt.n	8009e30 <_printf_float+0x168>
 8009e2a:	6822      	ldr	r2, [r4, #0]
 8009e2c:	07d2      	lsls	r2, r2, #31
 8009e2e:	d501      	bpl.n	8009e34 <_printf_float+0x16c>
 8009e30:	3301      	adds	r3, #1
 8009e32:	6123      	str	r3, [r4, #16]
 8009e34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d09c      	beq.n	8009d76 <_printf_float+0xae>
 8009e3c:	232d      	movs	r3, #45	; 0x2d
 8009e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e42:	e798      	b.n	8009d76 <_printf_float+0xae>
 8009e44:	9a06      	ldr	r2, [sp, #24]
 8009e46:	2a47      	cmp	r2, #71	; 0x47
 8009e48:	d1be      	bne.n	8009dc8 <_printf_float+0x100>
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1bc      	bne.n	8009dc8 <_printf_float+0x100>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e7b9      	b.n	8009dc6 <_printf_float+0xfe>
 8009e52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e56:	d118      	bne.n	8009e8a <_printf_float+0x1c2>
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	6863      	ldr	r3, [r4, #4]
 8009e5c:	dd0b      	ble.n	8009e76 <_printf_float+0x1ae>
 8009e5e:	6121      	str	r1, [r4, #16]
 8009e60:	b913      	cbnz	r3, 8009e68 <_printf_float+0x1a0>
 8009e62:	6822      	ldr	r2, [r4, #0]
 8009e64:	07d0      	lsls	r0, r2, #31
 8009e66:	d502      	bpl.n	8009e6e <_printf_float+0x1a6>
 8009e68:	3301      	adds	r3, #1
 8009e6a:	440b      	add	r3, r1
 8009e6c:	6123      	str	r3, [r4, #16]
 8009e6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e70:	f04f 0900 	mov.w	r9, #0
 8009e74:	e7de      	b.n	8009e34 <_printf_float+0x16c>
 8009e76:	b913      	cbnz	r3, 8009e7e <_printf_float+0x1b6>
 8009e78:	6822      	ldr	r2, [r4, #0]
 8009e7a:	07d2      	lsls	r2, r2, #31
 8009e7c:	d501      	bpl.n	8009e82 <_printf_float+0x1ba>
 8009e7e:	3302      	adds	r3, #2
 8009e80:	e7f4      	b.n	8009e6c <_printf_float+0x1a4>
 8009e82:	2301      	movs	r3, #1
 8009e84:	e7f2      	b.n	8009e6c <_printf_float+0x1a4>
 8009e86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e8c:	4299      	cmp	r1, r3
 8009e8e:	db05      	blt.n	8009e9c <_printf_float+0x1d4>
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	6121      	str	r1, [r4, #16]
 8009e94:	07d8      	lsls	r0, r3, #31
 8009e96:	d5ea      	bpl.n	8009e6e <_printf_float+0x1a6>
 8009e98:	1c4b      	adds	r3, r1, #1
 8009e9a:	e7e7      	b.n	8009e6c <_printf_float+0x1a4>
 8009e9c:	2900      	cmp	r1, #0
 8009e9e:	bfd4      	ite	le
 8009ea0:	f1c1 0202 	rsble	r2, r1, #2
 8009ea4:	2201      	movgt	r2, #1
 8009ea6:	4413      	add	r3, r2
 8009ea8:	e7e0      	b.n	8009e6c <_printf_float+0x1a4>
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	055a      	lsls	r2, r3, #21
 8009eae:	d407      	bmi.n	8009ec0 <_printf_float+0x1f8>
 8009eb0:	6923      	ldr	r3, [r4, #16]
 8009eb2:	4642      	mov	r2, r8
 8009eb4:	4631      	mov	r1, r6
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	47b8      	blx	r7
 8009eba:	3001      	adds	r0, #1
 8009ebc:	d12c      	bne.n	8009f18 <_printf_float+0x250>
 8009ebe:	e764      	b.n	8009d8a <_printf_float+0xc2>
 8009ec0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ec4:	f240 80e0 	bls.w	800a088 <_printf_float+0x3c0>
 8009ec8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ecc:	2200      	movs	r2, #0
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f7f6 fe32 	bl	8000b38 <__aeabi_dcmpeq>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d034      	beq.n	8009f42 <_printf_float+0x27a>
 8009ed8:	4a37      	ldr	r2, [pc, #220]	; (8009fb8 <_printf_float+0x2f0>)
 8009eda:	2301      	movs	r3, #1
 8009edc:	4631      	mov	r1, r6
 8009ede:	4628      	mov	r0, r5
 8009ee0:	47b8      	blx	r7
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	f43f af51 	beq.w	8009d8a <_printf_float+0xc2>
 8009ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009eec:	429a      	cmp	r2, r3
 8009eee:	db02      	blt.n	8009ef6 <_printf_float+0x22e>
 8009ef0:	6823      	ldr	r3, [r4, #0]
 8009ef2:	07d8      	lsls	r0, r3, #31
 8009ef4:	d510      	bpl.n	8009f18 <_printf_float+0x250>
 8009ef6:	ee18 3a10 	vmov	r3, s16
 8009efa:	4652      	mov	r2, sl
 8009efc:	4631      	mov	r1, r6
 8009efe:	4628      	mov	r0, r5
 8009f00:	47b8      	blx	r7
 8009f02:	3001      	adds	r0, #1
 8009f04:	f43f af41 	beq.w	8009d8a <_printf_float+0xc2>
 8009f08:	f04f 0800 	mov.w	r8, #0
 8009f0c:	f104 091a 	add.w	r9, r4, #26
 8009f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f12:	3b01      	subs	r3, #1
 8009f14:	4543      	cmp	r3, r8
 8009f16:	dc09      	bgt.n	8009f2c <_printf_float+0x264>
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	079b      	lsls	r3, r3, #30
 8009f1c:	f100 8105 	bmi.w	800a12a <_printf_float+0x462>
 8009f20:	68e0      	ldr	r0, [r4, #12]
 8009f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f24:	4298      	cmp	r0, r3
 8009f26:	bfb8      	it	lt
 8009f28:	4618      	movlt	r0, r3
 8009f2a:	e730      	b.n	8009d8e <_printf_float+0xc6>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	464a      	mov	r2, r9
 8009f30:	4631      	mov	r1, r6
 8009f32:	4628      	mov	r0, r5
 8009f34:	47b8      	blx	r7
 8009f36:	3001      	adds	r0, #1
 8009f38:	f43f af27 	beq.w	8009d8a <_printf_float+0xc2>
 8009f3c:	f108 0801 	add.w	r8, r8, #1
 8009f40:	e7e6      	b.n	8009f10 <_printf_float+0x248>
 8009f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	dc39      	bgt.n	8009fbc <_printf_float+0x2f4>
 8009f48:	4a1b      	ldr	r2, [pc, #108]	; (8009fb8 <_printf_float+0x2f0>)
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	4631      	mov	r1, r6
 8009f4e:	4628      	mov	r0, r5
 8009f50:	47b8      	blx	r7
 8009f52:	3001      	adds	r0, #1
 8009f54:	f43f af19 	beq.w	8009d8a <_printf_float+0xc2>
 8009f58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	d102      	bne.n	8009f66 <_printf_float+0x29e>
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	07d9      	lsls	r1, r3, #31
 8009f64:	d5d8      	bpl.n	8009f18 <_printf_float+0x250>
 8009f66:	ee18 3a10 	vmov	r3, s16
 8009f6a:	4652      	mov	r2, sl
 8009f6c:	4631      	mov	r1, r6
 8009f6e:	4628      	mov	r0, r5
 8009f70:	47b8      	blx	r7
 8009f72:	3001      	adds	r0, #1
 8009f74:	f43f af09 	beq.w	8009d8a <_printf_float+0xc2>
 8009f78:	f04f 0900 	mov.w	r9, #0
 8009f7c:	f104 0a1a 	add.w	sl, r4, #26
 8009f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f82:	425b      	negs	r3, r3
 8009f84:	454b      	cmp	r3, r9
 8009f86:	dc01      	bgt.n	8009f8c <_printf_float+0x2c4>
 8009f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f8a:	e792      	b.n	8009eb2 <_printf_float+0x1ea>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	4652      	mov	r2, sl
 8009f90:	4631      	mov	r1, r6
 8009f92:	4628      	mov	r0, r5
 8009f94:	47b8      	blx	r7
 8009f96:	3001      	adds	r0, #1
 8009f98:	f43f aef7 	beq.w	8009d8a <_printf_float+0xc2>
 8009f9c:	f109 0901 	add.w	r9, r9, #1
 8009fa0:	e7ee      	b.n	8009f80 <_printf_float+0x2b8>
 8009fa2:	bf00      	nop
 8009fa4:	7fefffff 	.word	0x7fefffff
 8009fa8:	0800ce18 	.word	0x0800ce18
 8009fac:	0800ce1c 	.word	0x0800ce1c
 8009fb0:	0800ce24 	.word	0x0800ce24
 8009fb4:	0800ce20 	.word	0x0800ce20
 8009fb8:	0800ce28 	.word	0x0800ce28
 8009fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	bfa8      	it	ge
 8009fc4:	461a      	movge	r2, r3
 8009fc6:	2a00      	cmp	r2, #0
 8009fc8:	4691      	mov	r9, r2
 8009fca:	dc37      	bgt.n	800a03c <_printf_float+0x374>
 8009fcc:	f04f 0b00 	mov.w	fp, #0
 8009fd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fd4:	f104 021a 	add.w	r2, r4, #26
 8009fd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fda:	9305      	str	r3, [sp, #20]
 8009fdc:	eba3 0309 	sub.w	r3, r3, r9
 8009fe0:	455b      	cmp	r3, fp
 8009fe2:	dc33      	bgt.n	800a04c <_printf_float+0x384>
 8009fe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	db3b      	blt.n	800a064 <_printf_float+0x39c>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	07da      	lsls	r2, r3, #31
 8009ff0:	d438      	bmi.n	800a064 <_printf_float+0x39c>
 8009ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ff4:	9a05      	ldr	r2, [sp, #20]
 8009ff6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ff8:	1a9a      	subs	r2, r3, r2
 8009ffa:	eba3 0901 	sub.w	r9, r3, r1
 8009ffe:	4591      	cmp	r9, r2
 800a000:	bfa8      	it	ge
 800a002:	4691      	movge	r9, r2
 800a004:	f1b9 0f00 	cmp.w	r9, #0
 800a008:	dc35      	bgt.n	800a076 <_printf_float+0x3ae>
 800a00a:	f04f 0800 	mov.w	r8, #0
 800a00e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a012:	f104 0a1a 	add.w	sl, r4, #26
 800a016:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a01a:	1a9b      	subs	r3, r3, r2
 800a01c:	eba3 0309 	sub.w	r3, r3, r9
 800a020:	4543      	cmp	r3, r8
 800a022:	f77f af79 	ble.w	8009f18 <_printf_float+0x250>
 800a026:	2301      	movs	r3, #1
 800a028:	4652      	mov	r2, sl
 800a02a:	4631      	mov	r1, r6
 800a02c:	4628      	mov	r0, r5
 800a02e:	47b8      	blx	r7
 800a030:	3001      	adds	r0, #1
 800a032:	f43f aeaa 	beq.w	8009d8a <_printf_float+0xc2>
 800a036:	f108 0801 	add.w	r8, r8, #1
 800a03a:	e7ec      	b.n	800a016 <_printf_float+0x34e>
 800a03c:	4613      	mov	r3, r2
 800a03e:	4631      	mov	r1, r6
 800a040:	4642      	mov	r2, r8
 800a042:	4628      	mov	r0, r5
 800a044:	47b8      	blx	r7
 800a046:	3001      	adds	r0, #1
 800a048:	d1c0      	bne.n	8009fcc <_printf_float+0x304>
 800a04a:	e69e      	b.n	8009d8a <_printf_float+0xc2>
 800a04c:	2301      	movs	r3, #1
 800a04e:	4631      	mov	r1, r6
 800a050:	4628      	mov	r0, r5
 800a052:	9205      	str	r2, [sp, #20]
 800a054:	47b8      	blx	r7
 800a056:	3001      	adds	r0, #1
 800a058:	f43f ae97 	beq.w	8009d8a <_printf_float+0xc2>
 800a05c:	9a05      	ldr	r2, [sp, #20]
 800a05e:	f10b 0b01 	add.w	fp, fp, #1
 800a062:	e7b9      	b.n	8009fd8 <_printf_float+0x310>
 800a064:	ee18 3a10 	vmov	r3, s16
 800a068:	4652      	mov	r2, sl
 800a06a:	4631      	mov	r1, r6
 800a06c:	4628      	mov	r0, r5
 800a06e:	47b8      	blx	r7
 800a070:	3001      	adds	r0, #1
 800a072:	d1be      	bne.n	8009ff2 <_printf_float+0x32a>
 800a074:	e689      	b.n	8009d8a <_printf_float+0xc2>
 800a076:	9a05      	ldr	r2, [sp, #20]
 800a078:	464b      	mov	r3, r9
 800a07a:	4442      	add	r2, r8
 800a07c:	4631      	mov	r1, r6
 800a07e:	4628      	mov	r0, r5
 800a080:	47b8      	blx	r7
 800a082:	3001      	adds	r0, #1
 800a084:	d1c1      	bne.n	800a00a <_printf_float+0x342>
 800a086:	e680      	b.n	8009d8a <_printf_float+0xc2>
 800a088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a08a:	2a01      	cmp	r2, #1
 800a08c:	dc01      	bgt.n	800a092 <_printf_float+0x3ca>
 800a08e:	07db      	lsls	r3, r3, #31
 800a090:	d538      	bpl.n	800a104 <_printf_float+0x43c>
 800a092:	2301      	movs	r3, #1
 800a094:	4642      	mov	r2, r8
 800a096:	4631      	mov	r1, r6
 800a098:	4628      	mov	r0, r5
 800a09a:	47b8      	blx	r7
 800a09c:	3001      	adds	r0, #1
 800a09e:	f43f ae74 	beq.w	8009d8a <_printf_float+0xc2>
 800a0a2:	ee18 3a10 	vmov	r3, s16
 800a0a6:	4652      	mov	r2, sl
 800a0a8:	4631      	mov	r1, r6
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	47b8      	blx	r7
 800a0ae:	3001      	adds	r0, #1
 800a0b0:	f43f ae6b 	beq.w	8009d8a <_printf_float+0xc2>
 800a0b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f7f6 fd3c 	bl	8000b38 <__aeabi_dcmpeq>
 800a0c0:	b9d8      	cbnz	r0, 800a0fa <_printf_float+0x432>
 800a0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0c4:	f108 0201 	add.w	r2, r8, #1
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	4631      	mov	r1, r6
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	47b8      	blx	r7
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	d10e      	bne.n	800a0f2 <_printf_float+0x42a>
 800a0d4:	e659      	b.n	8009d8a <_printf_float+0xc2>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	4652      	mov	r2, sl
 800a0da:	4631      	mov	r1, r6
 800a0dc:	4628      	mov	r0, r5
 800a0de:	47b8      	blx	r7
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	f43f ae52 	beq.w	8009d8a <_printf_float+0xc2>
 800a0e6:	f108 0801 	add.w	r8, r8, #1
 800a0ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	4543      	cmp	r3, r8
 800a0f0:	dcf1      	bgt.n	800a0d6 <_printf_float+0x40e>
 800a0f2:	464b      	mov	r3, r9
 800a0f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0f8:	e6dc      	b.n	8009eb4 <_printf_float+0x1ec>
 800a0fa:	f04f 0800 	mov.w	r8, #0
 800a0fe:	f104 0a1a 	add.w	sl, r4, #26
 800a102:	e7f2      	b.n	800a0ea <_printf_float+0x422>
 800a104:	2301      	movs	r3, #1
 800a106:	4642      	mov	r2, r8
 800a108:	e7df      	b.n	800a0ca <_printf_float+0x402>
 800a10a:	2301      	movs	r3, #1
 800a10c:	464a      	mov	r2, r9
 800a10e:	4631      	mov	r1, r6
 800a110:	4628      	mov	r0, r5
 800a112:	47b8      	blx	r7
 800a114:	3001      	adds	r0, #1
 800a116:	f43f ae38 	beq.w	8009d8a <_printf_float+0xc2>
 800a11a:	f108 0801 	add.w	r8, r8, #1
 800a11e:	68e3      	ldr	r3, [r4, #12]
 800a120:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a122:	1a5b      	subs	r3, r3, r1
 800a124:	4543      	cmp	r3, r8
 800a126:	dcf0      	bgt.n	800a10a <_printf_float+0x442>
 800a128:	e6fa      	b.n	8009f20 <_printf_float+0x258>
 800a12a:	f04f 0800 	mov.w	r8, #0
 800a12e:	f104 0919 	add.w	r9, r4, #25
 800a132:	e7f4      	b.n	800a11e <_printf_float+0x456>

0800a134 <_printf_common>:
 800a134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a138:	4616      	mov	r6, r2
 800a13a:	4699      	mov	r9, r3
 800a13c:	688a      	ldr	r2, [r1, #8]
 800a13e:	690b      	ldr	r3, [r1, #16]
 800a140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a144:	4293      	cmp	r3, r2
 800a146:	bfb8      	it	lt
 800a148:	4613      	movlt	r3, r2
 800a14a:	6033      	str	r3, [r6, #0]
 800a14c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a150:	4607      	mov	r7, r0
 800a152:	460c      	mov	r4, r1
 800a154:	b10a      	cbz	r2, 800a15a <_printf_common+0x26>
 800a156:	3301      	adds	r3, #1
 800a158:	6033      	str	r3, [r6, #0]
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	0699      	lsls	r1, r3, #26
 800a15e:	bf42      	ittt	mi
 800a160:	6833      	ldrmi	r3, [r6, #0]
 800a162:	3302      	addmi	r3, #2
 800a164:	6033      	strmi	r3, [r6, #0]
 800a166:	6825      	ldr	r5, [r4, #0]
 800a168:	f015 0506 	ands.w	r5, r5, #6
 800a16c:	d106      	bne.n	800a17c <_printf_common+0x48>
 800a16e:	f104 0a19 	add.w	sl, r4, #25
 800a172:	68e3      	ldr	r3, [r4, #12]
 800a174:	6832      	ldr	r2, [r6, #0]
 800a176:	1a9b      	subs	r3, r3, r2
 800a178:	42ab      	cmp	r3, r5
 800a17a:	dc26      	bgt.n	800a1ca <_printf_common+0x96>
 800a17c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a180:	1e13      	subs	r3, r2, #0
 800a182:	6822      	ldr	r2, [r4, #0]
 800a184:	bf18      	it	ne
 800a186:	2301      	movne	r3, #1
 800a188:	0692      	lsls	r2, r2, #26
 800a18a:	d42b      	bmi.n	800a1e4 <_printf_common+0xb0>
 800a18c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a190:	4649      	mov	r1, r9
 800a192:	4638      	mov	r0, r7
 800a194:	47c0      	blx	r8
 800a196:	3001      	adds	r0, #1
 800a198:	d01e      	beq.n	800a1d8 <_printf_common+0xa4>
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	68e5      	ldr	r5, [r4, #12]
 800a19e:	6832      	ldr	r2, [r6, #0]
 800a1a0:	f003 0306 	and.w	r3, r3, #6
 800a1a4:	2b04      	cmp	r3, #4
 800a1a6:	bf08      	it	eq
 800a1a8:	1aad      	subeq	r5, r5, r2
 800a1aa:	68a3      	ldr	r3, [r4, #8]
 800a1ac:	6922      	ldr	r2, [r4, #16]
 800a1ae:	bf0c      	ite	eq
 800a1b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1b4:	2500      	movne	r5, #0
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	bfc4      	itt	gt
 800a1ba:	1a9b      	subgt	r3, r3, r2
 800a1bc:	18ed      	addgt	r5, r5, r3
 800a1be:	2600      	movs	r6, #0
 800a1c0:	341a      	adds	r4, #26
 800a1c2:	42b5      	cmp	r5, r6
 800a1c4:	d11a      	bne.n	800a1fc <_printf_common+0xc8>
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	e008      	b.n	800a1dc <_printf_common+0xa8>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	4652      	mov	r2, sl
 800a1ce:	4649      	mov	r1, r9
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	47c0      	blx	r8
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	d103      	bne.n	800a1e0 <_printf_common+0xac>
 800a1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e0:	3501      	adds	r5, #1
 800a1e2:	e7c6      	b.n	800a172 <_printf_common+0x3e>
 800a1e4:	18e1      	adds	r1, r4, r3
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	2030      	movs	r0, #48	; 0x30
 800a1ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1ee:	4422      	add	r2, r4
 800a1f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1f8:	3302      	adds	r3, #2
 800a1fa:	e7c7      	b.n	800a18c <_printf_common+0x58>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	4622      	mov	r2, r4
 800a200:	4649      	mov	r1, r9
 800a202:	4638      	mov	r0, r7
 800a204:	47c0      	blx	r8
 800a206:	3001      	adds	r0, #1
 800a208:	d0e6      	beq.n	800a1d8 <_printf_common+0xa4>
 800a20a:	3601      	adds	r6, #1
 800a20c:	e7d9      	b.n	800a1c2 <_printf_common+0x8e>
	...

0800a210 <_printf_i>:
 800a210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a214:	7e0f      	ldrb	r7, [r1, #24]
 800a216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a218:	2f78      	cmp	r7, #120	; 0x78
 800a21a:	4691      	mov	r9, r2
 800a21c:	4680      	mov	r8, r0
 800a21e:	460c      	mov	r4, r1
 800a220:	469a      	mov	sl, r3
 800a222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a226:	d807      	bhi.n	800a238 <_printf_i+0x28>
 800a228:	2f62      	cmp	r7, #98	; 0x62
 800a22a:	d80a      	bhi.n	800a242 <_printf_i+0x32>
 800a22c:	2f00      	cmp	r7, #0
 800a22e:	f000 80d8 	beq.w	800a3e2 <_printf_i+0x1d2>
 800a232:	2f58      	cmp	r7, #88	; 0x58
 800a234:	f000 80a3 	beq.w	800a37e <_printf_i+0x16e>
 800a238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a23c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a240:	e03a      	b.n	800a2b8 <_printf_i+0xa8>
 800a242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a246:	2b15      	cmp	r3, #21
 800a248:	d8f6      	bhi.n	800a238 <_printf_i+0x28>
 800a24a:	a101      	add	r1, pc, #4	; (adr r1, 800a250 <_printf_i+0x40>)
 800a24c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a250:	0800a2a9 	.word	0x0800a2a9
 800a254:	0800a2bd 	.word	0x0800a2bd
 800a258:	0800a239 	.word	0x0800a239
 800a25c:	0800a239 	.word	0x0800a239
 800a260:	0800a239 	.word	0x0800a239
 800a264:	0800a239 	.word	0x0800a239
 800a268:	0800a2bd 	.word	0x0800a2bd
 800a26c:	0800a239 	.word	0x0800a239
 800a270:	0800a239 	.word	0x0800a239
 800a274:	0800a239 	.word	0x0800a239
 800a278:	0800a239 	.word	0x0800a239
 800a27c:	0800a3c9 	.word	0x0800a3c9
 800a280:	0800a2ed 	.word	0x0800a2ed
 800a284:	0800a3ab 	.word	0x0800a3ab
 800a288:	0800a239 	.word	0x0800a239
 800a28c:	0800a239 	.word	0x0800a239
 800a290:	0800a3eb 	.word	0x0800a3eb
 800a294:	0800a239 	.word	0x0800a239
 800a298:	0800a2ed 	.word	0x0800a2ed
 800a29c:	0800a239 	.word	0x0800a239
 800a2a0:	0800a239 	.word	0x0800a239
 800a2a4:	0800a3b3 	.word	0x0800a3b3
 800a2a8:	682b      	ldr	r3, [r5, #0]
 800a2aa:	1d1a      	adds	r2, r3, #4
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	602a      	str	r2, [r5, #0]
 800a2b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e0a3      	b.n	800a404 <_printf_i+0x1f4>
 800a2bc:	6820      	ldr	r0, [r4, #0]
 800a2be:	6829      	ldr	r1, [r5, #0]
 800a2c0:	0606      	lsls	r6, r0, #24
 800a2c2:	f101 0304 	add.w	r3, r1, #4
 800a2c6:	d50a      	bpl.n	800a2de <_printf_i+0xce>
 800a2c8:	680e      	ldr	r6, [r1, #0]
 800a2ca:	602b      	str	r3, [r5, #0]
 800a2cc:	2e00      	cmp	r6, #0
 800a2ce:	da03      	bge.n	800a2d8 <_printf_i+0xc8>
 800a2d0:	232d      	movs	r3, #45	; 0x2d
 800a2d2:	4276      	negs	r6, r6
 800a2d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2d8:	485e      	ldr	r0, [pc, #376]	; (800a454 <_printf_i+0x244>)
 800a2da:	230a      	movs	r3, #10
 800a2dc:	e019      	b.n	800a312 <_printf_i+0x102>
 800a2de:	680e      	ldr	r6, [r1, #0]
 800a2e0:	602b      	str	r3, [r5, #0]
 800a2e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2e6:	bf18      	it	ne
 800a2e8:	b236      	sxthne	r6, r6
 800a2ea:	e7ef      	b.n	800a2cc <_printf_i+0xbc>
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	6820      	ldr	r0, [r4, #0]
 800a2f0:	1d19      	adds	r1, r3, #4
 800a2f2:	6029      	str	r1, [r5, #0]
 800a2f4:	0601      	lsls	r1, r0, #24
 800a2f6:	d501      	bpl.n	800a2fc <_printf_i+0xec>
 800a2f8:	681e      	ldr	r6, [r3, #0]
 800a2fa:	e002      	b.n	800a302 <_printf_i+0xf2>
 800a2fc:	0646      	lsls	r6, r0, #25
 800a2fe:	d5fb      	bpl.n	800a2f8 <_printf_i+0xe8>
 800a300:	881e      	ldrh	r6, [r3, #0]
 800a302:	4854      	ldr	r0, [pc, #336]	; (800a454 <_printf_i+0x244>)
 800a304:	2f6f      	cmp	r7, #111	; 0x6f
 800a306:	bf0c      	ite	eq
 800a308:	2308      	moveq	r3, #8
 800a30a:	230a      	movne	r3, #10
 800a30c:	2100      	movs	r1, #0
 800a30e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a312:	6865      	ldr	r5, [r4, #4]
 800a314:	60a5      	str	r5, [r4, #8]
 800a316:	2d00      	cmp	r5, #0
 800a318:	bfa2      	ittt	ge
 800a31a:	6821      	ldrge	r1, [r4, #0]
 800a31c:	f021 0104 	bicge.w	r1, r1, #4
 800a320:	6021      	strge	r1, [r4, #0]
 800a322:	b90e      	cbnz	r6, 800a328 <_printf_i+0x118>
 800a324:	2d00      	cmp	r5, #0
 800a326:	d04d      	beq.n	800a3c4 <_printf_i+0x1b4>
 800a328:	4615      	mov	r5, r2
 800a32a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a32e:	fb03 6711 	mls	r7, r3, r1, r6
 800a332:	5dc7      	ldrb	r7, [r0, r7]
 800a334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a338:	4637      	mov	r7, r6
 800a33a:	42bb      	cmp	r3, r7
 800a33c:	460e      	mov	r6, r1
 800a33e:	d9f4      	bls.n	800a32a <_printf_i+0x11a>
 800a340:	2b08      	cmp	r3, #8
 800a342:	d10b      	bne.n	800a35c <_printf_i+0x14c>
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	07de      	lsls	r6, r3, #31
 800a348:	d508      	bpl.n	800a35c <_printf_i+0x14c>
 800a34a:	6923      	ldr	r3, [r4, #16]
 800a34c:	6861      	ldr	r1, [r4, #4]
 800a34e:	4299      	cmp	r1, r3
 800a350:	bfde      	ittt	le
 800a352:	2330      	movle	r3, #48	; 0x30
 800a354:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a35c:	1b52      	subs	r2, r2, r5
 800a35e:	6122      	str	r2, [r4, #16]
 800a360:	f8cd a000 	str.w	sl, [sp]
 800a364:	464b      	mov	r3, r9
 800a366:	aa03      	add	r2, sp, #12
 800a368:	4621      	mov	r1, r4
 800a36a:	4640      	mov	r0, r8
 800a36c:	f7ff fee2 	bl	800a134 <_printf_common>
 800a370:	3001      	adds	r0, #1
 800a372:	d14c      	bne.n	800a40e <_printf_i+0x1fe>
 800a374:	f04f 30ff 	mov.w	r0, #4294967295
 800a378:	b004      	add	sp, #16
 800a37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a37e:	4835      	ldr	r0, [pc, #212]	; (800a454 <_printf_i+0x244>)
 800a380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a384:	6829      	ldr	r1, [r5, #0]
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	f851 6b04 	ldr.w	r6, [r1], #4
 800a38c:	6029      	str	r1, [r5, #0]
 800a38e:	061d      	lsls	r5, r3, #24
 800a390:	d514      	bpl.n	800a3bc <_printf_i+0x1ac>
 800a392:	07df      	lsls	r7, r3, #31
 800a394:	bf44      	itt	mi
 800a396:	f043 0320 	orrmi.w	r3, r3, #32
 800a39a:	6023      	strmi	r3, [r4, #0]
 800a39c:	b91e      	cbnz	r6, 800a3a6 <_printf_i+0x196>
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	f023 0320 	bic.w	r3, r3, #32
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	2310      	movs	r3, #16
 800a3a8:	e7b0      	b.n	800a30c <_printf_i+0xfc>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	f043 0320 	orr.w	r3, r3, #32
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	2378      	movs	r3, #120	; 0x78
 800a3b4:	4828      	ldr	r0, [pc, #160]	; (800a458 <_printf_i+0x248>)
 800a3b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3ba:	e7e3      	b.n	800a384 <_printf_i+0x174>
 800a3bc:	0659      	lsls	r1, r3, #25
 800a3be:	bf48      	it	mi
 800a3c0:	b2b6      	uxthmi	r6, r6
 800a3c2:	e7e6      	b.n	800a392 <_printf_i+0x182>
 800a3c4:	4615      	mov	r5, r2
 800a3c6:	e7bb      	b.n	800a340 <_printf_i+0x130>
 800a3c8:	682b      	ldr	r3, [r5, #0]
 800a3ca:	6826      	ldr	r6, [r4, #0]
 800a3cc:	6961      	ldr	r1, [r4, #20]
 800a3ce:	1d18      	adds	r0, r3, #4
 800a3d0:	6028      	str	r0, [r5, #0]
 800a3d2:	0635      	lsls	r5, r6, #24
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	d501      	bpl.n	800a3dc <_printf_i+0x1cc>
 800a3d8:	6019      	str	r1, [r3, #0]
 800a3da:	e002      	b.n	800a3e2 <_printf_i+0x1d2>
 800a3dc:	0670      	lsls	r0, r6, #25
 800a3de:	d5fb      	bpl.n	800a3d8 <_printf_i+0x1c8>
 800a3e0:	8019      	strh	r1, [r3, #0]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	6123      	str	r3, [r4, #16]
 800a3e6:	4615      	mov	r5, r2
 800a3e8:	e7ba      	b.n	800a360 <_printf_i+0x150>
 800a3ea:	682b      	ldr	r3, [r5, #0]
 800a3ec:	1d1a      	adds	r2, r3, #4
 800a3ee:	602a      	str	r2, [r5, #0]
 800a3f0:	681d      	ldr	r5, [r3, #0]
 800a3f2:	6862      	ldr	r2, [r4, #4]
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	f7f5 ff2a 	bl	8000250 <memchr>
 800a3fc:	b108      	cbz	r0, 800a402 <_printf_i+0x1f2>
 800a3fe:	1b40      	subs	r0, r0, r5
 800a400:	6060      	str	r0, [r4, #4]
 800a402:	6863      	ldr	r3, [r4, #4]
 800a404:	6123      	str	r3, [r4, #16]
 800a406:	2300      	movs	r3, #0
 800a408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a40c:	e7a8      	b.n	800a360 <_printf_i+0x150>
 800a40e:	6923      	ldr	r3, [r4, #16]
 800a410:	462a      	mov	r2, r5
 800a412:	4649      	mov	r1, r9
 800a414:	4640      	mov	r0, r8
 800a416:	47d0      	blx	sl
 800a418:	3001      	adds	r0, #1
 800a41a:	d0ab      	beq.n	800a374 <_printf_i+0x164>
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	079b      	lsls	r3, r3, #30
 800a420:	d413      	bmi.n	800a44a <_printf_i+0x23a>
 800a422:	68e0      	ldr	r0, [r4, #12]
 800a424:	9b03      	ldr	r3, [sp, #12]
 800a426:	4298      	cmp	r0, r3
 800a428:	bfb8      	it	lt
 800a42a:	4618      	movlt	r0, r3
 800a42c:	e7a4      	b.n	800a378 <_printf_i+0x168>
 800a42e:	2301      	movs	r3, #1
 800a430:	4632      	mov	r2, r6
 800a432:	4649      	mov	r1, r9
 800a434:	4640      	mov	r0, r8
 800a436:	47d0      	blx	sl
 800a438:	3001      	adds	r0, #1
 800a43a:	d09b      	beq.n	800a374 <_printf_i+0x164>
 800a43c:	3501      	adds	r5, #1
 800a43e:	68e3      	ldr	r3, [r4, #12]
 800a440:	9903      	ldr	r1, [sp, #12]
 800a442:	1a5b      	subs	r3, r3, r1
 800a444:	42ab      	cmp	r3, r5
 800a446:	dcf2      	bgt.n	800a42e <_printf_i+0x21e>
 800a448:	e7eb      	b.n	800a422 <_printf_i+0x212>
 800a44a:	2500      	movs	r5, #0
 800a44c:	f104 0619 	add.w	r6, r4, #25
 800a450:	e7f5      	b.n	800a43e <_printf_i+0x22e>
 800a452:	bf00      	nop
 800a454:	0800ce2a 	.word	0x0800ce2a
 800a458:	0800ce3b 	.word	0x0800ce3b

0800a45c <_puts_r>:
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	460e      	mov	r6, r1
 800a460:	4605      	mov	r5, r0
 800a462:	b118      	cbz	r0, 800a46c <_puts_r+0x10>
 800a464:	6983      	ldr	r3, [r0, #24]
 800a466:	b90b      	cbnz	r3, 800a46c <_puts_r+0x10>
 800a468:	f001 f9fe 	bl	800b868 <__sinit>
 800a46c:	69ab      	ldr	r3, [r5, #24]
 800a46e:	68ac      	ldr	r4, [r5, #8]
 800a470:	b913      	cbnz	r3, 800a478 <_puts_r+0x1c>
 800a472:	4628      	mov	r0, r5
 800a474:	f001 f9f8 	bl	800b868 <__sinit>
 800a478:	4b2c      	ldr	r3, [pc, #176]	; (800a52c <_puts_r+0xd0>)
 800a47a:	429c      	cmp	r4, r3
 800a47c:	d120      	bne.n	800a4c0 <_puts_r+0x64>
 800a47e:	686c      	ldr	r4, [r5, #4]
 800a480:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a482:	07db      	lsls	r3, r3, #31
 800a484:	d405      	bmi.n	800a492 <_puts_r+0x36>
 800a486:	89a3      	ldrh	r3, [r4, #12]
 800a488:	0598      	lsls	r0, r3, #22
 800a48a:	d402      	bmi.n	800a492 <_puts_r+0x36>
 800a48c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a48e:	f001 faa0 	bl	800b9d2 <__retarget_lock_acquire_recursive>
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	0719      	lsls	r1, r3, #28
 800a496:	d51d      	bpl.n	800a4d4 <_puts_r+0x78>
 800a498:	6923      	ldr	r3, [r4, #16]
 800a49a:	b1db      	cbz	r3, 800a4d4 <_puts_r+0x78>
 800a49c:	3e01      	subs	r6, #1
 800a49e:	68a3      	ldr	r3, [r4, #8]
 800a4a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	60a3      	str	r3, [r4, #8]
 800a4a8:	bb39      	cbnz	r1, 800a4fa <_puts_r+0x9e>
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	da38      	bge.n	800a520 <_puts_r+0xc4>
 800a4ae:	4622      	mov	r2, r4
 800a4b0:	210a      	movs	r1, #10
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	f000 f964 	bl	800a780 <__swbuf_r>
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	d011      	beq.n	800a4e0 <_puts_r+0x84>
 800a4bc:	250a      	movs	r5, #10
 800a4be:	e011      	b.n	800a4e4 <_puts_r+0x88>
 800a4c0:	4b1b      	ldr	r3, [pc, #108]	; (800a530 <_puts_r+0xd4>)
 800a4c2:	429c      	cmp	r4, r3
 800a4c4:	d101      	bne.n	800a4ca <_puts_r+0x6e>
 800a4c6:	68ac      	ldr	r4, [r5, #8]
 800a4c8:	e7da      	b.n	800a480 <_puts_r+0x24>
 800a4ca:	4b1a      	ldr	r3, [pc, #104]	; (800a534 <_puts_r+0xd8>)
 800a4cc:	429c      	cmp	r4, r3
 800a4ce:	bf08      	it	eq
 800a4d0:	68ec      	ldreq	r4, [r5, #12]
 800a4d2:	e7d5      	b.n	800a480 <_puts_r+0x24>
 800a4d4:	4621      	mov	r1, r4
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f000 f9a4 	bl	800a824 <__swsetup_r>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d0dd      	beq.n	800a49c <_puts_r+0x40>
 800a4e0:	f04f 35ff 	mov.w	r5, #4294967295
 800a4e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4e6:	07da      	lsls	r2, r3, #31
 800a4e8:	d405      	bmi.n	800a4f6 <_puts_r+0x9a>
 800a4ea:	89a3      	ldrh	r3, [r4, #12]
 800a4ec:	059b      	lsls	r3, r3, #22
 800a4ee:	d402      	bmi.n	800a4f6 <_puts_r+0x9a>
 800a4f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4f2:	f001 fa6f 	bl	800b9d4 <__retarget_lock_release_recursive>
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	bd70      	pop	{r4, r5, r6, pc}
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	da04      	bge.n	800a508 <_puts_r+0xac>
 800a4fe:	69a2      	ldr	r2, [r4, #24]
 800a500:	429a      	cmp	r2, r3
 800a502:	dc06      	bgt.n	800a512 <_puts_r+0xb6>
 800a504:	290a      	cmp	r1, #10
 800a506:	d004      	beq.n	800a512 <_puts_r+0xb6>
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	1c5a      	adds	r2, r3, #1
 800a50c:	6022      	str	r2, [r4, #0]
 800a50e:	7019      	strb	r1, [r3, #0]
 800a510:	e7c5      	b.n	800a49e <_puts_r+0x42>
 800a512:	4622      	mov	r2, r4
 800a514:	4628      	mov	r0, r5
 800a516:	f000 f933 	bl	800a780 <__swbuf_r>
 800a51a:	3001      	adds	r0, #1
 800a51c:	d1bf      	bne.n	800a49e <_puts_r+0x42>
 800a51e:	e7df      	b.n	800a4e0 <_puts_r+0x84>
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	250a      	movs	r5, #10
 800a524:	1c5a      	adds	r2, r3, #1
 800a526:	6022      	str	r2, [r4, #0]
 800a528:	701d      	strb	r5, [r3, #0]
 800a52a:	e7db      	b.n	800a4e4 <_puts_r+0x88>
 800a52c:	0800d098 	.word	0x0800d098
 800a530:	0800d0b8 	.word	0x0800d0b8
 800a534:	0800d078 	.word	0x0800d078

0800a538 <puts>:
 800a538:	4b02      	ldr	r3, [pc, #8]	; (800a544 <puts+0xc>)
 800a53a:	4601      	mov	r1, r0
 800a53c:	6818      	ldr	r0, [r3, #0]
 800a53e:	f7ff bf8d 	b.w	800a45c <_puts_r>
 800a542:	bf00      	nop
 800a544:	2000015c 	.word	0x2000015c

0800a548 <sniprintf>:
 800a548:	b40c      	push	{r2, r3}
 800a54a:	b530      	push	{r4, r5, lr}
 800a54c:	4b17      	ldr	r3, [pc, #92]	; (800a5ac <sniprintf+0x64>)
 800a54e:	1e0c      	subs	r4, r1, #0
 800a550:	681d      	ldr	r5, [r3, #0]
 800a552:	b09d      	sub	sp, #116	; 0x74
 800a554:	da08      	bge.n	800a568 <sniprintf+0x20>
 800a556:	238b      	movs	r3, #139	; 0x8b
 800a558:	602b      	str	r3, [r5, #0]
 800a55a:	f04f 30ff 	mov.w	r0, #4294967295
 800a55e:	b01d      	add	sp, #116	; 0x74
 800a560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a564:	b002      	add	sp, #8
 800a566:	4770      	bx	lr
 800a568:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a56c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a570:	bf14      	ite	ne
 800a572:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a576:	4623      	moveq	r3, r4
 800a578:	9304      	str	r3, [sp, #16]
 800a57a:	9307      	str	r3, [sp, #28]
 800a57c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a580:	9002      	str	r0, [sp, #8]
 800a582:	9006      	str	r0, [sp, #24]
 800a584:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a588:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a58a:	ab21      	add	r3, sp, #132	; 0x84
 800a58c:	a902      	add	r1, sp, #8
 800a58e:	4628      	mov	r0, r5
 800a590:	9301      	str	r3, [sp, #4]
 800a592:	f001 ff71 	bl	800c478 <_svfiprintf_r>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	bfbc      	itt	lt
 800a59a:	238b      	movlt	r3, #139	; 0x8b
 800a59c:	602b      	strlt	r3, [r5, #0]
 800a59e:	2c00      	cmp	r4, #0
 800a5a0:	d0dd      	beq.n	800a55e <sniprintf+0x16>
 800a5a2:	9b02      	ldr	r3, [sp, #8]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	701a      	strb	r2, [r3, #0]
 800a5a8:	e7d9      	b.n	800a55e <sniprintf+0x16>
 800a5aa:	bf00      	nop
 800a5ac:	2000015c 	.word	0x2000015c

0800a5b0 <strtok>:
 800a5b0:	4b16      	ldr	r3, [pc, #88]	; (800a60c <strtok+0x5c>)
 800a5b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5b4:	681e      	ldr	r6, [r3, #0]
 800a5b6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a5b8:	4605      	mov	r5, r0
 800a5ba:	b9fc      	cbnz	r4, 800a5fc <strtok+0x4c>
 800a5bc:	2050      	movs	r0, #80	; 0x50
 800a5be:	9101      	str	r1, [sp, #4]
 800a5c0:	f001 fa6e 	bl	800baa0 <malloc>
 800a5c4:	9901      	ldr	r1, [sp, #4]
 800a5c6:	65b0      	str	r0, [r6, #88]	; 0x58
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	b920      	cbnz	r0, 800a5d6 <strtok+0x26>
 800a5cc:	4b10      	ldr	r3, [pc, #64]	; (800a610 <strtok+0x60>)
 800a5ce:	4811      	ldr	r0, [pc, #68]	; (800a614 <strtok+0x64>)
 800a5d0:	2157      	movs	r1, #87	; 0x57
 800a5d2:	f000 f995 	bl	800a900 <__assert_func>
 800a5d6:	e9c0 4400 	strd	r4, r4, [r0]
 800a5da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a5de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a5e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a5e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a5ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a5ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a5f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a5f6:	6184      	str	r4, [r0, #24]
 800a5f8:	7704      	strb	r4, [r0, #28]
 800a5fa:	6244      	str	r4, [r0, #36]	; 0x24
 800a5fc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a5fe:	2301      	movs	r3, #1
 800a600:	4628      	mov	r0, r5
 800a602:	b002      	add	sp, #8
 800a604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a608:	f000 b806 	b.w	800a618 <__strtok_r>
 800a60c:	2000015c 	.word	0x2000015c
 800a610:	0800ce4c 	.word	0x0800ce4c
 800a614:	0800ce63 	.word	0x0800ce63

0800a618 <__strtok_r>:
 800a618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a61a:	b908      	cbnz	r0, 800a620 <__strtok_r+0x8>
 800a61c:	6810      	ldr	r0, [r2, #0]
 800a61e:	b188      	cbz	r0, 800a644 <__strtok_r+0x2c>
 800a620:	4604      	mov	r4, r0
 800a622:	4620      	mov	r0, r4
 800a624:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a628:	460f      	mov	r7, r1
 800a62a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a62e:	b91e      	cbnz	r6, 800a638 <__strtok_r+0x20>
 800a630:	b965      	cbnz	r5, 800a64c <__strtok_r+0x34>
 800a632:	6015      	str	r5, [r2, #0]
 800a634:	4628      	mov	r0, r5
 800a636:	e005      	b.n	800a644 <__strtok_r+0x2c>
 800a638:	42b5      	cmp	r5, r6
 800a63a:	d1f6      	bne.n	800a62a <__strtok_r+0x12>
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1f0      	bne.n	800a622 <__strtok_r+0xa>
 800a640:	6014      	str	r4, [r2, #0]
 800a642:	7003      	strb	r3, [r0, #0]
 800a644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a646:	461c      	mov	r4, r3
 800a648:	e00c      	b.n	800a664 <__strtok_r+0x4c>
 800a64a:	b915      	cbnz	r5, 800a652 <__strtok_r+0x3a>
 800a64c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a650:	460e      	mov	r6, r1
 800a652:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a656:	42ab      	cmp	r3, r5
 800a658:	d1f7      	bne.n	800a64a <__strtok_r+0x32>
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d0f3      	beq.n	800a646 <__strtok_r+0x2e>
 800a65e:	2300      	movs	r3, #0
 800a660:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a664:	6014      	str	r4, [r2, #0]
 800a666:	e7ed      	b.n	800a644 <__strtok_r+0x2c>

0800a668 <_strtol_l.constprop.0>:
 800a668:	2b01      	cmp	r3, #1
 800a66a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a66e:	d001      	beq.n	800a674 <_strtol_l.constprop.0+0xc>
 800a670:	2b24      	cmp	r3, #36	; 0x24
 800a672:	d906      	bls.n	800a682 <_strtol_l.constprop.0+0x1a>
 800a674:	f7ff fa56 	bl	8009b24 <__errno>
 800a678:	2316      	movs	r3, #22
 800a67a:	6003      	str	r3, [r0, #0]
 800a67c:	2000      	movs	r0, #0
 800a67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a682:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a768 <_strtol_l.constprop.0+0x100>
 800a686:	460d      	mov	r5, r1
 800a688:	462e      	mov	r6, r5
 800a68a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a68e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a692:	f017 0708 	ands.w	r7, r7, #8
 800a696:	d1f7      	bne.n	800a688 <_strtol_l.constprop.0+0x20>
 800a698:	2c2d      	cmp	r4, #45	; 0x2d
 800a69a:	d132      	bne.n	800a702 <_strtol_l.constprop.0+0x9a>
 800a69c:	782c      	ldrb	r4, [r5, #0]
 800a69e:	2701      	movs	r7, #1
 800a6a0:	1cb5      	adds	r5, r6, #2
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d05b      	beq.n	800a75e <_strtol_l.constprop.0+0xf6>
 800a6a6:	2b10      	cmp	r3, #16
 800a6a8:	d109      	bne.n	800a6be <_strtol_l.constprop.0+0x56>
 800a6aa:	2c30      	cmp	r4, #48	; 0x30
 800a6ac:	d107      	bne.n	800a6be <_strtol_l.constprop.0+0x56>
 800a6ae:	782c      	ldrb	r4, [r5, #0]
 800a6b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a6b4:	2c58      	cmp	r4, #88	; 0x58
 800a6b6:	d14d      	bne.n	800a754 <_strtol_l.constprop.0+0xec>
 800a6b8:	786c      	ldrb	r4, [r5, #1]
 800a6ba:	2310      	movs	r3, #16
 800a6bc:	3502      	adds	r5, #2
 800a6be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a6c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a6c6:	f04f 0c00 	mov.w	ip, #0
 800a6ca:	fbb8 f9f3 	udiv	r9, r8, r3
 800a6ce:	4666      	mov	r6, ip
 800a6d0:	fb03 8a19 	mls	sl, r3, r9, r8
 800a6d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a6d8:	f1be 0f09 	cmp.w	lr, #9
 800a6dc:	d816      	bhi.n	800a70c <_strtol_l.constprop.0+0xa4>
 800a6de:	4674      	mov	r4, lr
 800a6e0:	42a3      	cmp	r3, r4
 800a6e2:	dd24      	ble.n	800a72e <_strtol_l.constprop.0+0xc6>
 800a6e4:	f1bc 0f00 	cmp.w	ip, #0
 800a6e8:	db1e      	blt.n	800a728 <_strtol_l.constprop.0+0xc0>
 800a6ea:	45b1      	cmp	r9, r6
 800a6ec:	d31c      	bcc.n	800a728 <_strtol_l.constprop.0+0xc0>
 800a6ee:	d101      	bne.n	800a6f4 <_strtol_l.constprop.0+0x8c>
 800a6f0:	45a2      	cmp	sl, r4
 800a6f2:	db19      	blt.n	800a728 <_strtol_l.constprop.0+0xc0>
 800a6f4:	fb06 4603 	mla	r6, r6, r3, r4
 800a6f8:	f04f 0c01 	mov.w	ip, #1
 800a6fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a700:	e7e8      	b.n	800a6d4 <_strtol_l.constprop.0+0x6c>
 800a702:	2c2b      	cmp	r4, #43	; 0x2b
 800a704:	bf04      	itt	eq
 800a706:	782c      	ldrbeq	r4, [r5, #0]
 800a708:	1cb5      	addeq	r5, r6, #2
 800a70a:	e7ca      	b.n	800a6a2 <_strtol_l.constprop.0+0x3a>
 800a70c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a710:	f1be 0f19 	cmp.w	lr, #25
 800a714:	d801      	bhi.n	800a71a <_strtol_l.constprop.0+0xb2>
 800a716:	3c37      	subs	r4, #55	; 0x37
 800a718:	e7e2      	b.n	800a6e0 <_strtol_l.constprop.0+0x78>
 800a71a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a71e:	f1be 0f19 	cmp.w	lr, #25
 800a722:	d804      	bhi.n	800a72e <_strtol_l.constprop.0+0xc6>
 800a724:	3c57      	subs	r4, #87	; 0x57
 800a726:	e7db      	b.n	800a6e0 <_strtol_l.constprop.0+0x78>
 800a728:	f04f 3cff 	mov.w	ip, #4294967295
 800a72c:	e7e6      	b.n	800a6fc <_strtol_l.constprop.0+0x94>
 800a72e:	f1bc 0f00 	cmp.w	ip, #0
 800a732:	da05      	bge.n	800a740 <_strtol_l.constprop.0+0xd8>
 800a734:	2322      	movs	r3, #34	; 0x22
 800a736:	6003      	str	r3, [r0, #0]
 800a738:	4646      	mov	r6, r8
 800a73a:	b942      	cbnz	r2, 800a74e <_strtol_l.constprop.0+0xe6>
 800a73c:	4630      	mov	r0, r6
 800a73e:	e79e      	b.n	800a67e <_strtol_l.constprop.0+0x16>
 800a740:	b107      	cbz	r7, 800a744 <_strtol_l.constprop.0+0xdc>
 800a742:	4276      	negs	r6, r6
 800a744:	2a00      	cmp	r2, #0
 800a746:	d0f9      	beq.n	800a73c <_strtol_l.constprop.0+0xd4>
 800a748:	f1bc 0f00 	cmp.w	ip, #0
 800a74c:	d000      	beq.n	800a750 <_strtol_l.constprop.0+0xe8>
 800a74e:	1e69      	subs	r1, r5, #1
 800a750:	6011      	str	r1, [r2, #0]
 800a752:	e7f3      	b.n	800a73c <_strtol_l.constprop.0+0xd4>
 800a754:	2430      	movs	r4, #48	; 0x30
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1b1      	bne.n	800a6be <_strtol_l.constprop.0+0x56>
 800a75a:	2308      	movs	r3, #8
 800a75c:	e7af      	b.n	800a6be <_strtol_l.constprop.0+0x56>
 800a75e:	2c30      	cmp	r4, #48	; 0x30
 800a760:	d0a5      	beq.n	800a6ae <_strtol_l.constprop.0+0x46>
 800a762:	230a      	movs	r3, #10
 800a764:	e7ab      	b.n	800a6be <_strtol_l.constprop.0+0x56>
 800a766:	bf00      	nop
 800a768:	0800cefd 	.word	0x0800cefd

0800a76c <strtol>:
 800a76c:	4613      	mov	r3, r2
 800a76e:	460a      	mov	r2, r1
 800a770:	4601      	mov	r1, r0
 800a772:	4802      	ldr	r0, [pc, #8]	; (800a77c <strtol+0x10>)
 800a774:	6800      	ldr	r0, [r0, #0]
 800a776:	f7ff bf77 	b.w	800a668 <_strtol_l.constprop.0>
 800a77a:	bf00      	nop
 800a77c:	2000015c 	.word	0x2000015c

0800a780 <__swbuf_r>:
 800a780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a782:	460e      	mov	r6, r1
 800a784:	4614      	mov	r4, r2
 800a786:	4605      	mov	r5, r0
 800a788:	b118      	cbz	r0, 800a792 <__swbuf_r+0x12>
 800a78a:	6983      	ldr	r3, [r0, #24]
 800a78c:	b90b      	cbnz	r3, 800a792 <__swbuf_r+0x12>
 800a78e:	f001 f86b 	bl	800b868 <__sinit>
 800a792:	4b21      	ldr	r3, [pc, #132]	; (800a818 <__swbuf_r+0x98>)
 800a794:	429c      	cmp	r4, r3
 800a796:	d12b      	bne.n	800a7f0 <__swbuf_r+0x70>
 800a798:	686c      	ldr	r4, [r5, #4]
 800a79a:	69a3      	ldr	r3, [r4, #24]
 800a79c:	60a3      	str	r3, [r4, #8]
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	071a      	lsls	r2, r3, #28
 800a7a2:	d52f      	bpl.n	800a804 <__swbuf_r+0x84>
 800a7a4:	6923      	ldr	r3, [r4, #16]
 800a7a6:	b36b      	cbz	r3, 800a804 <__swbuf_r+0x84>
 800a7a8:	6923      	ldr	r3, [r4, #16]
 800a7aa:	6820      	ldr	r0, [r4, #0]
 800a7ac:	1ac0      	subs	r0, r0, r3
 800a7ae:	6963      	ldr	r3, [r4, #20]
 800a7b0:	b2f6      	uxtb	r6, r6
 800a7b2:	4283      	cmp	r3, r0
 800a7b4:	4637      	mov	r7, r6
 800a7b6:	dc04      	bgt.n	800a7c2 <__swbuf_r+0x42>
 800a7b8:	4621      	mov	r1, r4
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	f000 ffc0 	bl	800b740 <_fflush_r>
 800a7c0:	bb30      	cbnz	r0, 800a810 <__swbuf_r+0x90>
 800a7c2:	68a3      	ldr	r3, [r4, #8]
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	60a3      	str	r3, [r4, #8]
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	1c5a      	adds	r2, r3, #1
 800a7cc:	6022      	str	r2, [r4, #0]
 800a7ce:	701e      	strb	r6, [r3, #0]
 800a7d0:	6963      	ldr	r3, [r4, #20]
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	4283      	cmp	r3, r0
 800a7d6:	d004      	beq.n	800a7e2 <__swbuf_r+0x62>
 800a7d8:	89a3      	ldrh	r3, [r4, #12]
 800a7da:	07db      	lsls	r3, r3, #31
 800a7dc:	d506      	bpl.n	800a7ec <__swbuf_r+0x6c>
 800a7de:	2e0a      	cmp	r6, #10
 800a7e0:	d104      	bne.n	800a7ec <__swbuf_r+0x6c>
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	f000 ffab 	bl	800b740 <_fflush_r>
 800a7ea:	b988      	cbnz	r0, 800a810 <__swbuf_r+0x90>
 800a7ec:	4638      	mov	r0, r7
 800a7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7f0:	4b0a      	ldr	r3, [pc, #40]	; (800a81c <__swbuf_r+0x9c>)
 800a7f2:	429c      	cmp	r4, r3
 800a7f4:	d101      	bne.n	800a7fa <__swbuf_r+0x7a>
 800a7f6:	68ac      	ldr	r4, [r5, #8]
 800a7f8:	e7cf      	b.n	800a79a <__swbuf_r+0x1a>
 800a7fa:	4b09      	ldr	r3, [pc, #36]	; (800a820 <__swbuf_r+0xa0>)
 800a7fc:	429c      	cmp	r4, r3
 800a7fe:	bf08      	it	eq
 800a800:	68ec      	ldreq	r4, [r5, #12]
 800a802:	e7ca      	b.n	800a79a <__swbuf_r+0x1a>
 800a804:	4621      	mov	r1, r4
 800a806:	4628      	mov	r0, r5
 800a808:	f000 f80c 	bl	800a824 <__swsetup_r>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	d0cb      	beq.n	800a7a8 <__swbuf_r+0x28>
 800a810:	f04f 37ff 	mov.w	r7, #4294967295
 800a814:	e7ea      	b.n	800a7ec <__swbuf_r+0x6c>
 800a816:	bf00      	nop
 800a818:	0800d098 	.word	0x0800d098
 800a81c:	0800d0b8 	.word	0x0800d0b8
 800a820:	0800d078 	.word	0x0800d078

0800a824 <__swsetup_r>:
 800a824:	4b32      	ldr	r3, [pc, #200]	; (800a8f0 <__swsetup_r+0xcc>)
 800a826:	b570      	push	{r4, r5, r6, lr}
 800a828:	681d      	ldr	r5, [r3, #0]
 800a82a:	4606      	mov	r6, r0
 800a82c:	460c      	mov	r4, r1
 800a82e:	b125      	cbz	r5, 800a83a <__swsetup_r+0x16>
 800a830:	69ab      	ldr	r3, [r5, #24]
 800a832:	b913      	cbnz	r3, 800a83a <__swsetup_r+0x16>
 800a834:	4628      	mov	r0, r5
 800a836:	f001 f817 	bl	800b868 <__sinit>
 800a83a:	4b2e      	ldr	r3, [pc, #184]	; (800a8f4 <__swsetup_r+0xd0>)
 800a83c:	429c      	cmp	r4, r3
 800a83e:	d10f      	bne.n	800a860 <__swsetup_r+0x3c>
 800a840:	686c      	ldr	r4, [r5, #4]
 800a842:	89a3      	ldrh	r3, [r4, #12]
 800a844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a848:	0719      	lsls	r1, r3, #28
 800a84a:	d42c      	bmi.n	800a8a6 <__swsetup_r+0x82>
 800a84c:	06dd      	lsls	r5, r3, #27
 800a84e:	d411      	bmi.n	800a874 <__swsetup_r+0x50>
 800a850:	2309      	movs	r3, #9
 800a852:	6033      	str	r3, [r6, #0]
 800a854:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a858:	81a3      	strh	r3, [r4, #12]
 800a85a:	f04f 30ff 	mov.w	r0, #4294967295
 800a85e:	e03e      	b.n	800a8de <__swsetup_r+0xba>
 800a860:	4b25      	ldr	r3, [pc, #148]	; (800a8f8 <__swsetup_r+0xd4>)
 800a862:	429c      	cmp	r4, r3
 800a864:	d101      	bne.n	800a86a <__swsetup_r+0x46>
 800a866:	68ac      	ldr	r4, [r5, #8]
 800a868:	e7eb      	b.n	800a842 <__swsetup_r+0x1e>
 800a86a:	4b24      	ldr	r3, [pc, #144]	; (800a8fc <__swsetup_r+0xd8>)
 800a86c:	429c      	cmp	r4, r3
 800a86e:	bf08      	it	eq
 800a870:	68ec      	ldreq	r4, [r5, #12]
 800a872:	e7e6      	b.n	800a842 <__swsetup_r+0x1e>
 800a874:	0758      	lsls	r0, r3, #29
 800a876:	d512      	bpl.n	800a89e <__swsetup_r+0x7a>
 800a878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a87a:	b141      	cbz	r1, 800a88e <__swsetup_r+0x6a>
 800a87c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a880:	4299      	cmp	r1, r3
 800a882:	d002      	beq.n	800a88a <__swsetup_r+0x66>
 800a884:	4630      	mov	r0, r6
 800a886:	f001 fcbb 	bl	800c200 <_free_r>
 800a88a:	2300      	movs	r3, #0
 800a88c:	6363      	str	r3, [r4, #52]	; 0x34
 800a88e:	89a3      	ldrh	r3, [r4, #12]
 800a890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a894:	81a3      	strh	r3, [r4, #12]
 800a896:	2300      	movs	r3, #0
 800a898:	6063      	str	r3, [r4, #4]
 800a89a:	6923      	ldr	r3, [r4, #16]
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	89a3      	ldrh	r3, [r4, #12]
 800a8a0:	f043 0308 	orr.w	r3, r3, #8
 800a8a4:	81a3      	strh	r3, [r4, #12]
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	b94b      	cbnz	r3, 800a8be <__swsetup_r+0x9a>
 800a8aa:	89a3      	ldrh	r3, [r4, #12]
 800a8ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8b4:	d003      	beq.n	800a8be <__swsetup_r+0x9a>
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f001 f8b1 	bl	800ba20 <__smakebuf_r>
 800a8be:	89a0      	ldrh	r0, [r4, #12]
 800a8c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8c4:	f010 0301 	ands.w	r3, r0, #1
 800a8c8:	d00a      	beq.n	800a8e0 <__swsetup_r+0xbc>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	60a3      	str	r3, [r4, #8]
 800a8ce:	6963      	ldr	r3, [r4, #20]
 800a8d0:	425b      	negs	r3, r3
 800a8d2:	61a3      	str	r3, [r4, #24]
 800a8d4:	6923      	ldr	r3, [r4, #16]
 800a8d6:	b943      	cbnz	r3, 800a8ea <__swsetup_r+0xc6>
 800a8d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8dc:	d1ba      	bne.n	800a854 <__swsetup_r+0x30>
 800a8de:	bd70      	pop	{r4, r5, r6, pc}
 800a8e0:	0781      	lsls	r1, r0, #30
 800a8e2:	bf58      	it	pl
 800a8e4:	6963      	ldrpl	r3, [r4, #20]
 800a8e6:	60a3      	str	r3, [r4, #8]
 800a8e8:	e7f4      	b.n	800a8d4 <__swsetup_r+0xb0>
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	e7f7      	b.n	800a8de <__swsetup_r+0xba>
 800a8ee:	bf00      	nop
 800a8f0:	2000015c 	.word	0x2000015c
 800a8f4:	0800d098 	.word	0x0800d098
 800a8f8:	0800d0b8 	.word	0x0800d0b8
 800a8fc:	0800d078 	.word	0x0800d078

0800a900 <__assert_func>:
 800a900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a902:	4614      	mov	r4, r2
 800a904:	461a      	mov	r2, r3
 800a906:	4b09      	ldr	r3, [pc, #36]	; (800a92c <__assert_func+0x2c>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4605      	mov	r5, r0
 800a90c:	68d8      	ldr	r0, [r3, #12]
 800a90e:	b14c      	cbz	r4, 800a924 <__assert_func+0x24>
 800a910:	4b07      	ldr	r3, [pc, #28]	; (800a930 <__assert_func+0x30>)
 800a912:	9100      	str	r1, [sp, #0]
 800a914:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a918:	4906      	ldr	r1, [pc, #24]	; (800a934 <__assert_func+0x34>)
 800a91a:	462b      	mov	r3, r5
 800a91c:	f001 f822 	bl	800b964 <fiprintf>
 800a920:	f002 f86a 	bl	800c9f8 <abort>
 800a924:	4b04      	ldr	r3, [pc, #16]	; (800a938 <__assert_func+0x38>)
 800a926:	461c      	mov	r4, r3
 800a928:	e7f3      	b.n	800a912 <__assert_func+0x12>
 800a92a:	bf00      	nop
 800a92c:	2000015c 	.word	0x2000015c
 800a930:	0800cec0 	.word	0x0800cec0
 800a934:	0800cecd 	.word	0x0800cecd
 800a938:	0800cefb 	.word	0x0800cefb

0800a93c <quorem>:
 800a93c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a940:	6903      	ldr	r3, [r0, #16]
 800a942:	690c      	ldr	r4, [r1, #16]
 800a944:	42a3      	cmp	r3, r4
 800a946:	4607      	mov	r7, r0
 800a948:	f2c0 8081 	blt.w	800aa4e <quorem+0x112>
 800a94c:	3c01      	subs	r4, #1
 800a94e:	f101 0814 	add.w	r8, r1, #20
 800a952:	f100 0514 	add.w	r5, r0, #20
 800a956:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a95a:	9301      	str	r3, [sp, #4]
 800a95c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a960:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a964:	3301      	adds	r3, #1
 800a966:	429a      	cmp	r2, r3
 800a968:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a96c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a970:	fbb2 f6f3 	udiv	r6, r2, r3
 800a974:	d331      	bcc.n	800a9da <quorem+0x9e>
 800a976:	f04f 0e00 	mov.w	lr, #0
 800a97a:	4640      	mov	r0, r8
 800a97c:	46ac      	mov	ip, r5
 800a97e:	46f2      	mov	sl, lr
 800a980:	f850 2b04 	ldr.w	r2, [r0], #4
 800a984:	b293      	uxth	r3, r2
 800a986:	fb06 e303 	mla	r3, r6, r3, lr
 800a98a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a98e:	b29b      	uxth	r3, r3
 800a990:	ebaa 0303 	sub.w	r3, sl, r3
 800a994:	f8dc a000 	ldr.w	sl, [ip]
 800a998:	0c12      	lsrs	r2, r2, #16
 800a99a:	fa13 f38a 	uxtah	r3, r3, sl
 800a99e:	fb06 e202 	mla	r2, r6, r2, lr
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	9b00      	ldr	r3, [sp, #0]
 800a9a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a9aa:	b292      	uxth	r2, r2
 800a9ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a9b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9b4:	f8bd 3000 	ldrh.w	r3, [sp]
 800a9b8:	4581      	cmp	r9, r0
 800a9ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9be:	f84c 3b04 	str.w	r3, [ip], #4
 800a9c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a9c6:	d2db      	bcs.n	800a980 <quorem+0x44>
 800a9c8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a9cc:	b92b      	cbnz	r3, 800a9da <quorem+0x9e>
 800a9ce:	9b01      	ldr	r3, [sp, #4]
 800a9d0:	3b04      	subs	r3, #4
 800a9d2:	429d      	cmp	r5, r3
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	d32e      	bcc.n	800aa36 <quorem+0xfa>
 800a9d8:	613c      	str	r4, [r7, #16]
 800a9da:	4638      	mov	r0, r7
 800a9dc:	f001 faf8 	bl	800bfd0 <__mcmp>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	db24      	blt.n	800aa2e <quorem+0xf2>
 800a9e4:	3601      	adds	r6, #1
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	f04f 0c00 	mov.w	ip, #0
 800a9ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9f0:	f8d0 e000 	ldr.w	lr, [r0]
 800a9f4:	b293      	uxth	r3, r2
 800a9f6:	ebac 0303 	sub.w	r3, ip, r3
 800a9fa:	0c12      	lsrs	r2, r2, #16
 800a9fc:	fa13 f38e 	uxtah	r3, r3, lr
 800aa00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aa04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa0e:	45c1      	cmp	r9, r8
 800aa10:	f840 3b04 	str.w	r3, [r0], #4
 800aa14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aa18:	d2e8      	bcs.n	800a9ec <quorem+0xb0>
 800aa1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa22:	b922      	cbnz	r2, 800aa2e <quorem+0xf2>
 800aa24:	3b04      	subs	r3, #4
 800aa26:	429d      	cmp	r5, r3
 800aa28:	461a      	mov	r2, r3
 800aa2a:	d30a      	bcc.n	800aa42 <quorem+0x106>
 800aa2c:	613c      	str	r4, [r7, #16]
 800aa2e:	4630      	mov	r0, r6
 800aa30:	b003      	add	sp, #12
 800aa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa36:	6812      	ldr	r2, [r2, #0]
 800aa38:	3b04      	subs	r3, #4
 800aa3a:	2a00      	cmp	r2, #0
 800aa3c:	d1cc      	bne.n	800a9d8 <quorem+0x9c>
 800aa3e:	3c01      	subs	r4, #1
 800aa40:	e7c7      	b.n	800a9d2 <quorem+0x96>
 800aa42:	6812      	ldr	r2, [r2, #0]
 800aa44:	3b04      	subs	r3, #4
 800aa46:	2a00      	cmp	r2, #0
 800aa48:	d1f0      	bne.n	800aa2c <quorem+0xf0>
 800aa4a:	3c01      	subs	r4, #1
 800aa4c:	e7eb      	b.n	800aa26 <quorem+0xea>
 800aa4e:	2000      	movs	r0, #0
 800aa50:	e7ee      	b.n	800aa30 <quorem+0xf4>
 800aa52:	0000      	movs	r0, r0
 800aa54:	0000      	movs	r0, r0
	...

0800aa58 <_dtoa_r>:
 800aa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5c:	ed2d 8b04 	vpush	{d8-d9}
 800aa60:	ec57 6b10 	vmov	r6, r7, d0
 800aa64:	b093      	sub	sp, #76	; 0x4c
 800aa66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa6c:	9106      	str	r1, [sp, #24]
 800aa6e:	ee10 aa10 	vmov	sl, s0
 800aa72:	4604      	mov	r4, r0
 800aa74:	9209      	str	r2, [sp, #36]	; 0x24
 800aa76:	930c      	str	r3, [sp, #48]	; 0x30
 800aa78:	46bb      	mov	fp, r7
 800aa7a:	b975      	cbnz	r5, 800aa9a <_dtoa_r+0x42>
 800aa7c:	2010      	movs	r0, #16
 800aa7e:	f001 f80f 	bl	800baa0 <malloc>
 800aa82:	4602      	mov	r2, r0
 800aa84:	6260      	str	r0, [r4, #36]	; 0x24
 800aa86:	b920      	cbnz	r0, 800aa92 <_dtoa_r+0x3a>
 800aa88:	4ba7      	ldr	r3, [pc, #668]	; (800ad28 <_dtoa_r+0x2d0>)
 800aa8a:	21ea      	movs	r1, #234	; 0xea
 800aa8c:	48a7      	ldr	r0, [pc, #668]	; (800ad2c <_dtoa_r+0x2d4>)
 800aa8e:	f7ff ff37 	bl	800a900 <__assert_func>
 800aa92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa96:	6005      	str	r5, [r0, #0]
 800aa98:	60c5      	str	r5, [r0, #12]
 800aa9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa9c:	6819      	ldr	r1, [r3, #0]
 800aa9e:	b151      	cbz	r1, 800aab6 <_dtoa_r+0x5e>
 800aaa0:	685a      	ldr	r2, [r3, #4]
 800aaa2:	604a      	str	r2, [r1, #4]
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	4093      	lsls	r3, r2
 800aaa8:	608b      	str	r3, [r1, #8]
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f001 f84e 	bl	800bb4c <_Bfree>
 800aab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aab2:	2200      	movs	r2, #0
 800aab4:	601a      	str	r2, [r3, #0]
 800aab6:	1e3b      	subs	r3, r7, #0
 800aab8:	bfaa      	itet	ge
 800aaba:	2300      	movge	r3, #0
 800aabc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aac0:	f8c8 3000 	strge.w	r3, [r8]
 800aac4:	4b9a      	ldr	r3, [pc, #616]	; (800ad30 <_dtoa_r+0x2d8>)
 800aac6:	bfbc      	itt	lt
 800aac8:	2201      	movlt	r2, #1
 800aaca:	f8c8 2000 	strlt.w	r2, [r8]
 800aace:	ea33 030b 	bics.w	r3, r3, fp
 800aad2:	d11b      	bne.n	800ab0c <_dtoa_r+0xb4>
 800aad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aad6:	f242 730f 	movw	r3, #9999	; 0x270f
 800aada:	6013      	str	r3, [r2, #0]
 800aadc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aae0:	4333      	orrs	r3, r6
 800aae2:	f000 8592 	beq.w	800b60a <_dtoa_r+0xbb2>
 800aae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aae8:	b963      	cbnz	r3, 800ab04 <_dtoa_r+0xac>
 800aaea:	4b92      	ldr	r3, [pc, #584]	; (800ad34 <_dtoa_r+0x2dc>)
 800aaec:	e022      	b.n	800ab34 <_dtoa_r+0xdc>
 800aaee:	4b92      	ldr	r3, [pc, #584]	; (800ad38 <_dtoa_r+0x2e0>)
 800aaf0:	9301      	str	r3, [sp, #4]
 800aaf2:	3308      	adds	r3, #8
 800aaf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aaf6:	6013      	str	r3, [r2, #0]
 800aaf8:	9801      	ldr	r0, [sp, #4]
 800aafa:	b013      	add	sp, #76	; 0x4c
 800aafc:	ecbd 8b04 	vpop	{d8-d9}
 800ab00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab04:	4b8b      	ldr	r3, [pc, #556]	; (800ad34 <_dtoa_r+0x2dc>)
 800ab06:	9301      	str	r3, [sp, #4]
 800ab08:	3303      	adds	r3, #3
 800ab0a:	e7f3      	b.n	800aaf4 <_dtoa_r+0x9c>
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2300      	movs	r3, #0
 800ab10:	4650      	mov	r0, sl
 800ab12:	4659      	mov	r1, fp
 800ab14:	f7f6 f810 	bl	8000b38 <__aeabi_dcmpeq>
 800ab18:	ec4b ab19 	vmov	d9, sl, fp
 800ab1c:	4680      	mov	r8, r0
 800ab1e:	b158      	cbz	r0, 800ab38 <_dtoa_r+0xe0>
 800ab20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab22:	2301      	movs	r3, #1
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 856b 	beq.w	800b604 <_dtoa_r+0xbac>
 800ab2e:	4883      	ldr	r0, [pc, #524]	; (800ad3c <_dtoa_r+0x2e4>)
 800ab30:	6018      	str	r0, [r3, #0]
 800ab32:	1e43      	subs	r3, r0, #1
 800ab34:	9301      	str	r3, [sp, #4]
 800ab36:	e7df      	b.n	800aaf8 <_dtoa_r+0xa0>
 800ab38:	ec4b ab10 	vmov	d0, sl, fp
 800ab3c:	aa10      	add	r2, sp, #64	; 0x40
 800ab3e:	a911      	add	r1, sp, #68	; 0x44
 800ab40:	4620      	mov	r0, r4
 800ab42:	f001 faeb 	bl	800c11c <__d2b>
 800ab46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ab4a:	ee08 0a10 	vmov	s16, r0
 800ab4e:	2d00      	cmp	r5, #0
 800ab50:	f000 8084 	beq.w	800ac5c <_dtoa_r+0x204>
 800ab54:	ee19 3a90 	vmov	r3, s19
 800ab58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ab60:	4656      	mov	r6, sl
 800ab62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ab66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ab6e:	4b74      	ldr	r3, [pc, #464]	; (800ad40 <_dtoa_r+0x2e8>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	4630      	mov	r0, r6
 800ab74:	4639      	mov	r1, r7
 800ab76:	f7f5 fbbf 	bl	80002f8 <__aeabi_dsub>
 800ab7a:	a365      	add	r3, pc, #404	; (adr r3, 800ad10 <_dtoa_r+0x2b8>)
 800ab7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab80:	f7f5 fd72 	bl	8000668 <__aeabi_dmul>
 800ab84:	a364      	add	r3, pc, #400	; (adr r3, 800ad18 <_dtoa_r+0x2c0>)
 800ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8a:	f7f5 fbb7 	bl	80002fc <__adddf3>
 800ab8e:	4606      	mov	r6, r0
 800ab90:	4628      	mov	r0, r5
 800ab92:	460f      	mov	r7, r1
 800ab94:	f7f5 fcfe 	bl	8000594 <__aeabi_i2d>
 800ab98:	a361      	add	r3, pc, #388	; (adr r3, 800ad20 <_dtoa_r+0x2c8>)
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	f7f5 fd63 	bl	8000668 <__aeabi_dmul>
 800aba2:	4602      	mov	r2, r0
 800aba4:	460b      	mov	r3, r1
 800aba6:	4630      	mov	r0, r6
 800aba8:	4639      	mov	r1, r7
 800abaa:	f7f5 fba7 	bl	80002fc <__adddf3>
 800abae:	4606      	mov	r6, r0
 800abb0:	460f      	mov	r7, r1
 800abb2:	f7f6 f809 	bl	8000bc8 <__aeabi_d2iz>
 800abb6:	2200      	movs	r2, #0
 800abb8:	9000      	str	r0, [sp, #0]
 800abba:	2300      	movs	r3, #0
 800abbc:	4630      	mov	r0, r6
 800abbe:	4639      	mov	r1, r7
 800abc0:	f7f5 ffc4 	bl	8000b4c <__aeabi_dcmplt>
 800abc4:	b150      	cbz	r0, 800abdc <_dtoa_r+0x184>
 800abc6:	9800      	ldr	r0, [sp, #0]
 800abc8:	f7f5 fce4 	bl	8000594 <__aeabi_i2d>
 800abcc:	4632      	mov	r2, r6
 800abce:	463b      	mov	r3, r7
 800abd0:	f7f5 ffb2 	bl	8000b38 <__aeabi_dcmpeq>
 800abd4:	b910      	cbnz	r0, 800abdc <_dtoa_r+0x184>
 800abd6:	9b00      	ldr	r3, [sp, #0]
 800abd8:	3b01      	subs	r3, #1
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	9b00      	ldr	r3, [sp, #0]
 800abde:	2b16      	cmp	r3, #22
 800abe0:	d85a      	bhi.n	800ac98 <_dtoa_r+0x240>
 800abe2:	9a00      	ldr	r2, [sp, #0]
 800abe4:	4b57      	ldr	r3, [pc, #348]	; (800ad44 <_dtoa_r+0x2ec>)
 800abe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	ec51 0b19 	vmov	r0, r1, d9
 800abf2:	f7f5 ffab 	bl	8000b4c <__aeabi_dcmplt>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d050      	beq.n	800ac9c <_dtoa_r+0x244>
 800abfa:	9b00      	ldr	r3, [sp, #0]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	2300      	movs	r3, #0
 800ac02:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac06:	1b5d      	subs	r5, r3, r5
 800ac08:	1e6b      	subs	r3, r5, #1
 800ac0a:	9305      	str	r3, [sp, #20]
 800ac0c:	bf45      	ittet	mi
 800ac0e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ac12:	9304      	strmi	r3, [sp, #16]
 800ac14:	2300      	movpl	r3, #0
 800ac16:	2300      	movmi	r3, #0
 800ac18:	bf4c      	ite	mi
 800ac1a:	9305      	strmi	r3, [sp, #20]
 800ac1c:	9304      	strpl	r3, [sp, #16]
 800ac1e:	9b00      	ldr	r3, [sp, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	db3d      	blt.n	800aca0 <_dtoa_r+0x248>
 800ac24:	9b05      	ldr	r3, [sp, #20]
 800ac26:	9a00      	ldr	r2, [sp, #0]
 800ac28:	920a      	str	r2, [sp, #40]	; 0x28
 800ac2a:	4413      	add	r3, r2
 800ac2c:	9305      	str	r3, [sp, #20]
 800ac2e:	2300      	movs	r3, #0
 800ac30:	9307      	str	r3, [sp, #28]
 800ac32:	9b06      	ldr	r3, [sp, #24]
 800ac34:	2b09      	cmp	r3, #9
 800ac36:	f200 8089 	bhi.w	800ad4c <_dtoa_r+0x2f4>
 800ac3a:	2b05      	cmp	r3, #5
 800ac3c:	bfc4      	itt	gt
 800ac3e:	3b04      	subgt	r3, #4
 800ac40:	9306      	strgt	r3, [sp, #24]
 800ac42:	9b06      	ldr	r3, [sp, #24]
 800ac44:	f1a3 0302 	sub.w	r3, r3, #2
 800ac48:	bfcc      	ite	gt
 800ac4a:	2500      	movgt	r5, #0
 800ac4c:	2501      	movle	r5, #1
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	f200 8087 	bhi.w	800ad62 <_dtoa_r+0x30a>
 800ac54:	e8df f003 	tbb	[pc, r3]
 800ac58:	59383a2d 	.word	0x59383a2d
 800ac5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ac60:	441d      	add	r5, r3
 800ac62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac66:	2b20      	cmp	r3, #32
 800ac68:	bfc1      	itttt	gt
 800ac6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ac72:	fa0b f303 	lslgt.w	r3, fp, r3
 800ac76:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ac7a:	bfda      	itte	le
 800ac7c:	f1c3 0320 	rsble	r3, r3, #32
 800ac80:	fa06 f003 	lslle.w	r0, r6, r3
 800ac84:	4318      	orrgt	r0, r3
 800ac86:	f7f5 fc75 	bl	8000574 <__aeabi_ui2d>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	4606      	mov	r6, r0
 800ac8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ac92:	3d01      	subs	r5, #1
 800ac94:	930e      	str	r3, [sp, #56]	; 0x38
 800ac96:	e76a      	b.n	800ab6e <_dtoa_r+0x116>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e7b2      	b.n	800ac02 <_dtoa_r+0x1aa>
 800ac9c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac9e:	e7b1      	b.n	800ac04 <_dtoa_r+0x1ac>
 800aca0:	9b04      	ldr	r3, [sp, #16]
 800aca2:	9a00      	ldr	r2, [sp, #0]
 800aca4:	1a9b      	subs	r3, r3, r2
 800aca6:	9304      	str	r3, [sp, #16]
 800aca8:	4253      	negs	r3, r2
 800acaa:	9307      	str	r3, [sp, #28]
 800acac:	2300      	movs	r3, #0
 800acae:	930a      	str	r3, [sp, #40]	; 0x28
 800acb0:	e7bf      	b.n	800ac32 <_dtoa_r+0x1da>
 800acb2:	2300      	movs	r3, #0
 800acb4:	9308      	str	r3, [sp, #32]
 800acb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb8:	2b00      	cmp	r3, #0
 800acba:	dc55      	bgt.n	800ad68 <_dtoa_r+0x310>
 800acbc:	2301      	movs	r3, #1
 800acbe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800acc2:	461a      	mov	r2, r3
 800acc4:	9209      	str	r2, [sp, #36]	; 0x24
 800acc6:	e00c      	b.n	800ace2 <_dtoa_r+0x28a>
 800acc8:	2301      	movs	r3, #1
 800acca:	e7f3      	b.n	800acb4 <_dtoa_r+0x25c>
 800accc:	2300      	movs	r3, #0
 800acce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acd0:	9308      	str	r3, [sp, #32]
 800acd2:	9b00      	ldr	r3, [sp, #0]
 800acd4:	4413      	add	r3, r2
 800acd6:	9302      	str	r3, [sp, #8]
 800acd8:	3301      	adds	r3, #1
 800acda:	2b01      	cmp	r3, #1
 800acdc:	9303      	str	r3, [sp, #12]
 800acde:	bfb8      	it	lt
 800ace0:	2301      	movlt	r3, #1
 800ace2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ace4:	2200      	movs	r2, #0
 800ace6:	6042      	str	r2, [r0, #4]
 800ace8:	2204      	movs	r2, #4
 800acea:	f102 0614 	add.w	r6, r2, #20
 800acee:	429e      	cmp	r6, r3
 800acf0:	6841      	ldr	r1, [r0, #4]
 800acf2:	d93d      	bls.n	800ad70 <_dtoa_r+0x318>
 800acf4:	4620      	mov	r0, r4
 800acf6:	f000 fee9 	bl	800bacc <_Balloc>
 800acfa:	9001      	str	r0, [sp, #4]
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d13b      	bne.n	800ad78 <_dtoa_r+0x320>
 800ad00:	4b11      	ldr	r3, [pc, #68]	; (800ad48 <_dtoa_r+0x2f0>)
 800ad02:	4602      	mov	r2, r0
 800ad04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ad08:	e6c0      	b.n	800aa8c <_dtoa_r+0x34>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e7df      	b.n	800acce <_dtoa_r+0x276>
 800ad0e:	bf00      	nop
 800ad10:	636f4361 	.word	0x636f4361
 800ad14:	3fd287a7 	.word	0x3fd287a7
 800ad18:	8b60c8b3 	.word	0x8b60c8b3
 800ad1c:	3fc68a28 	.word	0x3fc68a28
 800ad20:	509f79fb 	.word	0x509f79fb
 800ad24:	3fd34413 	.word	0x3fd34413
 800ad28:	0800ce4c 	.word	0x0800ce4c
 800ad2c:	0800d00a 	.word	0x0800d00a
 800ad30:	7ff00000 	.word	0x7ff00000
 800ad34:	0800d006 	.word	0x0800d006
 800ad38:	0800cffd 	.word	0x0800cffd
 800ad3c:	0800ce29 	.word	0x0800ce29
 800ad40:	3ff80000 	.word	0x3ff80000
 800ad44:	0800d160 	.word	0x0800d160
 800ad48:	0800d065 	.word	0x0800d065
 800ad4c:	2501      	movs	r5, #1
 800ad4e:	2300      	movs	r3, #0
 800ad50:	9306      	str	r3, [sp, #24]
 800ad52:	9508      	str	r5, [sp, #32]
 800ad54:	f04f 33ff 	mov.w	r3, #4294967295
 800ad58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	2312      	movs	r3, #18
 800ad60:	e7b0      	b.n	800acc4 <_dtoa_r+0x26c>
 800ad62:	2301      	movs	r3, #1
 800ad64:	9308      	str	r3, [sp, #32]
 800ad66:	e7f5      	b.n	800ad54 <_dtoa_r+0x2fc>
 800ad68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad6e:	e7b8      	b.n	800ace2 <_dtoa_r+0x28a>
 800ad70:	3101      	adds	r1, #1
 800ad72:	6041      	str	r1, [r0, #4]
 800ad74:	0052      	lsls	r2, r2, #1
 800ad76:	e7b8      	b.n	800acea <_dtoa_r+0x292>
 800ad78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad7a:	9a01      	ldr	r2, [sp, #4]
 800ad7c:	601a      	str	r2, [r3, #0]
 800ad7e:	9b03      	ldr	r3, [sp, #12]
 800ad80:	2b0e      	cmp	r3, #14
 800ad82:	f200 809d 	bhi.w	800aec0 <_dtoa_r+0x468>
 800ad86:	2d00      	cmp	r5, #0
 800ad88:	f000 809a 	beq.w	800aec0 <_dtoa_r+0x468>
 800ad8c:	9b00      	ldr	r3, [sp, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	dd32      	ble.n	800adf8 <_dtoa_r+0x3a0>
 800ad92:	4ab7      	ldr	r2, [pc, #732]	; (800b070 <_dtoa_r+0x618>)
 800ad94:	f003 030f 	and.w	r3, r3, #15
 800ad98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ada0:	9b00      	ldr	r3, [sp, #0]
 800ada2:	05d8      	lsls	r0, r3, #23
 800ada4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ada8:	d516      	bpl.n	800add8 <_dtoa_r+0x380>
 800adaa:	4bb2      	ldr	r3, [pc, #712]	; (800b074 <_dtoa_r+0x61c>)
 800adac:	ec51 0b19 	vmov	r0, r1, d9
 800adb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800adb4:	f7f5 fd82 	bl	80008bc <__aeabi_ddiv>
 800adb8:	f007 070f 	and.w	r7, r7, #15
 800adbc:	4682      	mov	sl, r0
 800adbe:	468b      	mov	fp, r1
 800adc0:	2503      	movs	r5, #3
 800adc2:	4eac      	ldr	r6, [pc, #688]	; (800b074 <_dtoa_r+0x61c>)
 800adc4:	b957      	cbnz	r7, 800addc <_dtoa_r+0x384>
 800adc6:	4642      	mov	r2, r8
 800adc8:	464b      	mov	r3, r9
 800adca:	4650      	mov	r0, sl
 800adcc:	4659      	mov	r1, fp
 800adce:	f7f5 fd75 	bl	80008bc <__aeabi_ddiv>
 800add2:	4682      	mov	sl, r0
 800add4:	468b      	mov	fp, r1
 800add6:	e028      	b.n	800ae2a <_dtoa_r+0x3d2>
 800add8:	2502      	movs	r5, #2
 800adda:	e7f2      	b.n	800adc2 <_dtoa_r+0x36a>
 800addc:	07f9      	lsls	r1, r7, #31
 800adde:	d508      	bpl.n	800adf2 <_dtoa_r+0x39a>
 800ade0:	4640      	mov	r0, r8
 800ade2:	4649      	mov	r1, r9
 800ade4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ade8:	f7f5 fc3e 	bl	8000668 <__aeabi_dmul>
 800adec:	3501      	adds	r5, #1
 800adee:	4680      	mov	r8, r0
 800adf0:	4689      	mov	r9, r1
 800adf2:	107f      	asrs	r7, r7, #1
 800adf4:	3608      	adds	r6, #8
 800adf6:	e7e5      	b.n	800adc4 <_dtoa_r+0x36c>
 800adf8:	f000 809b 	beq.w	800af32 <_dtoa_r+0x4da>
 800adfc:	9b00      	ldr	r3, [sp, #0]
 800adfe:	4f9d      	ldr	r7, [pc, #628]	; (800b074 <_dtoa_r+0x61c>)
 800ae00:	425e      	negs	r6, r3
 800ae02:	4b9b      	ldr	r3, [pc, #620]	; (800b070 <_dtoa_r+0x618>)
 800ae04:	f006 020f 	and.w	r2, r6, #15
 800ae08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	ec51 0b19 	vmov	r0, r1, d9
 800ae14:	f7f5 fc28 	bl	8000668 <__aeabi_dmul>
 800ae18:	1136      	asrs	r6, r6, #4
 800ae1a:	4682      	mov	sl, r0
 800ae1c:	468b      	mov	fp, r1
 800ae1e:	2300      	movs	r3, #0
 800ae20:	2502      	movs	r5, #2
 800ae22:	2e00      	cmp	r6, #0
 800ae24:	d17a      	bne.n	800af1c <_dtoa_r+0x4c4>
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1d3      	bne.n	800add2 <_dtoa_r+0x37a>
 800ae2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f000 8082 	beq.w	800af36 <_dtoa_r+0x4de>
 800ae32:	4b91      	ldr	r3, [pc, #580]	; (800b078 <_dtoa_r+0x620>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	4650      	mov	r0, sl
 800ae38:	4659      	mov	r1, fp
 800ae3a:	f7f5 fe87 	bl	8000b4c <__aeabi_dcmplt>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d079      	beq.n	800af36 <_dtoa_r+0x4de>
 800ae42:	9b03      	ldr	r3, [sp, #12]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d076      	beq.n	800af36 <_dtoa_r+0x4de>
 800ae48:	9b02      	ldr	r3, [sp, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	dd36      	ble.n	800aebc <_dtoa_r+0x464>
 800ae4e:	9b00      	ldr	r3, [sp, #0]
 800ae50:	4650      	mov	r0, sl
 800ae52:	4659      	mov	r1, fp
 800ae54:	1e5f      	subs	r7, r3, #1
 800ae56:	2200      	movs	r2, #0
 800ae58:	4b88      	ldr	r3, [pc, #544]	; (800b07c <_dtoa_r+0x624>)
 800ae5a:	f7f5 fc05 	bl	8000668 <__aeabi_dmul>
 800ae5e:	9e02      	ldr	r6, [sp, #8]
 800ae60:	4682      	mov	sl, r0
 800ae62:	468b      	mov	fp, r1
 800ae64:	3501      	adds	r5, #1
 800ae66:	4628      	mov	r0, r5
 800ae68:	f7f5 fb94 	bl	8000594 <__aeabi_i2d>
 800ae6c:	4652      	mov	r2, sl
 800ae6e:	465b      	mov	r3, fp
 800ae70:	f7f5 fbfa 	bl	8000668 <__aeabi_dmul>
 800ae74:	4b82      	ldr	r3, [pc, #520]	; (800b080 <_dtoa_r+0x628>)
 800ae76:	2200      	movs	r2, #0
 800ae78:	f7f5 fa40 	bl	80002fc <__adddf3>
 800ae7c:	46d0      	mov	r8, sl
 800ae7e:	46d9      	mov	r9, fp
 800ae80:	4682      	mov	sl, r0
 800ae82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ae86:	2e00      	cmp	r6, #0
 800ae88:	d158      	bne.n	800af3c <_dtoa_r+0x4e4>
 800ae8a:	4b7e      	ldr	r3, [pc, #504]	; (800b084 <_dtoa_r+0x62c>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	4640      	mov	r0, r8
 800ae90:	4649      	mov	r1, r9
 800ae92:	f7f5 fa31 	bl	80002f8 <__aeabi_dsub>
 800ae96:	4652      	mov	r2, sl
 800ae98:	465b      	mov	r3, fp
 800ae9a:	4680      	mov	r8, r0
 800ae9c:	4689      	mov	r9, r1
 800ae9e:	f7f5 fe73 	bl	8000b88 <__aeabi_dcmpgt>
 800aea2:	2800      	cmp	r0, #0
 800aea4:	f040 8295 	bne.w	800b3d2 <_dtoa_r+0x97a>
 800aea8:	4652      	mov	r2, sl
 800aeaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aeae:	4640      	mov	r0, r8
 800aeb0:	4649      	mov	r1, r9
 800aeb2:	f7f5 fe4b 	bl	8000b4c <__aeabi_dcmplt>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	f040 8289 	bne.w	800b3ce <_dtoa_r+0x976>
 800aebc:	ec5b ab19 	vmov	sl, fp, d9
 800aec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f2c0 8148 	blt.w	800b158 <_dtoa_r+0x700>
 800aec8:	9a00      	ldr	r2, [sp, #0]
 800aeca:	2a0e      	cmp	r2, #14
 800aecc:	f300 8144 	bgt.w	800b158 <_dtoa_r+0x700>
 800aed0:	4b67      	ldr	r3, [pc, #412]	; (800b070 <_dtoa_r+0x618>)
 800aed2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aed6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aeda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f280 80d5 	bge.w	800b08c <_dtoa_r+0x634>
 800aee2:	9b03      	ldr	r3, [sp, #12]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f300 80d1 	bgt.w	800b08c <_dtoa_r+0x634>
 800aeea:	f040 826f 	bne.w	800b3cc <_dtoa_r+0x974>
 800aeee:	4b65      	ldr	r3, [pc, #404]	; (800b084 <_dtoa_r+0x62c>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	4640      	mov	r0, r8
 800aef4:	4649      	mov	r1, r9
 800aef6:	f7f5 fbb7 	bl	8000668 <__aeabi_dmul>
 800aefa:	4652      	mov	r2, sl
 800aefc:	465b      	mov	r3, fp
 800aefe:	f7f5 fe39 	bl	8000b74 <__aeabi_dcmpge>
 800af02:	9e03      	ldr	r6, [sp, #12]
 800af04:	4637      	mov	r7, r6
 800af06:	2800      	cmp	r0, #0
 800af08:	f040 8245 	bne.w	800b396 <_dtoa_r+0x93e>
 800af0c:	9d01      	ldr	r5, [sp, #4]
 800af0e:	2331      	movs	r3, #49	; 0x31
 800af10:	f805 3b01 	strb.w	r3, [r5], #1
 800af14:	9b00      	ldr	r3, [sp, #0]
 800af16:	3301      	adds	r3, #1
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	e240      	b.n	800b39e <_dtoa_r+0x946>
 800af1c:	07f2      	lsls	r2, r6, #31
 800af1e:	d505      	bpl.n	800af2c <_dtoa_r+0x4d4>
 800af20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af24:	f7f5 fba0 	bl	8000668 <__aeabi_dmul>
 800af28:	3501      	adds	r5, #1
 800af2a:	2301      	movs	r3, #1
 800af2c:	1076      	asrs	r6, r6, #1
 800af2e:	3708      	adds	r7, #8
 800af30:	e777      	b.n	800ae22 <_dtoa_r+0x3ca>
 800af32:	2502      	movs	r5, #2
 800af34:	e779      	b.n	800ae2a <_dtoa_r+0x3d2>
 800af36:	9f00      	ldr	r7, [sp, #0]
 800af38:	9e03      	ldr	r6, [sp, #12]
 800af3a:	e794      	b.n	800ae66 <_dtoa_r+0x40e>
 800af3c:	9901      	ldr	r1, [sp, #4]
 800af3e:	4b4c      	ldr	r3, [pc, #304]	; (800b070 <_dtoa_r+0x618>)
 800af40:	4431      	add	r1, r6
 800af42:	910d      	str	r1, [sp, #52]	; 0x34
 800af44:	9908      	ldr	r1, [sp, #32]
 800af46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af4e:	2900      	cmp	r1, #0
 800af50:	d043      	beq.n	800afda <_dtoa_r+0x582>
 800af52:	494d      	ldr	r1, [pc, #308]	; (800b088 <_dtoa_r+0x630>)
 800af54:	2000      	movs	r0, #0
 800af56:	f7f5 fcb1 	bl	80008bc <__aeabi_ddiv>
 800af5a:	4652      	mov	r2, sl
 800af5c:	465b      	mov	r3, fp
 800af5e:	f7f5 f9cb 	bl	80002f8 <__aeabi_dsub>
 800af62:	9d01      	ldr	r5, [sp, #4]
 800af64:	4682      	mov	sl, r0
 800af66:	468b      	mov	fp, r1
 800af68:	4649      	mov	r1, r9
 800af6a:	4640      	mov	r0, r8
 800af6c:	f7f5 fe2c 	bl	8000bc8 <__aeabi_d2iz>
 800af70:	4606      	mov	r6, r0
 800af72:	f7f5 fb0f 	bl	8000594 <__aeabi_i2d>
 800af76:	4602      	mov	r2, r0
 800af78:	460b      	mov	r3, r1
 800af7a:	4640      	mov	r0, r8
 800af7c:	4649      	mov	r1, r9
 800af7e:	f7f5 f9bb 	bl	80002f8 <__aeabi_dsub>
 800af82:	3630      	adds	r6, #48	; 0x30
 800af84:	f805 6b01 	strb.w	r6, [r5], #1
 800af88:	4652      	mov	r2, sl
 800af8a:	465b      	mov	r3, fp
 800af8c:	4680      	mov	r8, r0
 800af8e:	4689      	mov	r9, r1
 800af90:	f7f5 fddc 	bl	8000b4c <__aeabi_dcmplt>
 800af94:	2800      	cmp	r0, #0
 800af96:	d163      	bne.n	800b060 <_dtoa_r+0x608>
 800af98:	4642      	mov	r2, r8
 800af9a:	464b      	mov	r3, r9
 800af9c:	4936      	ldr	r1, [pc, #216]	; (800b078 <_dtoa_r+0x620>)
 800af9e:	2000      	movs	r0, #0
 800afa0:	f7f5 f9aa 	bl	80002f8 <__aeabi_dsub>
 800afa4:	4652      	mov	r2, sl
 800afa6:	465b      	mov	r3, fp
 800afa8:	f7f5 fdd0 	bl	8000b4c <__aeabi_dcmplt>
 800afac:	2800      	cmp	r0, #0
 800afae:	f040 80b5 	bne.w	800b11c <_dtoa_r+0x6c4>
 800afb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afb4:	429d      	cmp	r5, r3
 800afb6:	d081      	beq.n	800aebc <_dtoa_r+0x464>
 800afb8:	4b30      	ldr	r3, [pc, #192]	; (800b07c <_dtoa_r+0x624>)
 800afba:	2200      	movs	r2, #0
 800afbc:	4650      	mov	r0, sl
 800afbe:	4659      	mov	r1, fp
 800afc0:	f7f5 fb52 	bl	8000668 <__aeabi_dmul>
 800afc4:	4b2d      	ldr	r3, [pc, #180]	; (800b07c <_dtoa_r+0x624>)
 800afc6:	4682      	mov	sl, r0
 800afc8:	468b      	mov	fp, r1
 800afca:	4640      	mov	r0, r8
 800afcc:	4649      	mov	r1, r9
 800afce:	2200      	movs	r2, #0
 800afd0:	f7f5 fb4a 	bl	8000668 <__aeabi_dmul>
 800afd4:	4680      	mov	r8, r0
 800afd6:	4689      	mov	r9, r1
 800afd8:	e7c6      	b.n	800af68 <_dtoa_r+0x510>
 800afda:	4650      	mov	r0, sl
 800afdc:	4659      	mov	r1, fp
 800afde:	f7f5 fb43 	bl	8000668 <__aeabi_dmul>
 800afe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afe4:	9d01      	ldr	r5, [sp, #4]
 800afe6:	930f      	str	r3, [sp, #60]	; 0x3c
 800afe8:	4682      	mov	sl, r0
 800afea:	468b      	mov	fp, r1
 800afec:	4649      	mov	r1, r9
 800afee:	4640      	mov	r0, r8
 800aff0:	f7f5 fdea 	bl	8000bc8 <__aeabi_d2iz>
 800aff4:	4606      	mov	r6, r0
 800aff6:	f7f5 facd 	bl	8000594 <__aeabi_i2d>
 800affa:	3630      	adds	r6, #48	; 0x30
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	4640      	mov	r0, r8
 800b002:	4649      	mov	r1, r9
 800b004:	f7f5 f978 	bl	80002f8 <__aeabi_dsub>
 800b008:	f805 6b01 	strb.w	r6, [r5], #1
 800b00c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b00e:	429d      	cmp	r5, r3
 800b010:	4680      	mov	r8, r0
 800b012:	4689      	mov	r9, r1
 800b014:	f04f 0200 	mov.w	r2, #0
 800b018:	d124      	bne.n	800b064 <_dtoa_r+0x60c>
 800b01a:	4b1b      	ldr	r3, [pc, #108]	; (800b088 <_dtoa_r+0x630>)
 800b01c:	4650      	mov	r0, sl
 800b01e:	4659      	mov	r1, fp
 800b020:	f7f5 f96c 	bl	80002fc <__adddf3>
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	4640      	mov	r0, r8
 800b02a:	4649      	mov	r1, r9
 800b02c:	f7f5 fdac 	bl	8000b88 <__aeabi_dcmpgt>
 800b030:	2800      	cmp	r0, #0
 800b032:	d173      	bne.n	800b11c <_dtoa_r+0x6c4>
 800b034:	4652      	mov	r2, sl
 800b036:	465b      	mov	r3, fp
 800b038:	4913      	ldr	r1, [pc, #76]	; (800b088 <_dtoa_r+0x630>)
 800b03a:	2000      	movs	r0, #0
 800b03c:	f7f5 f95c 	bl	80002f8 <__aeabi_dsub>
 800b040:	4602      	mov	r2, r0
 800b042:	460b      	mov	r3, r1
 800b044:	4640      	mov	r0, r8
 800b046:	4649      	mov	r1, r9
 800b048:	f7f5 fd80 	bl	8000b4c <__aeabi_dcmplt>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	f43f af35 	beq.w	800aebc <_dtoa_r+0x464>
 800b052:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b054:	1e6b      	subs	r3, r5, #1
 800b056:	930f      	str	r3, [sp, #60]	; 0x3c
 800b058:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b05c:	2b30      	cmp	r3, #48	; 0x30
 800b05e:	d0f8      	beq.n	800b052 <_dtoa_r+0x5fa>
 800b060:	9700      	str	r7, [sp, #0]
 800b062:	e049      	b.n	800b0f8 <_dtoa_r+0x6a0>
 800b064:	4b05      	ldr	r3, [pc, #20]	; (800b07c <_dtoa_r+0x624>)
 800b066:	f7f5 faff 	bl	8000668 <__aeabi_dmul>
 800b06a:	4680      	mov	r8, r0
 800b06c:	4689      	mov	r9, r1
 800b06e:	e7bd      	b.n	800afec <_dtoa_r+0x594>
 800b070:	0800d160 	.word	0x0800d160
 800b074:	0800d138 	.word	0x0800d138
 800b078:	3ff00000 	.word	0x3ff00000
 800b07c:	40240000 	.word	0x40240000
 800b080:	401c0000 	.word	0x401c0000
 800b084:	40140000 	.word	0x40140000
 800b088:	3fe00000 	.word	0x3fe00000
 800b08c:	9d01      	ldr	r5, [sp, #4]
 800b08e:	4656      	mov	r6, sl
 800b090:	465f      	mov	r7, fp
 800b092:	4642      	mov	r2, r8
 800b094:	464b      	mov	r3, r9
 800b096:	4630      	mov	r0, r6
 800b098:	4639      	mov	r1, r7
 800b09a:	f7f5 fc0f 	bl	80008bc <__aeabi_ddiv>
 800b09e:	f7f5 fd93 	bl	8000bc8 <__aeabi_d2iz>
 800b0a2:	4682      	mov	sl, r0
 800b0a4:	f7f5 fa76 	bl	8000594 <__aeabi_i2d>
 800b0a8:	4642      	mov	r2, r8
 800b0aa:	464b      	mov	r3, r9
 800b0ac:	f7f5 fadc 	bl	8000668 <__aeabi_dmul>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	4639      	mov	r1, r7
 800b0b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b0bc:	f7f5 f91c 	bl	80002f8 <__aeabi_dsub>
 800b0c0:	f805 6b01 	strb.w	r6, [r5], #1
 800b0c4:	9e01      	ldr	r6, [sp, #4]
 800b0c6:	9f03      	ldr	r7, [sp, #12]
 800b0c8:	1bae      	subs	r6, r5, r6
 800b0ca:	42b7      	cmp	r7, r6
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	d135      	bne.n	800b13e <_dtoa_r+0x6e6>
 800b0d2:	f7f5 f913 	bl	80002fc <__adddf3>
 800b0d6:	4642      	mov	r2, r8
 800b0d8:	464b      	mov	r3, r9
 800b0da:	4606      	mov	r6, r0
 800b0dc:	460f      	mov	r7, r1
 800b0de:	f7f5 fd53 	bl	8000b88 <__aeabi_dcmpgt>
 800b0e2:	b9d0      	cbnz	r0, 800b11a <_dtoa_r+0x6c2>
 800b0e4:	4642      	mov	r2, r8
 800b0e6:	464b      	mov	r3, r9
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	4639      	mov	r1, r7
 800b0ec:	f7f5 fd24 	bl	8000b38 <__aeabi_dcmpeq>
 800b0f0:	b110      	cbz	r0, 800b0f8 <_dtoa_r+0x6a0>
 800b0f2:	f01a 0f01 	tst.w	sl, #1
 800b0f6:	d110      	bne.n	800b11a <_dtoa_r+0x6c2>
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	ee18 1a10 	vmov	r1, s16
 800b0fe:	f000 fd25 	bl	800bb4c <_Bfree>
 800b102:	2300      	movs	r3, #0
 800b104:	9800      	ldr	r0, [sp, #0]
 800b106:	702b      	strb	r3, [r5, #0]
 800b108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b10a:	3001      	adds	r0, #1
 800b10c:	6018      	str	r0, [r3, #0]
 800b10e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b110:	2b00      	cmp	r3, #0
 800b112:	f43f acf1 	beq.w	800aaf8 <_dtoa_r+0xa0>
 800b116:	601d      	str	r5, [r3, #0]
 800b118:	e4ee      	b.n	800aaf8 <_dtoa_r+0xa0>
 800b11a:	9f00      	ldr	r7, [sp, #0]
 800b11c:	462b      	mov	r3, r5
 800b11e:	461d      	mov	r5, r3
 800b120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b124:	2a39      	cmp	r2, #57	; 0x39
 800b126:	d106      	bne.n	800b136 <_dtoa_r+0x6de>
 800b128:	9a01      	ldr	r2, [sp, #4]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d1f7      	bne.n	800b11e <_dtoa_r+0x6c6>
 800b12e:	9901      	ldr	r1, [sp, #4]
 800b130:	2230      	movs	r2, #48	; 0x30
 800b132:	3701      	adds	r7, #1
 800b134:	700a      	strb	r2, [r1, #0]
 800b136:	781a      	ldrb	r2, [r3, #0]
 800b138:	3201      	adds	r2, #1
 800b13a:	701a      	strb	r2, [r3, #0]
 800b13c:	e790      	b.n	800b060 <_dtoa_r+0x608>
 800b13e:	4ba6      	ldr	r3, [pc, #664]	; (800b3d8 <_dtoa_r+0x980>)
 800b140:	2200      	movs	r2, #0
 800b142:	f7f5 fa91 	bl	8000668 <__aeabi_dmul>
 800b146:	2200      	movs	r2, #0
 800b148:	2300      	movs	r3, #0
 800b14a:	4606      	mov	r6, r0
 800b14c:	460f      	mov	r7, r1
 800b14e:	f7f5 fcf3 	bl	8000b38 <__aeabi_dcmpeq>
 800b152:	2800      	cmp	r0, #0
 800b154:	d09d      	beq.n	800b092 <_dtoa_r+0x63a>
 800b156:	e7cf      	b.n	800b0f8 <_dtoa_r+0x6a0>
 800b158:	9a08      	ldr	r2, [sp, #32]
 800b15a:	2a00      	cmp	r2, #0
 800b15c:	f000 80d7 	beq.w	800b30e <_dtoa_r+0x8b6>
 800b160:	9a06      	ldr	r2, [sp, #24]
 800b162:	2a01      	cmp	r2, #1
 800b164:	f300 80ba 	bgt.w	800b2dc <_dtoa_r+0x884>
 800b168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b16a:	2a00      	cmp	r2, #0
 800b16c:	f000 80b2 	beq.w	800b2d4 <_dtoa_r+0x87c>
 800b170:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b174:	9e07      	ldr	r6, [sp, #28]
 800b176:	9d04      	ldr	r5, [sp, #16]
 800b178:	9a04      	ldr	r2, [sp, #16]
 800b17a:	441a      	add	r2, r3
 800b17c:	9204      	str	r2, [sp, #16]
 800b17e:	9a05      	ldr	r2, [sp, #20]
 800b180:	2101      	movs	r1, #1
 800b182:	441a      	add	r2, r3
 800b184:	4620      	mov	r0, r4
 800b186:	9205      	str	r2, [sp, #20]
 800b188:	f000 fd98 	bl	800bcbc <__i2b>
 800b18c:	4607      	mov	r7, r0
 800b18e:	2d00      	cmp	r5, #0
 800b190:	dd0c      	ble.n	800b1ac <_dtoa_r+0x754>
 800b192:	9b05      	ldr	r3, [sp, #20]
 800b194:	2b00      	cmp	r3, #0
 800b196:	dd09      	ble.n	800b1ac <_dtoa_r+0x754>
 800b198:	42ab      	cmp	r3, r5
 800b19a:	9a04      	ldr	r2, [sp, #16]
 800b19c:	bfa8      	it	ge
 800b19e:	462b      	movge	r3, r5
 800b1a0:	1ad2      	subs	r2, r2, r3
 800b1a2:	9204      	str	r2, [sp, #16]
 800b1a4:	9a05      	ldr	r2, [sp, #20]
 800b1a6:	1aed      	subs	r5, r5, r3
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	9305      	str	r3, [sp, #20]
 800b1ac:	9b07      	ldr	r3, [sp, #28]
 800b1ae:	b31b      	cbz	r3, 800b1f8 <_dtoa_r+0x7a0>
 800b1b0:	9b08      	ldr	r3, [sp, #32]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f000 80af 	beq.w	800b316 <_dtoa_r+0x8be>
 800b1b8:	2e00      	cmp	r6, #0
 800b1ba:	dd13      	ble.n	800b1e4 <_dtoa_r+0x78c>
 800b1bc:	4639      	mov	r1, r7
 800b1be:	4632      	mov	r2, r6
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f000 fe3b 	bl	800be3c <__pow5mult>
 800b1c6:	ee18 2a10 	vmov	r2, s16
 800b1ca:	4601      	mov	r1, r0
 800b1cc:	4607      	mov	r7, r0
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f000 fd8a 	bl	800bce8 <__multiply>
 800b1d4:	ee18 1a10 	vmov	r1, s16
 800b1d8:	4680      	mov	r8, r0
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f000 fcb6 	bl	800bb4c <_Bfree>
 800b1e0:	ee08 8a10 	vmov	s16, r8
 800b1e4:	9b07      	ldr	r3, [sp, #28]
 800b1e6:	1b9a      	subs	r2, r3, r6
 800b1e8:	d006      	beq.n	800b1f8 <_dtoa_r+0x7a0>
 800b1ea:	ee18 1a10 	vmov	r1, s16
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f000 fe24 	bl	800be3c <__pow5mult>
 800b1f4:	ee08 0a10 	vmov	s16, r0
 800b1f8:	2101      	movs	r1, #1
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f000 fd5e 	bl	800bcbc <__i2b>
 800b200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b202:	2b00      	cmp	r3, #0
 800b204:	4606      	mov	r6, r0
 800b206:	f340 8088 	ble.w	800b31a <_dtoa_r+0x8c2>
 800b20a:	461a      	mov	r2, r3
 800b20c:	4601      	mov	r1, r0
 800b20e:	4620      	mov	r0, r4
 800b210:	f000 fe14 	bl	800be3c <__pow5mult>
 800b214:	9b06      	ldr	r3, [sp, #24]
 800b216:	2b01      	cmp	r3, #1
 800b218:	4606      	mov	r6, r0
 800b21a:	f340 8081 	ble.w	800b320 <_dtoa_r+0x8c8>
 800b21e:	f04f 0800 	mov.w	r8, #0
 800b222:	6933      	ldr	r3, [r6, #16]
 800b224:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b228:	6918      	ldr	r0, [r3, #16]
 800b22a:	f000 fcf7 	bl	800bc1c <__hi0bits>
 800b22e:	f1c0 0020 	rsb	r0, r0, #32
 800b232:	9b05      	ldr	r3, [sp, #20]
 800b234:	4418      	add	r0, r3
 800b236:	f010 001f 	ands.w	r0, r0, #31
 800b23a:	f000 8092 	beq.w	800b362 <_dtoa_r+0x90a>
 800b23e:	f1c0 0320 	rsb	r3, r0, #32
 800b242:	2b04      	cmp	r3, #4
 800b244:	f340 808a 	ble.w	800b35c <_dtoa_r+0x904>
 800b248:	f1c0 001c 	rsb	r0, r0, #28
 800b24c:	9b04      	ldr	r3, [sp, #16]
 800b24e:	4403      	add	r3, r0
 800b250:	9304      	str	r3, [sp, #16]
 800b252:	9b05      	ldr	r3, [sp, #20]
 800b254:	4403      	add	r3, r0
 800b256:	4405      	add	r5, r0
 800b258:	9305      	str	r3, [sp, #20]
 800b25a:	9b04      	ldr	r3, [sp, #16]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	dd07      	ble.n	800b270 <_dtoa_r+0x818>
 800b260:	ee18 1a10 	vmov	r1, s16
 800b264:	461a      	mov	r2, r3
 800b266:	4620      	mov	r0, r4
 800b268:	f000 fe42 	bl	800bef0 <__lshift>
 800b26c:	ee08 0a10 	vmov	s16, r0
 800b270:	9b05      	ldr	r3, [sp, #20]
 800b272:	2b00      	cmp	r3, #0
 800b274:	dd05      	ble.n	800b282 <_dtoa_r+0x82a>
 800b276:	4631      	mov	r1, r6
 800b278:	461a      	mov	r2, r3
 800b27a:	4620      	mov	r0, r4
 800b27c:	f000 fe38 	bl	800bef0 <__lshift>
 800b280:	4606      	mov	r6, r0
 800b282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b284:	2b00      	cmp	r3, #0
 800b286:	d06e      	beq.n	800b366 <_dtoa_r+0x90e>
 800b288:	ee18 0a10 	vmov	r0, s16
 800b28c:	4631      	mov	r1, r6
 800b28e:	f000 fe9f 	bl	800bfd0 <__mcmp>
 800b292:	2800      	cmp	r0, #0
 800b294:	da67      	bge.n	800b366 <_dtoa_r+0x90e>
 800b296:	9b00      	ldr	r3, [sp, #0]
 800b298:	3b01      	subs	r3, #1
 800b29a:	ee18 1a10 	vmov	r1, s16
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	220a      	movs	r2, #10
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f000 fc73 	bl	800bb90 <__multadd>
 800b2aa:	9b08      	ldr	r3, [sp, #32]
 800b2ac:	ee08 0a10 	vmov	s16, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f000 81b1 	beq.w	800b618 <_dtoa_r+0xbc0>
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	4639      	mov	r1, r7
 800b2ba:	220a      	movs	r2, #10
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f000 fc67 	bl	800bb90 <__multadd>
 800b2c2:	9b02      	ldr	r3, [sp, #8]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	4607      	mov	r7, r0
 800b2c8:	f300 808e 	bgt.w	800b3e8 <_dtoa_r+0x990>
 800b2cc:	9b06      	ldr	r3, [sp, #24]
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	dc51      	bgt.n	800b376 <_dtoa_r+0x91e>
 800b2d2:	e089      	b.n	800b3e8 <_dtoa_r+0x990>
 800b2d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b2da:	e74b      	b.n	800b174 <_dtoa_r+0x71c>
 800b2dc:	9b03      	ldr	r3, [sp, #12]
 800b2de:	1e5e      	subs	r6, r3, #1
 800b2e0:	9b07      	ldr	r3, [sp, #28]
 800b2e2:	42b3      	cmp	r3, r6
 800b2e4:	bfbf      	itttt	lt
 800b2e6:	9b07      	ldrlt	r3, [sp, #28]
 800b2e8:	9607      	strlt	r6, [sp, #28]
 800b2ea:	1af2      	sublt	r2, r6, r3
 800b2ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b2ee:	bfb6      	itet	lt
 800b2f0:	189b      	addlt	r3, r3, r2
 800b2f2:	1b9e      	subge	r6, r3, r6
 800b2f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b2f6:	9b03      	ldr	r3, [sp, #12]
 800b2f8:	bfb8      	it	lt
 800b2fa:	2600      	movlt	r6, #0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	bfb7      	itett	lt
 800b300:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b304:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b308:	1a9d      	sublt	r5, r3, r2
 800b30a:	2300      	movlt	r3, #0
 800b30c:	e734      	b.n	800b178 <_dtoa_r+0x720>
 800b30e:	9e07      	ldr	r6, [sp, #28]
 800b310:	9d04      	ldr	r5, [sp, #16]
 800b312:	9f08      	ldr	r7, [sp, #32]
 800b314:	e73b      	b.n	800b18e <_dtoa_r+0x736>
 800b316:	9a07      	ldr	r2, [sp, #28]
 800b318:	e767      	b.n	800b1ea <_dtoa_r+0x792>
 800b31a:	9b06      	ldr	r3, [sp, #24]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	dc18      	bgt.n	800b352 <_dtoa_r+0x8fa>
 800b320:	f1ba 0f00 	cmp.w	sl, #0
 800b324:	d115      	bne.n	800b352 <_dtoa_r+0x8fa>
 800b326:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b32a:	b993      	cbnz	r3, 800b352 <_dtoa_r+0x8fa>
 800b32c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b330:	0d1b      	lsrs	r3, r3, #20
 800b332:	051b      	lsls	r3, r3, #20
 800b334:	b183      	cbz	r3, 800b358 <_dtoa_r+0x900>
 800b336:	9b04      	ldr	r3, [sp, #16]
 800b338:	3301      	adds	r3, #1
 800b33a:	9304      	str	r3, [sp, #16]
 800b33c:	9b05      	ldr	r3, [sp, #20]
 800b33e:	3301      	adds	r3, #1
 800b340:	9305      	str	r3, [sp, #20]
 800b342:	f04f 0801 	mov.w	r8, #1
 800b346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b348:	2b00      	cmp	r3, #0
 800b34a:	f47f af6a 	bne.w	800b222 <_dtoa_r+0x7ca>
 800b34e:	2001      	movs	r0, #1
 800b350:	e76f      	b.n	800b232 <_dtoa_r+0x7da>
 800b352:	f04f 0800 	mov.w	r8, #0
 800b356:	e7f6      	b.n	800b346 <_dtoa_r+0x8ee>
 800b358:	4698      	mov	r8, r3
 800b35a:	e7f4      	b.n	800b346 <_dtoa_r+0x8ee>
 800b35c:	f43f af7d 	beq.w	800b25a <_dtoa_r+0x802>
 800b360:	4618      	mov	r0, r3
 800b362:	301c      	adds	r0, #28
 800b364:	e772      	b.n	800b24c <_dtoa_r+0x7f4>
 800b366:	9b03      	ldr	r3, [sp, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	dc37      	bgt.n	800b3dc <_dtoa_r+0x984>
 800b36c:	9b06      	ldr	r3, [sp, #24]
 800b36e:	2b02      	cmp	r3, #2
 800b370:	dd34      	ble.n	800b3dc <_dtoa_r+0x984>
 800b372:	9b03      	ldr	r3, [sp, #12]
 800b374:	9302      	str	r3, [sp, #8]
 800b376:	9b02      	ldr	r3, [sp, #8]
 800b378:	b96b      	cbnz	r3, 800b396 <_dtoa_r+0x93e>
 800b37a:	4631      	mov	r1, r6
 800b37c:	2205      	movs	r2, #5
 800b37e:	4620      	mov	r0, r4
 800b380:	f000 fc06 	bl	800bb90 <__multadd>
 800b384:	4601      	mov	r1, r0
 800b386:	4606      	mov	r6, r0
 800b388:	ee18 0a10 	vmov	r0, s16
 800b38c:	f000 fe20 	bl	800bfd0 <__mcmp>
 800b390:	2800      	cmp	r0, #0
 800b392:	f73f adbb 	bgt.w	800af0c <_dtoa_r+0x4b4>
 800b396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b398:	9d01      	ldr	r5, [sp, #4]
 800b39a:	43db      	mvns	r3, r3
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	f04f 0800 	mov.w	r8, #0
 800b3a2:	4631      	mov	r1, r6
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f000 fbd1 	bl	800bb4c <_Bfree>
 800b3aa:	2f00      	cmp	r7, #0
 800b3ac:	f43f aea4 	beq.w	800b0f8 <_dtoa_r+0x6a0>
 800b3b0:	f1b8 0f00 	cmp.w	r8, #0
 800b3b4:	d005      	beq.n	800b3c2 <_dtoa_r+0x96a>
 800b3b6:	45b8      	cmp	r8, r7
 800b3b8:	d003      	beq.n	800b3c2 <_dtoa_r+0x96a>
 800b3ba:	4641      	mov	r1, r8
 800b3bc:	4620      	mov	r0, r4
 800b3be:	f000 fbc5 	bl	800bb4c <_Bfree>
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f000 fbc1 	bl	800bb4c <_Bfree>
 800b3ca:	e695      	b.n	800b0f8 <_dtoa_r+0x6a0>
 800b3cc:	2600      	movs	r6, #0
 800b3ce:	4637      	mov	r7, r6
 800b3d0:	e7e1      	b.n	800b396 <_dtoa_r+0x93e>
 800b3d2:	9700      	str	r7, [sp, #0]
 800b3d4:	4637      	mov	r7, r6
 800b3d6:	e599      	b.n	800af0c <_dtoa_r+0x4b4>
 800b3d8:	40240000 	.word	0x40240000
 800b3dc:	9b08      	ldr	r3, [sp, #32]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	f000 80ca 	beq.w	800b578 <_dtoa_r+0xb20>
 800b3e4:	9b03      	ldr	r3, [sp, #12]
 800b3e6:	9302      	str	r3, [sp, #8]
 800b3e8:	2d00      	cmp	r5, #0
 800b3ea:	dd05      	ble.n	800b3f8 <_dtoa_r+0x9a0>
 800b3ec:	4639      	mov	r1, r7
 800b3ee:	462a      	mov	r2, r5
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	f000 fd7d 	bl	800bef0 <__lshift>
 800b3f6:	4607      	mov	r7, r0
 800b3f8:	f1b8 0f00 	cmp.w	r8, #0
 800b3fc:	d05b      	beq.n	800b4b6 <_dtoa_r+0xa5e>
 800b3fe:	6879      	ldr	r1, [r7, #4]
 800b400:	4620      	mov	r0, r4
 800b402:	f000 fb63 	bl	800bacc <_Balloc>
 800b406:	4605      	mov	r5, r0
 800b408:	b928      	cbnz	r0, 800b416 <_dtoa_r+0x9be>
 800b40a:	4b87      	ldr	r3, [pc, #540]	; (800b628 <_dtoa_r+0xbd0>)
 800b40c:	4602      	mov	r2, r0
 800b40e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b412:	f7ff bb3b 	b.w	800aa8c <_dtoa_r+0x34>
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	3202      	adds	r2, #2
 800b41a:	0092      	lsls	r2, r2, #2
 800b41c:	f107 010c 	add.w	r1, r7, #12
 800b420:	300c      	adds	r0, #12
 800b422:	f000 fb45 	bl	800bab0 <memcpy>
 800b426:	2201      	movs	r2, #1
 800b428:	4629      	mov	r1, r5
 800b42a:	4620      	mov	r0, r4
 800b42c:	f000 fd60 	bl	800bef0 <__lshift>
 800b430:	9b01      	ldr	r3, [sp, #4]
 800b432:	f103 0901 	add.w	r9, r3, #1
 800b436:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b43a:	4413      	add	r3, r2
 800b43c:	9305      	str	r3, [sp, #20]
 800b43e:	f00a 0301 	and.w	r3, sl, #1
 800b442:	46b8      	mov	r8, r7
 800b444:	9304      	str	r3, [sp, #16]
 800b446:	4607      	mov	r7, r0
 800b448:	4631      	mov	r1, r6
 800b44a:	ee18 0a10 	vmov	r0, s16
 800b44e:	f7ff fa75 	bl	800a93c <quorem>
 800b452:	4641      	mov	r1, r8
 800b454:	9002      	str	r0, [sp, #8]
 800b456:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b45a:	ee18 0a10 	vmov	r0, s16
 800b45e:	f000 fdb7 	bl	800bfd0 <__mcmp>
 800b462:	463a      	mov	r2, r7
 800b464:	9003      	str	r0, [sp, #12]
 800b466:	4631      	mov	r1, r6
 800b468:	4620      	mov	r0, r4
 800b46a:	f000 fdcd 	bl	800c008 <__mdiff>
 800b46e:	68c2      	ldr	r2, [r0, #12]
 800b470:	f109 3bff 	add.w	fp, r9, #4294967295
 800b474:	4605      	mov	r5, r0
 800b476:	bb02      	cbnz	r2, 800b4ba <_dtoa_r+0xa62>
 800b478:	4601      	mov	r1, r0
 800b47a:	ee18 0a10 	vmov	r0, s16
 800b47e:	f000 fda7 	bl	800bfd0 <__mcmp>
 800b482:	4602      	mov	r2, r0
 800b484:	4629      	mov	r1, r5
 800b486:	4620      	mov	r0, r4
 800b488:	9207      	str	r2, [sp, #28]
 800b48a:	f000 fb5f 	bl	800bb4c <_Bfree>
 800b48e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b492:	ea43 0102 	orr.w	r1, r3, r2
 800b496:	9b04      	ldr	r3, [sp, #16]
 800b498:	430b      	orrs	r3, r1
 800b49a:	464d      	mov	r5, r9
 800b49c:	d10f      	bne.n	800b4be <_dtoa_r+0xa66>
 800b49e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b4a2:	d02a      	beq.n	800b4fa <_dtoa_r+0xaa2>
 800b4a4:	9b03      	ldr	r3, [sp, #12]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	dd02      	ble.n	800b4b0 <_dtoa_r+0xa58>
 800b4aa:	9b02      	ldr	r3, [sp, #8]
 800b4ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b4b0:	f88b a000 	strb.w	sl, [fp]
 800b4b4:	e775      	b.n	800b3a2 <_dtoa_r+0x94a>
 800b4b6:	4638      	mov	r0, r7
 800b4b8:	e7ba      	b.n	800b430 <_dtoa_r+0x9d8>
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	e7e2      	b.n	800b484 <_dtoa_r+0xa2c>
 800b4be:	9b03      	ldr	r3, [sp, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	db04      	blt.n	800b4ce <_dtoa_r+0xa76>
 800b4c4:	9906      	ldr	r1, [sp, #24]
 800b4c6:	430b      	orrs	r3, r1
 800b4c8:	9904      	ldr	r1, [sp, #16]
 800b4ca:	430b      	orrs	r3, r1
 800b4cc:	d122      	bne.n	800b514 <_dtoa_r+0xabc>
 800b4ce:	2a00      	cmp	r2, #0
 800b4d0:	ddee      	ble.n	800b4b0 <_dtoa_r+0xa58>
 800b4d2:	ee18 1a10 	vmov	r1, s16
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f000 fd09 	bl	800bef0 <__lshift>
 800b4de:	4631      	mov	r1, r6
 800b4e0:	ee08 0a10 	vmov	s16, r0
 800b4e4:	f000 fd74 	bl	800bfd0 <__mcmp>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	dc03      	bgt.n	800b4f4 <_dtoa_r+0xa9c>
 800b4ec:	d1e0      	bne.n	800b4b0 <_dtoa_r+0xa58>
 800b4ee:	f01a 0f01 	tst.w	sl, #1
 800b4f2:	d0dd      	beq.n	800b4b0 <_dtoa_r+0xa58>
 800b4f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b4f8:	d1d7      	bne.n	800b4aa <_dtoa_r+0xa52>
 800b4fa:	2339      	movs	r3, #57	; 0x39
 800b4fc:	f88b 3000 	strb.w	r3, [fp]
 800b500:	462b      	mov	r3, r5
 800b502:	461d      	mov	r5, r3
 800b504:	3b01      	subs	r3, #1
 800b506:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b50a:	2a39      	cmp	r2, #57	; 0x39
 800b50c:	d071      	beq.n	800b5f2 <_dtoa_r+0xb9a>
 800b50e:	3201      	adds	r2, #1
 800b510:	701a      	strb	r2, [r3, #0]
 800b512:	e746      	b.n	800b3a2 <_dtoa_r+0x94a>
 800b514:	2a00      	cmp	r2, #0
 800b516:	dd07      	ble.n	800b528 <_dtoa_r+0xad0>
 800b518:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b51c:	d0ed      	beq.n	800b4fa <_dtoa_r+0xaa2>
 800b51e:	f10a 0301 	add.w	r3, sl, #1
 800b522:	f88b 3000 	strb.w	r3, [fp]
 800b526:	e73c      	b.n	800b3a2 <_dtoa_r+0x94a>
 800b528:	9b05      	ldr	r3, [sp, #20]
 800b52a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b52e:	4599      	cmp	r9, r3
 800b530:	d047      	beq.n	800b5c2 <_dtoa_r+0xb6a>
 800b532:	ee18 1a10 	vmov	r1, s16
 800b536:	2300      	movs	r3, #0
 800b538:	220a      	movs	r2, #10
 800b53a:	4620      	mov	r0, r4
 800b53c:	f000 fb28 	bl	800bb90 <__multadd>
 800b540:	45b8      	cmp	r8, r7
 800b542:	ee08 0a10 	vmov	s16, r0
 800b546:	f04f 0300 	mov.w	r3, #0
 800b54a:	f04f 020a 	mov.w	r2, #10
 800b54e:	4641      	mov	r1, r8
 800b550:	4620      	mov	r0, r4
 800b552:	d106      	bne.n	800b562 <_dtoa_r+0xb0a>
 800b554:	f000 fb1c 	bl	800bb90 <__multadd>
 800b558:	4680      	mov	r8, r0
 800b55a:	4607      	mov	r7, r0
 800b55c:	f109 0901 	add.w	r9, r9, #1
 800b560:	e772      	b.n	800b448 <_dtoa_r+0x9f0>
 800b562:	f000 fb15 	bl	800bb90 <__multadd>
 800b566:	4639      	mov	r1, r7
 800b568:	4680      	mov	r8, r0
 800b56a:	2300      	movs	r3, #0
 800b56c:	220a      	movs	r2, #10
 800b56e:	4620      	mov	r0, r4
 800b570:	f000 fb0e 	bl	800bb90 <__multadd>
 800b574:	4607      	mov	r7, r0
 800b576:	e7f1      	b.n	800b55c <_dtoa_r+0xb04>
 800b578:	9b03      	ldr	r3, [sp, #12]
 800b57a:	9302      	str	r3, [sp, #8]
 800b57c:	9d01      	ldr	r5, [sp, #4]
 800b57e:	ee18 0a10 	vmov	r0, s16
 800b582:	4631      	mov	r1, r6
 800b584:	f7ff f9da 	bl	800a93c <quorem>
 800b588:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b58c:	9b01      	ldr	r3, [sp, #4]
 800b58e:	f805 ab01 	strb.w	sl, [r5], #1
 800b592:	1aea      	subs	r2, r5, r3
 800b594:	9b02      	ldr	r3, [sp, #8]
 800b596:	4293      	cmp	r3, r2
 800b598:	dd09      	ble.n	800b5ae <_dtoa_r+0xb56>
 800b59a:	ee18 1a10 	vmov	r1, s16
 800b59e:	2300      	movs	r3, #0
 800b5a0:	220a      	movs	r2, #10
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f000 faf4 	bl	800bb90 <__multadd>
 800b5a8:	ee08 0a10 	vmov	s16, r0
 800b5ac:	e7e7      	b.n	800b57e <_dtoa_r+0xb26>
 800b5ae:	9b02      	ldr	r3, [sp, #8]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	bfc8      	it	gt
 800b5b4:	461d      	movgt	r5, r3
 800b5b6:	9b01      	ldr	r3, [sp, #4]
 800b5b8:	bfd8      	it	le
 800b5ba:	2501      	movle	r5, #1
 800b5bc:	441d      	add	r5, r3
 800b5be:	f04f 0800 	mov.w	r8, #0
 800b5c2:	ee18 1a10 	vmov	r1, s16
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f000 fc91 	bl	800bef0 <__lshift>
 800b5ce:	4631      	mov	r1, r6
 800b5d0:	ee08 0a10 	vmov	s16, r0
 800b5d4:	f000 fcfc 	bl	800bfd0 <__mcmp>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	dc91      	bgt.n	800b500 <_dtoa_r+0xaa8>
 800b5dc:	d102      	bne.n	800b5e4 <_dtoa_r+0xb8c>
 800b5de:	f01a 0f01 	tst.w	sl, #1
 800b5e2:	d18d      	bne.n	800b500 <_dtoa_r+0xaa8>
 800b5e4:	462b      	mov	r3, r5
 800b5e6:	461d      	mov	r5, r3
 800b5e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5ec:	2a30      	cmp	r2, #48	; 0x30
 800b5ee:	d0fa      	beq.n	800b5e6 <_dtoa_r+0xb8e>
 800b5f0:	e6d7      	b.n	800b3a2 <_dtoa_r+0x94a>
 800b5f2:	9a01      	ldr	r2, [sp, #4]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d184      	bne.n	800b502 <_dtoa_r+0xaaa>
 800b5f8:	9b00      	ldr	r3, [sp, #0]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	2331      	movs	r3, #49	; 0x31
 800b600:	7013      	strb	r3, [r2, #0]
 800b602:	e6ce      	b.n	800b3a2 <_dtoa_r+0x94a>
 800b604:	4b09      	ldr	r3, [pc, #36]	; (800b62c <_dtoa_r+0xbd4>)
 800b606:	f7ff ba95 	b.w	800ab34 <_dtoa_r+0xdc>
 800b60a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f47f aa6e 	bne.w	800aaee <_dtoa_r+0x96>
 800b612:	4b07      	ldr	r3, [pc, #28]	; (800b630 <_dtoa_r+0xbd8>)
 800b614:	f7ff ba8e 	b.w	800ab34 <_dtoa_r+0xdc>
 800b618:	9b02      	ldr	r3, [sp, #8]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	dcae      	bgt.n	800b57c <_dtoa_r+0xb24>
 800b61e:	9b06      	ldr	r3, [sp, #24]
 800b620:	2b02      	cmp	r3, #2
 800b622:	f73f aea8 	bgt.w	800b376 <_dtoa_r+0x91e>
 800b626:	e7a9      	b.n	800b57c <_dtoa_r+0xb24>
 800b628:	0800d065 	.word	0x0800d065
 800b62c:	0800ce28 	.word	0x0800ce28
 800b630:	0800cffd 	.word	0x0800cffd

0800b634 <__sflush_r>:
 800b634:	898a      	ldrh	r2, [r1, #12]
 800b636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b63a:	4605      	mov	r5, r0
 800b63c:	0710      	lsls	r0, r2, #28
 800b63e:	460c      	mov	r4, r1
 800b640:	d458      	bmi.n	800b6f4 <__sflush_r+0xc0>
 800b642:	684b      	ldr	r3, [r1, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	dc05      	bgt.n	800b654 <__sflush_r+0x20>
 800b648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	dc02      	bgt.n	800b654 <__sflush_r+0x20>
 800b64e:	2000      	movs	r0, #0
 800b650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b656:	2e00      	cmp	r6, #0
 800b658:	d0f9      	beq.n	800b64e <__sflush_r+0x1a>
 800b65a:	2300      	movs	r3, #0
 800b65c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b660:	682f      	ldr	r7, [r5, #0]
 800b662:	602b      	str	r3, [r5, #0]
 800b664:	d032      	beq.n	800b6cc <__sflush_r+0x98>
 800b666:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b668:	89a3      	ldrh	r3, [r4, #12]
 800b66a:	075a      	lsls	r2, r3, #29
 800b66c:	d505      	bpl.n	800b67a <__sflush_r+0x46>
 800b66e:	6863      	ldr	r3, [r4, #4]
 800b670:	1ac0      	subs	r0, r0, r3
 800b672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b674:	b10b      	cbz	r3, 800b67a <__sflush_r+0x46>
 800b676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b678:	1ac0      	subs	r0, r0, r3
 800b67a:	2300      	movs	r3, #0
 800b67c:	4602      	mov	r2, r0
 800b67e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b680:	6a21      	ldr	r1, [r4, #32]
 800b682:	4628      	mov	r0, r5
 800b684:	47b0      	blx	r6
 800b686:	1c43      	adds	r3, r0, #1
 800b688:	89a3      	ldrh	r3, [r4, #12]
 800b68a:	d106      	bne.n	800b69a <__sflush_r+0x66>
 800b68c:	6829      	ldr	r1, [r5, #0]
 800b68e:	291d      	cmp	r1, #29
 800b690:	d82c      	bhi.n	800b6ec <__sflush_r+0xb8>
 800b692:	4a2a      	ldr	r2, [pc, #168]	; (800b73c <__sflush_r+0x108>)
 800b694:	40ca      	lsrs	r2, r1
 800b696:	07d6      	lsls	r6, r2, #31
 800b698:	d528      	bpl.n	800b6ec <__sflush_r+0xb8>
 800b69a:	2200      	movs	r2, #0
 800b69c:	6062      	str	r2, [r4, #4]
 800b69e:	04d9      	lsls	r1, r3, #19
 800b6a0:	6922      	ldr	r2, [r4, #16]
 800b6a2:	6022      	str	r2, [r4, #0]
 800b6a4:	d504      	bpl.n	800b6b0 <__sflush_r+0x7c>
 800b6a6:	1c42      	adds	r2, r0, #1
 800b6a8:	d101      	bne.n	800b6ae <__sflush_r+0x7a>
 800b6aa:	682b      	ldr	r3, [r5, #0]
 800b6ac:	b903      	cbnz	r3, 800b6b0 <__sflush_r+0x7c>
 800b6ae:	6560      	str	r0, [r4, #84]	; 0x54
 800b6b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6b2:	602f      	str	r7, [r5, #0]
 800b6b4:	2900      	cmp	r1, #0
 800b6b6:	d0ca      	beq.n	800b64e <__sflush_r+0x1a>
 800b6b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6bc:	4299      	cmp	r1, r3
 800b6be:	d002      	beq.n	800b6c6 <__sflush_r+0x92>
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	f000 fd9d 	bl	800c200 <_free_r>
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	6360      	str	r0, [r4, #52]	; 0x34
 800b6ca:	e7c1      	b.n	800b650 <__sflush_r+0x1c>
 800b6cc:	6a21      	ldr	r1, [r4, #32]
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	47b0      	blx	r6
 800b6d4:	1c41      	adds	r1, r0, #1
 800b6d6:	d1c7      	bne.n	800b668 <__sflush_r+0x34>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d0c4      	beq.n	800b668 <__sflush_r+0x34>
 800b6de:	2b1d      	cmp	r3, #29
 800b6e0:	d001      	beq.n	800b6e6 <__sflush_r+0xb2>
 800b6e2:	2b16      	cmp	r3, #22
 800b6e4:	d101      	bne.n	800b6ea <__sflush_r+0xb6>
 800b6e6:	602f      	str	r7, [r5, #0]
 800b6e8:	e7b1      	b.n	800b64e <__sflush_r+0x1a>
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6f0:	81a3      	strh	r3, [r4, #12]
 800b6f2:	e7ad      	b.n	800b650 <__sflush_r+0x1c>
 800b6f4:	690f      	ldr	r7, [r1, #16]
 800b6f6:	2f00      	cmp	r7, #0
 800b6f8:	d0a9      	beq.n	800b64e <__sflush_r+0x1a>
 800b6fa:	0793      	lsls	r3, r2, #30
 800b6fc:	680e      	ldr	r6, [r1, #0]
 800b6fe:	bf08      	it	eq
 800b700:	694b      	ldreq	r3, [r1, #20]
 800b702:	600f      	str	r7, [r1, #0]
 800b704:	bf18      	it	ne
 800b706:	2300      	movne	r3, #0
 800b708:	eba6 0807 	sub.w	r8, r6, r7
 800b70c:	608b      	str	r3, [r1, #8]
 800b70e:	f1b8 0f00 	cmp.w	r8, #0
 800b712:	dd9c      	ble.n	800b64e <__sflush_r+0x1a>
 800b714:	6a21      	ldr	r1, [r4, #32]
 800b716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b718:	4643      	mov	r3, r8
 800b71a:	463a      	mov	r2, r7
 800b71c:	4628      	mov	r0, r5
 800b71e:	47b0      	blx	r6
 800b720:	2800      	cmp	r0, #0
 800b722:	dc06      	bgt.n	800b732 <__sflush_r+0xfe>
 800b724:	89a3      	ldrh	r3, [r4, #12]
 800b726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b72a:	81a3      	strh	r3, [r4, #12]
 800b72c:	f04f 30ff 	mov.w	r0, #4294967295
 800b730:	e78e      	b.n	800b650 <__sflush_r+0x1c>
 800b732:	4407      	add	r7, r0
 800b734:	eba8 0800 	sub.w	r8, r8, r0
 800b738:	e7e9      	b.n	800b70e <__sflush_r+0xda>
 800b73a:	bf00      	nop
 800b73c:	20400001 	.word	0x20400001

0800b740 <_fflush_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	690b      	ldr	r3, [r1, #16]
 800b744:	4605      	mov	r5, r0
 800b746:	460c      	mov	r4, r1
 800b748:	b913      	cbnz	r3, 800b750 <_fflush_r+0x10>
 800b74a:	2500      	movs	r5, #0
 800b74c:	4628      	mov	r0, r5
 800b74e:	bd38      	pop	{r3, r4, r5, pc}
 800b750:	b118      	cbz	r0, 800b75a <_fflush_r+0x1a>
 800b752:	6983      	ldr	r3, [r0, #24]
 800b754:	b90b      	cbnz	r3, 800b75a <_fflush_r+0x1a>
 800b756:	f000 f887 	bl	800b868 <__sinit>
 800b75a:	4b14      	ldr	r3, [pc, #80]	; (800b7ac <_fflush_r+0x6c>)
 800b75c:	429c      	cmp	r4, r3
 800b75e:	d11b      	bne.n	800b798 <_fflush_r+0x58>
 800b760:	686c      	ldr	r4, [r5, #4]
 800b762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d0ef      	beq.n	800b74a <_fflush_r+0xa>
 800b76a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b76c:	07d0      	lsls	r0, r2, #31
 800b76e:	d404      	bmi.n	800b77a <_fflush_r+0x3a>
 800b770:	0599      	lsls	r1, r3, #22
 800b772:	d402      	bmi.n	800b77a <_fflush_r+0x3a>
 800b774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b776:	f000 f92c 	bl	800b9d2 <__retarget_lock_acquire_recursive>
 800b77a:	4628      	mov	r0, r5
 800b77c:	4621      	mov	r1, r4
 800b77e:	f7ff ff59 	bl	800b634 <__sflush_r>
 800b782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b784:	07da      	lsls	r2, r3, #31
 800b786:	4605      	mov	r5, r0
 800b788:	d4e0      	bmi.n	800b74c <_fflush_r+0xc>
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	059b      	lsls	r3, r3, #22
 800b78e:	d4dd      	bmi.n	800b74c <_fflush_r+0xc>
 800b790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b792:	f000 f91f 	bl	800b9d4 <__retarget_lock_release_recursive>
 800b796:	e7d9      	b.n	800b74c <_fflush_r+0xc>
 800b798:	4b05      	ldr	r3, [pc, #20]	; (800b7b0 <_fflush_r+0x70>)
 800b79a:	429c      	cmp	r4, r3
 800b79c:	d101      	bne.n	800b7a2 <_fflush_r+0x62>
 800b79e:	68ac      	ldr	r4, [r5, #8]
 800b7a0:	e7df      	b.n	800b762 <_fflush_r+0x22>
 800b7a2:	4b04      	ldr	r3, [pc, #16]	; (800b7b4 <_fflush_r+0x74>)
 800b7a4:	429c      	cmp	r4, r3
 800b7a6:	bf08      	it	eq
 800b7a8:	68ec      	ldreq	r4, [r5, #12]
 800b7aa:	e7da      	b.n	800b762 <_fflush_r+0x22>
 800b7ac:	0800d098 	.word	0x0800d098
 800b7b0:	0800d0b8 	.word	0x0800d0b8
 800b7b4:	0800d078 	.word	0x0800d078

0800b7b8 <std>:
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	b510      	push	{r4, lr}
 800b7bc:	4604      	mov	r4, r0
 800b7be:	e9c0 3300 	strd	r3, r3, [r0]
 800b7c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7c6:	6083      	str	r3, [r0, #8]
 800b7c8:	8181      	strh	r1, [r0, #12]
 800b7ca:	6643      	str	r3, [r0, #100]	; 0x64
 800b7cc:	81c2      	strh	r2, [r0, #14]
 800b7ce:	6183      	str	r3, [r0, #24]
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	2208      	movs	r2, #8
 800b7d4:	305c      	adds	r0, #92	; 0x5c
 800b7d6:	f7fe f9cf 	bl	8009b78 <memset>
 800b7da:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <std+0x38>)
 800b7dc:	6263      	str	r3, [r4, #36]	; 0x24
 800b7de:	4b05      	ldr	r3, [pc, #20]	; (800b7f4 <std+0x3c>)
 800b7e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7e2:	4b05      	ldr	r3, [pc, #20]	; (800b7f8 <std+0x40>)
 800b7e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7e6:	4b05      	ldr	r3, [pc, #20]	; (800b7fc <std+0x44>)
 800b7e8:	6224      	str	r4, [r4, #32]
 800b7ea:	6323      	str	r3, [r4, #48]	; 0x30
 800b7ec:	bd10      	pop	{r4, pc}
 800b7ee:	bf00      	nop
 800b7f0:	0800c94d 	.word	0x0800c94d
 800b7f4:	0800c96f 	.word	0x0800c96f
 800b7f8:	0800c9a7 	.word	0x0800c9a7
 800b7fc:	0800c9cb 	.word	0x0800c9cb

0800b800 <_cleanup_r>:
 800b800:	4901      	ldr	r1, [pc, #4]	; (800b808 <_cleanup_r+0x8>)
 800b802:	f000 b8c1 	b.w	800b988 <_fwalk_reent>
 800b806:	bf00      	nop
 800b808:	0800b741 	.word	0x0800b741

0800b80c <__sfmoreglue>:
 800b80c:	b570      	push	{r4, r5, r6, lr}
 800b80e:	2268      	movs	r2, #104	; 0x68
 800b810:	1e4d      	subs	r5, r1, #1
 800b812:	4355      	muls	r5, r2
 800b814:	460e      	mov	r6, r1
 800b816:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b81a:	f000 fd5d 	bl	800c2d8 <_malloc_r>
 800b81e:	4604      	mov	r4, r0
 800b820:	b140      	cbz	r0, 800b834 <__sfmoreglue+0x28>
 800b822:	2100      	movs	r1, #0
 800b824:	e9c0 1600 	strd	r1, r6, [r0]
 800b828:	300c      	adds	r0, #12
 800b82a:	60a0      	str	r0, [r4, #8]
 800b82c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b830:	f7fe f9a2 	bl	8009b78 <memset>
 800b834:	4620      	mov	r0, r4
 800b836:	bd70      	pop	{r4, r5, r6, pc}

0800b838 <__sfp_lock_acquire>:
 800b838:	4801      	ldr	r0, [pc, #4]	; (800b840 <__sfp_lock_acquire+0x8>)
 800b83a:	f000 b8ca 	b.w	800b9d2 <__retarget_lock_acquire_recursive>
 800b83e:	bf00      	nop
 800b840:	200006a1 	.word	0x200006a1

0800b844 <__sfp_lock_release>:
 800b844:	4801      	ldr	r0, [pc, #4]	; (800b84c <__sfp_lock_release+0x8>)
 800b846:	f000 b8c5 	b.w	800b9d4 <__retarget_lock_release_recursive>
 800b84a:	bf00      	nop
 800b84c:	200006a1 	.word	0x200006a1

0800b850 <__sinit_lock_acquire>:
 800b850:	4801      	ldr	r0, [pc, #4]	; (800b858 <__sinit_lock_acquire+0x8>)
 800b852:	f000 b8be 	b.w	800b9d2 <__retarget_lock_acquire_recursive>
 800b856:	bf00      	nop
 800b858:	200006a2 	.word	0x200006a2

0800b85c <__sinit_lock_release>:
 800b85c:	4801      	ldr	r0, [pc, #4]	; (800b864 <__sinit_lock_release+0x8>)
 800b85e:	f000 b8b9 	b.w	800b9d4 <__retarget_lock_release_recursive>
 800b862:	bf00      	nop
 800b864:	200006a2 	.word	0x200006a2

0800b868 <__sinit>:
 800b868:	b510      	push	{r4, lr}
 800b86a:	4604      	mov	r4, r0
 800b86c:	f7ff fff0 	bl	800b850 <__sinit_lock_acquire>
 800b870:	69a3      	ldr	r3, [r4, #24]
 800b872:	b11b      	cbz	r3, 800b87c <__sinit+0x14>
 800b874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b878:	f7ff bff0 	b.w	800b85c <__sinit_lock_release>
 800b87c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b880:	6523      	str	r3, [r4, #80]	; 0x50
 800b882:	4b13      	ldr	r3, [pc, #76]	; (800b8d0 <__sinit+0x68>)
 800b884:	4a13      	ldr	r2, [pc, #76]	; (800b8d4 <__sinit+0x6c>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	62a2      	str	r2, [r4, #40]	; 0x28
 800b88a:	42a3      	cmp	r3, r4
 800b88c:	bf04      	itt	eq
 800b88e:	2301      	moveq	r3, #1
 800b890:	61a3      	streq	r3, [r4, #24]
 800b892:	4620      	mov	r0, r4
 800b894:	f000 f820 	bl	800b8d8 <__sfp>
 800b898:	6060      	str	r0, [r4, #4]
 800b89a:	4620      	mov	r0, r4
 800b89c:	f000 f81c 	bl	800b8d8 <__sfp>
 800b8a0:	60a0      	str	r0, [r4, #8]
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f000 f818 	bl	800b8d8 <__sfp>
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	60e0      	str	r0, [r4, #12]
 800b8ac:	2104      	movs	r1, #4
 800b8ae:	6860      	ldr	r0, [r4, #4]
 800b8b0:	f7ff ff82 	bl	800b7b8 <std>
 800b8b4:	68a0      	ldr	r0, [r4, #8]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	2109      	movs	r1, #9
 800b8ba:	f7ff ff7d 	bl	800b7b8 <std>
 800b8be:	68e0      	ldr	r0, [r4, #12]
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	2112      	movs	r1, #18
 800b8c4:	f7ff ff78 	bl	800b7b8 <std>
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	61a3      	str	r3, [r4, #24]
 800b8cc:	e7d2      	b.n	800b874 <__sinit+0xc>
 800b8ce:	bf00      	nop
 800b8d0:	0800ce14 	.word	0x0800ce14
 800b8d4:	0800b801 	.word	0x0800b801

0800b8d8 <__sfp>:
 800b8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8da:	4607      	mov	r7, r0
 800b8dc:	f7ff ffac 	bl	800b838 <__sfp_lock_acquire>
 800b8e0:	4b1e      	ldr	r3, [pc, #120]	; (800b95c <__sfp+0x84>)
 800b8e2:	681e      	ldr	r6, [r3, #0]
 800b8e4:	69b3      	ldr	r3, [r6, #24]
 800b8e6:	b913      	cbnz	r3, 800b8ee <__sfp+0x16>
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	f7ff ffbd 	bl	800b868 <__sinit>
 800b8ee:	3648      	adds	r6, #72	; 0x48
 800b8f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	d503      	bpl.n	800b900 <__sfp+0x28>
 800b8f8:	6833      	ldr	r3, [r6, #0]
 800b8fa:	b30b      	cbz	r3, 800b940 <__sfp+0x68>
 800b8fc:	6836      	ldr	r6, [r6, #0]
 800b8fe:	e7f7      	b.n	800b8f0 <__sfp+0x18>
 800b900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b904:	b9d5      	cbnz	r5, 800b93c <__sfp+0x64>
 800b906:	4b16      	ldr	r3, [pc, #88]	; (800b960 <__sfp+0x88>)
 800b908:	60e3      	str	r3, [r4, #12]
 800b90a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b90e:	6665      	str	r5, [r4, #100]	; 0x64
 800b910:	f000 f85e 	bl	800b9d0 <__retarget_lock_init_recursive>
 800b914:	f7ff ff96 	bl	800b844 <__sfp_lock_release>
 800b918:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b91c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b920:	6025      	str	r5, [r4, #0]
 800b922:	61a5      	str	r5, [r4, #24]
 800b924:	2208      	movs	r2, #8
 800b926:	4629      	mov	r1, r5
 800b928:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b92c:	f7fe f924 	bl	8009b78 <memset>
 800b930:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b934:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b938:	4620      	mov	r0, r4
 800b93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b93c:	3468      	adds	r4, #104	; 0x68
 800b93e:	e7d9      	b.n	800b8f4 <__sfp+0x1c>
 800b940:	2104      	movs	r1, #4
 800b942:	4638      	mov	r0, r7
 800b944:	f7ff ff62 	bl	800b80c <__sfmoreglue>
 800b948:	4604      	mov	r4, r0
 800b94a:	6030      	str	r0, [r6, #0]
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d1d5      	bne.n	800b8fc <__sfp+0x24>
 800b950:	f7ff ff78 	bl	800b844 <__sfp_lock_release>
 800b954:	230c      	movs	r3, #12
 800b956:	603b      	str	r3, [r7, #0]
 800b958:	e7ee      	b.n	800b938 <__sfp+0x60>
 800b95a:	bf00      	nop
 800b95c:	0800ce14 	.word	0x0800ce14
 800b960:	ffff0001 	.word	0xffff0001

0800b964 <fiprintf>:
 800b964:	b40e      	push	{r1, r2, r3}
 800b966:	b503      	push	{r0, r1, lr}
 800b968:	4601      	mov	r1, r0
 800b96a:	ab03      	add	r3, sp, #12
 800b96c:	4805      	ldr	r0, [pc, #20]	; (800b984 <fiprintf+0x20>)
 800b96e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b972:	6800      	ldr	r0, [r0, #0]
 800b974:	9301      	str	r3, [sp, #4]
 800b976:	f000 fea9 	bl	800c6cc <_vfiprintf_r>
 800b97a:	b002      	add	sp, #8
 800b97c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b980:	b003      	add	sp, #12
 800b982:	4770      	bx	lr
 800b984:	2000015c 	.word	0x2000015c

0800b988 <_fwalk_reent>:
 800b988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b98c:	4606      	mov	r6, r0
 800b98e:	4688      	mov	r8, r1
 800b990:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b994:	2700      	movs	r7, #0
 800b996:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b99a:	f1b9 0901 	subs.w	r9, r9, #1
 800b99e:	d505      	bpl.n	800b9ac <_fwalk_reent+0x24>
 800b9a0:	6824      	ldr	r4, [r4, #0]
 800b9a2:	2c00      	cmp	r4, #0
 800b9a4:	d1f7      	bne.n	800b996 <_fwalk_reent+0xe>
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ac:	89ab      	ldrh	r3, [r5, #12]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d907      	bls.n	800b9c2 <_fwalk_reent+0x3a>
 800b9b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	d003      	beq.n	800b9c2 <_fwalk_reent+0x3a>
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	4630      	mov	r0, r6
 800b9be:	47c0      	blx	r8
 800b9c0:	4307      	orrs	r7, r0
 800b9c2:	3568      	adds	r5, #104	; 0x68
 800b9c4:	e7e9      	b.n	800b99a <_fwalk_reent+0x12>
	...

0800b9c8 <_localeconv_r>:
 800b9c8:	4800      	ldr	r0, [pc, #0]	; (800b9cc <_localeconv_r+0x4>)
 800b9ca:	4770      	bx	lr
 800b9cc:	200002b0 	.word	0x200002b0

0800b9d0 <__retarget_lock_init_recursive>:
 800b9d0:	4770      	bx	lr

0800b9d2 <__retarget_lock_acquire_recursive>:
 800b9d2:	4770      	bx	lr

0800b9d4 <__retarget_lock_release_recursive>:
 800b9d4:	4770      	bx	lr

0800b9d6 <__swhatbuf_r>:
 800b9d6:	b570      	push	{r4, r5, r6, lr}
 800b9d8:	460e      	mov	r6, r1
 800b9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9de:	2900      	cmp	r1, #0
 800b9e0:	b096      	sub	sp, #88	; 0x58
 800b9e2:	4614      	mov	r4, r2
 800b9e4:	461d      	mov	r5, r3
 800b9e6:	da08      	bge.n	800b9fa <__swhatbuf_r+0x24>
 800b9e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	602a      	str	r2, [r5, #0]
 800b9f0:	061a      	lsls	r2, r3, #24
 800b9f2:	d410      	bmi.n	800ba16 <__swhatbuf_r+0x40>
 800b9f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9f8:	e00e      	b.n	800ba18 <__swhatbuf_r+0x42>
 800b9fa:	466a      	mov	r2, sp
 800b9fc:	f001 f814 	bl	800ca28 <_fstat_r>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	dbf1      	blt.n	800b9e8 <__swhatbuf_r+0x12>
 800ba04:	9a01      	ldr	r2, [sp, #4]
 800ba06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba0e:	425a      	negs	r2, r3
 800ba10:	415a      	adcs	r2, r3
 800ba12:	602a      	str	r2, [r5, #0]
 800ba14:	e7ee      	b.n	800b9f4 <__swhatbuf_r+0x1e>
 800ba16:	2340      	movs	r3, #64	; 0x40
 800ba18:	2000      	movs	r0, #0
 800ba1a:	6023      	str	r3, [r4, #0]
 800ba1c:	b016      	add	sp, #88	; 0x58
 800ba1e:	bd70      	pop	{r4, r5, r6, pc}

0800ba20 <__smakebuf_r>:
 800ba20:	898b      	ldrh	r3, [r1, #12]
 800ba22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba24:	079d      	lsls	r5, r3, #30
 800ba26:	4606      	mov	r6, r0
 800ba28:	460c      	mov	r4, r1
 800ba2a:	d507      	bpl.n	800ba3c <__smakebuf_r+0x1c>
 800ba2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba30:	6023      	str	r3, [r4, #0]
 800ba32:	6123      	str	r3, [r4, #16]
 800ba34:	2301      	movs	r3, #1
 800ba36:	6163      	str	r3, [r4, #20]
 800ba38:	b002      	add	sp, #8
 800ba3a:	bd70      	pop	{r4, r5, r6, pc}
 800ba3c:	ab01      	add	r3, sp, #4
 800ba3e:	466a      	mov	r2, sp
 800ba40:	f7ff ffc9 	bl	800b9d6 <__swhatbuf_r>
 800ba44:	9900      	ldr	r1, [sp, #0]
 800ba46:	4605      	mov	r5, r0
 800ba48:	4630      	mov	r0, r6
 800ba4a:	f000 fc45 	bl	800c2d8 <_malloc_r>
 800ba4e:	b948      	cbnz	r0, 800ba64 <__smakebuf_r+0x44>
 800ba50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba54:	059a      	lsls	r2, r3, #22
 800ba56:	d4ef      	bmi.n	800ba38 <__smakebuf_r+0x18>
 800ba58:	f023 0303 	bic.w	r3, r3, #3
 800ba5c:	f043 0302 	orr.w	r3, r3, #2
 800ba60:	81a3      	strh	r3, [r4, #12]
 800ba62:	e7e3      	b.n	800ba2c <__smakebuf_r+0xc>
 800ba64:	4b0d      	ldr	r3, [pc, #52]	; (800ba9c <__smakebuf_r+0x7c>)
 800ba66:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba68:	89a3      	ldrh	r3, [r4, #12]
 800ba6a:	6020      	str	r0, [r4, #0]
 800ba6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba70:	81a3      	strh	r3, [r4, #12]
 800ba72:	9b00      	ldr	r3, [sp, #0]
 800ba74:	6163      	str	r3, [r4, #20]
 800ba76:	9b01      	ldr	r3, [sp, #4]
 800ba78:	6120      	str	r0, [r4, #16]
 800ba7a:	b15b      	cbz	r3, 800ba94 <__smakebuf_r+0x74>
 800ba7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba80:	4630      	mov	r0, r6
 800ba82:	f000 ffe3 	bl	800ca4c <_isatty_r>
 800ba86:	b128      	cbz	r0, 800ba94 <__smakebuf_r+0x74>
 800ba88:	89a3      	ldrh	r3, [r4, #12]
 800ba8a:	f023 0303 	bic.w	r3, r3, #3
 800ba8e:	f043 0301 	orr.w	r3, r3, #1
 800ba92:	81a3      	strh	r3, [r4, #12]
 800ba94:	89a0      	ldrh	r0, [r4, #12]
 800ba96:	4305      	orrs	r5, r0
 800ba98:	81a5      	strh	r5, [r4, #12]
 800ba9a:	e7cd      	b.n	800ba38 <__smakebuf_r+0x18>
 800ba9c:	0800b801 	.word	0x0800b801

0800baa0 <malloc>:
 800baa0:	4b02      	ldr	r3, [pc, #8]	; (800baac <malloc+0xc>)
 800baa2:	4601      	mov	r1, r0
 800baa4:	6818      	ldr	r0, [r3, #0]
 800baa6:	f000 bc17 	b.w	800c2d8 <_malloc_r>
 800baaa:	bf00      	nop
 800baac:	2000015c 	.word	0x2000015c

0800bab0 <memcpy>:
 800bab0:	440a      	add	r2, r1
 800bab2:	4291      	cmp	r1, r2
 800bab4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bab8:	d100      	bne.n	800babc <memcpy+0xc>
 800baba:	4770      	bx	lr
 800babc:	b510      	push	{r4, lr}
 800babe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bac6:	4291      	cmp	r1, r2
 800bac8:	d1f9      	bne.n	800babe <memcpy+0xe>
 800baca:	bd10      	pop	{r4, pc}

0800bacc <_Balloc>:
 800bacc:	b570      	push	{r4, r5, r6, lr}
 800bace:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bad0:	4604      	mov	r4, r0
 800bad2:	460d      	mov	r5, r1
 800bad4:	b976      	cbnz	r6, 800baf4 <_Balloc+0x28>
 800bad6:	2010      	movs	r0, #16
 800bad8:	f7ff ffe2 	bl	800baa0 <malloc>
 800badc:	4602      	mov	r2, r0
 800bade:	6260      	str	r0, [r4, #36]	; 0x24
 800bae0:	b920      	cbnz	r0, 800baec <_Balloc+0x20>
 800bae2:	4b18      	ldr	r3, [pc, #96]	; (800bb44 <_Balloc+0x78>)
 800bae4:	4818      	ldr	r0, [pc, #96]	; (800bb48 <_Balloc+0x7c>)
 800bae6:	2166      	movs	r1, #102	; 0x66
 800bae8:	f7fe ff0a 	bl	800a900 <__assert_func>
 800baec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800baf0:	6006      	str	r6, [r0, #0]
 800baf2:	60c6      	str	r6, [r0, #12]
 800baf4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800baf6:	68f3      	ldr	r3, [r6, #12]
 800baf8:	b183      	cbz	r3, 800bb1c <_Balloc+0x50>
 800bafa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb02:	b9b8      	cbnz	r0, 800bb34 <_Balloc+0x68>
 800bb04:	2101      	movs	r1, #1
 800bb06:	fa01 f605 	lsl.w	r6, r1, r5
 800bb0a:	1d72      	adds	r2, r6, #5
 800bb0c:	0092      	lsls	r2, r2, #2
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f000 fb60 	bl	800c1d4 <_calloc_r>
 800bb14:	b160      	cbz	r0, 800bb30 <_Balloc+0x64>
 800bb16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb1a:	e00e      	b.n	800bb3a <_Balloc+0x6e>
 800bb1c:	2221      	movs	r2, #33	; 0x21
 800bb1e:	2104      	movs	r1, #4
 800bb20:	4620      	mov	r0, r4
 800bb22:	f000 fb57 	bl	800c1d4 <_calloc_r>
 800bb26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb28:	60f0      	str	r0, [r6, #12]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1e4      	bne.n	800bafa <_Balloc+0x2e>
 800bb30:	2000      	movs	r0, #0
 800bb32:	bd70      	pop	{r4, r5, r6, pc}
 800bb34:	6802      	ldr	r2, [r0, #0]
 800bb36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb40:	e7f7      	b.n	800bb32 <_Balloc+0x66>
 800bb42:	bf00      	nop
 800bb44:	0800ce4c 	.word	0x0800ce4c
 800bb48:	0800d0d8 	.word	0x0800d0d8

0800bb4c <_Bfree>:
 800bb4c:	b570      	push	{r4, r5, r6, lr}
 800bb4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb50:	4605      	mov	r5, r0
 800bb52:	460c      	mov	r4, r1
 800bb54:	b976      	cbnz	r6, 800bb74 <_Bfree+0x28>
 800bb56:	2010      	movs	r0, #16
 800bb58:	f7ff ffa2 	bl	800baa0 <malloc>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	6268      	str	r0, [r5, #36]	; 0x24
 800bb60:	b920      	cbnz	r0, 800bb6c <_Bfree+0x20>
 800bb62:	4b09      	ldr	r3, [pc, #36]	; (800bb88 <_Bfree+0x3c>)
 800bb64:	4809      	ldr	r0, [pc, #36]	; (800bb8c <_Bfree+0x40>)
 800bb66:	218a      	movs	r1, #138	; 0x8a
 800bb68:	f7fe feca 	bl	800a900 <__assert_func>
 800bb6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb70:	6006      	str	r6, [r0, #0]
 800bb72:	60c6      	str	r6, [r0, #12]
 800bb74:	b13c      	cbz	r4, 800bb86 <_Bfree+0x3a>
 800bb76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb78:	6862      	ldr	r2, [r4, #4]
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb80:	6021      	str	r1, [r4, #0]
 800bb82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb86:	bd70      	pop	{r4, r5, r6, pc}
 800bb88:	0800ce4c 	.word	0x0800ce4c
 800bb8c:	0800d0d8 	.word	0x0800d0d8

0800bb90 <__multadd>:
 800bb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb94:	690d      	ldr	r5, [r1, #16]
 800bb96:	4607      	mov	r7, r0
 800bb98:	460c      	mov	r4, r1
 800bb9a:	461e      	mov	r6, r3
 800bb9c:	f101 0c14 	add.w	ip, r1, #20
 800bba0:	2000      	movs	r0, #0
 800bba2:	f8dc 3000 	ldr.w	r3, [ip]
 800bba6:	b299      	uxth	r1, r3
 800bba8:	fb02 6101 	mla	r1, r2, r1, r6
 800bbac:	0c1e      	lsrs	r6, r3, #16
 800bbae:	0c0b      	lsrs	r3, r1, #16
 800bbb0:	fb02 3306 	mla	r3, r2, r6, r3
 800bbb4:	b289      	uxth	r1, r1
 800bbb6:	3001      	adds	r0, #1
 800bbb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bbbc:	4285      	cmp	r5, r0
 800bbbe:	f84c 1b04 	str.w	r1, [ip], #4
 800bbc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bbc6:	dcec      	bgt.n	800bba2 <__multadd+0x12>
 800bbc8:	b30e      	cbz	r6, 800bc0e <__multadd+0x7e>
 800bbca:	68a3      	ldr	r3, [r4, #8]
 800bbcc:	42ab      	cmp	r3, r5
 800bbce:	dc19      	bgt.n	800bc04 <__multadd+0x74>
 800bbd0:	6861      	ldr	r1, [r4, #4]
 800bbd2:	4638      	mov	r0, r7
 800bbd4:	3101      	adds	r1, #1
 800bbd6:	f7ff ff79 	bl	800bacc <_Balloc>
 800bbda:	4680      	mov	r8, r0
 800bbdc:	b928      	cbnz	r0, 800bbea <__multadd+0x5a>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	4b0c      	ldr	r3, [pc, #48]	; (800bc14 <__multadd+0x84>)
 800bbe2:	480d      	ldr	r0, [pc, #52]	; (800bc18 <__multadd+0x88>)
 800bbe4:	21b5      	movs	r1, #181	; 0xb5
 800bbe6:	f7fe fe8b 	bl	800a900 <__assert_func>
 800bbea:	6922      	ldr	r2, [r4, #16]
 800bbec:	3202      	adds	r2, #2
 800bbee:	f104 010c 	add.w	r1, r4, #12
 800bbf2:	0092      	lsls	r2, r2, #2
 800bbf4:	300c      	adds	r0, #12
 800bbf6:	f7ff ff5b 	bl	800bab0 <memcpy>
 800bbfa:	4621      	mov	r1, r4
 800bbfc:	4638      	mov	r0, r7
 800bbfe:	f7ff ffa5 	bl	800bb4c <_Bfree>
 800bc02:	4644      	mov	r4, r8
 800bc04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc08:	3501      	adds	r5, #1
 800bc0a:	615e      	str	r6, [r3, #20]
 800bc0c:	6125      	str	r5, [r4, #16]
 800bc0e:	4620      	mov	r0, r4
 800bc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc14:	0800d065 	.word	0x0800d065
 800bc18:	0800d0d8 	.word	0x0800d0d8

0800bc1c <__hi0bits>:
 800bc1c:	0c03      	lsrs	r3, r0, #16
 800bc1e:	041b      	lsls	r3, r3, #16
 800bc20:	b9d3      	cbnz	r3, 800bc58 <__hi0bits+0x3c>
 800bc22:	0400      	lsls	r0, r0, #16
 800bc24:	2310      	movs	r3, #16
 800bc26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc2a:	bf04      	itt	eq
 800bc2c:	0200      	lsleq	r0, r0, #8
 800bc2e:	3308      	addeq	r3, #8
 800bc30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc34:	bf04      	itt	eq
 800bc36:	0100      	lsleq	r0, r0, #4
 800bc38:	3304      	addeq	r3, #4
 800bc3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc3e:	bf04      	itt	eq
 800bc40:	0080      	lsleq	r0, r0, #2
 800bc42:	3302      	addeq	r3, #2
 800bc44:	2800      	cmp	r0, #0
 800bc46:	db05      	blt.n	800bc54 <__hi0bits+0x38>
 800bc48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc4c:	f103 0301 	add.w	r3, r3, #1
 800bc50:	bf08      	it	eq
 800bc52:	2320      	moveq	r3, #32
 800bc54:	4618      	mov	r0, r3
 800bc56:	4770      	bx	lr
 800bc58:	2300      	movs	r3, #0
 800bc5a:	e7e4      	b.n	800bc26 <__hi0bits+0xa>

0800bc5c <__lo0bits>:
 800bc5c:	6803      	ldr	r3, [r0, #0]
 800bc5e:	f013 0207 	ands.w	r2, r3, #7
 800bc62:	4601      	mov	r1, r0
 800bc64:	d00b      	beq.n	800bc7e <__lo0bits+0x22>
 800bc66:	07da      	lsls	r2, r3, #31
 800bc68:	d423      	bmi.n	800bcb2 <__lo0bits+0x56>
 800bc6a:	0798      	lsls	r0, r3, #30
 800bc6c:	bf49      	itett	mi
 800bc6e:	085b      	lsrmi	r3, r3, #1
 800bc70:	089b      	lsrpl	r3, r3, #2
 800bc72:	2001      	movmi	r0, #1
 800bc74:	600b      	strmi	r3, [r1, #0]
 800bc76:	bf5c      	itt	pl
 800bc78:	600b      	strpl	r3, [r1, #0]
 800bc7a:	2002      	movpl	r0, #2
 800bc7c:	4770      	bx	lr
 800bc7e:	b298      	uxth	r0, r3
 800bc80:	b9a8      	cbnz	r0, 800bcae <__lo0bits+0x52>
 800bc82:	0c1b      	lsrs	r3, r3, #16
 800bc84:	2010      	movs	r0, #16
 800bc86:	b2da      	uxtb	r2, r3
 800bc88:	b90a      	cbnz	r2, 800bc8e <__lo0bits+0x32>
 800bc8a:	3008      	adds	r0, #8
 800bc8c:	0a1b      	lsrs	r3, r3, #8
 800bc8e:	071a      	lsls	r2, r3, #28
 800bc90:	bf04      	itt	eq
 800bc92:	091b      	lsreq	r3, r3, #4
 800bc94:	3004      	addeq	r0, #4
 800bc96:	079a      	lsls	r2, r3, #30
 800bc98:	bf04      	itt	eq
 800bc9a:	089b      	lsreq	r3, r3, #2
 800bc9c:	3002      	addeq	r0, #2
 800bc9e:	07da      	lsls	r2, r3, #31
 800bca0:	d403      	bmi.n	800bcaa <__lo0bits+0x4e>
 800bca2:	085b      	lsrs	r3, r3, #1
 800bca4:	f100 0001 	add.w	r0, r0, #1
 800bca8:	d005      	beq.n	800bcb6 <__lo0bits+0x5a>
 800bcaa:	600b      	str	r3, [r1, #0]
 800bcac:	4770      	bx	lr
 800bcae:	4610      	mov	r0, r2
 800bcb0:	e7e9      	b.n	800bc86 <__lo0bits+0x2a>
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	4770      	bx	lr
 800bcb6:	2020      	movs	r0, #32
 800bcb8:	4770      	bx	lr
	...

0800bcbc <__i2b>:
 800bcbc:	b510      	push	{r4, lr}
 800bcbe:	460c      	mov	r4, r1
 800bcc0:	2101      	movs	r1, #1
 800bcc2:	f7ff ff03 	bl	800bacc <_Balloc>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	b928      	cbnz	r0, 800bcd6 <__i2b+0x1a>
 800bcca:	4b05      	ldr	r3, [pc, #20]	; (800bce0 <__i2b+0x24>)
 800bccc:	4805      	ldr	r0, [pc, #20]	; (800bce4 <__i2b+0x28>)
 800bcce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bcd2:	f7fe fe15 	bl	800a900 <__assert_func>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	6144      	str	r4, [r0, #20]
 800bcda:	6103      	str	r3, [r0, #16]
 800bcdc:	bd10      	pop	{r4, pc}
 800bcde:	bf00      	nop
 800bce0:	0800d065 	.word	0x0800d065
 800bce4:	0800d0d8 	.word	0x0800d0d8

0800bce8 <__multiply>:
 800bce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcec:	4691      	mov	r9, r2
 800bcee:	690a      	ldr	r2, [r1, #16]
 800bcf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	bfb8      	it	lt
 800bcf8:	460b      	movlt	r3, r1
 800bcfa:	460c      	mov	r4, r1
 800bcfc:	bfbc      	itt	lt
 800bcfe:	464c      	movlt	r4, r9
 800bd00:	4699      	movlt	r9, r3
 800bd02:	6927      	ldr	r7, [r4, #16]
 800bd04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd08:	68a3      	ldr	r3, [r4, #8]
 800bd0a:	6861      	ldr	r1, [r4, #4]
 800bd0c:	eb07 060a 	add.w	r6, r7, sl
 800bd10:	42b3      	cmp	r3, r6
 800bd12:	b085      	sub	sp, #20
 800bd14:	bfb8      	it	lt
 800bd16:	3101      	addlt	r1, #1
 800bd18:	f7ff fed8 	bl	800bacc <_Balloc>
 800bd1c:	b930      	cbnz	r0, 800bd2c <__multiply+0x44>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	4b44      	ldr	r3, [pc, #272]	; (800be34 <__multiply+0x14c>)
 800bd22:	4845      	ldr	r0, [pc, #276]	; (800be38 <__multiply+0x150>)
 800bd24:	f240 115d 	movw	r1, #349	; 0x15d
 800bd28:	f7fe fdea 	bl	800a900 <__assert_func>
 800bd2c:	f100 0514 	add.w	r5, r0, #20
 800bd30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd34:	462b      	mov	r3, r5
 800bd36:	2200      	movs	r2, #0
 800bd38:	4543      	cmp	r3, r8
 800bd3a:	d321      	bcc.n	800bd80 <__multiply+0x98>
 800bd3c:	f104 0314 	add.w	r3, r4, #20
 800bd40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd44:	f109 0314 	add.w	r3, r9, #20
 800bd48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd4c:	9202      	str	r2, [sp, #8]
 800bd4e:	1b3a      	subs	r2, r7, r4
 800bd50:	3a15      	subs	r2, #21
 800bd52:	f022 0203 	bic.w	r2, r2, #3
 800bd56:	3204      	adds	r2, #4
 800bd58:	f104 0115 	add.w	r1, r4, #21
 800bd5c:	428f      	cmp	r7, r1
 800bd5e:	bf38      	it	cc
 800bd60:	2204      	movcc	r2, #4
 800bd62:	9201      	str	r2, [sp, #4]
 800bd64:	9a02      	ldr	r2, [sp, #8]
 800bd66:	9303      	str	r3, [sp, #12]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d80c      	bhi.n	800bd86 <__multiply+0x9e>
 800bd6c:	2e00      	cmp	r6, #0
 800bd6e:	dd03      	ble.n	800bd78 <__multiply+0x90>
 800bd70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d05a      	beq.n	800be2e <__multiply+0x146>
 800bd78:	6106      	str	r6, [r0, #16]
 800bd7a:	b005      	add	sp, #20
 800bd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd80:	f843 2b04 	str.w	r2, [r3], #4
 800bd84:	e7d8      	b.n	800bd38 <__multiply+0x50>
 800bd86:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd8a:	f1ba 0f00 	cmp.w	sl, #0
 800bd8e:	d024      	beq.n	800bdda <__multiply+0xf2>
 800bd90:	f104 0e14 	add.w	lr, r4, #20
 800bd94:	46a9      	mov	r9, r5
 800bd96:	f04f 0c00 	mov.w	ip, #0
 800bd9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd9e:	f8d9 1000 	ldr.w	r1, [r9]
 800bda2:	fa1f fb82 	uxth.w	fp, r2
 800bda6:	b289      	uxth	r1, r1
 800bda8:	fb0a 110b 	mla	r1, sl, fp, r1
 800bdac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bdb0:	f8d9 2000 	ldr.w	r2, [r9]
 800bdb4:	4461      	add	r1, ip
 800bdb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdba:	fb0a c20b 	mla	r2, sl, fp, ip
 800bdbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bdc2:	b289      	uxth	r1, r1
 800bdc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bdc8:	4577      	cmp	r7, lr
 800bdca:	f849 1b04 	str.w	r1, [r9], #4
 800bdce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdd2:	d8e2      	bhi.n	800bd9a <__multiply+0xb2>
 800bdd4:	9a01      	ldr	r2, [sp, #4]
 800bdd6:	f845 c002 	str.w	ip, [r5, r2]
 800bdda:	9a03      	ldr	r2, [sp, #12]
 800bddc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bde0:	3304      	adds	r3, #4
 800bde2:	f1b9 0f00 	cmp.w	r9, #0
 800bde6:	d020      	beq.n	800be2a <__multiply+0x142>
 800bde8:	6829      	ldr	r1, [r5, #0]
 800bdea:	f104 0c14 	add.w	ip, r4, #20
 800bdee:	46ae      	mov	lr, r5
 800bdf0:	f04f 0a00 	mov.w	sl, #0
 800bdf4:	f8bc b000 	ldrh.w	fp, [ip]
 800bdf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bdfc:	fb09 220b 	mla	r2, r9, fp, r2
 800be00:	4492      	add	sl, r2
 800be02:	b289      	uxth	r1, r1
 800be04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800be08:	f84e 1b04 	str.w	r1, [lr], #4
 800be0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be10:	f8be 1000 	ldrh.w	r1, [lr]
 800be14:	0c12      	lsrs	r2, r2, #16
 800be16:	fb09 1102 	mla	r1, r9, r2, r1
 800be1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800be1e:	4567      	cmp	r7, ip
 800be20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be24:	d8e6      	bhi.n	800bdf4 <__multiply+0x10c>
 800be26:	9a01      	ldr	r2, [sp, #4]
 800be28:	50a9      	str	r1, [r5, r2]
 800be2a:	3504      	adds	r5, #4
 800be2c:	e79a      	b.n	800bd64 <__multiply+0x7c>
 800be2e:	3e01      	subs	r6, #1
 800be30:	e79c      	b.n	800bd6c <__multiply+0x84>
 800be32:	bf00      	nop
 800be34:	0800d065 	.word	0x0800d065
 800be38:	0800d0d8 	.word	0x0800d0d8

0800be3c <__pow5mult>:
 800be3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be40:	4615      	mov	r5, r2
 800be42:	f012 0203 	ands.w	r2, r2, #3
 800be46:	4606      	mov	r6, r0
 800be48:	460f      	mov	r7, r1
 800be4a:	d007      	beq.n	800be5c <__pow5mult+0x20>
 800be4c:	4c25      	ldr	r4, [pc, #148]	; (800bee4 <__pow5mult+0xa8>)
 800be4e:	3a01      	subs	r2, #1
 800be50:	2300      	movs	r3, #0
 800be52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be56:	f7ff fe9b 	bl	800bb90 <__multadd>
 800be5a:	4607      	mov	r7, r0
 800be5c:	10ad      	asrs	r5, r5, #2
 800be5e:	d03d      	beq.n	800bedc <__pow5mult+0xa0>
 800be60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be62:	b97c      	cbnz	r4, 800be84 <__pow5mult+0x48>
 800be64:	2010      	movs	r0, #16
 800be66:	f7ff fe1b 	bl	800baa0 <malloc>
 800be6a:	4602      	mov	r2, r0
 800be6c:	6270      	str	r0, [r6, #36]	; 0x24
 800be6e:	b928      	cbnz	r0, 800be7c <__pow5mult+0x40>
 800be70:	4b1d      	ldr	r3, [pc, #116]	; (800bee8 <__pow5mult+0xac>)
 800be72:	481e      	ldr	r0, [pc, #120]	; (800beec <__pow5mult+0xb0>)
 800be74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be78:	f7fe fd42 	bl	800a900 <__assert_func>
 800be7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be80:	6004      	str	r4, [r0, #0]
 800be82:	60c4      	str	r4, [r0, #12]
 800be84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be8c:	b94c      	cbnz	r4, 800bea2 <__pow5mult+0x66>
 800be8e:	f240 2171 	movw	r1, #625	; 0x271
 800be92:	4630      	mov	r0, r6
 800be94:	f7ff ff12 	bl	800bcbc <__i2b>
 800be98:	2300      	movs	r3, #0
 800be9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800be9e:	4604      	mov	r4, r0
 800bea0:	6003      	str	r3, [r0, #0]
 800bea2:	f04f 0900 	mov.w	r9, #0
 800bea6:	07eb      	lsls	r3, r5, #31
 800bea8:	d50a      	bpl.n	800bec0 <__pow5mult+0x84>
 800beaa:	4639      	mov	r1, r7
 800beac:	4622      	mov	r2, r4
 800beae:	4630      	mov	r0, r6
 800beb0:	f7ff ff1a 	bl	800bce8 <__multiply>
 800beb4:	4639      	mov	r1, r7
 800beb6:	4680      	mov	r8, r0
 800beb8:	4630      	mov	r0, r6
 800beba:	f7ff fe47 	bl	800bb4c <_Bfree>
 800bebe:	4647      	mov	r7, r8
 800bec0:	106d      	asrs	r5, r5, #1
 800bec2:	d00b      	beq.n	800bedc <__pow5mult+0xa0>
 800bec4:	6820      	ldr	r0, [r4, #0]
 800bec6:	b938      	cbnz	r0, 800bed8 <__pow5mult+0x9c>
 800bec8:	4622      	mov	r2, r4
 800beca:	4621      	mov	r1, r4
 800becc:	4630      	mov	r0, r6
 800bece:	f7ff ff0b 	bl	800bce8 <__multiply>
 800bed2:	6020      	str	r0, [r4, #0]
 800bed4:	f8c0 9000 	str.w	r9, [r0]
 800bed8:	4604      	mov	r4, r0
 800beda:	e7e4      	b.n	800bea6 <__pow5mult+0x6a>
 800bedc:	4638      	mov	r0, r7
 800bede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bee2:	bf00      	nop
 800bee4:	0800d228 	.word	0x0800d228
 800bee8:	0800ce4c 	.word	0x0800ce4c
 800beec:	0800d0d8 	.word	0x0800d0d8

0800bef0 <__lshift>:
 800bef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bef4:	460c      	mov	r4, r1
 800bef6:	6849      	ldr	r1, [r1, #4]
 800bef8:	6923      	ldr	r3, [r4, #16]
 800befa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800befe:	68a3      	ldr	r3, [r4, #8]
 800bf00:	4607      	mov	r7, r0
 800bf02:	4691      	mov	r9, r2
 800bf04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf08:	f108 0601 	add.w	r6, r8, #1
 800bf0c:	42b3      	cmp	r3, r6
 800bf0e:	db0b      	blt.n	800bf28 <__lshift+0x38>
 800bf10:	4638      	mov	r0, r7
 800bf12:	f7ff fddb 	bl	800bacc <_Balloc>
 800bf16:	4605      	mov	r5, r0
 800bf18:	b948      	cbnz	r0, 800bf2e <__lshift+0x3e>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	4b2a      	ldr	r3, [pc, #168]	; (800bfc8 <__lshift+0xd8>)
 800bf1e:	482b      	ldr	r0, [pc, #172]	; (800bfcc <__lshift+0xdc>)
 800bf20:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf24:	f7fe fcec 	bl	800a900 <__assert_func>
 800bf28:	3101      	adds	r1, #1
 800bf2a:	005b      	lsls	r3, r3, #1
 800bf2c:	e7ee      	b.n	800bf0c <__lshift+0x1c>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	f100 0114 	add.w	r1, r0, #20
 800bf34:	f100 0210 	add.w	r2, r0, #16
 800bf38:	4618      	mov	r0, r3
 800bf3a:	4553      	cmp	r3, sl
 800bf3c:	db37      	blt.n	800bfae <__lshift+0xbe>
 800bf3e:	6920      	ldr	r0, [r4, #16]
 800bf40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf44:	f104 0314 	add.w	r3, r4, #20
 800bf48:	f019 091f 	ands.w	r9, r9, #31
 800bf4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf54:	d02f      	beq.n	800bfb6 <__lshift+0xc6>
 800bf56:	f1c9 0e20 	rsb	lr, r9, #32
 800bf5a:	468a      	mov	sl, r1
 800bf5c:	f04f 0c00 	mov.w	ip, #0
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	fa02 f209 	lsl.w	r2, r2, r9
 800bf66:	ea42 020c 	orr.w	r2, r2, ip
 800bf6a:	f84a 2b04 	str.w	r2, [sl], #4
 800bf6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf72:	4298      	cmp	r0, r3
 800bf74:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf78:	d8f2      	bhi.n	800bf60 <__lshift+0x70>
 800bf7a:	1b03      	subs	r3, r0, r4
 800bf7c:	3b15      	subs	r3, #21
 800bf7e:	f023 0303 	bic.w	r3, r3, #3
 800bf82:	3304      	adds	r3, #4
 800bf84:	f104 0215 	add.w	r2, r4, #21
 800bf88:	4290      	cmp	r0, r2
 800bf8a:	bf38      	it	cc
 800bf8c:	2304      	movcc	r3, #4
 800bf8e:	f841 c003 	str.w	ip, [r1, r3]
 800bf92:	f1bc 0f00 	cmp.w	ip, #0
 800bf96:	d001      	beq.n	800bf9c <__lshift+0xac>
 800bf98:	f108 0602 	add.w	r6, r8, #2
 800bf9c:	3e01      	subs	r6, #1
 800bf9e:	4638      	mov	r0, r7
 800bfa0:	612e      	str	r6, [r5, #16]
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	f7ff fdd2 	bl	800bb4c <_Bfree>
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfae:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	e7c1      	b.n	800bf3a <__lshift+0x4a>
 800bfb6:	3904      	subs	r1, #4
 800bfb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfc0:	4298      	cmp	r0, r3
 800bfc2:	d8f9      	bhi.n	800bfb8 <__lshift+0xc8>
 800bfc4:	e7ea      	b.n	800bf9c <__lshift+0xac>
 800bfc6:	bf00      	nop
 800bfc8:	0800d065 	.word	0x0800d065
 800bfcc:	0800d0d8 	.word	0x0800d0d8

0800bfd0 <__mcmp>:
 800bfd0:	b530      	push	{r4, r5, lr}
 800bfd2:	6902      	ldr	r2, [r0, #16]
 800bfd4:	690c      	ldr	r4, [r1, #16]
 800bfd6:	1b12      	subs	r2, r2, r4
 800bfd8:	d10e      	bne.n	800bff8 <__mcmp+0x28>
 800bfda:	f100 0314 	add.w	r3, r0, #20
 800bfde:	3114      	adds	r1, #20
 800bfe0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bfe4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bfe8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bfec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bff0:	42a5      	cmp	r5, r4
 800bff2:	d003      	beq.n	800bffc <__mcmp+0x2c>
 800bff4:	d305      	bcc.n	800c002 <__mcmp+0x32>
 800bff6:	2201      	movs	r2, #1
 800bff8:	4610      	mov	r0, r2
 800bffa:	bd30      	pop	{r4, r5, pc}
 800bffc:	4283      	cmp	r3, r0
 800bffe:	d3f3      	bcc.n	800bfe8 <__mcmp+0x18>
 800c000:	e7fa      	b.n	800bff8 <__mcmp+0x28>
 800c002:	f04f 32ff 	mov.w	r2, #4294967295
 800c006:	e7f7      	b.n	800bff8 <__mcmp+0x28>

0800c008 <__mdiff>:
 800c008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c00c:	460c      	mov	r4, r1
 800c00e:	4606      	mov	r6, r0
 800c010:	4611      	mov	r1, r2
 800c012:	4620      	mov	r0, r4
 800c014:	4690      	mov	r8, r2
 800c016:	f7ff ffdb 	bl	800bfd0 <__mcmp>
 800c01a:	1e05      	subs	r5, r0, #0
 800c01c:	d110      	bne.n	800c040 <__mdiff+0x38>
 800c01e:	4629      	mov	r1, r5
 800c020:	4630      	mov	r0, r6
 800c022:	f7ff fd53 	bl	800bacc <_Balloc>
 800c026:	b930      	cbnz	r0, 800c036 <__mdiff+0x2e>
 800c028:	4b3a      	ldr	r3, [pc, #232]	; (800c114 <__mdiff+0x10c>)
 800c02a:	4602      	mov	r2, r0
 800c02c:	f240 2132 	movw	r1, #562	; 0x232
 800c030:	4839      	ldr	r0, [pc, #228]	; (800c118 <__mdiff+0x110>)
 800c032:	f7fe fc65 	bl	800a900 <__assert_func>
 800c036:	2301      	movs	r3, #1
 800c038:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c03c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c040:	bfa4      	itt	ge
 800c042:	4643      	movge	r3, r8
 800c044:	46a0      	movge	r8, r4
 800c046:	4630      	mov	r0, r6
 800c048:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c04c:	bfa6      	itte	ge
 800c04e:	461c      	movge	r4, r3
 800c050:	2500      	movge	r5, #0
 800c052:	2501      	movlt	r5, #1
 800c054:	f7ff fd3a 	bl	800bacc <_Balloc>
 800c058:	b920      	cbnz	r0, 800c064 <__mdiff+0x5c>
 800c05a:	4b2e      	ldr	r3, [pc, #184]	; (800c114 <__mdiff+0x10c>)
 800c05c:	4602      	mov	r2, r0
 800c05e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c062:	e7e5      	b.n	800c030 <__mdiff+0x28>
 800c064:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c068:	6926      	ldr	r6, [r4, #16]
 800c06a:	60c5      	str	r5, [r0, #12]
 800c06c:	f104 0914 	add.w	r9, r4, #20
 800c070:	f108 0514 	add.w	r5, r8, #20
 800c074:	f100 0e14 	add.w	lr, r0, #20
 800c078:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c07c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c080:	f108 0210 	add.w	r2, r8, #16
 800c084:	46f2      	mov	sl, lr
 800c086:	2100      	movs	r1, #0
 800c088:	f859 3b04 	ldr.w	r3, [r9], #4
 800c08c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c090:	fa1f f883 	uxth.w	r8, r3
 800c094:	fa11 f18b 	uxtah	r1, r1, fp
 800c098:	0c1b      	lsrs	r3, r3, #16
 800c09a:	eba1 0808 	sub.w	r8, r1, r8
 800c09e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0a6:	fa1f f888 	uxth.w	r8, r8
 800c0aa:	1419      	asrs	r1, r3, #16
 800c0ac:	454e      	cmp	r6, r9
 800c0ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c0b2:	f84a 3b04 	str.w	r3, [sl], #4
 800c0b6:	d8e7      	bhi.n	800c088 <__mdiff+0x80>
 800c0b8:	1b33      	subs	r3, r6, r4
 800c0ba:	3b15      	subs	r3, #21
 800c0bc:	f023 0303 	bic.w	r3, r3, #3
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	3415      	adds	r4, #21
 800c0c4:	42a6      	cmp	r6, r4
 800c0c6:	bf38      	it	cc
 800c0c8:	2304      	movcc	r3, #4
 800c0ca:	441d      	add	r5, r3
 800c0cc:	4473      	add	r3, lr
 800c0ce:	469e      	mov	lr, r3
 800c0d0:	462e      	mov	r6, r5
 800c0d2:	4566      	cmp	r6, ip
 800c0d4:	d30e      	bcc.n	800c0f4 <__mdiff+0xec>
 800c0d6:	f10c 0203 	add.w	r2, ip, #3
 800c0da:	1b52      	subs	r2, r2, r5
 800c0dc:	f022 0203 	bic.w	r2, r2, #3
 800c0e0:	3d03      	subs	r5, #3
 800c0e2:	45ac      	cmp	ip, r5
 800c0e4:	bf38      	it	cc
 800c0e6:	2200      	movcc	r2, #0
 800c0e8:	441a      	add	r2, r3
 800c0ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c0ee:	b17b      	cbz	r3, 800c110 <__mdiff+0x108>
 800c0f0:	6107      	str	r7, [r0, #16]
 800c0f2:	e7a3      	b.n	800c03c <__mdiff+0x34>
 800c0f4:	f856 8b04 	ldr.w	r8, [r6], #4
 800c0f8:	fa11 f288 	uxtah	r2, r1, r8
 800c0fc:	1414      	asrs	r4, r2, #16
 800c0fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c102:	b292      	uxth	r2, r2
 800c104:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c108:	f84e 2b04 	str.w	r2, [lr], #4
 800c10c:	1421      	asrs	r1, r4, #16
 800c10e:	e7e0      	b.n	800c0d2 <__mdiff+0xca>
 800c110:	3f01      	subs	r7, #1
 800c112:	e7ea      	b.n	800c0ea <__mdiff+0xe2>
 800c114:	0800d065 	.word	0x0800d065
 800c118:	0800d0d8 	.word	0x0800d0d8

0800c11c <__d2b>:
 800c11c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c120:	4689      	mov	r9, r1
 800c122:	2101      	movs	r1, #1
 800c124:	ec57 6b10 	vmov	r6, r7, d0
 800c128:	4690      	mov	r8, r2
 800c12a:	f7ff fccf 	bl	800bacc <_Balloc>
 800c12e:	4604      	mov	r4, r0
 800c130:	b930      	cbnz	r0, 800c140 <__d2b+0x24>
 800c132:	4602      	mov	r2, r0
 800c134:	4b25      	ldr	r3, [pc, #148]	; (800c1cc <__d2b+0xb0>)
 800c136:	4826      	ldr	r0, [pc, #152]	; (800c1d0 <__d2b+0xb4>)
 800c138:	f240 310a 	movw	r1, #778	; 0x30a
 800c13c:	f7fe fbe0 	bl	800a900 <__assert_func>
 800c140:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c144:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c148:	bb35      	cbnz	r5, 800c198 <__d2b+0x7c>
 800c14a:	2e00      	cmp	r6, #0
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	d028      	beq.n	800c1a2 <__d2b+0x86>
 800c150:	4668      	mov	r0, sp
 800c152:	9600      	str	r6, [sp, #0]
 800c154:	f7ff fd82 	bl	800bc5c <__lo0bits>
 800c158:	9900      	ldr	r1, [sp, #0]
 800c15a:	b300      	cbz	r0, 800c19e <__d2b+0x82>
 800c15c:	9a01      	ldr	r2, [sp, #4]
 800c15e:	f1c0 0320 	rsb	r3, r0, #32
 800c162:	fa02 f303 	lsl.w	r3, r2, r3
 800c166:	430b      	orrs	r3, r1
 800c168:	40c2      	lsrs	r2, r0
 800c16a:	6163      	str	r3, [r4, #20]
 800c16c:	9201      	str	r2, [sp, #4]
 800c16e:	9b01      	ldr	r3, [sp, #4]
 800c170:	61a3      	str	r3, [r4, #24]
 800c172:	2b00      	cmp	r3, #0
 800c174:	bf14      	ite	ne
 800c176:	2202      	movne	r2, #2
 800c178:	2201      	moveq	r2, #1
 800c17a:	6122      	str	r2, [r4, #16]
 800c17c:	b1d5      	cbz	r5, 800c1b4 <__d2b+0x98>
 800c17e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c182:	4405      	add	r5, r0
 800c184:	f8c9 5000 	str.w	r5, [r9]
 800c188:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c18c:	f8c8 0000 	str.w	r0, [r8]
 800c190:	4620      	mov	r0, r4
 800c192:	b003      	add	sp, #12
 800c194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c19c:	e7d5      	b.n	800c14a <__d2b+0x2e>
 800c19e:	6161      	str	r1, [r4, #20]
 800c1a0:	e7e5      	b.n	800c16e <__d2b+0x52>
 800c1a2:	a801      	add	r0, sp, #4
 800c1a4:	f7ff fd5a 	bl	800bc5c <__lo0bits>
 800c1a8:	9b01      	ldr	r3, [sp, #4]
 800c1aa:	6163      	str	r3, [r4, #20]
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	6122      	str	r2, [r4, #16]
 800c1b0:	3020      	adds	r0, #32
 800c1b2:	e7e3      	b.n	800c17c <__d2b+0x60>
 800c1b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c1bc:	f8c9 0000 	str.w	r0, [r9]
 800c1c0:	6918      	ldr	r0, [r3, #16]
 800c1c2:	f7ff fd2b 	bl	800bc1c <__hi0bits>
 800c1c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c1ca:	e7df      	b.n	800c18c <__d2b+0x70>
 800c1cc:	0800d065 	.word	0x0800d065
 800c1d0:	0800d0d8 	.word	0x0800d0d8

0800c1d4 <_calloc_r>:
 800c1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1d6:	fba1 2402 	umull	r2, r4, r1, r2
 800c1da:	b94c      	cbnz	r4, 800c1f0 <_calloc_r+0x1c>
 800c1dc:	4611      	mov	r1, r2
 800c1de:	9201      	str	r2, [sp, #4]
 800c1e0:	f000 f87a 	bl	800c2d8 <_malloc_r>
 800c1e4:	9a01      	ldr	r2, [sp, #4]
 800c1e6:	4605      	mov	r5, r0
 800c1e8:	b930      	cbnz	r0, 800c1f8 <_calloc_r+0x24>
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	b003      	add	sp, #12
 800c1ee:	bd30      	pop	{r4, r5, pc}
 800c1f0:	220c      	movs	r2, #12
 800c1f2:	6002      	str	r2, [r0, #0]
 800c1f4:	2500      	movs	r5, #0
 800c1f6:	e7f8      	b.n	800c1ea <_calloc_r+0x16>
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	f7fd fcbd 	bl	8009b78 <memset>
 800c1fe:	e7f4      	b.n	800c1ea <_calloc_r+0x16>

0800c200 <_free_r>:
 800c200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c202:	2900      	cmp	r1, #0
 800c204:	d044      	beq.n	800c290 <_free_r+0x90>
 800c206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c20a:	9001      	str	r0, [sp, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f1a1 0404 	sub.w	r4, r1, #4
 800c212:	bfb8      	it	lt
 800c214:	18e4      	addlt	r4, r4, r3
 800c216:	f000 fc67 	bl	800cae8 <__malloc_lock>
 800c21a:	4a1e      	ldr	r2, [pc, #120]	; (800c294 <_free_r+0x94>)
 800c21c:	9801      	ldr	r0, [sp, #4]
 800c21e:	6813      	ldr	r3, [r2, #0]
 800c220:	b933      	cbnz	r3, 800c230 <_free_r+0x30>
 800c222:	6063      	str	r3, [r4, #4]
 800c224:	6014      	str	r4, [r2, #0]
 800c226:	b003      	add	sp, #12
 800c228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c22c:	f000 bc62 	b.w	800caf4 <__malloc_unlock>
 800c230:	42a3      	cmp	r3, r4
 800c232:	d908      	bls.n	800c246 <_free_r+0x46>
 800c234:	6825      	ldr	r5, [r4, #0]
 800c236:	1961      	adds	r1, r4, r5
 800c238:	428b      	cmp	r3, r1
 800c23a:	bf01      	itttt	eq
 800c23c:	6819      	ldreq	r1, [r3, #0]
 800c23e:	685b      	ldreq	r3, [r3, #4]
 800c240:	1949      	addeq	r1, r1, r5
 800c242:	6021      	streq	r1, [r4, #0]
 800c244:	e7ed      	b.n	800c222 <_free_r+0x22>
 800c246:	461a      	mov	r2, r3
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	b10b      	cbz	r3, 800c250 <_free_r+0x50>
 800c24c:	42a3      	cmp	r3, r4
 800c24e:	d9fa      	bls.n	800c246 <_free_r+0x46>
 800c250:	6811      	ldr	r1, [r2, #0]
 800c252:	1855      	adds	r5, r2, r1
 800c254:	42a5      	cmp	r5, r4
 800c256:	d10b      	bne.n	800c270 <_free_r+0x70>
 800c258:	6824      	ldr	r4, [r4, #0]
 800c25a:	4421      	add	r1, r4
 800c25c:	1854      	adds	r4, r2, r1
 800c25e:	42a3      	cmp	r3, r4
 800c260:	6011      	str	r1, [r2, #0]
 800c262:	d1e0      	bne.n	800c226 <_free_r+0x26>
 800c264:	681c      	ldr	r4, [r3, #0]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	6053      	str	r3, [r2, #4]
 800c26a:	4421      	add	r1, r4
 800c26c:	6011      	str	r1, [r2, #0]
 800c26e:	e7da      	b.n	800c226 <_free_r+0x26>
 800c270:	d902      	bls.n	800c278 <_free_r+0x78>
 800c272:	230c      	movs	r3, #12
 800c274:	6003      	str	r3, [r0, #0]
 800c276:	e7d6      	b.n	800c226 <_free_r+0x26>
 800c278:	6825      	ldr	r5, [r4, #0]
 800c27a:	1961      	adds	r1, r4, r5
 800c27c:	428b      	cmp	r3, r1
 800c27e:	bf04      	itt	eq
 800c280:	6819      	ldreq	r1, [r3, #0]
 800c282:	685b      	ldreq	r3, [r3, #4]
 800c284:	6063      	str	r3, [r4, #4]
 800c286:	bf04      	itt	eq
 800c288:	1949      	addeq	r1, r1, r5
 800c28a:	6021      	streq	r1, [r4, #0]
 800c28c:	6054      	str	r4, [r2, #4]
 800c28e:	e7ca      	b.n	800c226 <_free_r+0x26>
 800c290:	b003      	add	sp, #12
 800c292:	bd30      	pop	{r4, r5, pc}
 800c294:	200006a4 	.word	0x200006a4

0800c298 <sbrk_aligned>:
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	4e0e      	ldr	r6, [pc, #56]	; (800c2d4 <sbrk_aligned+0x3c>)
 800c29c:	460c      	mov	r4, r1
 800c29e:	6831      	ldr	r1, [r6, #0]
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	b911      	cbnz	r1, 800c2aa <sbrk_aligned+0x12>
 800c2a4:	f000 fb42 	bl	800c92c <_sbrk_r>
 800c2a8:	6030      	str	r0, [r6, #0]
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	f000 fb3d 	bl	800c92c <_sbrk_r>
 800c2b2:	1c43      	adds	r3, r0, #1
 800c2b4:	d00a      	beq.n	800c2cc <sbrk_aligned+0x34>
 800c2b6:	1cc4      	adds	r4, r0, #3
 800c2b8:	f024 0403 	bic.w	r4, r4, #3
 800c2bc:	42a0      	cmp	r0, r4
 800c2be:	d007      	beq.n	800c2d0 <sbrk_aligned+0x38>
 800c2c0:	1a21      	subs	r1, r4, r0
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	f000 fb32 	bl	800c92c <_sbrk_r>
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	d101      	bne.n	800c2d0 <sbrk_aligned+0x38>
 800c2cc:	f04f 34ff 	mov.w	r4, #4294967295
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	bd70      	pop	{r4, r5, r6, pc}
 800c2d4:	200006a8 	.word	0x200006a8

0800c2d8 <_malloc_r>:
 800c2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2dc:	1ccd      	adds	r5, r1, #3
 800c2de:	f025 0503 	bic.w	r5, r5, #3
 800c2e2:	3508      	adds	r5, #8
 800c2e4:	2d0c      	cmp	r5, #12
 800c2e6:	bf38      	it	cc
 800c2e8:	250c      	movcc	r5, #12
 800c2ea:	2d00      	cmp	r5, #0
 800c2ec:	4607      	mov	r7, r0
 800c2ee:	db01      	blt.n	800c2f4 <_malloc_r+0x1c>
 800c2f0:	42a9      	cmp	r1, r5
 800c2f2:	d905      	bls.n	800c300 <_malloc_r+0x28>
 800c2f4:	230c      	movs	r3, #12
 800c2f6:	603b      	str	r3, [r7, #0]
 800c2f8:	2600      	movs	r6, #0
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c300:	4e2e      	ldr	r6, [pc, #184]	; (800c3bc <_malloc_r+0xe4>)
 800c302:	f000 fbf1 	bl	800cae8 <__malloc_lock>
 800c306:	6833      	ldr	r3, [r6, #0]
 800c308:	461c      	mov	r4, r3
 800c30a:	bb34      	cbnz	r4, 800c35a <_malloc_r+0x82>
 800c30c:	4629      	mov	r1, r5
 800c30e:	4638      	mov	r0, r7
 800c310:	f7ff ffc2 	bl	800c298 <sbrk_aligned>
 800c314:	1c43      	adds	r3, r0, #1
 800c316:	4604      	mov	r4, r0
 800c318:	d14d      	bne.n	800c3b6 <_malloc_r+0xde>
 800c31a:	6834      	ldr	r4, [r6, #0]
 800c31c:	4626      	mov	r6, r4
 800c31e:	2e00      	cmp	r6, #0
 800c320:	d140      	bne.n	800c3a4 <_malloc_r+0xcc>
 800c322:	6823      	ldr	r3, [r4, #0]
 800c324:	4631      	mov	r1, r6
 800c326:	4638      	mov	r0, r7
 800c328:	eb04 0803 	add.w	r8, r4, r3
 800c32c:	f000 fafe 	bl	800c92c <_sbrk_r>
 800c330:	4580      	cmp	r8, r0
 800c332:	d13a      	bne.n	800c3aa <_malloc_r+0xd2>
 800c334:	6821      	ldr	r1, [r4, #0]
 800c336:	3503      	adds	r5, #3
 800c338:	1a6d      	subs	r5, r5, r1
 800c33a:	f025 0503 	bic.w	r5, r5, #3
 800c33e:	3508      	adds	r5, #8
 800c340:	2d0c      	cmp	r5, #12
 800c342:	bf38      	it	cc
 800c344:	250c      	movcc	r5, #12
 800c346:	4629      	mov	r1, r5
 800c348:	4638      	mov	r0, r7
 800c34a:	f7ff ffa5 	bl	800c298 <sbrk_aligned>
 800c34e:	3001      	adds	r0, #1
 800c350:	d02b      	beq.n	800c3aa <_malloc_r+0xd2>
 800c352:	6823      	ldr	r3, [r4, #0]
 800c354:	442b      	add	r3, r5
 800c356:	6023      	str	r3, [r4, #0]
 800c358:	e00e      	b.n	800c378 <_malloc_r+0xa0>
 800c35a:	6822      	ldr	r2, [r4, #0]
 800c35c:	1b52      	subs	r2, r2, r5
 800c35e:	d41e      	bmi.n	800c39e <_malloc_r+0xc6>
 800c360:	2a0b      	cmp	r2, #11
 800c362:	d916      	bls.n	800c392 <_malloc_r+0xba>
 800c364:	1961      	adds	r1, r4, r5
 800c366:	42a3      	cmp	r3, r4
 800c368:	6025      	str	r5, [r4, #0]
 800c36a:	bf18      	it	ne
 800c36c:	6059      	strne	r1, [r3, #4]
 800c36e:	6863      	ldr	r3, [r4, #4]
 800c370:	bf08      	it	eq
 800c372:	6031      	streq	r1, [r6, #0]
 800c374:	5162      	str	r2, [r4, r5]
 800c376:	604b      	str	r3, [r1, #4]
 800c378:	4638      	mov	r0, r7
 800c37a:	f104 060b 	add.w	r6, r4, #11
 800c37e:	f000 fbb9 	bl	800caf4 <__malloc_unlock>
 800c382:	f026 0607 	bic.w	r6, r6, #7
 800c386:	1d23      	adds	r3, r4, #4
 800c388:	1af2      	subs	r2, r6, r3
 800c38a:	d0b6      	beq.n	800c2fa <_malloc_r+0x22>
 800c38c:	1b9b      	subs	r3, r3, r6
 800c38e:	50a3      	str	r3, [r4, r2]
 800c390:	e7b3      	b.n	800c2fa <_malloc_r+0x22>
 800c392:	6862      	ldr	r2, [r4, #4]
 800c394:	42a3      	cmp	r3, r4
 800c396:	bf0c      	ite	eq
 800c398:	6032      	streq	r2, [r6, #0]
 800c39a:	605a      	strne	r2, [r3, #4]
 800c39c:	e7ec      	b.n	800c378 <_malloc_r+0xa0>
 800c39e:	4623      	mov	r3, r4
 800c3a0:	6864      	ldr	r4, [r4, #4]
 800c3a2:	e7b2      	b.n	800c30a <_malloc_r+0x32>
 800c3a4:	4634      	mov	r4, r6
 800c3a6:	6876      	ldr	r6, [r6, #4]
 800c3a8:	e7b9      	b.n	800c31e <_malloc_r+0x46>
 800c3aa:	230c      	movs	r3, #12
 800c3ac:	603b      	str	r3, [r7, #0]
 800c3ae:	4638      	mov	r0, r7
 800c3b0:	f000 fba0 	bl	800caf4 <__malloc_unlock>
 800c3b4:	e7a1      	b.n	800c2fa <_malloc_r+0x22>
 800c3b6:	6025      	str	r5, [r4, #0]
 800c3b8:	e7de      	b.n	800c378 <_malloc_r+0xa0>
 800c3ba:	bf00      	nop
 800c3bc:	200006a4 	.word	0x200006a4

0800c3c0 <__ssputs_r>:
 800c3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c4:	688e      	ldr	r6, [r1, #8]
 800c3c6:	429e      	cmp	r6, r3
 800c3c8:	4682      	mov	sl, r0
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	4690      	mov	r8, r2
 800c3ce:	461f      	mov	r7, r3
 800c3d0:	d838      	bhi.n	800c444 <__ssputs_r+0x84>
 800c3d2:	898a      	ldrh	r2, [r1, #12]
 800c3d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3d8:	d032      	beq.n	800c440 <__ssputs_r+0x80>
 800c3da:	6825      	ldr	r5, [r4, #0]
 800c3dc:	6909      	ldr	r1, [r1, #16]
 800c3de:	eba5 0901 	sub.w	r9, r5, r1
 800c3e2:	6965      	ldr	r5, [r4, #20]
 800c3e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	444b      	add	r3, r9
 800c3f0:	106d      	asrs	r5, r5, #1
 800c3f2:	429d      	cmp	r5, r3
 800c3f4:	bf38      	it	cc
 800c3f6:	461d      	movcc	r5, r3
 800c3f8:	0553      	lsls	r3, r2, #21
 800c3fa:	d531      	bpl.n	800c460 <__ssputs_r+0xa0>
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	f7ff ff6b 	bl	800c2d8 <_malloc_r>
 800c402:	4606      	mov	r6, r0
 800c404:	b950      	cbnz	r0, 800c41c <__ssputs_r+0x5c>
 800c406:	230c      	movs	r3, #12
 800c408:	f8ca 3000 	str.w	r3, [sl]
 800c40c:	89a3      	ldrh	r3, [r4, #12]
 800c40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c412:	81a3      	strh	r3, [r4, #12]
 800c414:	f04f 30ff 	mov.w	r0, #4294967295
 800c418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c41c:	6921      	ldr	r1, [r4, #16]
 800c41e:	464a      	mov	r2, r9
 800c420:	f7ff fb46 	bl	800bab0 <memcpy>
 800c424:	89a3      	ldrh	r3, [r4, #12]
 800c426:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c42a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c42e:	81a3      	strh	r3, [r4, #12]
 800c430:	6126      	str	r6, [r4, #16]
 800c432:	6165      	str	r5, [r4, #20]
 800c434:	444e      	add	r6, r9
 800c436:	eba5 0509 	sub.w	r5, r5, r9
 800c43a:	6026      	str	r6, [r4, #0]
 800c43c:	60a5      	str	r5, [r4, #8]
 800c43e:	463e      	mov	r6, r7
 800c440:	42be      	cmp	r6, r7
 800c442:	d900      	bls.n	800c446 <__ssputs_r+0x86>
 800c444:	463e      	mov	r6, r7
 800c446:	6820      	ldr	r0, [r4, #0]
 800c448:	4632      	mov	r2, r6
 800c44a:	4641      	mov	r1, r8
 800c44c:	f000 fb32 	bl	800cab4 <memmove>
 800c450:	68a3      	ldr	r3, [r4, #8]
 800c452:	1b9b      	subs	r3, r3, r6
 800c454:	60a3      	str	r3, [r4, #8]
 800c456:	6823      	ldr	r3, [r4, #0]
 800c458:	4433      	add	r3, r6
 800c45a:	6023      	str	r3, [r4, #0]
 800c45c:	2000      	movs	r0, #0
 800c45e:	e7db      	b.n	800c418 <__ssputs_r+0x58>
 800c460:	462a      	mov	r2, r5
 800c462:	f000 fb4d 	bl	800cb00 <_realloc_r>
 800c466:	4606      	mov	r6, r0
 800c468:	2800      	cmp	r0, #0
 800c46a:	d1e1      	bne.n	800c430 <__ssputs_r+0x70>
 800c46c:	6921      	ldr	r1, [r4, #16]
 800c46e:	4650      	mov	r0, sl
 800c470:	f7ff fec6 	bl	800c200 <_free_r>
 800c474:	e7c7      	b.n	800c406 <__ssputs_r+0x46>
	...

0800c478 <_svfiprintf_r>:
 800c478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47c:	4698      	mov	r8, r3
 800c47e:	898b      	ldrh	r3, [r1, #12]
 800c480:	061b      	lsls	r3, r3, #24
 800c482:	b09d      	sub	sp, #116	; 0x74
 800c484:	4607      	mov	r7, r0
 800c486:	460d      	mov	r5, r1
 800c488:	4614      	mov	r4, r2
 800c48a:	d50e      	bpl.n	800c4aa <_svfiprintf_r+0x32>
 800c48c:	690b      	ldr	r3, [r1, #16]
 800c48e:	b963      	cbnz	r3, 800c4aa <_svfiprintf_r+0x32>
 800c490:	2140      	movs	r1, #64	; 0x40
 800c492:	f7ff ff21 	bl	800c2d8 <_malloc_r>
 800c496:	6028      	str	r0, [r5, #0]
 800c498:	6128      	str	r0, [r5, #16]
 800c49a:	b920      	cbnz	r0, 800c4a6 <_svfiprintf_r+0x2e>
 800c49c:	230c      	movs	r3, #12
 800c49e:	603b      	str	r3, [r7, #0]
 800c4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a4:	e0d1      	b.n	800c64a <_svfiprintf_r+0x1d2>
 800c4a6:	2340      	movs	r3, #64	; 0x40
 800c4a8:	616b      	str	r3, [r5, #20]
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ae:	2320      	movs	r3, #32
 800c4b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4b8:	2330      	movs	r3, #48	; 0x30
 800c4ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c664 <_svfiprintf_r+0x1ec>
 800c4be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4c2:	f04f 0901 	mov.w	r9, #1
 800c4c6:	4623      	mov	r3, r4
 800c4c8:	469a      	mov	sl, r3
 800c4ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4ce:	b10a      	cbz	r2, 800c4d4 <_svfiprintf_r+0x5c>
 800c4d0:	2a25      	cmp	r2, #37	; 0x25
 800c4d2:	d1f9      	bne.n	800c4c8 <_svfiprintf_r+0x50>
 800c4d4:	ebba 0b04 	subs.w	fp, sl, r4
 800c4d8:	d00b      	beq.n	800c4f2 <_svfiprintf_r+0x7a>
 800c4da:	465b      	mov	r3, fp
 800c4dc:	4622      	mov	r2, r4
 800c4de:	4629      	mov	r1, r5
 800c4e0:	4638      	mov	r0, r7
 800c4e2:	f7ff ff6d 	bl	800c3c0 <__ssputs_r>
 800c4e6:	3001      	adds	r0, #1
 800c4e8:	f000 80aa 	beq.w	800c640 <_svfiprintf_r+0x1c8>
 800c4ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4ee:	445a      	add	r2, fp
 800c4f0:	9209      	str	r2, [sp, #36]	; 0x24
 800c4f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f000 80a2 	beq.w	800c640 <_svfiprintf_r+0x1c8>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c506:	f10a 0a01 	add.w	sl, sl, #1
 800c50a:	9304      	str	r3, [sp, #16]
 800c50c:	9307      	str	r3, [sp, #28]
 800c50e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c512:	931a      	str	r3, [sp, #104]	; 0x68
 800c514:	4654      	mov	r4, sl
 800c516:	2205      	movs	r2, #5
 800c518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c51c:	4851      	ldr	r0, [pc, #324]	; (800c664 <_svfiprintf_r+0x1ec>)
 800c51e:	f7f3 fe97 	bl	8000250 <memchr>
 800c522:	9a04      	ldr	r2, [sp, #16]
 800c524:	b9d8      	cbnz	r0, 800c55e <_svfiprintf_r+0xe6>
 800c526:	06d0      	lsls	r0, r2, #27
 800c528:	bf44      	itt	mi
 800c52a:	2320      	movmi	r3, #32
 800c52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c530:	0711      	lsls	r1, r2, #28
 800c532:	bf44      	itt	mi
 800c534:	232b      	movmi	r3, #43	; 0x2b
 800c536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c53a:	f89a 3000 	ldrb.w	r3, [sl]
 800c53e:	2b2a      	cmp	r3, #42	; 0x2a
 800c540:	d015      	beq.n	800c56e <_svfiprintf_r+0xf6>
 800c542:	9a07      	ldr	r2, [sp, #28]
 800c544:	4654      	mov	r4, sl
 800c546:	2000      	movs	r0, #0
 800c548:	f04f 0c0a 	mov.w	ip, #10
 800c54c:	4621      	mov	r1, r4
 800c54e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c552:	3b30      	subs	r3, #48	; 0x30
 800c554:	2b09      	cmp	r3, #9
 800c556:	d94e      	bls.n	800c5f6 <_svfiprintf_r+0x17e>
 800c558:	b1b0      	cbz	r0, 800c588 <_svfiprintf_r+0x110>
 800c55a:	9207      	str	r2, [sp, #28]
 800c55c:	e014      	b.n	800c588 <_svfiprintf_r+0x110>
 800c55e:	eba0 0308 	sub.w	r3, r0, r8
 800c562:	fa09 f303 	lsl.w	r3, r9, r3
 800c566:	4313      	orrs	r3, r2
 800c568:	9304      	str	r3, [sp, #16]
 800c56a:	46a2      	mov	sl, r4
 800c56c:	e7d2      	b.n	800c514 <_svfiprintf_r+0x9c>
 800c56e:	9b03      	ldr	r3, [sp, #12]
 800c570:	1d19      	adds	r1, r3, #4
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	9103      	str	r1, [sp, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	bfbb      	ittet	lt
 800c57a:	425b      	neglt	r3, r3
 800c57c:	f042 0202 	orrlt.w	r2, r2, #2
 800c580:	9307      	strge	r3, [sp, #28]
 800c582:	9307      	strlt	r3, [sp, #28]
 800c584:	bfb8      	it	lt
 800c586:	9204      	strlt	r2, [sp, #16]
 800c588:	7823      	ldrb	r3, [r4, #0]
 800c58a:	2b2e      	cmp	r3, #46	; 0x2e
 800c58c:	d10c      	bne.n	800c5a8 <_svfiprintf_r+0x130>
 800c58e:	7863      	ldrb	r3, [r4, #1]
 800c590:	2b2a      	cmp	r3, #42	; 0x2a
 800c592:	d135      	bne.n	800c600 <_svfiprintf_r+0x188>
 800c594:	9b03      	ldr	r3, [sp, #12]
 800c596:	1d1a      	adds	r2, r3, #4
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	9203      	str	r2, [sp, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	bfb8      	it	lt
 800c5a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5a4:	3402      	adds	r4, #2
 800c5a6:	9305      	str	r3, [sp, #20]
 800c5a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c674 <_svfiprintf_r+0x1fc>
 800c5ac:	7821      	ldrb	r1, [r4, #0]
 800c5ae:	2203      	movs	r2, #3
 800c5b0:	4650      	mov	r0, sl
 800c5b2:	f7f3 fe4d 	bl	8000250 <memchr>
 800c5b6:	b140      	cbz	r0, 800c5ca <_svfiprintf_r+0x152>
 800c5b8:	2340      	movs	r3, #64	; 0x40
 800c5ba:	eba0 000a 	sub.w	r0, r0, sl
 800c5be:	fa03 f000 	lsl.w	r0, r3, r0
 800c5c2:	9b04      	ldr	r3, [sp, #16]
 800c5c4:	4303      	orrs	r3, r0
 800c5c6:	3401      	adds	r4, #1
 800c5c8:	9304      	str	r3, [sp, #16]
 800c5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ce:	4826      	ldr	r0, [pc, #152]	; (800c668 <_svfiprintf_r+0x1f0>)
 800c5d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5d4:	2206      	movs	r2, #6
 800c5d6:	f7f3 fe3b 	bl	8000250 <memchr>
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	d038      	beq.n	800c650 <_svfiprintf_r+0x1d8>
 800c5de:	4b23      	ldr	r3, [pc, #140]	; (800c66c <_svfiprintf_r+0x1f4>)
 800c5e0:	bb1b      	cbnz	r3, 800c62a <_svfiprintf_r+0x1b2>
 800c5e2:	9b03      	ldr	r3, [sp, #12]
 800c5e4:	3307      	adds	r3, #7
 800c5e6:	f023 0307 	bic.w	r3, r3, #7
 800c5ea:	3308      	adds	r3, #8
 800c5ec:	9303      	str	r3, [sp, #12]
 800c5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5f0:	4433      	add	r3, r6
 800c5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5f4:	e767      	b.n	800c4c6 <_svfiprintf_r+0x4e>
 800c5f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5fa:	460c      	mov	r4, r1
 800c5fc:	2001      	movs	r0, #1
 800c5fe:	e7a5      	b.n	800c54c <_svfiprintf_r+0xd4>
 800c600:	2300      	movs	r3, #0
 800c602:	3401      	adds	r4, #1
 800c604:	9305      	str	r3, [sp, #20]
 800c606:	4619      	mov	r1, r3
 800c608:	f04f 0c0a 	mov.w	ip, #10
 800c60c:	4620      	mov	r0, r4
 800c60e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c612:	3a30      	subs	r2, #48	; 0x30
 800c614:	2a09      	cmp	r2, #9
 800c616:	d903      	bls.n	800c620 <_svfiprintf_r+0x1a8>
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d0c5      	beq.n	800c5a8 <_svfiprintf_r+0x130>
 800c61c:	9105      	str	r1, [sp, #20]
 800c61e:	e7c3      	b.n	800c5a8 <_svfiprintf_r+0x130>
 800c620:	fb0c 2101 	mla	r1, ip, r1, r2
 800c624:	4604      	mov	r4, r0
 800c626:	2301      	movs	r3, #1
 800c628:	e7f0      	b.n	800c60c <_svfiprintf_r+0x194>
 800c62a:	ab03      	add	r3, sp, #12
 800c62c:	9300      	str	r3, [sp, #0]
 800c62e:	462a      	mov	r2, r5
 800c630:	4b0f      	ldr	r3, [pc, #60]	; (800c670 <_svfiprintf_r+0x1f8>)
 800c632:	a904      	add	r1, sp, #16
 800c634:	4638      	mov	r0, r7
 800c636:	f7fd fb47 	bl	8009cc8 <_printf_float>
 800c63a:	1c42      	adds	r2, r0, #1
 800c63c:	4606      	mov	r6, r0
 800c63e:	d1d6      	bne.n	800c5ee <_svfiprintf_r+0x176>
 800c640:	89ab      	ldrh	r3, [r5, #12]
 800c642:	065b      	lsls	r3, r3, #25
 800c644:	f53f af2c 	bmi.w	800c4a0 <_svfiprintf_r+0x28>
 800c648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c64a:	b01d      	add	sp, #116	; 0x74
 800c64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c650:	ab03      	add	r3, sp, #12
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	462a      	mov	r2, r5
 800c656:	4b06      	ldr	r3, [pc, #24]	; (800c670 <_svfiprintf_r+0x1f8>)
 800c658:	a904      	add	r1, sp, #16
 800c65a:	4638      	mov	r0, r7
 800c65c:	f7fd fdd8 	bl	800a210 <_printf_i>
 800c660:	e7eb      	b.n	800c63a <_svfiprintf_r+0x1c2>
 800c662:	bf00      	nop
 800c664:	0800d234 	.word	0x0800d234
 800c668:	0800d23e 	.word	0x0800d23e
 800c66c:	08009cc9 	.word	0x08009cc9
 800c670:	0800c3c1 	.word	0x0800c3c1
 800c674:	0800d23a 	.word	0x0800d23a

0800c678 <__sfputc_r>:
 800c678:	6893      	ldr	r3, [r2, #8]
 800c67a:	3b01      	subs	r3, #1
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	b410      	push	{r4}
 800c680:	6093      	str	r3, [r2, #8]
 800c682:	da08      	bge.n	800c696 <__sfputc_r+0x1e>
 800c684:	6994      	ldr	r4, [r2, #24]
 800c686:	42a3      	cmp	r3, r4
 800c688:	db01      	blt.n	800c68e <__sfputc_r+0x16>
 800c68a:	290a      	cmp	r1, #10
 800c68c:	d103      	bne.n	800c696 <__sfputc_r+0x1e>
 800c68e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c692:	f7fe b875 	b.w	800a780 <__swbuf_r>
 800c696:	6813      	ldr	r3, [r2, #0]
 800c698:	1c58      	adds	r0, r3, #1
 800c69a:	6010      	str	r0, [r2, #0]
 800c69c:	7019      	strb	r1, [r3, #0]
 800c69e:	4608      	mov	r0, r1
 800c6a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6a4:	4770      	bx	lr

0800c6a6 <__sfputs_r>:
 800c6a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6a8:	4606      	mov	r6, r0
 800c6aa:	460f      	mov	r7, r1
 800c6ac:	4614      	mov	r4, r2
 800c6ae:	18d5      	adds	r5, r2, r3
 800c6b0:	42ac      	cmp	r4, r5
 800c6b2:	d101      	bne.n	800c6b8 <__sfputs_r+0x12>
 800c6b4:	2000      	movs	r0, #0
 800c6b6:	e007      	b.n	800c6c8 <__sfputs_r+0x22>
 800c6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6bc:	463a      	mov	r2, r7
 800c6be:	4630      	mov	r0, r6
 800c6c0:	f7ff ffda 	bl	800c678 <__sfputc_r>
 800c6c4:	1c43      	adds	r3, r0, #1
 800c6c6:	d1f3      	bne.n	800c6b0 <__sfputs_r+0xa>
 800c6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6cc <_vfiprintf_r>:
 800c6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d0:	460d      	mov	r5, r1
 800c6d2:	b09d      	sub	sp, #116	; 0x74
 800c6d4:	4614      	mov	r4, r2
 800c6d6:	4698      	mov	r8, r3
 800c6d8:	4606      	mov	r6, r0
 800c6da:	b118      	cbz	r0, 800c6e4 <_vfiprintf_r+0x18>
 800c6dc:	6983      	ldr	r3, [r0, #24]
 800c6de:	b90b      	cbnz	r3, 800c6e4 <_vfiprintf_r+0x18>
 800c6e0:	f7ff f8c2 	bl	800b868 <__sinit>
 800c6e4:	4b89      	ldr	r3, [pc, #548]	; (800c90c <_vfiprintf_r+0x240>)
 800c6e6:	429d      	cmp	r5, r3
 800c6e8:	d11b      	bne.n	800c722 <_vfiprintf_r+0x56>
 800c6ea:	6875      	ldr	r5, [r6, #4]
 800c6ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6ee:	07d9      	lsls	r1, r3, #31
 800c6f0:	d405      	bmi.n	800c6fe <_vfiprintf_r+0x32>
 800c6f2:	89ab      	ldrh	r3, [r5, #12]
 800c6f4:	059a      	lsls	r2, r3, #22
 800c6f6:	d402      	bmi.n	800c6fe <_vfiprintf_r+0x32>
 800c6f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6fa:	f7ff f96a 	bl	800b9d2 <__retarget_lock_acquire_recursive>
 800c6fe:	89ab      	ldrh	r3, [r5, #12]
 800c700:	071b      	lsls	r3, r3, #28
 800c702:	d501      	bpl.n	800c708 <_vfiprintf_r+0x3c>
 800c704:	692b      	ldr	r3, [r5, #16]
 800c706:	b9eb      	cbnz	r3, 800c744 <_vfiprintf_r+0x78>
 800c708:	4629      	mov	r1, r5
 800c70a:	4630      	mov	r0, r6
 800c70c:	f7fe f88a 	bl	800a824 <__swsetup_r>
 800c710:	b1c0      	cbz	r0, 800c744 <_vfiprintf_r+0x78>
 800c712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c714:	07dc      	lsls	r4, r3, #31
 800c716:	d50e      	bpl.n	800c736 <_vfiprintf_r+0x6a>
 800c718:	f04f 30ff 	mov.w	r0, #4294967295
 800c71c:	b01d      	add	sp, #116	; 0x74
 800c71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c722:	4b7b      	ldr	r3, [pc, #492]	; (800c910 <_vfiprintf_r+0x244>)
 800c724:	429d      	cmp	r5, r3
 800c726:	d101      	bne.n	800c72c <_vfiprintf_r+0x60>
 800c728:	68b5      	ldr	r5, [r6, #8]
 800c72a:	e7df      	b.n	800c6ec <_vfiprintf_r+0x20>
 800c72c:	4b79      	ldr	r3, [pc, #484]	; (800c914 <_vfiprintf_r+0x248>)
 800c72e:	429d      	cmp	r5, r3
 800c730:	bf08      	it	eq
 800c732:	68f5      	ldreq	r5, [r6, #12]
 800c734:	e7da      	b.n	800c6ec <_vfiprintf_r+0x20>
 800c736:	89ab      	ldrh	r3, [r5, #12]
 800c738:	0598      	lsls	r0, r3, #22
 800c73a:	d4ed      	bmi.n	800c718 <_vfiprintf_r+0x4c>
 800c73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c73e:	f7ff f949 	bl	800b9d4 <__retarget_lock_release_recursive>
 800c742:	e7e9      	b.n	800c718 <_vfiprintf_r+0x4c>
 800c744:	2300      	movs	r3, #0
 800c746:	9309      	str	r3, [sp, #36]	; 0x24
 800c748:	2320      	movs	r3, #32
 800c74a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c74e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c752:	2330      	movs	r3, #48	; 0x30
 800c754:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c918 <_vfiprintf_r+0x24c>
 800c758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c75c:	f04f 0901 	mov.w	r9, #1
 800c760:	4623      	mov	r3, r4
 800c762:	469a      	mov	sl, r3
 800c764:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c768:	b10a      	cbz	r2, 800c76e <_vfiprintf_r+0xa2>
 800c76a:	2a25      	cmp	r2, #37	; 0x25
 800c76c:	d1f9      	bne.n	800c762 <_vfiprintf_r+0x96>
 800c76e:	ebba 0b04 	subs.w	fp, sl, r4
 800c772:	d00b      	beq.n	800c78c <_vfiprintf_r+0xc0>
 800c774:	465b      	mov	r3, fp
 800c776:	4622      	mov	r2, r4
 800c778:	4629      	mov	r1, r5
 800c77a:	4630      	mov	r0, r6
 800c77c:	f7ff ff93 	bl	800c6a6 <__sfputs_r>
 800c780:	3001      	adds	r0, #1
 800c782:	f000 80aa 	beq.w	800c8da <_vfiprintf_r+0x20e>
 800c786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c788:	445a      	add	r2, fp
 800c78a:	9209      	str	r2, [sp, #36]	; 0x24
 800c78c:	f89a 3000 	ldrb.w	r3, [sl]
 800c790:	2b00      	cmp	r3, #0
 800c792:	f000 80a2 	beq.w	800c8da <_vfiprintf_r+0x20e>
 800c796:	2300      	movs	r3, #0
 800c798:	f04f 32ff 	mov.w	r2, #4294967295
 800c79c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7a0:	f10a 0a01 	add.w	sl, sl, #1
 800c7a4:	9304      	str	r3, [sp, #16]
 800c7a6:	9307      	str	r3, [sp, #28]
 800c7a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7ac:	931a      	str	r3, [sp, #104]	; 0x68
 800c7ae:	4654      	mov	r4, sl
 800c7b0:	2205      	movs	r2, #5
 800c7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b6:	4858      	ldr	r0, [pc, #352]	; (800c918 <_vfiprintf_r+0x24c>)
 800c7b8:	f7f3 fd4a 	bl	8000250 <memchr>
 800c7bc:	9a04      	ldr	r2, [sp, #16]
 800c7be:	b9d8      	cbnz	r0, 800c7f8 <_vfiprintf_r+0x12c>
 800c7c0:	06d1      	lsls	r1, r2, #27
 800c7c2:	bf44      	itt	mi
 800c7c4:	2320      	movmi	r3, #32
 800c7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ca:	0713      	lsls	r3, r2, #28
 800c7cc:	bf44      	itt	mi
 800c7ce:	232b      	movmi	r3, #43	; 0x2b
 800c7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c7da:	d015      	beq.n	800c808 <_vfiprintf_r+0x13c>
 800c7dc:	9a07      	ldr	r2, [sp, #28]
 800c7de:	4654      	mov	r4, sl
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	f04f 0c0a 	mov.w	ip, #10
 800c7e6:	4621      	mov	r1, r4
 800c7e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7ec:	3b30      	subs	r3, #48	; 0x30
 800c7ee:	2b09      	cmp	r3, #9
 800c7f0:	d94e      	bls.n	800c890 <_vfiprintf_r+0x1c4>
 800c7f2:	b1b0      	cbz	r0, 800c822 <_vfiprintf_r+0x156>
 800c7f4:	9207      	str	r2, [sp, #28]
 800c7f6:	e014      	b.n	800c822 <_vfiprintf_r+0x156>
 800c7f8:	eba0 0308 	sub.w	r3, r0, r8
 800c7fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c800:	4313      	orrs	r3, r2
 800c802:	9304      	str	r3, [sp, #16]
 800c804:	46a2      	mov	sl, r4
 800c806:	e7d2      	b.n	800c7ae <_vfiprintf_r+0xe2>
 800c808:	9b03      	ldr	r3, [sp, #12]
 800c80a:	1d19      	adds	r1, r3, #4
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	9103      	str	r1, [sp, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	bfbb      	ittet	lt
 800c814:	425b      	neglt	r3, r3
 800c816:	f042 0202 	orrlt.w	r2, r2, #2
 800c81a:	9307      	strge	r3, [sp, #28]
 800c81c:	9307      	strlt	r3, [sp, #28]
 800c81e:	bfb8      	it	lt
 800c820:	9204      	strlt	r2, [sp, #16]
 800c822:	7823      	ldrb	r3, [r4, #0]
 800c824:	2b2e      	cmp	r3, #46	; 0x2e
 800c826:	d10c      	bne.n	800c842 <_vfiprintf_r+0x176>
 800c828:	7863      	ldrb	r3, [r4, #1]
 800c82a:	2b2a      	cmp	r3, #42	; 0x2a
 800c82c:	d135      	bne.n	800c89a <_vfiprintf_r+0x1ce>
 800c82e:	9b03      	ldr	r3, [sp, #12]
 800c830:	1d1a      	adds	r2, r3, #4
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	9203      	str	r2, [sp, #12]
 800c836:	2b00      	cmp	r3, #0
 800c838:	bfb8      	it	lt
 800c83a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c83e:	3402      	adds	r4, #2
 800c840:	9305      	str	r3, [sp, #20]
 800c842:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c928 <_vfiprintf_r+0x25c>
 800c846:	7821      	ldrb	r1, [r4, #0]
 800c848:	2203      	movs	r2, #3
 800c84a:	4650      	mov	r0, sl
 800c84c:	f7f3 fd00 	bl	8000250 <memchr>
 800c850:	b140      	cbz	r0, 800c864 <_vfiprintf_r+0x198>
 800c852:	2340      	movs	r3, #64	; 0x40
 800c854:	eba0 000a 	sub.w	r0, r0, sl
 800c858:	fa03 f000 	lsl.w	r0, r3, r0
 800c85c:	9b04      	ldr	r3, [sp, #16]
 800c85e:	4303      	orrs	r3, r0
 800c860:	3401      	adds	r4, #1
 800c862:	9304      	str	r3, [sp, #16]
 800c864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c868:	482c      	ldr	r0, [pc, #176]	; (800c91c <_vfiprintf_r+0x250>)
 800c86a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c86e:	2206      	movs	r2, #6
 800c870:	f7f3 fcee 	bl	8000250 <memchr>
 800c874:	2800      	cmp	r0, #0
 800c876:	d03f      	beq.n	800c8f8 <_vfiprintf_r+0x22c>
 800c878:	4b29      	ldr	r3, [pc, #164]	; (800c920 <_vfiprintf_r+0x254>)
 800c87a:	bb1b      	cbnz	r3, 800c8c4 <_vfiprintf_r+0x1f8>
 800c87c:	9b03      	ldr	r3, [sp, #12]
 800c87e:	3307      	adds	r3, #7
 800c880:	f023 0307 	bic.w	r3, r3, #7
 800c884:	3308      	adds	r3, #8
 800c886:	9303      	str	r3, [sp, #12]
 800c888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c88a:	443b      	add	r3, r7
 800c88c:	9309      	str	r3, [sp, #36]	; 0x24
 800c88e:	e767      	b.n	800c760 <_vfiprintf_r+0x94>
 800c890:	fb0c 3202 	mla	r2, ip, r2, r3
 800c894:	460c      	mov	r4, r1
 800c896:	2001      	movs	r0, #1
 800c898:	e7a5      	b.n	800c7e6 <_vfiprintf_r+0x11a>
 800c89a:	2300      	movs	r3, #0
 800c89c:	3401      	adds	r4, #1
 800c89e:	9305      	str	r3, [sp, #20]
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	f04f 0c0a 	mov.w	ip, #10
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8ac:	3a30      	subs	r2, #48	; 0x30
 800c8ae:	2a09      	cmp	r2, #9
 800c8b0:	d903      	bls.n	800c8ba <_vfiprintf_r+0x1ee>
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d0c5      	beq.n	800c842 <_vfiprintf_r+0x176>
 800c8b6:	9105      	str	r1, [sp, #20]
 800c8b8:	e7c3      	b.n	800c842 <_vfiprintf_r+0x176>
 800c8ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8be:	4604      	mov	r4, r0
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e7f0      	b.n	800c8a6 <_vfiprintf_r+0x1da>
 800c8c4:	ab03      	add	r3, sp, #12
 800c8c6:	9300      	str	r3, [sp, #0]
 800c8c8:	462a      	mov	r2, r5
 800c8ca:	4b16      	ldr	r3, [pc, #88]	; (800c924 <_vfiprintf_r+0x258>)
 800c8cc:	a904      	add	r1, sp, #16
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f7fd f9fa 	bl	8009cc8 <_printf_float>
 800c8d4:	4607      	mov	r7, r0
 800c8d6:	1c78      	adds	r0, r7, #1
 800c8d8:	d1d6      	bne.n	800c888 <_vfiprintf_r+0x1bc>
 800c8da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8dc:	07d9      	lsls	r1, r3, #31
 800c8de:	d405      	bmi.n	800c8ec <_vfiprintf_r+0x220>
 800c8e0:	89ab      	ldrh	r3, [r5, #12]
 800c8e2:	059a      	lsls	r2, r3, #22
 800c8e4:	d402      	bmi.n	800c8ec <_vfiprintf_r+0x220>
 800c8e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8e8:	f7ff f874 	bl	800b9d4 <__retarget_lock_release_recursive>
 800c8ec:	89ab      	ldrh	r3, [r5, #12]
 800c8ee:	065b      	lsls	r3, r3, #25
 800c8f0:	f53f af12 	bmi.w	800c718 <_vfiprintf_r+0x4c>
 800c8f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8f6:	e711      	b.n	800c71c <_vfiprintf_r+0x50>
 800c8f8:	ab03      	add	r3, sp, #12
 800c8fa:	9300      	str	r3, [sp, #0]
 800c8fc:	462a      	mov	r2, r5
 800c8fe:	4b09      	ldr	r3, [pc, #36]	; (800c924 <_vfiprintf_r+0x258>)
 800c900:	a904      	add	r1, sp, #16
 800c902:	4630      	mov	r0, r6
 800c904:	f7fd fc84 	bl	800a210 <_printf_i>
 800c908:	e7e4      	b.n	800c8d4 <_vfiprintf_r+0x208>
 800c90a:	bf00      	nop
 800c90c:	0800d098 	.word	0x0800d098
 800c910:	0800d0b8 	.word	0x0800d0b8
 800c914:	0800d078 	.word	0x0800d078
 800c918:	0800d234 	.word	0x0800d234
 800c91c:	0800d23e 	.word	0x0800d23e
 800c920:	08009cc9 	.word	0x08009cc9
 800c924:	0800c6a7 	.word	0x0800c6a7
 800c928:	0800d23a 	.word	0x0800d23a

0800c92c <_sbrk_r>:
 800c92c:	b538      	push	{r3, r4, r5, lr}
 800c92e:	4d06      	ldr	r5, [pc, #24]	; (800c948 <_sbrk_r+0x1c>)
 800c930:	2300      	movs	r3, #0
 800c932:	4604      	mov	r4, r0
 800c934:	4608      	mov	r0, r1
 800c936:	602b      	str	r3, [r5, #0]
 800c938:	f7f5 fd84 	bl	8002444 <_sbrk>
 800c93c:	1c43      	adds	r3, r0, #1
 800c93e:	d102      	bne.n	800c946 <_sbrk_r+0x1a>
 800c940:	682b      	ldr	r3, [r5, #0]
 800c942:	b103      	cbz	r3, 800c946 <_sbrk_r+0x1a>
 800c944:	6023      	str	r3, [r4, #0]
 800c946:	bd38      	pop	{r3, r4, r5, pc}
 800c948:	200006ac 	.word	0x200006ac

0800c94c <__sread>:
 800c94c:	b510      	push	{r4, lr}
 800c94e:	460c      	mov	r4, r1
 800c950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c954:	f000 f904 	bl	800cb60 <_read_r>
 800c958:	2800      	cmp	r0, #0
 800c95a:	bfab      	itete	ge
 800c95c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c95e:	89a3      	ldrhlt	r3, [r4, #12]
 800c960:	181b      	addge	r3, r3, r0
 800c962:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c966:	bfac      	ite	ge
 800c968:	6563      	strge	r3, [r4, #84]	; 0x54
 800c96a:	81a3      	strhlt	r3, [r4, #12]
 800c96c:	bd10      	pop	{r4, pc}

0800c96e <__swrite>:
 800c96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c972:	461f      	mov	r7, r3
 800c974:	898b      	ldrh	r3, [r1, #12]
 800c976:	05db      	lsls	r3, r3, #23
 800c978:	4605      	mov	r5, r0
 800c97a:	460c      	mov	r4, r1
 800c97c:	4616      	mov	r6, r2
 800c97e:	d505      	bpl.n	800c98c <__swrite+0x1e>
 800c980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c984:	2302      	movs	r3, #2
 800c986:	2200      	movs	r2, #0
 800c988:	f000 f870 	bl	800ca6c <_lseek_r>
 800c98c:	89a3      	ldrh	r3, [r4, #12]
 800c98e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c996:	81a3      	strh	r3, [r4, #12]
 800c998:	4632      	mov	r2, r6
 800c99a:	463b      	mov	r3, r7
 800c99c:	4628      	mov	r0, r5
 800c99e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a2:	f000 b817 	b.w	800c9d4 <_write_r>

0800c9a6 <__sseek>:
 800c9a6:	b510      	push	{r4, lr}
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ae:	f000 f85d 	bl	800ca6c <_lseek_r>
 800c9b2:	1c43      	adds	r3, r0, #1
 800c9b4:	89a3      	ldrh	r3, [r4, #12]
 800c9b6:	bf15      	itete	ne
 800c9b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c9ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c9be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c9c2:	81a3      	strheq	r3, [r4, #12]
 800c9c4:	bf18      	it	ne
 800c9c6:	81a3      	strhne	r3, [r4, #12]
 800c9c8:	bd10      	pop	{r4, pc}

0800c9ca <__sclose>:
 800c9ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ce:	f000 b81b 	b.w	800ca08 <_close_r>
	...

0800c9d4 <_write_r>:
 800c9d4:	b538      	push	{r3, r4, r5, lr}
 800c9d6:	4d07      	ldr	r5, [pc, #28]	; (800c9f4 <_write_r+0x20>)
 800c9d8:	4604      	mov	r4, r0
 800c9da:	4608      	mov	r0, r1
 800c9dc:	4611      	mov	r1, r2
 800c9de:	2200      	movs	r2, #0
 800c9e0:	602a      	str	r2, [r5, #0]
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	f7f5 fcdd 	bl	80023a2 <_write>
 800c9e8:	1c43      	adds	r3, r0, #1
 800c9ea:	d102      	bne.n	800c9f2 <_write_r+0x1e>
 800c9ec:	682b      	ldr	r3, [r5, #0]
 800c9ee:	b103      	cbz	r3, 800c9f2 <_write_r+0x1e>
 800c9f0:	6023      	str	r3, [r4, #0]
 800c9f2:	bd38      	pop	{r3, r4, r5, pc}
 800c9f4:	200006ac 	.word	0x200006ac

0800c9f8 <abort>:
 800c9f8:	b508      	push	{r3, lr}
 800c9fa:	2006      	movs	r0, #6
 800c9fc:	f000 f8ea 	bl	800cbd4 <raise>
 800ca00:	2001      	movs	r0, #1
 800ca02:	f7f5 fca7 	bl	8002354 <_exit>
	...

0800ca08 <_close_r>:
 800ca08:	b538      	push	{r3, r4, r5, lr}
 800ca0a:	4d06      	ldr	r5, [pc, #24]	; (800ca24 <_close_r+0x1c>)
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	4604      	mov	r4, r0
 800ca10:	4608      	mov	r0, r1
 800ca12:	602b      	str	r3, [r5, #0]
 800ca14:	f7f5 fce1 	bl	80023da <_close>
 800ca18:	1c43      	adds	r3, r0, #1
 800ca1a:	d102      	bne.n	800ca22 <_close_r+0x1a>
 800ca1c:	682b      	ldr	r3, [r5, #0]
 800ca1e:	b103      	cbz	r3, 800ca22 <_close_r+0x1a>
 800ca20:	6023      	str	r3, [r4, #0]
 800ca22:	bd38      	pop	{r3, r4, r5, pc}
 800ca24:	200006ac 	.word	0x200006ac

0800ca28 <_fstat_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	4d07      	ldr	r5, [pc, #28]	; (800ca48 <_fstat_r+0x20>)
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	4604      	mov	r4, r0
 800ca30:	4608      	mov	r0, r1
 800ca32:	4611      	mov	r1, r2
 800ca34:	602b      	str	r3, [r5, #0]
 800ca36:	f7f5 fcdc 	bl	80023f2 <_fstat>
 800ca3a:	1c43      	adds	r3, r0, #1
 800ca3c:	d102      	bne.n	800ca44 <_fstat_r+0x1c>
 800ca3e:	682b      	ldr	r3, [r5, #0]
 800ca40:	b103      	cbz	r3, 800ca44 <_fstat_r+0x1c>
 800ca42:	6023      	str	r3, [r4, #0]
 800ca44:	bd38      	pop	{r3, r4, r5, pc}
 800ca46:	bf00      	nop
 800ca48:	200006ac 	.word	0x200006ac

0800ca4c <_isatty_r>:
 800ca4c:	b538      	push	{r3, r4, r5, lr}
 800ca4e:	4d06      	ldr	r5, [pc, #24]	; (800ca68 <_isatty_r+0x1c>)
 800ca50:	2300      	movs	r3, #0
 800ca52:	4604      	mov	r4, r0
 800ca54:	4608      	mov	r0, r1
 800ca56:	602b      	str	r3, [r5, #0]
 800ca58:	f7f5 fcdb 	bl	8002412 <_isatty>
 800ca5c:	1c43      	adds	r3, r0, #1
 800ca5e:	d102      	bne.n	800ca66 <_isatty_r+0x1a>
 800ca60:	682b      	ldr	r3, [r5, #0]
 800ca62:	b103      	cbz	r3, 800ca66 <_isatty_r+0x1a>
 800ca64:	6023      	str	r3, [r4, #0]
 800ca66:	bd38      	pop	{r3, r4, r5, pc}
 800ca68:	200006ac 	.word	0x200006ac

0800ca6c <_lseek_r>:
 800ca6c:	b538      	push	{r3, r4, r5, lr}
 800ca6e:	4d07      	ldr	r5, [pc, #28]	; (800ca8c <_lseek_r+0x20>)
 800ca70:	4604      	mov	r4, r0
 800ca72:	4608      	mov	r0, r1
 800ca74:	4611      	mov	r1, r2
 800ca76:	2200      	movs	r2, #0
 800ca78:	602a      	str	r2, [r5, #0]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	f7f5 fcd4 	bl	8002428 <_lseek>
 800ca80:	1c43      	adds	r3, r0, #1
 800ca82:	d102      	bne.n	800ca8a <_lseek_r+0x1e>
 800ca84:	682b      	ldr	r3, [r5, #0]
 800ca86:	b103      	cbz	r3, 800ca8a <_lseek_r+0x1e>
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	bd38      	pop	{r3, r4, r5, pc}
 800ca8c:	200006ac 	.word	0x200006ac

0800ca90 <__ascii_mbtowc>:
 800ca90:	b082      	sub	sp, #8
 800ca92:	b901      	cbnz	r1, 800ca96 <__ascii_mbtowc+0x6>
 800ca94:	a901      	add	r1, sp, #4
 800ca96:	b142      	cbz	r2, 800caaa <__ascii_mbtowc+0x1a>
 800ca98:	b14b      	cbz	r3, 800caae <__ascii_mbtowc+0x1e>
 800ca9a:	7813      	ldrb	r3, [r2, #0]
 800ca9c:	600b      	str	r3, [r1, #0]
 800ca9e:	7812      	ldrb	r2, [r2, #0]
 800caa0:	1e10      	subs	r0, r2, #0
 800caa2:	bf18      	it	ne
 800caa4:	2001      	movne	r0, #1
 800caa6:	b002      	add	sp, #8
 800caa8:	4770      	bx	lr
 800caaa:	4610      	mov	r0, r2
 800caac:	e7fb      	b.n	800caa6 <__ascii_mbtowc+0x16>
 800caae:	f06f 0001 	mvn.w	r0, #1
 800cab2:	e7f8      	b.n	800caa6 <__ascii_mbtowc+0x16>

0800cab4 <memmove>:
 800cab4:	4288      	cmp	r0, r1
 800cab6:	b510      	push	{r4, lr}
 800cab8:	eb01 0402 	add.w	r4, r1, r2
 800cabc:	d902      	bls.n	800cac4 <memmove+0x10>
 800cabe:	4284      	cmp	r4, r0
 800cac0:	4623      	mov	r3, r4
 800cac2:	d807      	bhi.n	800cad4 <memmove+0x20>
 800cac4:	1e43      	subs	r3, r0, #1
 800cac6:	42a1      	cmp	r1, r4
 800cac8:	d008      	beq.n	800cadc <memmove+0x28>
 800caca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cace:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cad2:	e7f8      	b.n	800cac6 <memmove+0x12>
 800cad4:	4402      	add	r2, r0
 800cad6:	4601      	mov	r1, r0
 800cad8:	428a      	cmp	r2, r1
 800cada:	d100      	bne.n	800cade <memmove+0x2a>
 800cadc:	bd10      	pop	{r4, pc}
 800cade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cae6:	e7f7      	b.n	800cad8 <memmove+0x24>

0800cae8 <__malloc_lock>:
 800cae8:	4801      	ldr	r0, [pc, #4]	; (800caf0 <__malloc_lock+0x8>)
 800caea:	f7fe bf72 	b.w	800b9d2 <__retarget_lock_acquire_recursive>
 800caee:	bf00      	nop
 800caf0:	200006a0 	.word	0x200006a0

0800caf4 <__malloc_unlock>:
 800caf4:	4801      	ldr	r0, [pc, #4]	; (800cafc <__malloc_unlock+0x8>)
 800caf6:	f7fe bf6d 	b.w	800b9d4 <__retarget_lock_release_recursive>
 800cafa:	bf00      	nop
 800cafc:	200006a0 	.word	0x200006a0

0800cb00 <_realloc_r>:
 800cb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb04:	4680      	mov	r8, r0
 800cb06:	4614      	mov	r4, r2
 800cb08:	460e      	mov	r6, r1
 800cb0a:	b921      	cbnz	r1, 800cb16 <_realloc_r+0x16>
 800cb0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb10:	4611      	mov	r1, r2
 800cb12:	f7ff bbe1 	b.w	800c2d8 <_malloc_r>
 800cb16:	b92a      	cbnz	r2, 800cb24 <_realloc_r+0x24>
 800cb18:	f7ff fb72 	bl	800c200 <_free_r>
 800cb1c:	4625      	mov	r5, r4
 800cb1e:	4628      	mov	r0, r5
 800cb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb24:	f000 f87f 	bl	800cc26 <_malloc_usable_size_r>
 800cb28:	4284      	cmp	r4, r0
 800cb2a:	4607      	mov	r7, r0
 800cb2c:	d802      	bhi.n	800cb34 <_realloc_r+0x34>
 800cb2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb32:	d812      	bhi.n	800cb5a <_realloc_r+0x5a>
 800cb34:	4621      	mov	r1, r4
 800cb36:	4640      	mov	r0, r8
 800cb38:	f7ff fbce 	bl	800c2d8 <_malloc_r>
 800cb3c:	4605      	mov	r5, r0
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d0ed      	beq.n	800cb1e <_realloc_r+0x1e>
 800cb42:	42bc      	cmp	r4, r7
 800cb44:	4622      	mov	r2, r4
 800cb46:	4631      	mov	r1, r6
 800cb48:	bf28      	it	cs
 800cb4a:	463a      	movcs	r2, r7
 800cb4c:	f7fe ffb0 	bl	800bab0 <memcpy>
 800cb50:	4631      	mov	r1, r6
 800cb52:	4640      	mov	r0, r8
 800cb54:	f7ff fb54 	bl	800c200 <_free_r>
 800cb58:	e7e1      	b.n	800cb1e <_realloc_r+0x1e>
 800cb5a:	4635      	mov	r5, r6
 800cb5c:	e7df      	b.n	800cb1e <_realloc_r+0x1e>
	...

0800cb60 <_read_r>:
 800cb60:	b538      	push	{r3, r4, r5, lr}
 800cb62:	4d07      	ldr	r5, [pc, #28]	; (800cb80 <_read_r+0x20>)
 800cb64:	4604      	mov	r4, r0
 800cb66:	4608      	mov	r0, r1
 800cb68:	4611      	mov	r1, r2
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	602a      	str	r2, [r5, #0]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	f7f5 fbfa 	bl	8002368 <_read>
 800cb74:	1c43      	adds	r3, r0, #1
 800cb76:	d102      	bne.n	800cb7e <_read_r+0x1e>
 800cb78:	682b      	ldr	r3, [r5, #0]
 800cb7a:	b103      	cbz	r3, 800cb7e <_read_r+0x1e>
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	bd38      	pop	{r3, r4, r5, pc}
 800cb80:	200006ac 	.word	0x200006ac

0800cb84 <_raise_r>:
 800cb84:	291f      	cmp	r1, #31
 800cb86:	b538      	push	{r3, r4, r5, lr}
 800cb88:	4604      	mov	r4, r0
 800cb8a:	460d      	mov	r5, r1
 800cb8c:	d904      	bls.n	800cb98 <_raise_r+0x14>
 800cb8e:	2316      	movs	r3, #22
 800cb90:	6003      	str	r3, [r0, #0]
 800cb92:	f04f 30ff 	mov.w	r0, #4294967295
 800cb96:	bd38      	pop	{r3, r4, r5, pc}
 800cb98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb9a:	b112      	cbz	r2, 800cba2 <_raise_r+0x1e>
 800cb9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cba0:	b94b      	cbnz	r3, 800cbb6 <_raise_r+0x32>
 800cba2:	4620      	mov	r0, r4
 800cba4:	f000 f830 	bl	800cc08 <_getpid_r>
 800cba8:	462a      	mov	r2, r5
 800cbaa:	4601      	mov	r1, r0
 800cbac:	4620      	mov	r0, r4
 800cbae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbb2:	f000 b817 	b.w	800cbe4 <_kill_r>
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d00a      	beq.n	800cbd0 <_raise_r+0x4c>
 800cbba:	1c59      	adds	r1, r3, #1
 800cbbc:	d103      	bne.n	800cbc6 <_raise_r+0x42>
 800cbbe:	2316      	movs	r3, #22
 800cbc0:	6003      	str	r3, [r0, #0]
 800cbc2:	2001      	movs	r0, #1
 800cbc4:	e7e7      	b.n	800cb96 <_raise_r+0x12>
 800cbc6:	2400      	movs	r4, #0
 800cbc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cbcc:	4628      	mov	r0, r5
 800cbce:	4798      	blx	r3
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	e7e0      	b.n	800cb96 <_raise_r+0x12>

0800cbd4 <raise>:
 800cbd4:	4b02      	ldr	r3, [pc, #8]	; (800cbe0 <raise+0xc>)
 800cbd6:	4601      	mov	r1, r0
 800cbd8:	6818      	ldr	r0, [r3, #0]
 800cbda:	f7ff bfd3 	b.w	800cb84 <_raise_r>
 800cbde:	bf00      	nop
 800cbe0:	2000015c 	.word	0x2000015c

0800cbe4 <_kill_r>:
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	4d07      	ldr	r5, [pc, #28]	; (800cc04 <_kill_r+0x20>)
 800cbe8:	2300      	movs	r3, #0
 800cbea:	4604      	mov	r4, r0
 800cbec:	4608      	mov	r0, r1
 800cbee:	4611      	mov	r1, r2
 800cbf0:	602b      	str	r3, [r5, #0]
 800cbf2:	f7f5 fb9f 	bl	8002334 <_kill>
 800cbf6:	1c43      	adds	r3, r0, #1
 800cbf8:	d102      	bne.n	800cc00 <_kill_r+0x1c>
 800cbfa:	682b      	ldr	r3, [r5, #0]
 800cbfc:	b103      	cbz	r3, 800cc00 <_kill_r+0x1c>
 800cbfe:	6023      	str	r3, [r4, #0]
 800cc00:	bd38      	pop	{r3, r4, r5, pc}
 800cc02:	bf00      	nop
 800cc04:	200006ac 	.word	0x200006ac

0800cc08 <_getpid_r>:
 800cc08:	f7f5 bb8c 	b.w	8002324 <_getpid>

0800cc0c <__ascii_wctomb>:
 800cc0c:	b149      	cbz	r1, 800cc22 <__ascii_wctomb+0x16>
 800cc0e:	2aff      	cmp	r2, #255	; 0xff
 800cc10:	bf85      	ittet	hi
 800cc12:	238a      	movhi	r3, #138	; 0x8a
 800cc14:	6003      	strhi	r3, [r0, #0]
 800cc16:	700a      	strbls	r2, [r1, #0]
 800cc18:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc1c:	bf98      	it	ls
 800cc1e:	2001      	movls	r0, #1
 800cc20:	4770      	bx	lr
 800cc22:	4608      	mov	r0, r1
 800cc24:	4770      	bx	lr

0800cc26 <_malloc_usable_size_r>:
 800cc26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc2a:	1f18      	subs	r0, r3, #4
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	bfbc      	itt	lt
 800cc30:	580b      	ldrlt	r3, [r1, r0]
 800cc32:	18c0      	addlt	r0, r0, r3
 800cc34:	4770      	bx	lr
	...

0800cc38 <_init>:
 800cc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3a:	bf00      	nop
 800cc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc3e:	bc08      	pop	{r3}
 800cc40:	469e      	mov	lr, r3
 800cc42:	4770      	bx	lr

0800cc44 <_fini>:
 800cc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc46:	bf00      	nop
 800cc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc4a:	bc08      	pop	{r3}
 800cc4c:	469e      	mov	lr, r3
 800cc4e:	4770      	bx	lr
