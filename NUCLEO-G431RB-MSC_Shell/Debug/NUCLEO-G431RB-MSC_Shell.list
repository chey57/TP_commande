
NUCLEO-G431RB-MSC_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000742c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800760c  0800760c  0001760c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007998  08007998  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08007998  08007998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079a0  080079a0  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079a4  080079a4  000179a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  080079a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000108  08007ab0  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08007ab0  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001493c  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a3  00000000  00000000  00034a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00037218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  00038330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f2f2  00000000  00000000  00039350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139f9  00000000  00000000  00058642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c78d1  00000000  00000000  0006c03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013390c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000545c  00000000  00000000  0013395c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000108 	.word	0x20000108
 80001fc:	00000000 	.word	0x00000000
 8000200:	080075f4 	.word	0x080075f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000010c 	.word	0x2000010c
 800021c:	080075f4 	.word	0x080075f4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b0a0      	sub	sp, #128	; 0x80
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	67bb      	str	r3, [r7, #120]	; 0x78
	char*		token;
	int 		newCmdReady = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	673b      	str	r3, [r7, #112]	; 0x70
	int 		alpha = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	667b      	str	r3, [r7, #100]	; 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fe54 	bl	80012a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 fa01 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fb3b 	bl	8000c78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000602:	f000 faed 	bl	8000be0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000606:	f000 fa47 	bl	8000a98 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // POUR LE SHELL
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 800060a:	463b      	mov	r3, r7
 800060c:	2224      	movs	r2, #36	; 0x24
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fd15 	bl	8006040 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061a:	2240      	movs	r2, #64	; 0x40
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f005 fd0e 	bl	8006040 <memset>
 8000624:	4bad      	ldr	r3, [pc, #692]	; (80008dc <main+0x2f8>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 800062a:	2240      	movs	r2, #64	; 0x40
 800062c:	2100      	movs	r1, #0
 800062e:	48ac      	ldr	r0, [pc, #688]	; (80008e0 <main+0x2fc>)
 8000630:	f005 fd06 	bl	8006040 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000634:	2201      	movs	r2, #1
 8000636:	49a9      	ldr	r1, [pc, #676]	; (80008dc <main+0x2f8>)
 8000638:	48aa      	ldr	r0, [pc, #680]	; (80008e4 <main+0x300>)
 800063a:	f003 fd73 	bl	8004124 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 800063e:	200a      	movs	r0, #10
 8000640:	f000 fe66 	bl	8001310 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2266      	movs	r2, #102	; 0x66
 800064a:	49a7      	ldr	r1, [pc, #668]	; (80008e8 <main+0x304>)
 800064c:	48a5      	ldr	r0, [pc, #660]	; (80008e4 <main+0x300>)
 800064e:	f003 fcd2 	bl	8003ff6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	2218      	movs	r2, #24
 8000658:	49a4      	ldr	r1, [pc, #656]	; (80008ec <main+0x308>)
 800065a:	48a2      	ldr	r0, [pc, #648]	; (80008e4 <main+0x300>)
 800065c:	f003 fccb 	bl	8003ff6 <HAL_UART_Transmit>
 // FIN POUR LE SHELL

 // init PWM

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000660:	2100      	movs	r1, #0
 8000662:	48a3      	ldr	r0, [pc, #652]	; (80008f0 <main+0x30c>)
 8000664:	f002 face 	bl	8002c04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000668:	2104      	movs	r1, #4
 800066a:	48a1      	ldr	r0, [pc, #644]	; (80008f0 <main+0x30c>)
 800066c:	f002 faca 	bl	8002c04 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000670:	2100      	movs	r1, #0
 8000672:	489f      	ldr	r0, [pc, #636]	; (80008f0 <main+0x30c>)
 8000674:	f003 fa2e 	bl	8003ad4 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000678:	2104      	movs	r1, #4
 800067a:	489d      	ldr	r0, [pc, #628]	; (80008f0 <main+0x30c>)
 800067c:	f003 fa2a 	bl	8003ad4 <HAL_TIMEx_PWMN_Start>
	{

/******************** BEGIN SHELL **************************/

		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 8000680:	4b9c      	ldr	r3, [pc, #624]	; (80008f4 <main+0x310>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d056      	beq.n	8000736 <main+0x152>
			switch(uartRxBuffer[0]){
 8000688:	4b94      	ldr	r3, [pc, #592]	; (80008dc <main+0x2f8>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b0d      	cmp	r3, #13
 800068e:	d002      	beq.n	8000696 <main+0xb2>
 8000690:	2b7f      	cmp	r3, #127	; 0x7f
 8000692:	d02d      	beq.n	80006f0 <main+0x10c>
 8000694:	e03c      	b.n	8000710 <main+0x12c>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	2203      	movs	r2, #3
 800069c:	4996      	ldr	r1, [pc, #600]	; (80008f8 <main+0x314>)
 800069e:	4891      	ldr	r0, [pc, #580]	; (80008e4 <main+0x300>)
 80006a0:	f003 fca9 	bl	8003ff6 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 80006a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006aa:	4413      	add	r3, r2
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
				argc = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	67bb      	str	r3, [r7, #120]	; 0x78
				token = strtok(cmdBuffer, " ");
 80006b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b8:	4990      	ldr	r1, [pc, #576]	; (80008fc <main+0x318>)
 80006ba:	4618      	mov	r0, r3
 80006bc:	f005 fcfc 	bl	80060b8 <strtok>
 80006c0:	6778      	str	r0, [r7, #116]	; 0x74
				while(token!=NULL){
 80006c2:	e00d      	b.n	80006e0 <main+0xfc>
					argv[argc++] = token;
 80006c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	67ba      	str	r2, [r7, #120]	; 0x78
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	3380      	adds	r3, #128	; 0x80
 80006ce:	443b      	add	r3, r7
 80006d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80006d2:	f843 2c80 	str.w	r2, [r3, #-128]
					token = strtok(NULL, " ");
 80006d6:	4989      	ldr	r1, [pc, #548]	; (80008fc <main+0x318>)
 80006d8:	2000      	movs	r0, #0
 80006da:	f005 fced 	bl	80060b8 <strtok>
 80006de:	6778      	str	r0, [r7, #116]	; 0x74
				while(token!=NULL){
 80006e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1ee      	bne.n	80006c4 <main+0xe0>
				}
				idx_cmd = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	67fb      	str	r3, [r7, #124]	; 0x7c
				newCmdReady = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 80006ee:	e01f      	b.n	8000730 <main+0x14c>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80006f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006f2:	1e5a      	subs	r2, r3, #1
 80006f4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80006f6:	3380      	adds	r3, #128	; 0x80
 80006f8:	443b      	add	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	f803 2c5c 	strb.w	r2, [r3, #-92]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
 8000704:	2201      	movs	r2, #1
 8000706:	4975      	ldr	r1, [pc, #468]	; (80008dc <main+0x2f8>)
 8000708:	4876      	ldr	r0, [pc, #472]	; (80008e4 <main+0x300>)
 800070a:	f003 fc74 	bl	8003ff6 <HAL_UART_Transmit>
				break;
 800070e:	e00f      	b.n	8000730 <main+0x14c>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000710:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000716:	4a71      	ldr	r2, [pc, #452]	; (80008dc <main+0x2f8>)
 8000718:	7812      	ldrb	r2, [r2, #0]
 800071a:	3380      	adds	r3, #128	; 0x80
 800071c:	443b      	add	r3, r7
 800071e:	f803 2c5c 	strb.w	r2, [r3, #-92]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
 8000726:	2201      	movs	r2, #1
 8000728:	496c      	ldr	r1, [pc, #432]	; (80008dc <main+0x2f8>)
 800072a:	486e      	ldr	r0, [pc, #440]	; (80008e4 <main+0x300>)
 800072c:	f003 fc63 	bl	8003ff6 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8000730:	4b70      	ldr	r3, [pc, #448]	; (80008f4 <main+0x310>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8000736:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0a1      	beq.n	8000680 <main+0x9c>
			if(strcmp(argv[0],"set")==0){
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	4970      	ldr	r1, [pc, #448]	; (8000900 <main+0x31c>)
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd6d 	bl	8000220 <strcmp>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d133      	bne.n	80007b4 <main+0x1d0>
				if(strcmp(argv[1],"PA5")==0){
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	496d      	ldr	r1, [pc, #436]	; (8000904 <main+0x320>)
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fd65 	bl	8000220 <strcmp>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d123      	bne.n	80007a4 <main+0x1c0>
					HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4618      	mov	r0, r3
 8000760:	f005 fc40 	bl	8005fe4 <atoi>
 8000764:	4603      	mov	r3, r0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	2120      	movs	r1, #32
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f001 f912 	bl	8001998 <HAL_GPIO_WritePin>
					stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	4618      	mov	r0, r3
 8000778:	f005 fc34 	bl	8005fe4 <atoi>
 800077c:	4603      	mov	r3, r0
 800077e:	4a62      	ldr	r2, [pc, #392]	; (8000908 <main+0x324>)
 8000780:	2140      	movs	r1, #64	; 0x40
 8000782:	4857      	ldr	r0, [pc, #348]	; (80008e0 <main+0x2fc>)
 8000784:	f005 fc64 	bl	8006050 <sniprintf>
 8000788:	4603      	mov	r3, r0
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b5f      	ldr	r3, [pc, #380]	; (800090c <main+0x328>)
 800078e:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8000790:	4b5e      	ldr	r3, [pc, #376]	; (800090c <main+0x328>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b29a      	uxth	r2, r3
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	4951      	ldr	r1, [pc, #324]	; (80008e0 <main+0x2fc>)
 800079c:	4851      	ldr	r0, [pc, #324]	; (80008e4 <main+0x300>)
 800079e:	f003 fc2a 	bl	8003ff6 <HAL_UART_Transmit>
 80007a2:	e10f      	b.n	80009c4 <main+0x3e0>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295
 80007a8:	2214      	movs	r2, #20
 80007aa:	4959      	ldr	r1, [pc, #356]	; (8000910 <main+0x32c>)
 80007ac:	484d      	ldr	r0, [pc, #308]	; (80008e4 <main+0x300>)
 80007ae:	f003 fc22 	bl	8003ff6 <HAL_UART_Transmit>
 80007b2:	e107      	b.n	80009c4 <main+0x3e0>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	4957      	ldr	r1, [pc, #348]	; (8000914 <main+0x330>)
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fd31 	bl	8000220 <strcmp>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d107      	bne.n	80007d4 <main+0x1f0>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	2214      	movs	r2, #20
 80007ca:	4951      	ldr	r1, [pc, #324]	; (8000910 <main+0x32c>)
 80007cc:	4845      	ldr	r0, [pc, #276]	; (80008e4 <main+0x300>)
 80007ce:	f003 fc12 	bl	8003ff6 <HAL_UART_Transmit>
 80007d2:	e0f7      	b.n	80009c4 <main+0x3e0>
			}
			else if (strcmp(argv[0],"help")==0){
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	4950      	ldr	r1, [pc, #320]	; (8000918 <main+0x334>)
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fd21 	bl	8000220 <strcmp>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d120      	bne.n	8000826 <main+0x242>
				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE," set PA5\r\n get\r\n start\r\n stop\r\n pinout\r\n");
 80007e4:	4a4d      	ldr	r2, [pc, #308]	; (800091c <main+0x338>)
 80007e6:	2140      	movs	r1, #64	; 0x40
 80007e8:	483d      	ldr	r0, [pc, #244]	; (80008e0 <main+0x2fc>)
 80007ea:	f005 fc31 	bl	8006050 <sniprintf>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b46      	ldr	r3, [pc, #280]	; (800090c <main+0x328>)
 80007f4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 80007f6:	4b45      	ldr	r3, [pc, #276]	; (800090c <main+0x328>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	4937      	ldr	r1, [pc, #220]	; (80008e0 <main+0x2fc>)
 8000802:	4838      	ldr	r0, [pc, #224]	; (80008e4 <main+0x300>)
 8000804:	f003 fbf7 	bl	8003ff6 <HAL_UART_Transmit>
				for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 8000808:	2300      	movs	r3, #0
 800080a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800080c:	e007      	b.n	800081e <main+0x23a>
					uartTxBuffer[i]=0;
 800080e:	4a34      	ldr	r2, [pc, #208]	; (80008e0 <main+0x2fc>)
 8000810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000812:	4413      	add	r3, r2
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
				for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 8000818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800081a:	3301      	adds	r3, #1
 800081c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800081e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000820:	2b3f      	cmp	r3, #63	; 0x3f
 8000822:	ddf4      	ble.n	800080e <main+0x22a>
 8000824:	e0ce      	b.n	80009c4 <main+0x3e0>
				}

			}
			else if (strcmp(argv[0],"pinout")==0){
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	493d      	ldr	r1, [pc, #244]	; (8000920 <main+0x33c>)
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fcf8 	bl	8000220 <strcmp>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d132      	bne.n	800089c <main+0x2b8>
				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE, " PA2:UART TX\r\n PA3:UART RX\r\n PA5:LED\r\n PA8:TIM1_CH1\r\n");
 8000836:	4a3b      	ldr	r2, [pc, #236]	; (8000924 <main+0x340>)
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	4829      	ldr	r0, [pc, #164]	; (80008e0 <main+0x2fc>)
 800083c:	f005 fc08 	bl	8006050 <sniprintf>
 8000840:	4603      	mov	r3, r0
 8000842:	b2da      	uxtb	r2, r3
 8000844:	4b31      	ldr	r3, [pc, #196]	; (800090c <main+0x328>)
 8000846:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8000848:	4b30      	ldr	r3, [pc, #192]	; (800090c <main+0x328>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b29a      	uxth	r2, r3
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	4923      	ldr	r1, [pc, #140]	; (80008e0 <main+0x2fc>)
 8000854:	4823      	ldr	r0, [pc, #140]	; (80008e4 <main+0x300>)
 8000856:	f003 fbce 	bl	8003ff6 <HAL_UART_Transmit>
				for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 800085a:	2300      	movs	r3, #0
 800085c:	66bb      	str	r3, [r7, #104]	; 0x68
 800085e:	e007      	b.n	8000870 <main+0x28c>
					uartTxBuffer[i]=0;
 8000860:	4a1f      	ldr	r2, [pc, #124]	; (80008e0 <main+0x2fc>)
 8000862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000864:	4413      	add	r3, r2
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
				for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 800086a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800086c:	3301      	adds	r3, #1
 800086e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000872:	2b3f      	cmp	r3, #63	; 0x3f
 8000874:	ddf4      	ble.n	8000860 <main+0x27c>
				}
				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE," PA9:TIM1_CH2\r\n PA11:TIM1_CH1N\r\n PA12:TIM1_CH2N\r\n");
 8000876:	4a2c      	ldr	r2, [pc, #176]	; (8000928 <main+0x344>)
 8000878:	2140      	movs	r1, #64	; 0x40
 800087a:	4819      	ldr	r0, [pc, #100]	; (80008e0 <main+0x2fc>)
 800087c:	f005 fbe8 	bl	8006050 <sniprintf>
 8000880:	4603      	mov	r3, r0
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <main+0x328>)
 8000886:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8000888:	4b20      	ldr	r3, [pc, #128]	; (800090c <main+0x328>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b29a      	uxth	r2, r3
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	4913      	ldr	r1, [pc, #76]	; (80008e0 <main+0x2fc>)
 8000894:	4813      	ldr	r0, [pc, #76]	; (80008e4 <main+0x300>)
 8000896:	f003 fbae 	bl	8003ff6 <HAL_UART_Transmit>
 800089a:	e093      	b.n	80009c4 <main+0x3e0>

			}
			else if (strcmp(argv[0],"start")==0){
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	4923      	ldr	r1, [pc, #140]	; (800092c <main+0x348>)
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fcbd 	bl	8000220 <strcmp>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d143      	bne.n	8000934 <main+0x350>
				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE,"Power ON\r\n",atoi(argv[2]));
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f005 fb98 	bl	8005fe4 <atoi>
 80008b4:	4603      	mov	r3, r0
 80008b6:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <main+0x34c>)
 80008b8:	2140      	movs	r1, #64	; 0x40
 80008ba:	4809      	ldr	r0, [pc, #36]	; (80008e0 <main+0x2fc>)
 80008bc:	f005 fbc8 	bl	8006050 <sniprintf>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <main+0x328>)
 80008c6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 80008c8:	4b10      	ldr	r3, [pc, #64]	; (800090c <main+0x328>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	4903      	ldr	r1, [pc, #12]	; (80008e0 <main+0x2fc>)
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <main+0x300>)
 80008d6:	f003 fb8e 	bl	8003ff6 <HAL_UART_Transmit>
 80008da:	e073      	b.n	80009c4 <main+0x3e0>
 80008dc:	20000204 	.word	0x20000204
 80008e0:	20000208 	.word	0x20000208
 80008e4:	20000170 	.word	0x20000170
 80008e8:	20000018 	.word	0x20000018
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000124 	.word	0x20000124
 80008f4:	20000200 	.word	0x20000200
 80008f8:	20000080 	.word	0x20000080
 80008fc:	0800760c 	.word	0x0800760c
 8000900:	08007610 	.word	0x08007610
 8000904:	08007614 	.word	0x08007614
 8000908:	08007618 	.word	0x08007618
 800090c:	20000248 	.word	0x20000248
 8000910:	20000084 	.word	0x20000084
 8000914:	08007634 	.word	0x08007634
 8000918:	08007638 	.word	0x08007638
 800091c:	08007640 	.word	0x08007640
 8000920:	0800766c 	.word	0x0800766c
 8000924:	08007674 	.word	0x08007674
 8000928:	080076ac 	.word	0x080076ac
 800092c:	080076e0 	.word	0x080076e0
 8000930:	080076e8 	.word	0x080076e8
			}
			else if (strcmp(argv[0],"stop")==0){
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	4928      	ldr	r1, [pc, #160]	; (80009d8 <main+0x3f4>)
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fc71 	bl	8000220 <strcmp>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d117      	bne.n	8000974 <main+0x390>
				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE,"Power OFF\r\n",atoi(argv[2]));
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4618      	mov	r0, r3
 8000948:	f005 fb4c 	bl	8005fe4 <atoi>
 800094c:	4603      	mov	r3, r0
 800094e:	4a23      	ldr	r2, [pc, #140]	; (80009dc <main+0x3f8>)
 8000950:	2140      	movs	r1, #64	; 0x40
 8000952:	4823      	ldr	r0, [pc, #140]	; (80009e0 <main+0x3fc>)
 8000954:	f005 fb7c 	bl	8006050 <sniprintf>
 8000958:	4603      	mov	r3, r0
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <main+0x400>)
 800095e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8000960:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <main+0x400>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b29a      	uxth	r2, r3
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	491d      	ldr	r1, [pc, #116]	; (80009e0 <main+0x3fc>)
 800096c:	481e      	ldr	r0, [pc, #120]	; (80009e8 <main+0x404>)
 800096e:	f003 fb42 	bl	8003ff6 <HAL_UART_Transmit>
 8000972:	e027      	b.n	80009c4 <main+0x3e0>
			}
			else if(strcmp(argv[0],"alpha")==0){
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	491d      	ldr	r1, [pc, #116]	; (80009ec <main+0x408>)
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fc51 	bl	8000220 <strcmp>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d118      	bne.n	80009b6 <main+0x3d2>
				alpha = atoi(argv[1]);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4618      	mov	r0, r3
 8000988:	f005 fb2c 	bl	8005fe4 <atoi>
 800098c:	6678      	str	r0, [r7, #100]	; 0x64
				TIM1->CCR1=(5312*alpha)/100;
 800098e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000990:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8000994:	fb02 f303 	mul.w	r3, r2, r3
 8000998:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <main+0x40c>)
 800099a:	fb82 1203 	smull	r1, r2, r2, r3
 800099e:	1152      	asrs	r2, r2, #5
 80009a0:	17db      	asrs	r3, r3, #31
 80009a2:	1ad2      	subs	r2, r2, r3
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <main+0x410>)
 80009a6:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2=(5312-TIM1->CCR1);
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <main+0x410>)
 80009aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ac:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <main+0x410>)
 80009ae:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 80009b2:	6393      	str	r3, [r2, #56]	; 0x38
 80009b4:	e006      	b.n	80009c4 <main+0x3e0>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	2214      	movs	r2, #20
 80009bc:	490e      	ldr	r1, [pc, #56]	; (80009f8 <main+0x414>)
 80009be:	480a      	ldr	r0, [pc, #40]	; (80009e8 <main+0x404>)
 80009c0:	f003 fb19 	bl	8003ff6 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295
 80009c8:	2218      	movs	r2, #24
 80009ca:	490c      	ldr	r1, [pc, #48]	; (80009fc <main+0x418>)
 80009cc:	4806      	ldr	r0, [pc, #24]	; (80009e8 <main+0x404>)
 80009ce:	f003 fb12 	bl	8003ff6 <HAL_UART_Transmit>
			newCmdReady = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	673b      	str	r3, [r7, #112]	; 0x70
		if(uartRxReceived){
 80009d6:	e653      	b.n	8000680 <main+0x9c>
 80009d8:	080076f4 	.word	0x080076f4
 80009dc:	080076fc 	.word	0x080076fc
 80009e0:	20000208 	.word	0x20000208
 80009e4:	20000248 	.word	0x20000248
 80009e8:	20000170 	.word	0x20000170
 80009ec:	08007708 	.word	0x08007708
 80009f0:	51eb851f 	.word	0x51eb851f
 80009f4:	40012c00 	.word	0x40012c00
 80009f8:	20000084 	.word	0x20000084
 80009fc:	20000000 	.word	0x20000000

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	; 0x50
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0318 	add.w	r3, r7, #24
 8000a0a:	2238      	movs	r2, #56	; 0x38
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f005 fb16 	bl	8006040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 ffd0 	bl	80019c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a32:	2340      	movs	r3, #64	; 0x40
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a36:	2302      	movs	r3, #2
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a42:	2355      	movs	r3, #85	; 0x55
 8000a44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a52:	f107 0318 	add.w	r3, r7, #24
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 f85a 	bl	8001b10 <HAL_RCC_OscConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a62:	f000 f98b 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a66:	230f      	movs	r3, #15
 8000a68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 fb5e 	bl	8002140 <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a8a:	f000 f977 	bl	8000d7c <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3750      	adds	r7, #80	; 0x50
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b098      	sub	sp, #96	; 0x60
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aaa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	615a      	str	r2, [r3, #20]
 8000abc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2234      	movs	r2, #52	; 0x34
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f005 fabb 	bl	8006040 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aca:	4b43      	ldr	r3, [pc, #268]	; (8000bd8 <MX_TIM1_Init+0x140>)
 8000acc:	4a43      	ldr	r2, [pc, #268]	; (8000bdc <MX_TIM1_Init+0x144>)
 8000ace:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ad0:	4b41      	ldr	r3, [pc, #260]	; (8000bd8 <MX_TIM1_Init+0x140>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000ad6:	4b40      	ldr	r3, [pc, #256]	; (8000bd8 <MX_TIM1_Init+0x140>)
 8000ad8:	2220      	movs	r2, #32
 8000ada:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5311;
 8000adc:	4b3e      	ldr	r3, [pc, #248]	; (8000bd8 <MX_TIM1_Init+0x140>)
 8000ade:	f241 42bf 	movw	r2, #5311	; 0x14bf
 8000ae2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b3c      	ldr	r3, [pc, #240]	; (8000bd8 <MX_TIM1_Init+0x140>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aea:	4b3b      	ldr	r3, [pc, #236]	; (8000bd8 <MX_TIM1_Init+0x140>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af0:	4b39      	ldr	r3, [pc, #228]	; (8000bd8 <MX_TIM1_Init+0x140>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af6:	4838      	ldr	r0, [pc, #224]	; (8000bd8 <MX_TIM1_Init+0x140>)
 8000af8:	f002 f82c 	bl	8002b54 <HAL_TIM_PWM_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b02:	f000 f93b 	bl	8000d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b16:	4619      	mov	r1, r3
 8000b18:	482f      	ldr	r0, [pc, #188]	; (8000bd8 <MX_TIM1_Init+0x140>)
 8000b1a:	f003 f88f 	bl	8003c3c <HAL_TIMEx_MasterConfigSynchronization>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b24:	f000 f92a 	bl	8000d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b28:	2360      	movs	r3, #96	; 0x60
 8000b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 3984;
 8000b2c:	f44f 6379 	mov.w	r3, #3984	; 0xf90
 8000b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b32:	2300      	movs	r3, #0
 8000b34:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b36:	2300      	movs	r3, #0
 8000b38:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4822      	ldr	r0, [pc, #136]	; (8000bd8 <MX_TIM1_Init+0x140>)
 8000b50:	f002 fad8 	bl	8003104 <HAL_TIM_PWM_ConfigChannel>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000b5a:	f000 f90f 	bl	8000d7c <Error_Handler>
  }
  sConfigOC.Pulse = 1328;
 8000b5e:	f44f 63a6 	mov.w	r3, #1328	; 0x530
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b68:	2204      	movs	r2, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	481a      	ldr	r0, [pc, #104]	; (8000bd8 <MX_TIM1_Init+0x140>)
 8000b6e:	f002 fac9 	bl	8003104 <HAL_TIM_PWM_ConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000b78:	f000 f900 	bl	8000d7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 207;
 8000b88:	23cf      	movs	r3, #207	; 0xcf
 8000b8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_TIM1_Init+0x140>)
 8000bba:	f003 f8c1 	bl	8003d40 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000bc4:	f000 f8da 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <MX_TIM1_Init+0x140>)
 8000bca:	f000 f921 	bl	8000e10 <HAL_TIM_MspPostInit>

}
 8000bce:	bf00      	nop
 8000bd0:	3760      	adds	r7, #96	; 0x60
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000124 	.word	0x20000124
 8000bdc:	40012c00 	.word	0x40012c00

08000be0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000be6:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c28:	4811      	ldr	r0, [pc, #68]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c2a:	f003 f994 	bl	8003f56 <HAL_UART_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c34:	f000 f8a2 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	480d      	ldr	r0, [pc, #52]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c3c:	f005 f907 	bl	8005e4e <HAL_UARTEx_SetTxFifoThreshold>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c46:	f000 f899 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c4e:	f005 f93c 	bl	8005eca <HAL_UARTEx_SetRxFifoThreshold>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c58:	f000 f890 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c5e:	f005 f8bd 	bl	8005ddc <HAL_UARTEx_DisableFifoMode>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c68:	f000 f888 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000170 	.word	0x20000170
 8000c74:	40004400 	.word	0x40004400

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <MX_GPIO_Init+0xac>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a24      	ldr	r2, [pc, #144]	; (8000d24 <MX_GPIO_Init+0xac>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <MX_GPIO_Init+0xac>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MX_GPIO_Init+0xac>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a1e      	ldr	r2, [pc, #120]	; (8000d24 <MX_GPIO_Init+0xac>)
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_GPIO_Init+0xac>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <MX_GPIO_Init+0xac>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a18      	ldr	r2, [pc, #96]	; (8000d24 <MX_GPIO_Init+0xac>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_GPIO_Init+0xac>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2120      	movs	r1, #32
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cde:	f000 fe5b 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480b      	ldr	r0, [pc, #44]	; (8000d28 <MX_GPIO_Init+0xb0>)
 8000cfa:	f000 fccb 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000cfe:	2320      	movs	r3, #32
 8000d00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f000 fcbc 	bl	8001694 <HAL_GPIO_Init>

}
 8000d1c:	bf00      	nop
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40021000 	.word	0x40021000
 8000d28:	48000800 	.word	0x48000800

08000d2c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <HAL_UART_RxCpltCallback+0x20>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4904      	ldr	r1, [pc, #16]	; (8000d50 <HAL_UART_RxCpltCallback+0x24>)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_UART_RxCpltCallback+0x28>)
 8000d40:	f003 f9f0 	bl	8004124 <HAL_UART_Receive_IT>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000200 	.word	0x20000200
 8000d50:	20000204 	.word	0x20000204
 8000d54:	20000170 	.word	0x20000170

08000d58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d101      	bne.n	8000d6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d6a:	f000 fab3 	bl	80012d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40001000 	.word	0x40001000

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d84:	e7fe      	b.n	8000d84 <Error_Handler+0x8>
	...

08000d88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_MspInit+0x44>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_MspInit+0x44>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6613      	str	r3, [r2, #96]	; 0x60
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_MspInit+0x44>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_MspInit+0x44>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <HAL_MspInit+0x44>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	6593      	str	r3, [r2, #88]	; 0x58
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_MspInit+0x44>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_TIM_PWM_MspInit+0x38>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10b      	bne.n	8000dfa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_TIM_PWM_MspInit+0x3c>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <HAL_TIM_PWM_MspInit+0x3c>)
 8000de8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dec:	6613      	str	r3, [r2, #96]	; 0x60
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <HAL_TIM_PWM_MspInit+0x3c>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40012c00 	.word	0x40012c00
 8000e0c:	40021000 	.word	0x40021000

08000e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <HAL_TIM_MspPostInit+0x68>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d11d      	bne.n	8000e6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_TIM_MspPostInit+0x6c>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <HAL_TIM_MspPostInit+0x6c>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_TIM_MspPostInit+0x6c>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000e4a:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000e4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e5c:	2306      	movs	r3, #6
 8000e5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4619      	mov	r1, r3
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f000 fc13 	bl	8001694 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3720      	adds	r7, #32
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40012c00 	.word	0x40012c00
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b09a      	sub	sp, #104	; 0x68
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	2244      	movs	r2, #68	; 0x44
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f005 f8cd 	bl	8006040 <memset>
  if(huart->Instance==USART2)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a23      	ldr	r2, [pc, #140]	; (8000f38 <HAL_UART_MspInit+0xb8>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d13e      	bne.n	8000f2e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f001 fb8d 	bl	80025dc <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ec8:	f7ff ff58 	bl	8000d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <HAL_UART_MspInit+0xbc>)
 8000ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed0:	4a1a      	ldr	r2, [pc, #104]	; (8000f3c <HAL_UART_MspInit+0xbc>)
 8000ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_UART_MspInit+0xbc>)
 8000eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_UART_MspInit+0xbc>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <HAL_UART_MspInit+0xbc>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_UART_MspInit+0xbc>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000efc:	230c      	movs	r3, #12
 8000efe:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f14:	4619      	mov	r1, r3
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1a:	f000 fbbb 	bl	8001694 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2026      	movs	r0, #38	; 0x26
 8000f24:	f000 face 	bl	80014c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f28:	2026      	movs	r0, #38	; 0x26
 8000f2a:	f000 fae5 	bl	80014f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3768      	adds	r7, #104	; 0x68
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40004400 	.word	0x40004400
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	; 0x30
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f56:	4b2d      	ldr	r3, [pc, #180]	; (800100c <HAL_InitTick+0xcc>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	4a2c      	ldr	r2, [pc, #176]	; (800100c <HAL_InitTick+0xcc>)
 8000f5c:	f043 0310 	orr.w	r3, r3, #16
 8000f60:	6593      	str	r3, [r2, #88]	; 0x58
 8000f62:	4b2a      	ldr	r3, [pc, #168]	; (800100c <HAL_InitTick+0xcc>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	f003 0310 	and.w	r3, r3, #16
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f6e:	f107 020c 	add.w	r2, r7, #12
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f001 fab7 	bl	80024ec <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f7e:	f001 fa89 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8000f82:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f86:	4a22      	ldr	r2, [pc, #136]	; (8001010 <HAL_InitTick+0xd0>)
 8000f88:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8c:	0c9b      	lsrs	r3, r3, #18
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <HAL_InitTick+0xd4>)
 8000f94:	4a20      	ldr	r2, [pc, #128]	; (8001018 <HAL_InitTick+0xd8>)
 8000f96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_InitTick+0xd4>)
 8000f9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fa0:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <HAL_InitTick+0xd4>)
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_InitTick+0xd4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_InitTick+0xd4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000fb2:	4818      	ldr	r0, [pc, #96]	; (8001014 <HAL_InitTick+0xd4>)
 8000fb4:	f001 fd02 	bl	80029bc <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d11b      	bne.n	8000ffe <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000fc6:	4813      	ldr	r0, [pc, #76]	; (8001014 <HAL_InitTick+0xd4>)
 8000fc8:	f001 fd5a 	bl	8002a80 <HAL_TIM_Base_Start_IT>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d111      	bne.n	8000ffe <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fda:	2036      	movs	r0, #54	; 0x36
 8000fdc:	f000 fa8c 	bl	80014f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	d808      	bhi.n	8000ff8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	2036      	movs	r0, #54	; 0x36
 8000fec:	f000 fa6a 	bl	80014c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_InitTick+0xdc>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e002      	b.n	8000ffe <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001002:	4618      	mov	r0, r3
 8001004:	3730      	adds	r7, #48	; 0x30
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000
 8001010:	431bde83 	.word	0x431bde83
 8001014:	2000024c 	.word	0x2000024c
 8001018:	40001000 	.word	0x40001000
 800101c:	2000009c 	.word	0x2000009c

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <USART2_IRQHandler+0x10>)
 800107e:	f003 f8a7 	bl	80041d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000170 	.word	0x20000170

0800108c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <TIM6_DAC_IRQHandler+0x10>)
 8001092:	f001 feb7 	bl	8002e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000024c 	.word	0x2000024c

080010a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	return 1;
 80010a4:	2301      	movs	r3, #1
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <_kill>:

int _kill(int pid, int sig)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010ba:	f004 ff97 	bl	8005fec <__errno>
 80010be:	4603      	mov	r3, r0
 80010c0:	2216      	movs	r2, #22
 80010c2:	601a      	str	r2, [r3, #0]
	return -1;
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <_exit>:

void _exit (int status)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ffe7 	bl	80010b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010e2:	e7fe      	b.n	80010e2 <_exit+0x12>

080010e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	e00a      	b.n	800110c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010f6:	f3af 8000 	nop.w
 80010fa:	4601      	mov	r1, r0
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	60ba      	str	r2, [r7, #8]
 8001102:	b2ca      	uxtb	r2, r1
 8001104:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	dbf0      	blt.n	80010f6 <_read+0x12>
	}

return len;
 8001114:	687b      	ldr	r3, [r7, #4]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e009      	b.n	8001144 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	60ba      	str	r2, [r7, #8]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbf1      	blt.n	8001130 <_write+0x12>
	}
	return len;
 800114c:	687b      	ldr	r3, [r7, #4]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <_close>:

int _close(int file)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
	return -1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800117e:	605a      	str	r2, [r3, #4]
	return 0;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <_isatty>:

int _isatty(int file)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
	return 1;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
	return 0;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <_sbrk+0x5c>)
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <_sbrk+0x60>)
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <_sbrk+0x64>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <_sbrk+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d207      	bcs.n	8001200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f0:	f004 fefc 	bl	8005fec <__errno>
 80011f4:	4603      	mov	r3, r0
 80011f6:	220c      	movs	r2, #12
 80011f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	e009      	b.n	8001214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <_sbrk+0x64>)
 8001210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20008000 	.word	0x20008000
 8001220:	00000400 	.word	0x00000400
 8001224:	20000298 	.word	0x20000298
 8001228:	200002b0 	.word	0x200002b0

0800122c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <SystemInit+0x20>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <SystemInit+0x20>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001252:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <LoopForever+0x6>)
  ldr r1, =_edata
 8001256:	490e      	ldr	r1, [pc, #56]	; (8001290 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <LoopForever+0xe>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <LoopForever+0x12>)
  ldr r4, =_ebss
 800126c:	4c0b      	ldr	r4, [pc, #44]	; (800129c <LoopForever+0x16>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800127a:	f7ff ffd7 	bl	800122c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127e:	f004 febb 	bl	8005ff8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001282:	f7ff f9af 	bl	80005e4 <main>

08001286 <LoopForever>:

LoopForever:
    b LoopForever
 8001286:	e7fe      	b.n	8001286 <LoopForever>
  ldr   r0, =_estack
 8001288:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001294:	080079a8 	.word	0x080079a8
  ldr r2, =_sbss
 8001298:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 800129c:	200002b0 	.word	0x200002b0

080012a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC1_2_IRQHandler>

080012a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f000 f8fe 	bl	80014ae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b2:	200f      	movs	r0, #15
 80012b4:	f7ff fe44 	bl	8000f40 <HAL_InitTick>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d002      	beq.n	80012c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	71fb      	strb	r3, [r7, #7]
 80012c2:	e001      	b.n	80012c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c4:	f7ff fd60 	bl	8000d88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012c8:	79fb      	ldrb	r3, [r7, #7]

}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_IncTick+0x1c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_IncTick+0x20>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <HAL_IncTick+0x1c>)
 80012e4:	6013      	str	r3, [r2, #0]
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	2000029c 	.word	0x2000029c
 80012f4:	200000a0 	.word	0x200000a0

080012f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_GetTick+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	2000029c 	.word	0x2000029c

08001310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001318:	f7ff ffee 	bl	80012f8 <HAL_GetTick>
 800131c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001328:	d004      	beq.n	8001334 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_Delay+0x40>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001334:	bf00      	nop
 8001336:	f7ff ffdf 	bl	80012f8 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	429a      	cmp	r2, r3
 8001344:	d8f7      	bhi.n	8001336 <HAL_Delay+0x26>
  {
  }
}
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200000a0 	.word	0x200000a0

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ff4c 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d2:	f7ff ff63 	bl	800139c <__NVIC_GetPriorityGrouping>
 80014d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	68b9      	ldr	r1, [r7, #8]
 80014dc:	6978      	ldr	r0, [r7, #20]
 80014de:	f7ff ffb3 	bl	8001448 <NVIC_EncodePriority>
 80014e2:	4602      	mov	r2, r0
 80014e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e8:	4611      	mov	r1, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff82 	bl	80013f4 <__NVIC_SetPriority>
}
 80014f0:	bf00      	nop
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff56 	bl	80013b8 <__NVIC_EnableIRQ>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d005      	beq.n	8001538 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2204      	movs	r2, #4
 8001530:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	e037      	b.n	80015a8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 020e 	bic.w	r2, r2, #14
 8001546:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001552:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001556:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	2101      	movs	r1, #1
 8001576:	fa01 f202 	lsl.w	r2, r1, r2
 800157a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001584:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00c      	beq.n	80015a8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800159c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015a6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d00d      	beq.n	80015fa <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2204      	movs	r2, #4
 80015e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e047      	b.n	800168a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 020e 	bic.w	r2, r2, #14
 8001608:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001628:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f003 021f 	and.w	r2, r3, #31
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	2101      	movs	r1, #1
 8001638:	fa01 f202 	lsl.w	r2, r1, r2
 800163c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001646:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00c      	beq.n	800166a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800165e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001668:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	4798      	blx	r3
    }
  }
  return status;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016a2:	e15a      	b.n	800195a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2101      	movs	r1, #1
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	4013      	ands	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 814c 	beq.w	8001954 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d005      	beq.n	80016d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d130      	bne.n	8001736 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2203      	movs	r2, #3
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800170a:	2201      	movs	r2, #1
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	f003 0201 	and.w	r2, r3, #1
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b03      	cmp	r3, #3
 8001740:	d017      	beq.n	8001772 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	2203      	movs	r2, #3
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d123      	bne.n	80017c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	08da      	lsrs	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3208      	adds	r2, #8
 8001786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	220f      	movs	r2, #15
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	691a      	ldr	r2, [r3, #16]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	08da      	lsrs	r2, r3, #3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3208      	adds	r2, #8
 80017c0:	6939      	ldr	r1, [r7, #16]
 80017c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2203      	movs	r2, #3
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0203 	and.w	r2, r3, #3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 80a6 	beq.w	8001954 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001808:	4b5b      	ldr	r3, [pc, #364]	; (8001978 <HAL_GPIO_Init+0x2e4>)
 800180a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180c:	4a5a      	ldr	r2, [pc, #360]	; (8001978 <HAL_GPIO_Init+0x2e4>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6613      	str	r3, [r2, #96]	; 0x60
 8001814:	4b58      	ldr	r3, [pc, #352]	; (8001978 <HAL_GPIO_Init+0x2e4>)
 8001816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001820:	4a56      	ldr	r2, [pc, #344]	; (800197c <HAL_GPIO_Init+0x2e8>)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	3302      	adds	r3, #2
 8001828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	220f      	movs	r2, #15
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800184a:	d01f      	beq.n	800188c <HAL_GPIO_Init+0x1f8>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a4c      	ldr	r2, [pc, #304]	; (8001980 <HAL_GPIO_Init+0x2ec>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d019      	beq.n	8001888 <HAL_GPIO_Init+0x1f4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a4b      	ldr	r2, [pc, #300]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d013      	beq.n	8001884 <HAL_GPIO_Init+0x1f0>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a4a      	ldr	r2, [pc, #296]	; (8001988 <HAL_GPIO_Init+0x2f4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d00d      	beq.n	8001880 <HAL_GPIO_Init+0x1ec>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a49      	ldr	r2, [pc, #292]	; (800198c <HAL_GPIO_Init+0x2f8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d007      	beq.n	800187c <HAL_GPIO_Init+0x1e8>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a48      	ldr	r2, [pc, #288]	; (8001990 <HAL_GPIO_Init+0x2fc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d101      	bne.n	8001878 <HAL_GPIO_Init+0x1e4>
 8001874:	2305      	movs	r3, #5
 8001876:	e00a      	b.n	800188e <HAL_GPIO_Init+0x1fa>
 8001878:	2306      	movs	r3, #6
 800187a:	e008      	b.n	800188e <HAL_GPIO_Init+0x1fa>
 800187c:	2304      	movs	r3, #4
 800187e:	e006      	b.n	800188e <HAL_GPIO_Init+0x1fa>
 8001880:	2303      	movs	r3, #3
 8001882:	e004      	b.n	800188e <HAL_GPIO_Init+0x1fa>
 8001884:	2302      	movs	r3, #2
 8001886:	e002      	b.n	800188e <HAL_GPIO_Init+0x1fa>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_GPIO_Init+0x1fa>
 800188c:	2300      	movs	r3, #0
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	f002 0203 	and.w	r2, r2, #3
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	4093      	lsls	r3, r2
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800189e:	4937      	ldr	r1, [pc, #220]	; (800197c <HAL_GPIO_Init+0x2e8>)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3302      	adds	r3, #2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018ac:	4b39      	ldr	r3, [pc, #228]	; (8001994 <HAL_GPIO_Init+0x300>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018d0:	4a30      	ldr	r2, [pc, #192]	; (8001994 <HAL_GPIO_Init+0x300>)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <HAL_GPIO_Init+0x300>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018fa:	4a26      	ldr	r2, [pc, #152]	; (8001994 <HAL_GPIO_Init+0x300>)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_GPIO_Init+0x300>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001924:	4a1b      	ldr	r2, [pc, #108]	; (8001994 <HAL_GPIO_Init+0x300>)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <HAL_GPIO_Init+0x300>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800194e:	4a11      	ldr	r2, [pc, #68]	; (8001994 <HAL_GPIO_Init+0x300>)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	f47f ae9d 	bne.w	80016a4 <HAL_GPIO_Init+0x10>
  }
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	371c      	adds	r7, #28
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	40021000 	.word	0x40021000
 800197c:	40010000 	.word	0x40010000
 8001980:	48000400 	.word	0x48000400
 8001984:	48000800 	.word	0x48000800
 8001988:	48000c00 	.word	0x48000c00
 800198c:	48001000 	.word	0x48001000
 8001990:	48001400 	.word	0x48001400
 8001994:	40010400 	.word	0x40010400

08001998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
 80019a4:	4613      	mov	r3, r2
 80019a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a8:	787b      	ldrb	r3, [r7, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b4:	e002      	b.n	80019bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d141      	bne.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019d6:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e2:	d131      	bne.n	8001a48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019e4:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ea:	4a46      	ldr	r2, [pc, #280]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f4:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019fc:	4a41      	ldr	r2, [pc, #260]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a04:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2232      	movs	r2, #50	; 0x32
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	4a3f      	ldr	r2, [pc, #252]	; (8001b0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	0c9b      	lsrs	r3, r3, #18
 8001a16:	3301      	adds	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a1a:	e002      	b.n	8001a22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a22:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2e:	d102      	bne.n	8001a36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f2      	bne.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a36:	4b33      	ldr	r3, [pc, #204]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a42:	d158      	bne.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e057      	b.n	8001af8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a48:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a4e:	4a2d      	ldr	r2, [pc, #180]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a58:	e04d      	b.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a60:	d141      	bne.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a62:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6e:	d131      	bne.n	8001ad4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a76:	4a23      	ldr	r2, [pc, #140]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a80:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a88:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2232      	movs	r2, #50	; 0x32
 8001a96:	fb02 f303 	mul.w	r3, r2, r3
 8001a9a:	4a1c      	ldr	r2, [pc, #112]	; (8001b0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	0c9b      	lsrs	r3, r3, #18
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aa6:	e002      	b.n	8001aae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aba:	d102      	bne.n	8001ac2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f2      	bne.n	8001aa8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ace:	d112      	bne.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e011      	b.n	8001af8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ae4:	e007      	b.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	40007000 	.word	0x40007000
 8001b08:	20000098 	.word	0x20000098
 8001b0c:	431bde83 	.word	0x431bde83

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e306      	b.n	8002130 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d075      	beq.n	8001c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b2e:	4b97      	ldr	r3, [pc, #604]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b38:	4b94      	ldr	r3, [pc, #592]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b0c      	cmp	r3, #12
 8001b46:	d102      	bne.n	8001b4e <HAL_RCC_OscConfig+0x3e>
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d002      	beq.n	8001b54 <HAL_RCC_OscConfig+0x44>
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d10b      	bne.n	8001b6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	4b8d      	ldr	r3, [pc, #564]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d05b      	beq.n	8001c18 <HAL_RCC_OscConfig+0x108>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d157      	bne.n	8001c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e2e1      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d106      	bne.n	8001b84 <HAL_RCC_OscConfig+0x74>
 8001b76:	4b85      	ldr	r3, [pc, #532]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a84      	ldr	r2, [pc, #528]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e01d      	b.n	8001bc0 <HAL_RCC_OscConfig+0xb0>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x98>
 8001b8e:	4b7f      	ldr	r3, [pc, #508]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a7e      	ldr	r2, [pc, #504]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b7c      	ldr	r3, [pc, #496]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a7b      	ldr	r2, [pc, #492]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0xb0>
 8001ba8:	4b78      	ldr	r3, [pc, #480]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a77      	ldr	r2, [pc, #476]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b75      	ldr	r3, [pc, #468]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a74      	ldr	r2, [pc, #464]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fb96 	bl	80012f8 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fb92 	bl	80012f8 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e2a6      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be2:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xc0>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fb82 	bl	80012f8 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fb7e 	bl	80012f8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e292      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c0a:	4b60      	ldr	r3, [pc, #384]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xe8>
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d075      	beq.n	8001d12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c26:	4b59      	ldr	r3, [pc, #356]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c30:	4b56      	ldr	r3, [pc, #344]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	d102      	bne.n	8001c46 <HAL_RCC_OscConfig+0x136>
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d002      	beq.n	8001c4c <HAL_RCC_OscConfig+0x13c>
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d11f      	bne.n	8001c8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c4c:	4b4f      	ldr	r3, [pc, #316]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_OscConfig+0x154>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e265      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c64:	4b49      	ldr	r3, [pc, #292]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	061b      	lsls	r3, r3, #24
 8001c72:	4946      	ldr	r1, [pc, #280]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c78:	4b45      	ldr	r3, [pc, #276]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f95f 	bl	8000f40 <HAL_InitTick>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d043      	beq.n	8001d10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e251      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d023      	beq.n	8001cdc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c94:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a3c      	ldr	r2, [pc, #240]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fb2a 	bl	80012f8 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fb26 	bl	80012f8 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e23a      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cba:	4b34      	ldr	r3, [pc, #208]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc6:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	061b      	lsls	r3, r3, #24
 8001cd4:	492d      	ldr	r1, [pc, #180]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
 8001cda:	e01a      	b.n	8001d12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a2a      	ldr	r2, [pc, #168]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fb06 	bl	80012f8 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fb02 	bl	80012f8 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e216      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d02:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x1e0>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d041      	beq.n	8001da2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d01c      	beq.n	8001d60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2c:	4a17      	ldr	r2, [pc, #92]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d36:	f7ff fadf 	bl	80012f8 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fadb 	bl	80012f8 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e1ef      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0ef      	beq.n	8001d3e <HAL_RCC_OscConfig+0x22e>
 8001d5e:	e020      	b.n	8001da2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d66:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff fac2 	bl	80012f8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d76:	e00d      	b.n	8001d94 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff fabe 	bl	80012f8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d906      	bls.n	8001d94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e1d2      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d94:	4b8c      	ldr	r3, [pc, #560]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1ea      	bne.n	8001d78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80a6 	beq.w	8001efc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db0:	2300      	movs	r3, #0
 8001db2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001db4:	4b84      	ldr	r3, [pc, #528]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x2b4>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x2b6>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00d      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	4b7f      	ldr	r3, [pc, #508]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	4a7e      	ldr	r2, [pc, #504]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd6:	4b7c      	ldr	r3, [pc, #496]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001de2:	2301      	movs	r3, #1
 8001de4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de6:	4b79      	ldr	r3, [pc, #484]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d118      	bne.n	8001e24 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df2:	4b76      	ldr	r3, [pc, #472]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a75      	ldr	r2, [pc, #468]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fa7b 	bl	80012f8 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e06:	f7ff fa77 	bl	80012f8 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e18b      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e18:	4b6c      	ldr	r3, [pc, #432]	; (8001fcc <HAL_RCC_OscConfig+0x4bc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d108      	bne.n	8001e3e <HAL_RCC_OscConfig+0x32e>
 8001e2c:	4b66      	ldr	r3, [pc, #408]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	4a65      	ldr	r2, [pc, #404]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e3c:	e024      	b.n	8001e88 <HAL_RCC_OscConfig+0x378>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d110      	bne.n	8001e68 <HAL_RCC_OscConfig+0x358>
 8001e46:	4b60      	ldr	r3, [pc, #384]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4c:	4a5e      	ldr	r2, [pc, #376]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e56:	4b5c      	ldr	r3, [pc, #368]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5c:	4a5a      	ldr	r2, [pc, #360]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e66:	e00f      	b.n	8001e88 <HAL_RCC_OscConfig+0x378>
 8001e68:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	4a56      	ldr	r2, [pc, #344]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e78:	4b53      	ldr	r3, [pc, #332]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7e:	4a52      	ldr	r2, [pc, #328]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d016      	beq.n	8001ebe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e90:	f7ff fa32 	bl	80012f8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e98:	f7ff fa2e 	bl	80012f8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e140      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eae:	4b46      	ldr	r3, [pc, #280]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ed      	beq.n	8001e98 <HAL_RCC_OscConfig+0x388>
 8001ebc:	e015      	b.n	8001eea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebe:	f7ff fa1b 	bl	80012f8 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec4:	e00a      	b.n	8001edc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f7ff fa17 	bl	80012f8 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e129      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001edc:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1ed      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eea:	7ffb      	ldrb	r3, [r7, #31]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef0:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	4a34      	ldr	r2, [pc, #208]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d03c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01c      	beq.n	8001f4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f10:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f16:	4a2c      	ldr	r2, [pc, #176]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7ff f9ea 	bl	80012f8 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f28:	f7ff f9e6 	bl	80012f8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e0fa      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f3a:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ef      	beq.n	8001f28 <HAL_RCC_OscConfig+0x418>
 8001f48:	e01b      	b.n	8001f82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f4a:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f50:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5a:	f7ff f9cd 	bl	80012f8 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f62:	f7ff f9c9 	bl	80012f8 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0dd      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f74:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1ef      	bne.n	8001f62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 80d1 	beq.w	800212e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b0c      	cmp	r3, #12
 8001f96:	f000 808b 	beq.w	80020b0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d15e      	bne.n	8002060 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <HAL_RCC_OscConfig+0x4b8>)
 8001fa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fae:	f7ff f9a3 	bl	80012f8 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb4:	e00c      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7ff f99f 	bl	80012f8 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d905      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e0b3      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd0:	4b59      	ldr	r3, [pc, #356]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ec      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fdc:	4b56      	ldr	r3, [pc, #344]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	4b56      	ldr	r3, [pc, #344]	; (800213c <HAL_RCC_OscConfig+0x62c>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6a11      	ldr	r1, [r2, #32]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fec:	3a01      	subs	r2, #1
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	4311      	orrs	r1, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001ff6:	0212      	lsls	r2, r2, #8
 8001ff8:	4311      	orrs	r1, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ffe:	0852      	lsrs	r2, r2, #1
 8002000:	3a01      	subs	r2, #1
 8002002:	0552      	lsls	r2, r2, #21
 8002004:	4311      	orrs	r1, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800200a:	0852      	lsrs	r2, r2, #1
 800200c:	3a01      	subs	r2, #1
 800200e:	0652      	lsls	r2, r2, #25
 8002010:	4311      	orrs	r1, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002016:	06d2      	lsls	r2, r2, #27
 8002018:	430a      	orrs	r2, r1
 800201a:	4947      	ldr	r1, [pc, #284]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 800201c:	4313      	orrs	r3, r2
 800201e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002020:	4b45      	ldr	r3, [pc, #276]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a44      	ldr	r2, [pc, #272]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 8002026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800202a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800202c:	4b42      	ldr	r3, [pc, #264]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a41      	ldr	r2, [pc, #260]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 8002032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002036:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff f95e 	bl	80012f8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002040:	f7ff f95a 	bl	80012f8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e06e      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002052:	4b39      	ldr	r3, [pc, #228]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x530>
 800205e:	e066      	b.n	800212e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002060:	4b35      	ldr	r3, [pc, #212]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a34      	ldr	r2, [pc, #208]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 8002066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800206a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800206c:	4b32      	ldr	r3, [pc, #200]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4a31      	ldr	r2, [pc, #196]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002078:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a2e      	ldr	r2, [pc, #184]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 800207e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002086:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff f936 	bl	80012f8 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002090:	f7ff f932 	bl	80012f8 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e046      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a2:	4b25      	ldr	r3, [pc, #148]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x580>
 80020ae:	e03e      	b.n	800212e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e039      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020bc:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <HAL_RCC_OscConfig+0x628>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 0203 	and.w	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d12c      	bne.n	800212a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	3b01      	subs	r3, #1
 80020dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d123      	bne.n	800212a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d11b      	bne.n	800212a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d113      	bne.n	800212a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	085b      	lsrs	r3, r3, #1
 800210e:	3b01      	subs	r3, #1
 8002110:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d109      	bne.n	800212a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	085b      	lsrs	r3, r3, #1
 8002122:	3b01      	subs	r3, #1
 8002124:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3720      	adds	r7, #32
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	019f800c 	.word	0x019f800c

08002140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e11e      	b.n	8002396 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002158:	4b91      	ldr	r3, [pc, #580]	; (80023a0 <HAL_RCC_ClockConfig+0x260>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d910      	bls.n	8002188 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b8e      	ldr	r3, [pc, #568]	; (80023a0 <HAL_RCC_ClockConfig+0x260>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 020f 	bic.w	r2, r3, #15
 800216e:	498c      	ldr	r1, [pc, #560]	; (80023a0 <HAL_RCC_ClockConfig+0x260>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b8a      	ldr	r3, [pc, #552]	; (80023a0 <HAL_RCC_ClockConfig+0x260>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e106      	b.n	8002396 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d073      	beq.n	800227c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b03      	cmp	r3, #3
 800219a:	d129      	bne.n	80021f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219c:	4b81      	ldr	r3, [pc, #516]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0f4      	b.n	8002396 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80021ac:	f000 f9d0 	bl	8002550 <RCC_GetSysClockFreqFromPLLSource>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4a7c      	ldr	r2, [pc, #496]	; (80023a8 <HAL_RCC_ClockConfig+0x268>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d93f      	bls.n	800223a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021ba:	4b7a      	ldr	r3, [pc, #488]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d033      	beq.n	800223a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d12f      	bne.n	800223a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021da:	4b72      	ldr	r3, [pc, #456]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021e2:	4a70      	ldr	r2, [pc, #448]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80021e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e024      	b.n	800223a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f8:	4b6a      	ldr	r3, [pc, #424]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d109      	bne.n	8002218 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0c6      	b.n	8002396 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002208:	4b66      	ldr	r3, [pc, #408]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0be      	b.n	8002396 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002218:	f000 f8ce 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 800221c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4a61      	ldr	r2, [pc, #388]	; (80023a8 <HAL_RCC_ClockConfig+0x268>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d909      	bls.n	800223a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002226:	4b5f      	ldr	r3, [pc, #380]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800222e:	4a5d      	ldr	r2, [pc, #372]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002234:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800223a:	4b5a      	ldr	r3, [pc, #360]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4957      	ldr	r1, [pc, #348]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002248:	4313      	orrs	r3, r2
 800224a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800224c:	f7ff f854 	bl	80012f8 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	e00a      	b.n	800226a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002254:	f7ff f850 	bl	80012f8 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e095      	b.n	8002396 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	4b4e      	ldr	r3, [pc, #312]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 020c 	and.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	429a      	cmp	r2, r3
 800227a:	d1eb      	bne.n	8002254 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d023      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002294:	4b43      	ldr	r3, [pc, #268]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a42      	ldr	r2, [pc, #264]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 800229a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800229e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80022ac:	4b3d      	ldr	r3, [pc, #244]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80022b4:	4a3b      	ldr	r2, [pc, #236]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80022b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022bc:	4b39      	ldr	r3, [pc, #228]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4936      	ldr	r1, [pc, #216]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b80      	cmp	r3, #128	; 0x80
 80022d4:	d105      	bne.n	80022e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022d6:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	4a32      	ldr	r2, [pc, #200]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80022dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e2:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <HAL_RCC_ClockConfig+0x260>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d21d      	bcs.n	800232c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_RCC_ClockConfig+0x260>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 020f 	bic.w	r2, r3, #15
 80022f8:	4929      	ldr	r1, [pc, #164]	; (80023a0 <HAL_RCC_ClockConfig+0x260>)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002300:	f7fe fffa 	bl	80012f8 <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7fe fff6 	bl	80012f8 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e03b      	b.n	8002396 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_RCC_ClockConfig+0x260>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d1ed      	bne.n	8002308 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4917      	ldr	r1, [pc, #92]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	490f      	ldr	r1, [pc, #60]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800236a:	f000 f825 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 800236e:	4602      	mov	r2, r0
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	490c      	ldr	r1, [pc, #48]	; (80023ac <HAL_RCC_ClockConfig+0x26c>)
 800237c:	5ccb      	ldrb	r3, [r1, r3]
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	fa22 f303 	lsr.w	r3, r2, r3
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x270>)
 8002388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_RCC_ClockConfig+0x274>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fdd6 	bl	8000f40 <HAL_InitTick>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40022000 	.word	0x40022000
 80023a4:	40021000 	.word	0x40021000
 80023a8:	04c4b400 	.word	0x04c4b400
 80023ac:	08007710 	.word	0x08007710
 80023b0:	20000098 	.word	0x20000098
 80023b4:	2000009c 	.word	0x2000009c

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023be:	4b2c      	ldr	r3, [pc, #176]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d102      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023ca:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	e047      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d102      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023dc:	4b26      	ldr	r3, [pc, #152]	; (8002478 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	e03e      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023e2:	4b23      	ldr	r3, [pc, #140]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d136      	bne.n	800245c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023f8:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3301      	adds	r3, #1
 8002404:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d10c      	bne.n	8002426 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800240c:	4a1a      	ldr	r2, [pc, #104]	; (8002478 <HAL_RCC_GetSysClockFreq+0xc0>)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	fbb2 f3f3 	udiv	r3, r2, r3
 8002414:	4a16      	ldr	r2, [pc, #88]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002416:	68d2      	ldr	r2, [r2, #12]
 8002418:	0a12      	lsrs	r2, r2, #8
 800241a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800241e:	fb02 f303 	mul.w	r3, r2, r3
 8002422:	617b      	str	r3, [r7, #20]
      break;
 8002424:	e00c      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002426:	4a13      	ldr	r2, [pc, #76]	; (8002474 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	fbb2 f3f3 	udiv	r3, r2, r3
 800242e:	4a10      	ldr	r2, [pc, #64]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002430:	68d2      	ldr	r2, [r2, #12]
 8002432:	0a12      	lsrs	r2, r2, #8
 8002434:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002438:	fb02 f303 	mul.w	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]
      break;
 800243e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0e5b      	lsrs	r3, r3, #25
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	3301      	adds	r3, #1
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	fbb2 f3f3 	udiv	r3, r2, r3
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	e001      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002460:	693b      	ldr	r3, [r7, #16]
}
 8002462:	4618      	mov	r0, r3
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	00f42400 	.word	0x00f42400
 8002478:	016e3600 	.word	0x016e3600

0800247c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_RCC_GetHCLKFreq+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000098 	.word	0x20000098

08002494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002498:	f7ff fff0 	bl	800247c <HAL_RCC_GetHCLKFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4904      	ldr	r1, [pc, #16]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08007720 	.word	0x08007720

080024c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024c4:	f7ff ffda 	bl	800247c <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0adb      	lsrs	r3, r3, #11
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4904      	ldr	r1, [pc, #16]	; (80024e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08007720 	.word	0x08007720

080024ec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	220f      	movs	r2, #15
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_RCC_GetClockConfig+0x5c>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0203 	and.w	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002508:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <HAL_RCC_GetClockConfig+0x5c>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_RCC_GetClockConfig+0x5c>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_RCC_GetClockConfig+0x5c>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	08db      	lsrs	r3, r3, #3
 8002526:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <HAL_RCC_GetClockConfig+0x60>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 020f 	and.w	r2, r3, #15
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	601a      	str	r2, [r3, #0]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	40022000 	.word	0x40022000

08002550 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002556:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3301      	adds	r3, #1
 800256c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d10c      	bne.n	800258e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002574:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800257e:	68d2      	ldr	r2, [r2, #12]
 8002580:	0a12      	lsrs	r2, r2, #8
 8002582:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	617b      	str	r3, [r7, #20]
    break;
 800258c:	e00c      	b.n	80025a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800258e:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002598:	68d2      	ldr	r2, [r2, #12]
 800259a:	0a12      	lsrs	r2, r2, #8
 800259c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]
    break;
 80025a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0e5b      	lsrs	r3, r3, #25
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	3301      	adds	r3, #1
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025c2:	687b      	ldr	r3, [r7, #4]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40021000 	.word	0x40021000
 80025d4:	016e3600 	.word	0x016e3600
 80025d8:	00f42400 	.word	0x00f42400

080025dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025e4:	2300      	movs	r3, #0
 80025e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025e8:	2300      	movs	r3, #0
 80025ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8098 	beq.w	800272a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fe:	4b43      	ldr	r3, [pc, #268]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10d      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	4b40      	ldr	r3, [pc, #256]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	4a3f      	ldr	r2, [pc, #252]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002614:	6593      	str	r3, [r2, #88]	; 0x58
 8002616:	4b3d      	ldr	r3, [pc, #244]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002622:	2301      	movs	r3, #1
 8002624:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002626:	4b3a      	ldr	r3, [pc, #232]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a39      	ldr	r2, [pc, #228]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800262c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002630:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002632:	f7fe fe61 	bl	80012f8 <HAL_GetTick>
 8002636:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002638:	e009      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263a:	f7fe fe5d 	bl	80012f8 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d902      	bls.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	74fb      	strb	r3, [r7, #19]
        break;
 800264c:	e005      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800264e:	4b30      	ldr	r3, [pc, #192]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0ef      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800265a:	7cfb      	ldrb	r3, [r7, #19]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d159      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002660:	4b2a      	ldr	r3, [pc, #168]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d01e      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	d019      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800267c:	4b23      	ldr	r3, [pc, #140]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002686:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002688:	4b20      	ldr	r3, [pc, #128]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	4a1f      	ldr	r2, [pc, #124]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002698:	4b1c      	ldr	r3, [pc, #112]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	4a1b      	ldr	r2, [pc, #108]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026a8:	4a18      	ldr	r2, [pc, #96]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7fe fe1d 	bl	80012f8 <HAL_GetTick>
 80026be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c0:	e00b      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c2:	f7fe fe19 	bl	80012f8 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d902      	bls.n	80026da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	74fb      	strb	r3, [r7, #19]
            break;
 80026d8:	e006      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ec      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10b      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	4903      	ldr	r1, [pc, #12]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002704:	e008      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	74bb      	strb	r3, [r7, #18]
 800270a:	e005      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800270c:	40021000 	.word	0x40021000
 8002710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002718:	7c7b      	ldrb	r3, [r7, #17]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d105      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271e:	4ba6      	ldr	r3, [pc, #664]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	4aa5      	ldr	r2, [pc, #660]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002728:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002736:	4ba0      	ldr	r3, [pc, #640]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273c:	f023 0203 	bic.w	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	499c      	ldr	r1, [pc, #624]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002758:	4b97      	ldr	r3, [pc, #604]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	f023 020c 	bic.w	r2, r3, #12
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	4994      	ldr	r1, [pc, #592]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800277a:	4b8f      	ldr	r3, [pc, #572]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002780:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	498b      	ldr	r1, [pc, #556]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800279c:	4b86      	ldr	r3, [pc, #536]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	4983      	ldr	r1, [pc, #524]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027be:	4b7e      	ldr	r3, [pc, #504]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	497a      	ldr	r1, [pc, #488]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027e0:	4b75      	ldr	r3, [pc, #468]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	4972      	ldr	r1, [pc, #456]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002802:	4b6d      	ldr	r3, [pc, #436]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002808:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	4969      	ldr	r1, [pc, #420]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002824:	4b64      	ldr	r3, [pc, #400]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	4961      	ldr	r1, [pc, #388]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002846:	4b5c      	ldr	r3, [pc, #368]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	4958      	ldr	r1, [pc, #352]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d015      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002868:	4b53      	ldr	r3, [pc, #332]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	4950      	ldr	r1, [pc, #320]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002886:	d105      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002888:	4b4b      	ldr	r3, [pc, #300]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a4a      	ldr	r2, [pc, #296]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002892:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028a0:	4b45      	ldr	r3, [pc, #276]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	4942      	ldr	r1, [pc, #264]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028be:	d105      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c0:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a3c      	ldr	r2, [pc, #240]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d015      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028d8:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4934      	ldr	r1, [pc, #208]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f6:	d105      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f8:	4b2f      	ldr	r3, [pc, #188]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a2e      	ldr	r2, [pc, #184]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002902:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d015      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002910:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291e:	4926      	ldr	r1, [pc, #152]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800292e:	d105      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002930:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4a20      	ldr	r2, [pc, #128]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800293a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d015      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	4918      	ldr	r1, [pc, #96]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002966:	d105      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002972:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d015      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002980:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298e:	490a      	ldr	r1, [pc, #40]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800299e:	d105      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80029ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000

080029bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e049      	b.n	8002a62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f841 	bl	8002a6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f000 fcbe 	bl	800337c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d001      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e04a      	b.n	8002b2e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <HAL_TIM_Base_Start_IT+0xbc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d018      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x6c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac2:	d013      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x6c>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <HAL_TIM_Base_Start_IT+0xc0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00e      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x6c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d009      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x6c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d004      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x6c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a19      	ldr	r2, [pc, #100]	; (8002b4c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d115      	bne.n	8002b18 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <HAL_TIM_Base_Start_IT+0xd0>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d015      	beq.n	8002b2a <HAL_TIM_Base_Start_IT+0xaa>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b04:	d011      	beq.n	8002b2a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b16:	e008      	b.n	8002b2a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e000      	b.n	8002b2c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40012c00 	.word	0x40012c00
 8002b40:	40000400 	.word	0x40000400
 8002b44:	40000800 	.word	0x40000800
 8002b48:	40013400 	.word	0x40013400
 8002b4c:	40014000 	.word	0x40014000
 8002b50:	00010007 	.word	0x00010007

08002b54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e049      	b.n	8002bfa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe f928 	bl	8000dd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	4619      	mov	r1, r3
 8002b92:	4610      	mov	r0, r2
 8002b94:	f000 fbf2 	bl	800337c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d109      	bne.n	8002c28 <HAL_TIM_PWM_Start+0x24>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	e03c      	b.n	8002ca2 <HAL_TIM_PWM_Start+0x9e>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d109      	bne.n	8002c42 <HAL_TIM_PWM_Start+0x3e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	bf14      	ite	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	2300      	moveq	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	e02f      	b.n	8002ca2 <HAL_TIM_PWM_Start+0x9e>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d109      	bne.n	8002c5c <HAL_TIM_PWM_Start+0x58>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e022      	b.n	8002ca2 <HAL_TIM_PWM_Start+0x9e>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d109      	bne.n	8002c76 <HAL_TIM_PWM_Start+0x72>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	bf14      	ite	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	2300      	moveq	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	e015      	b.n	8002ca2 <HAL_TIM_PWM_Start+0x9e>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b10      	cmp	r3, #16
 8002c7a:	d109      	bne.n	8002c90 <HAL_TIM_PWM_Start+0x8c>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e008      	b.n	8002ca2 <HAL_TIM_PWM_Start+0x9e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e097      	b.n	8002dda <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d104      	bne.n	8002cba <HAL_TIM_PWM_Start+0xb6>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb8:	e023      	b.n	8002d02 <HAL_TIM_PWM_Start+0xfe>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d104      	bne.n	8002cca <HAL_TIM_PWM_Start+0xc6>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cc8:	e01b      	b.n	8002d02 <HAL_TIM_PWM_Start+0xfe>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d104      	bne.n	8002cda <HAL_TIM_PWM_Start+0xd6>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd8:	e013      	b.n	8002d02 <HAL_TIM_PWM_Start+0xfe>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b0c      	cmp	r3, #12
 8002cde:	d104      	bne.n	8002cea <HAL_TIM_PWM_Start+0xe6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ce8:	e00b      	b.n	8002d02 <HAL_TIM_PWM_Start+0xfe>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_PWM_Start+0xf6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf8:	e003      	b.n	8002d02 <HAL_TIM_PWM_Start+0xfe>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2201      	movs	r2, #1
 8002d08:	6839      	ldr	r1, [r7, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 febc 	bl	8003a88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a33      	ldr	r2, [pc, #204]	; (8002de4 <HAL_TIM_PWM_Start+0x1e0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_TIM_PWM_Start+0x13e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a32      	ldr	r2, [pc, #200]	; (8002de8 <HAL_TIM_PWM_Start+0x1e4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00e      	beq.n	8002d42 <HAL_TIM_PWM_Start+0x13e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a30      	ldr	r2, [pc, #192]	; (8002dec <HAL_TIM_PWM_Start+0x1e8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d009      	beq.n	8002d42 <HAL_TIM_PWM_Start+0x13e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a2f      	ldr	r2, [pc, #188]	; (8002df0 <HAL_TIM_PWM_Start+0x1ec>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d004      	beq.n	8002d42 <HAL_TIM_PWM_Start+0x13e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2d      	ldr	r2, [pc, #180]	; (8002df4 <HAL_TIM_PWM_Start+0x1f0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d101      	bne.n	8002d46 <HAL_TIM_PWM_Start+0x142>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_TIM_PWM_Start+0x144>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a20      	ldr	r2, [pc, #128]	; (8002de4 <HAL_TIM_PWM_Start+0x1e0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d018      	beq.n	8002d98 <HAL_TIM_PWM_Start+0x194>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6e:	d013      	beq.n	8002d98 <HAL_TIM_PWM_Start+0x194>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a20      	ldr	r2, [pc, #128]	; (8002df8 <HAL_TIM_PWM_Start+0x1f4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00e      	beq.n	8002d98 <HAL_TIM_PWM_Start+0x194>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <HAL_TIM_PWM_Start+0x1f8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_TIM_PWM_Start+0x194>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <HAL_TIM_PWM_Start+0x1e4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <HAL_TIM_PWM_Start+0x194>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a16      	ldr	r2, [pc, #88]	; (8002dec <HAL_TIM_PWM_Start+0x1e8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d115      	bne.n	8002dc4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <HAL_TIM_PWM_Start+0x1fc>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d015      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x1d2>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db0:	d011      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0201 	orr.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc2:	e008      	b.n	8002dd6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	e000      	b.n	8002dd8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40012c00 	.word	0x40012c00
 8002de8:	40013400 	.word	0x40013400
 8002dec:	40014000 	.word	0x40014000
 8002df0:	40014400 	.word	0x40014400
 8002df4:	40014800 	.word	0x40014800
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40000800 	.word	0x40000800
 8002e00:	00010007 	.word	0x00010007

08002e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d122      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d11b      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0202 	mvn.w	r2, #2
 8002e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fa7a 	bl	8003340 <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e005      	b.n	8002e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fa6c 	bl	800332c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fa7d 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d122      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0204 	mvn.w	r2, #4
 8002e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fa50 	bl	8003340 <HAL_TIM_IC_CaptureCallback>
 8002ea0:	e005      	b.n	8002eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fa42 	bl	800332c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fa53 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d122      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d11b      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0208 	mvn.w	r2, #8
 8002ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2204      	movs	r2, #4
 8002ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fa26 	bl	8003340 <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fa18 	bl	800332c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fa29 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d122      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d11b      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0210 	mvn.w	r2, #16
 8002f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2208      	movs	r2, #8
 8002f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f9fc 	bl	8003340 <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f9ee 	bl	800332c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f9ff 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10e      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d107      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0201 	mvn.w	r2, #1
 8002f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fd fee8 	bl	8000d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b80      	cmp	r3, #128	; 0x80
 8002f94:	d10e      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	2b80      	cmp	r3, #128	; 0x80
 8002fa2:	d107      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 ff70 	bl	8003e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc2:	d10e      	bne.n	8002fe2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	2b80      	cmp	r3, #128	; 0x80
 8002fd0:	d107      	bne.n	8002fe2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 ff63 	bl	8003ea8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	d10e      	bne.n	800300e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffa:	2b40      	cmp	r3, #64	; 0x40
 8002ffc:	d107      	bne.n	800300e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f9ad 	bl	8003368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b20      	cmp	r3, #32
 800301a:	d10e      	bne.n	800303a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b20      	cmp	r3, #32
 8003028:	d107      	bne.n	800303a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f06f 0220 	mvn.w	r2, #32
 8003032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 ff23 	bl	8003e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003044:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003048:	d10f      	bne.n	800306a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003058:	d107      	bne.n	800306a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 ff29 	bl	8003ebc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003074:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003078:	d10f      	bne.n	800309a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003088:	d107      	bne.n	800309a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 ff1b 	bl	8003ed0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a8:	d10f      	bne.n	80030ca <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b8:	d107      	bne.n	80030ca <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80030c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 ff0d 	bl	8003ee4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030d8:	d10f      	bne.n	80030fa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030e8:	d107      	bne.n	80030fa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80030f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 feff 	bl	8003ef8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800311e:	2302      	movs	r3, #2
 8003120:	e0ff      	b.n	8003322 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b14      	cmp	r3, #20
 800312e:	f200 80f0 	bhi.w	8003312 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003132:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	0800318d 	.word	0x0800318d
 800313c:	08003313 	.word	0x08003313
 8003140:	08003313 	.word	0x08003313
 8003144:	08003313 	.word	0x08003313
 8003148:	080031cd 	.word	0x080031cd
 800314c:	08003313 	.word	0x08003313
 8003150:	08003313 	.word	0x08003313
 8003154:	08003313 	.word	0x08003313
 8003158:	0800320f 	.word	0x0800320f
 800315c:	08003313 	.word	0x08003313
 8003160:	08003313 	.word	0x08003313
 8003164:	08003313 	.word	0x08003313
 8003168:	0800324f 	.word	0x0800324f
 800316c:	08003313 	.word	0x08003313
 8003170:	08003313 	.word	0x08003313
 8003174:	08003313 	.word	0x08003313
 8003178:	08003291 	.word	0x08003291
 800317c:	08003313 	.word	0x08003313
 8003180:	08003313 	.word	0x08003313
 8003184:	08003313 	.word	0x08003313
 8003188:	080032d1 	.word	0x080032d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	4618      	mov	r0, r3
 8003194:	f000 f982 	bl	800349c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0208 	orr.w	r2, r2, #8
 80031a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0204 	bic.w	r2, r2, #4
 80031b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6999      	ldr	r1, [r3, #24]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	619a      	str	r2, [r3, #24]
      break;
 80031ca:	e0a5      	b.n	8003318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f9f2 	bl	80035bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6999      	ldr	r1, [r3, #24]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	021a      	lsls	r2, r3, #8
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	619a      	str	r2, [r3, #24]
      break;
 800320c:	e084      	b.n	8003318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fa5b 	bl	80036d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0208 	orr.w	r2, r2, #8
 8003228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0204 	bic.w	r2, r2, #4
 8003238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69d9      	ldr	r1, [r3, #28]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	61da      	str	r2, [r3, #28]
      break;
 800324c:	e064      	b.n	8003318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fac3 	bl	80037e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69da      	ldr	r2, [r3, #28]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69d9      	ldr	r1, [r3, #28]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	021a      	lsls	r2, r3, #8
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	61da      	str	r2, [r3, #28]
      break;
 800328e:	e043      	b.n	8003318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fb2c 	bl	80038f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0208 	orr.w	r2, r2, #8
 80032aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0204 	bic.w	r2, r2, #4
 80032ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80032ce:	e023      	b.n	8003318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fb70 	bl	80039bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	021a      	lsls	r2, r3, #8
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003310:	e002      	b.n	8003318 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
      break;
 8003316:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003320:	7dfb      	ldrb	r3, [r7, #23]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop

0800332c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a3c      	ldr	r2, [pc, #240]	; (8003480 <TIM_Base_SetConfig+0x104>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00f      	beq.n	80033b4 <TIM_Base_SetConfig+0x38>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d00b      	beq.n	80033b4 <TIM_Base_SetConfig+0x38>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a39      	ldr	r2, [pc, #228]	; (8003484 <TIM_Base_SetConfig+0x108>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d007      	beq.n	80033b4 <TIM_Base_SetConfig+0x38>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a38      	ldr	r2, [pc, #224]	; (8003488 <TIM_Base_SetConfig+0x10c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_Base_SetConfig+0x38>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a37      	ldr	r2, [pc, #220]	; (800348c <TIM_Base_SetConfig+0x110>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d108      	bne.n	80033c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2d      	ldr	r2, [pc, #180]	; (8003480 <TIM_Base_SetConfig+0x104>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01b      	beq.n	8003406 <TIM_Base_SetConfig+0x8a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d4:	d017      	beq.n	8003406 <TIM_Base_SetConfig+0x8a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a2a      	ldr	r2, [pc, #168]	; (8003484 <TIM_Base_SetConfig+0x108>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <TIM_Base_SetConfig+0x8a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a29      	ldr	r2, [pc, #164]	; (8003488 <TIM_Base_SetConfig+0x10c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00f      	beq.n	8003406 <TIM_Base_SetConfig+0x8a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a28      	ldr	r2, [pc, #160]	; (800348c <TIM_Base_SetConfig+0x110>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00b      	beq.n	8003406 <TIM_Base_SetConfig+0x8a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a27      	ldr	r2, [pc, #156]	; (8003490 <TIM_Base_SetConfig+0x114>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d007      	beq.n	8003406 <TIM_Base_SetConfig+0x8a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a26      	ldr	r2, [pc, #152]	; (8003494 <TIM_Base_SetConfig+0x118>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d003      	beq.n	8003406 <TIM_Base_SetConfig+0x8a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a25      	ldr	r2, [pc, #148]	; (8003498 <TIM_Base_SetConfig+0x11c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d108      	bne.n	8003418 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a10      	ldr	r2, [pc, #64]	; (8003480 <TIM_Base_SetConfig+0x104>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00f      	beq.n	8003464 <TIM_Base_SetConfig+0xe8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a11      	ldr	r2, [pc, #68]	; (800348c <TIM_Base_SetConfig+0x110>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00b      	beq.n	8003464 <TIM_Base_SetConfig+0xe8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a10      	ldr	r2, [pc, #64]	; (8003490 <TIM_Base_SetConfig+0x114>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <TIM_Base_SetConfig+0xe8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <TIM_Base_SetConfig+0x118>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d003      	beq.n	8003464 <TIM_Base_SetConfig+0xe8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a0e      	ldr	r2, [pc, #56]	; (8003498 <TIM_Base_SetConfig+0x11c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d103      	bne.n	800346c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	615a      	str	r2, [r3, #20]
}
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40012c00 	.word	0x40012c00
 8003484:	40000400 	.word	0x40000400
 8003488:	40000800 	.word	0x40000800
 800348c:	40013400 	.word	0x40013400
 8003490:	40014000 	.word	0x40014000
 8003494:	40014400 	.word	0x40014400
 8003498:	40014800 	.word	0x40014800

0800349c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f023 0201 	bic.w	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f023 0302 	bic.w	r3, r3, #2
 80034e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a2c      	ldr	r2, [pc, #176]	; (80035a8 <TIM_OC1_SetConfig+0x10c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00f      	beq.n	800351c <TIM_OC1_SetConfig+0x80>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a2b      	ldr	r2, [pc, #172]	; (80035ac <TIM_OC1_SetConfig+0x110>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00b      	beq.n	800351c <TIM_OC1_SetConfig+0x80>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a2a      	ldr	r2, [pc, #168]	; (80035b0 <TIM_OC1_SetConfig+0x114>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d007      	beq.n	800351c <TIM_OC1_SetConfig+0x80>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a29      	ldr	r2, [pc, #164]	; (80035b4 <TIM_OC1_SetConfig+0x118>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_OC1_SetConfig+0x80>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a28      	ldr	r2, [pc, #160]	; (80035b8 <TIM_OC1_SetConfig+0x11c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d10c      	bne.n	8003536 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f023 0308 	bic.w	r3, r3, #8
 8003522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f023 0304 	bic.w	r3, r3, #4
 8003534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a1b      	ldr	r2, [pc, #108]	; (80035a8 <TIM_OC1_SetConfig+0x10c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00f      	beq.n	800355e <TIM_OC1_SetConfig+0xc2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a1a      	ldr	r2, [pc, #104]	; (80035ac <TIM_OC1_SetConfig+0x110>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00b      	beq.n	800355e <TIM_OC1_SetConfig+0xc2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <TIM_OC1_SetConfig+0x114>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <TIM_OC1_SetConfig+0xc2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a18      	ldr	r2, [pc, #96]	; (80035b4 <TIM_OC1_SetConfig+0x118>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d003      	beq.n	800355e <TIM_OC1_SetConfig+0xc2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a17      	ldr	r2, [pc, #92]	; (80035b8 <TIM_OC1_SetConfig+0x11c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d111      	bne.n	8003582 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800356c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	621a      	str	r2, [r3, #32]
}
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40013400 	.word	0x40013400
 80035b0:	40014000 	.word	0x40014000
 80035b4:	40014400 	.word	0x40014400
 80035b8:	40014800 	.word	0x40014800

080035bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f023 0210 	bic.w	r2, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f023 0320 	bic.w	r3, r3, #32
 800360a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a28      	ldr	r2, [pc, #160]	; (80036bc <TIM_OC2_SetConfig+0x100>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_OC2_SetConfig+0x6c>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a27      	ldr	r2, [pc, #156]	; (80036c0 <TIM_OC2_SetConfig+0x104>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d10d      	bne.n	8003644 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800362e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003642:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a1d      	ldr	r2, [pc, #116]	; (80036bc <TIM_OC2_SetConfig+0x100>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00f      	beq.n	800366c <TIM_OC2_SetConfig+0xb0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <TIM_OC2_SetConfig+0x104>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00b      	beq.n	800366c <TIM_OC2_SetConfig+0xb0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a1b      	ldr	r2, [pc, #108]	; (80036c4 <TIM_OC2_SetConfig+0x108>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d007      	beq.n	800366c <TIM_OC2_SetConfig+0xb0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a1a      	ldr	r2, [pc, #104]	; (80036c8 <TIM_OC2_SetConfig+0x10c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_OC2_SetConfig+0xb0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a19      	ldr	r2, [pc, #100]	; (80036cc <TIM_OC2_SetConfig+0x110>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d113      	bne.n	8003694 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003672:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800367a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	621a      	str	r2, [r3, #32]
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40013400 	.word	0x40013400
 80036c4:	40014000 	.word	0x40014000
 80036c8:	40014400 	.word	0x40014400
 80036cc:	40014800 	.word	0x40014800

080036d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800371c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a27      	ldr	r2, [pc, #156]	; (80037cc <TIM_OC3_SetConfig+0xfc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <TIM_OC3_SetConfig+0x6a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a26      	ldr	r2, [pc, #152]	; (80037d0 <TIM_OC3_SetConfig+0x100>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d10d      	bne.n	8003756 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <TIM_OC3_SetConfig+0xfc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00f      	beq.n	800377e <TIM_OC3_SetConfig+0xae>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a1b      	ldr	r2, [pc, #108]	; (80037d0 <TIM_OC3_SetConfig+0x100>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00b      	beq.n	800377e <TIM_OC3_SetConfig+0xae>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a1a      	ldr	r2, [pc, #104]	; (80037d4 <TIM_OC3_SetConfig+0x104>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d007      	beq.n	800377e <TIM_OC3_SetConfig+0xae>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a19      	ldr	r2, [pc, #100]	; (80037d8 <TIM_OC3_SetConfig+0x108>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d003      	beq.n	800377e <TIM_OC3_SetConfig+0xae>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a18      	ldr	r2, [pc, #96]	; (80037dc <TIM_OC3_SetConfig+0x10c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d113      	bne.n	80037a6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800378c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	621a      	str	r2, [r3, #32]
}
 80037c0:	bf00      	nop
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40013400 	.word	0x40013400
 80037d4:	40014000 	.word	0x40014000
 80037d8:	40014400 	.word	0x40014400
 80037dc:	40014800 	.word	0x40014800

080037e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800380e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800382e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	031b      	lsls	r3, r3, #12
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a28      	ldr	r2, [pc, #160]	; (80038e0 <TIM_OC4_SetConfig+0x100>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_OC4_SetConfig+0x6c>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a27      	ldr	r2, [pc, #156]	; (80038e4 <TIM_OC4_SetConfig+0x104>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10d      	bne.n	8003868 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	031b      	lsls	r3, r3, #12
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003866:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <TIM_OC4_SetConfig+0x100>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00f      	beq.n	8003890 <TIM_OC4_SetConfig+0xb0>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a1c      	ldr	r2, [pc, #112]	; (80038e4 <TIM_OC4_SetConfig+0x104>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00b      	beq.n	8003890 <TIM_OC4_SetConfig+0xb0>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a1b      	ldr	r2, [pc, #108]	; (80038e8 <TIM_OC4_SetConfig+0x108>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d007      	beq.n	8003890 <TIM_OC4_SetConfig+0xb0>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a1a      	ldr	r2, [pc, #104]	; (80038ec <TIM_OC4_SetConfig+0x10c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_OC4_SetConfig+0xb0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <TIM_OC4_SetConfig+0x110>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d113      	bne.n	80038b8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003896:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800389e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	019b      	lsls	r3, r3, #6
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	019b      	lsls	r3, r3, #6
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40012c00 	.word	0x40012c00
 80038e4:	40013400 	.word	0x40013400
 80038e8:	40014000 	.word	0x40014000
 80038ec:	40014400 	.word	0x40014400
 80038f0:	40014800 	.word	0x40014800

080038f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003938:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	041b      	lsls	r3, r3, #16
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <TIM_OC5_SetConfig+0xb4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00f      	beq.n	800396e <TIM_OC5_SetConfig+0x7a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a16      	ldr	r2, [pc, #88]	; (80039ac <TIM_OC5_SetConfig+0xb8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00b      	beq.n	800396e <TIM_OC5_SetConfig+0x7a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <TIM_OC5_SetConfig+0xbc>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <TIM_OC5_SetConfig+0x7a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <TIM_OC5_SetConfig+0xc0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <TIM_OC5_SetConfig+0x7a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <TIM_OC5_SetConfig+0xc4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d109      	bne.n	8003982 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003974:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	621a      	str	r2, [r3, #32]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40013400 	.word	0x40013400
 80039b0:	40014000 	.word	0x40014000
 80039b4:	40014400 	.word	0x40014400
 80039b8:	40014800 	.word	0x40014800

080039bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	051b      	lsls	r3, r3, #20
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <TIM_OC6_SetConfig+0xb8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00f      	beq.n	8003a38 <TIM_OC6_SetConfig+0x7c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a17      	ldr	r2, [pc, #92]	; (8003a78 <TIM_OC6_SetConfig+0xbc>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <TIM_OC6_SetConfig+0x7c>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a16      	ldr	r2, [pc, #88]	; (8003a7c <TIM_OC6_SetConfig+0xc0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <TIM_OC6_SetConfig+0x7c>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <TIM_OC6_SetConfig+0xc4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_OC6_SetConfig+0x7c>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a14      	ldr	r2, [pc, #80]	; (8003a84 <TIM_OC6_SetConfig+0xc8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d109      	bne.n	8003a4c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	029b      	lsls	r3, r3, #10
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	621a      	str	r2, [r3, #32]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40013400 	.word	0x40013400
 8003a7c:	40014000 	.word	0x40014000
 8003a80:	40014400 	.word	0x40014400
 8003a84:	40014800 	.word	0x40014800

08003a88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 031f 	and.w	r3, r3, #31
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1a      	ldr	r2, [r3, #32]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	401a      	ands	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a1a      	ldr	r2, [r3, #32]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f003 031f 	and.w	r3, r3, #31
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d109      	bne.n	8003af8 <HAL_TIMEx_PWMN_Start+0x24>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e022      	b.n	8003b3e <HAL_TIMEx_PWMN_Start+0x6a>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d109      	bne.n	8003b12 <HAL_TIMEx_PWMN_Start+0x3e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	bf14      	ite	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	2300      	moveq	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	e015      	b.n	8003b3e <HAL_TIMEx_PWMN_Start+0x6a>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d109      	bne.n	8003b2c <HAL_TIMEx_PWMN_Start+0x58>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e008      	b.n	8003b3e <HAL_TIMEx_PWMN_Start+0x6a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	bf14      	ite	ne
 8003b38:	2301      	movne	r3, #1
 8003b3a:	2300      	moveq	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e069      	b.n	8003c1a <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <HAL_TIMEx_PWMN_Start+0x82>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b54:	e013      	b.n	8003b7e <HAL_TIMEx_PWMN_Start+0xaa>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d104      	bne.n	8003b66 <HAL_TIMEx_PWMN_Start+0x92>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b64:	e00b      	b.n	8003b7e <HAL_TIMEx_PWMN_Start+0xaa>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d104      	bne.n	8003b76 <HAL_TIMEx_PWMN_Start+0xa2>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b74:	e003      	b.n	8003b7e <HAL_TIMEx_PWMN_Start+0xaa>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2204      	movs	r2, #4
 8003b84:	6839      	ldr	r1, [r7, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f9c0 	bl	8003f0c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a20      	ldr	r2, [pc, #128]	; (8003c24 <HAL_TIMEx_PWMN_Start+0x150>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d018      	beq.n	8003bd8 <HAL_TIMEx_PWMN_Start+0x104>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bae:	d013      	beq.n	8003bd8 <HAL_TIMEx_PWMN_Start+0x104>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a1c      	ldr	r2, [pc, #112]	; (8003c28 <HAL_TIMEx_PWMN_Start+0x154>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00e      	beq.n	8003bd8 <HAL_TIMEx_PWMN_Start+0x104>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1b      	ldr	r2, [pc, #108]	; (8003c2c <HAL_TIMEx_PWMN_Start+0x158>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d009      	beq.n	8003bd8 <HAL_TIMEx_PWMN_Start+0x104>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <HAL_TIMEx_PWMN_Start+0x15c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d004      	beq.n	8003bd8 <HAL_TIMEx_PWMN_Start+0x104>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <HAL_TIMEx_PWMN_Start+0x160>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d115      	bne.n	8003c04 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	4b16      	ldr	r3, [pc, #88]	; (8003c38 <HAL_TIMEx_PWMN_Start+0x164>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b06      	cmp	r3, #6
 8003be8:	d015      	beq.n	8003c16 <HAL_TIMEx_PWMN_Start+0x142>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf0:	d011      	beq.n	8003c16 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0201 	orr.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c02:	e008      	b.n	8003c16 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	e000      	b.n	8003c18 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	40013400 	.word	0x40013400
 8003c34:	40014000 	.word	0x40014000
 8003c38:	00010007 	.word	0x00010007

08003c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e065      	b.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a2c      	ldr	r2, [pc, #176]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d004      	beq.n	8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a2b      	ldr	r2, [pc, #172]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d108      	bne.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1b      	ldr	r2, [pc, #108]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d018      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cca:	d013      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a18      	ldr	r2, [pc, #96]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a17      	ldr	r2, [pc, #92]	; (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a12      	ldr	r2, [pc, #72]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d10c      	bne.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40013400 	.word	0x40013400
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800
 8003d3c:	40014000 	.word	0x40014000

08003d40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e087      	b.n	8003e6c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a27      	ldr	r2, [pc, #156]	; (8003e78 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a25      	ldr	r2, [pc, #148]	; (8003e7c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d106      	bne.n	8003df8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a1e      	ldr	r2, [pc, #120]	; (8003e78 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d126      	bne.n	8003e5a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	051b      	lsls	r3, r3, #20
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a0e      	ldr	r2, [pc, #56]	; (8003e78 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d004      	beq.n	8003e4c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d106      	bne.n	8003e5a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40012c00 	.word	0x40012c00
 8003e7c:	40013400 	.word	0x40013400

08003e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f003 031f 	and.w	r3, r3, #31
 8003f1e:	2204      	movs	r2, #4
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a1a      	ldr	r2, [r3, #32]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	401a      	ands	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a1a      	ldr	r2, [r3, #32]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	fa01 f303 	lsl.w	r3, r1, r3
 8003f44:	431a      	orrs	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	621a      	str	r2, [r3, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e042      	b.n	8003fee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fc ff80 	bl	8000e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2224      	movs	r2, #36	; 0x24
 8003f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fc51 	bl	8004840 <UART_SetConfig>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e022      	b.n	8003fee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 ff11 	bl	8004dd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 ff98 	bl	8004f1c <UART_CheckIdleState>
 8003fec:	4603      	mov	r3, r0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b08a      	sub	sp, #40	; 0x28
 8003ffa:	af02      	add	r7, sp, #8
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	603b      	str	r3, [r7, #0]
 8004002:	4613      	mov	r3, r2
 8004004:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400c:	2b20      	cmp	r3, #32
 800400e:	f040 8083 	bne.w	8004118 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_UART_Transmit+0x28>
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e07b      	b.n	800411a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_UART_Transmit+0x3a>
 800402c:	2302      	movs	r3, #2
 800402e:	e074      	b.n	800411a <HAL_UART_Transmit+0x124>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2221      	movs	r2, #33	; 0x21
 8004044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004048:	f7fd f956 	bl	80012f8 <HAL_GetTick>
 800404c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	88fa      	ldrh	r2, [r7, #6]
 8004052:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	88fa      	ldrh	r2, [r7, #6]
 800405a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004066:	d108      	bne.n	800407a <HAL_UART_Transmit+0x84>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d104      	bne.n	800407a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004070:	2300      	movs	r3, #0
 8004072:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	e003      	b.n	8004082 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800408a:	e02c      	b.n	80040e6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2200      	movs	r2, #0
 8004094:	2180      	movs	r1, #128	; 0x80
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 ff8b 	bl	8004fb2 <UART_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e039      	b.n	800411a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	3302      	adds	r3, #2
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	e007      	b.n	80040d4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3301      	adds	r3, #1
 80040d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1cc      	bne.n	800408c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2200      	movs	r2, #0
 80040fa:	2140      	movs	r1, #64	; 0x40
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 ff58 	bl	8004fb2 <UART_WaitOnFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e006      	b.n	800411a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	e000      	b.n	800411a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004118:	2302      	movs	r3, #2
  }
}
 800411a:	4618      	mov	r0, r3
 800411c:	3720      	adds	r7, #32
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	; 0x28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	4613      	mov	r3, r2
 8004130:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	2b20      	cmp	r3, #32
 800413a:	d142      	bne.n	80041c2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <HAL_UART_Receive_IT+0x24>
 8004142:	88fb      	ldrh	r3, [r7, #6]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e03b      	b.n	80041c4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_UART_Receive_IT+0x36>
 8004156:	2302      	movs	r3, #2
 8004158:	e034      	b.n	80041c4 <HAL_UART_Receive_IT+0xa0>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a17      	ldr	r2, [pc, #92]	; (80041cc <HAL_UART_Receive_IT+0xa8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d01f      	beq.n	80041b2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d018      	beq.n	80041b2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	613b      	str	r3, [r7, #16]
   return(result);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	623b      	str	r3, [r7, #32]
 80041a0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	69f9      	ldr	r1, [r7, #28]
 80041a4:	6a3a      	ldr	r2, [r7, #32]
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e6      	bne.n	8004180 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	461a      	mov	r2, r3
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 ffc3 	bl	8005144 <UART_Start_Receive_IT>
 80041be:	4603      	mov	r3, r0
 80041c0:	e000      	b.n	80041c4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80041c2:	2302      	movs	r3, #2
  }
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3728      	adds	r7, #40	; 0x28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40008000 	.word	0x40008000

080041d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b0ba      	sub	sp, #232	; 0xe8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80041fe:	4013      	ands	r3, r2
 8004200:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004208:	2b00      	cmp	r3, #0
 800420a:	d11b      	bne.n	8004244 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800420c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d015      	beq.n	8004244 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b00      	cmp	r3, #0
 8004222:	d105      	bne.n	8004230 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 82d6 	beq.w	80047e6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
      }
      return;
 8004242:	e2d0      	b.n	80047e6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 811f 	beq.w	800448c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800424e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004252:	4b8b      	ldr	r3, [pc, #556]	; (8004480 <HAL_UART_IRQHandler+0x2b0>)
 8004254:	4013      	ands	r3, r2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800425a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800425e:	4b89      	ldr	r3, [pc, #548]	; (8004484 <HAL_UART_IRQHandler+0x2b4>)
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 8112 	beq.w	800448c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d011      	beq.n	8004298 <HAL_UART_IRQHandler+0xc8>
 8004274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00b      	beq.n	8004298 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2201      	movs	r2, #1
 8004286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800428e:	f043 0201 	orr.w	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d011      	beq.n	80042c8 <HAL_UART_IRQHandler+0xf8>
 80042a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00b      	beq.n	80042c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2202      	movs	r2, #2
 80042b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042be:	f043 0204 	orr.w	r2, r3, #4
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d011      	beq.n	80042f8 <HAL_UART_IRQHandler+0x128>
 80042d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00b      	beq.n	80042f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2204      	movs	r2, #4
 80042e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ee:	f043 0202 	orr.w	r2, r3, #2
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d017      	beq.n	8004334 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b00      	cmp	r3, #0
 800430e:	d105      	bne.n	800431c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004310:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004314:	4b5a      	ldr	r3, [pc, #360]	; (8004480 <HAL_UART_IRQHandler+0x2b0>)
 8004316:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00b      	beq.n	8004334 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2208      	movs	r2, #8
 8004322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800432a:	f043 0208 	orr.w	r2, r3, #8
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800433c:	2b00      	cmp	r3, #0
 800433e:	d012      	beq.n	8004366 <HAL_UART_IRQHandler+0x196>
 8004340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004344:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00c      	beq.n	8004366 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435c:	f043 0220 	orr.w	r2, r3, #32
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 823c 	beq.w	80047ea <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d013      	beq.n	80043a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800437e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d105      	bne.n	8004396 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800438a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800438e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ba:	2b40      	cmp	r3, #64	; 0x40
 80043bc:	d005      	beq.n	80043ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d04f      	beq.n	800446a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 ffe4 	bl	8005398 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b40      	cmp	r3, #64	; 0x40
 80043dc:	d141      	bne.n	8004462 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3308      	adds	r3, #8
 80043e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3308      	adds	r3, #8
 8004406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800440a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800440e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1d9      	bne.n	80043de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442e:	2b00      	cmp	r3, #0
 8004430:	d013      	beq.n	800445a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004436:	4a14      	ldr	r2, [pc, #80]	; (8004488 <HAL_UART_IRQHandler+0x2b8>)
 8004438:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800443e:	4618      	mov	r0, r3
 8004440:	f7fd f8c1 	bl	80015c6 <HAL_DMA_Abort_IT>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d017      	beq.n	800447a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004454:	4610      	mov	r0, r2
 8004456:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004458:	e00f      	b.n	800447a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f9da 	bl	8004814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004460:	e00b      	b.n	800447a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f9d6 	bl	8004814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004468:	e007      	b.n	800447a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f9d2 	bl	8004814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004478:	e1b7      	b.n	80047ea <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447a:	bf00      	nop
    return;
 800447c:	e1b5      	b.n	80047ea <HAL_UART_IRQHandler+0x61a>
 800447e:	bf00      	nop
 8004480:	10000001 	.word	0x10000001
 8004484:	04000120 	.word	0x04000120
 8004488:	08005465 	.word	0x08005465

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004490:	2b01      	cmp	r3, #1
 8004492:	f040 814a 	bne.w	800472a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8143 	beq.w	800472a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 813c 	beq.w	800472a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2210      	movs	r2, #16
 80044b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c4:	2b40      	cmp	r3, #64	; 0x40
 80044c6:	f040 80b5 	bne.w	8004634 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8187 	beq.w	80047ee <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044ea:	429a      	cmp	r2, r3
 80044ec:	f080 817f 	bcs.w	80047ee <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b00      	cmp	r3, #0
 8004508:	f040 8086 	bne.w	8004618 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004528:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004536:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800453a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004542:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800454e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1da      	bne.n	800450c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3308      	adds	r3, #8
 800455c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004566:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3308      	adds	r3, #8
 8004576:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800457a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800457e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004582:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800458c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e1      	bne.n	8004556 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3308      	adds	r3, #8
 8004598:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3308      	adds	r3, #8
 80045b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e3      	bne.n	8004592 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e0:	e853 3f00 	ldrex	r3, [r3]
 80045e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e8:	f023 0310 	bic.w	r3, r3, #16
 80045ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80045fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e4      	bne.n	80045d8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004612:	4618      	mov	r0, r3
 8004614:	f7fc ff7e 	bl	8001514 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004624:	b29b      	uxth	r3, r3
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	b29b      	uxth	r3, r3
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f8fb 	bl	8004828 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004632:	e0dc      	b.n	80047ee <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004640:	b29b      	uxth	r3, r3
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80ce 	beq.w	80047f2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004656:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 80c9 	beq.w	80047f2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	461a      	mov	r2, r3
 800467e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004682:	647b      	str	r3, [r7, #68]	; 0x44
 8004684:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e4      	bne.n	8004660 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3308      	adds	r3, #8
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	623b      	str	r3, [r7, #32]
   return(result);
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3308      	adds	r3, #8
 80046ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046be:	633a      	str	r2, [r7, #48]	; 0x30
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046c6:	e841 2300 	strex	r3, r2, [r1]
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e1      	bne.n	8004696 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0310 	bic.w	r3, r3, #16
 80046fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	69b9      	ldr	r1, [r7, #24]
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	e841 2300 	strex	r3, r2, [r1]
 8004714:	617b      	str	r3, [r7, #20]
   return(result);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e4      	bne.n	80046e6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800471c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004720:	4619      	mov	r1, r3
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f880 	bl	8004828 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004728:	e063      	b.n	80047f2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00e      	beq.n	8004754 <HAL_UART_IRQHandler+0x584>
 8004736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800473a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800474a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f001 fb27 	bl	8005da0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004752:	e051      	b.n	80047f8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475c:	2b00      	cmp	r3, #0
 800475e:	d014      	beq.n	800478a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d105      	bne.n	8004778 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800476c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004770:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477c:	2b00      	cmp	r3, #0
 800477e:	d03a      	beq.n	80047f6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
    }
    return;
 8004788:	e035      	b.n	80047f6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800478a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <HAL_UART_IRQHandler+0x5da>
 8004796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800479a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fe74 	bl	8005490 <UART_EndTransmit_IT>
    return;
 80047a8:	e026      	b.n	80047f8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80047aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d009      	beq.n	80047ca <HAL_UART_IRQHandler+0x5fa>
 80047b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f001 fb00 	bl	8005dc8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047c8:	e016      	b.n	80047f8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80047ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d010      	beq.n	80047f8 <HAL_UART_IRQHandler+0x628>
 80047d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	da0c      	bge.n	80047f8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f001 fae8 	bl	8005db4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047e4:	e008      	b.n	80047f8 <HAL_UART_IRQHandler+0x628>
      return;
 80047e6:	bf00      	nop
 80047e8:	e006      	b.n	80047f8 <HAL_UART_IRQHandler+0x628>
    return;
 80047ea:	bf00      	nop
 80047ec:	e004      	b.n	80047f8 <HAL_UART_IRQHandler+0x628>
      return;
 80047ee:	bf00      	nop
 80047f0:	e002      	b.n	80047f8 <HAL_UART_IRQHandler+0x628>
      return;
 80047f2:	bf00      	nop
 80047f4:	e000      	b.n	80047f8 <HAL_UART_IRQHandler+0x628>
    return;
 80047f6:	bf00      	nop
  }
}
 80047f8:	37e8      	adds	r7, #232	; 0xe8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop

08004800 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004844:	b08c      	sub	sp, #48	; 0x30
 8004846:	af00      	add	r7, sp, #0
 8004848:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	431a      	orrs	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	431a      	orrs	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	4313      	orrs	r3, r2
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4bab      	ldr	r3, [pc, #684]	; (8004b1c <UART_SetConfig+0x2dc>)
 8004870:	4013      	ands	r3, r2
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004878:	430b      	orrs	r3, r1
 800487a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4aa0      	ldr	r2, [pc, #640]	; (8004b20 <UART_SetConfig+0x2e0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048a8:	4313      	orrs	r3, r2
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80048b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048c0:	430b      	orrs	r3, r1
 80048c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	f023 010f 	bic.w	r1, r3, #15
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a91      	ldr	r2, [pc, #580]	; (8004b24 <UART_SetConfig+0x2e4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d125      	bne.n	8004930 <UART_SetConfig+0xf0>
 80048e4:	4b90      	ldr	r3, [pc, #576]	; (8004b28 <UART_SetConfig+0x2e8>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d81a      	bhi.n	8004928 <UART_SetConfig+0xe8>
 80048f2:	a201      	add	r2, pc, #4	; (adr r2, 80048f8 <UART_SetConfig+0xb8>)
 80048f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f8:	08004909 	.word	0x08004909
 80048fc:	08004919 	.word	0x08004919
 8004900:	08004911 	.word	0x08004911
 8004904:	08004921 	.word	0x08004921
 8004908:	2301      	movs	r3, #1
 800490a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800490e:	e0d6      	b.n	8004abe <UART_SetConfig+0x27e>
 8004910:	2302      	movs	r3, #2
 8004912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004916:	e0d2      	b.n	8004abe <UART_SetConfig+0x27e>
 8004918:	2304      	movs	r3, #4
 800491a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800491e:	e0ce      	b.n	8004abe <UART_SetConfig+0x27e>
 8004920:	2308      	movs	r3, #8
 8004922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004926:	e0ca      	b.n	8004abe <UART_SetConfig+0x27e>
 8004928:	2310      	movs	r3, #16
 800492a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800492e:	e0c6      	b.n	8004abe <UART_SetConfig+0x27e>
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a7d      	ldr	r2, [pc, #500]	; (8004b2c <UART_SetConfig+0x2ec>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d138      	bne.n	80049ac <UART_SetConfig+0x16c>
 800493a:	4b7b      	ldr	r3, [pc, #492]	; (8004b28 <UART_SetConfig+0x2e8>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b0c      	cmp	r3, #12
 8004946:	d82d      	bhi.n	80049a4 <UART_SetConfig+0x164>
 8004948:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <UART_SetConfig+0x110>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004985 	.word	0x08004985
 8004954:	080049a5 	.word	0x080049a5
 8004958:	080049a5 	.word	0x080049a5
 800495c:	080049a5 	.word	0x080049a5
 8004960:	08004995 	.word	0x08004995
 8004964:	080049a5 	.word	0x080049a5
 8004968:	080049a5 	.word	0x080049a5
 800496c:	080049a5 	.word	0x080049a5
 8004970:	0800498d 	.word	0x0800498d
 8004974:	080049a5 	.word	0x080049a5
 8004978:	080049a5 	.word	0x080049a5
 800497c:	080049a5 	.word	0x080049a5
 8004980:	0800499d 	.word	0x0800499d
 8004984:	2300      	movs	r3, #0
 8004986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498a:	e098      	b.n	8004abe <UART_SetConfig+0x27e>
 800498c:	2302      	movs	r3, #2
 800498e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004992:	e094      	b.n	8004abe <UART_SetConfig+0x27e>
 8004994:	2304      	movs	r3, #4
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800499a:	e090      	b.n	8004abe <UART_SetConfig+0x27e>
 800499c:	2308      	movs	r3, #8
 800499e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a2:	e08c      	b.n	8004abe <UART_SetConfig+0x27e>
 80049a4:	2310      	movs	r3, #16
 80049a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049aa:	e088      	b.n	8004abe <UART_SetConfig+0x27e>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a5f      	ldr	r2, [pc, #380]	; (8004b30 <UART_SetConfig+0x2f0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d125      	bne.n	8004a02 <UART_SetConfig+0x1c2>
 80049b6:	4b5c      	ldr	r3, [pc, #368]	; (8004b28 <UART_SetConfig+0x2e8>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049c0:	2b30      	cmp	r3, #48	; 0x30
 80049c2:	d016      	beq.n	80049f2 <UART_SetConfig+0x1b2>
 80049c4:	2b30      	cmp	r3, #48	; 0x30
 80049c6:	d818      	bhi.n	80049fa <UART_SetConfig+0x1ba>
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d00a      	beq.n	80049e2 <UART_SetConfig+0x1a2>
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d814      	bhi.n	80049fa <UART_SetConfig+0x1ba>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <UART_SetConfig+0x19a>
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d008      	beq.n	80049ea <UART_SetConfig+0x1aa>
 80049d8:	e00f      	b.n	80049fa <UART_SetConfig+0x1ba>
 80049da:	2300      	movs	r3, #0
 80049dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e0:	e06d      	b.n	8004abe <UART_SetConfig+0x27e>
 80049e2:	2302      	movs	r3, #2
 80049e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e8:	e069      	b.n	8004abe <UART_SetConfig+0x27e>
 80049ea:	2304      	movs	r3, #4
 80049ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049f0:	e065      	b.n	8004abe <UART_SetConfig+0x27e>
 80049f2:	2308      	movs	r3, #8
 80049f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049f8:	e061      	b.n	8004abe <UART_SetConfig+0x27e>
 80049fa:	2310      	movs	r3, #16
 80049fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a00:	e05d      	b.n	8004abe <UART_SetConfig+0x27e>
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a4b      	ldr	r2, [pc, #300]	; (8004b34 <UART_SetConfig+0x2f4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d125      	bne.n	8004a58 <UART_SetConfig+0x218>
 8004a0c:	4b46      	ldr	r3, [pc, #280]	; (8004b28 <UART_SetConfig+0x2e8>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a16:	2bc0      	cmp	r3, #192	; 0xc0
 8004a18:	d016      	beq.n	8004a48 <UART_SetConfig+0x208>
 8004a1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a1c:	d818      	bhi.n	8004a50 <UART_SetConfig+0x210>
 8004a1e:	2b80      	cmp	r3, #128	; 0x80
 8004a20:	d00a      	beq.n	8004a38 <UART_SetConfig+0x1f8>
 8004a22:	2b80      	cmp	r3, #128	; 0x80
 8004a24:	d814      	bhi.n	8004a50 <UART_SetConfig+0x210>
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <UART_SetConfig+0x1f0>
 8004a2a:	2b40      	cmp	r3, #64	; 0x40
 8004a2c:	d008      	beq.n	8004a40 <UART_SetConfig+0x200>
 8004a2e:	e00f      	b.n	8004a50 <UART_SetConfig+0x210>
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a36:	e042      	b.n	8004abe <UART_SetConfig+0x27e>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a3e:	e03e      	b.n	8004abe <UART_SetConfig+0x27e>
 8004a40:	2304      	movs	r3, #4
 8004a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a46:	e03a      	b.n	8004abe <UART_SetConfig+0x27e>
 8004a48:	2308      	movs	r3, #8
 8004a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a4e:	e036      	b.n	8004abe <UART_SetConfig+0x27e>
 8004a50:	2310      	movs	r3, #16
 8004a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a56:	e032      	b.n	8004abe <UART_SetConfig+0x27e>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a30      	ldr	r2, [pc, #192]	; (8004b20 <UART_SetConfig+0x2e0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d12a      	bne.n	8004ab8 <UART_SetConfig+0x278>
 8004a62:	4b31      	ldr	r3, [pc, #196]	; (8004b28 <UART_SetConfig+0x2e8>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a70:	d01a      	beq.n	8004aa8 <UART_SetConfig+0x268>
 8004a72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a76:	d81b      	bhi.n	8004ab0 <UART_SetConfig+0x270>
 8004a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a7c:	d00c      	beq.n	8004a98 <UART_SetConfig+0x258>
 8004a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a82:	d815      	bhi.n	8004ab0 <UART_SetConfig+0x270>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <UART_SetConfig+0x250>
 8004a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8c:	d008      	beq.n	8004aa0 <UART_SetConfig+0x260>
 8004a8e:	e00f      	b.n	8004ab0 <UART_SetConfig+0x270>
 8004a90:	2300      	movs	r3, #0
 8004a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a96:	e012      	b.n	8004abe <UART_SetConfig+0x27e>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a9e:	e00e      	b.n	8004abe <UART_SetConfig+0x27e>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa6:	e00a      	b.n	8004abe <UART_SetConfig+0x27e>
 8004aa8:	2308      	movs	r3, #8
 8004aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aae:	e006      	b.n	8004abe <UART_SetConfig+0x27e>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ab6:	e002      	b.n	8004abe <UART_SetConfig+0x27e>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a17      	ldr	r2, [pc, #92]	; (8004b20 <UART_SetConfig+0x2e0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	f040 80a8 	bne.w	8004c1a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d834      	bhi.n	8004b3c <UART_SetConfig+0x2fc>
 8004ad2:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <UART_SetConfig+0x298>)
 8004ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad8:	08004afd 	.word	0x08004afd
 8004adc:	08004b3d 	.word	0x08004b3d
 8004ae0:	08004b05 	.word	0x08004b05
 8004ae4:	08004b3d 	.word	0x08004b3d
 8004ae8:	08004b0b 	.word	0x08004b0b
 8004aec:	08004b3d 	.word	0x08004b3d
 8004af0:	08004b3d 	.word	0x08004b3d
 8004af4:	08004b3d 	.word	0x08004b3d
 8004af8:	08004b13 	.word	0x08004b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004afc:	f7fd fcca 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8004b00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b02:	e021      	b.n	8004b48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <UART_SetConfig+0x2f8>)
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b08:	e01e      	b.n	8004b48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b0a:	f7fd fc55 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8004b0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b10:	e01a      	b.n	8004b48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b18:	e016      	b.n	8004b48 <UART_SetConfig+0x308>
 8004b1a:	bf00      	nop
 8004b1c:	cfff69f3 	.word	0xcfff69f3
 8004b20:	40008000 	.word	0x40008000
 8004b24:	40013800 	.word	0x40013800
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40004400 	.word	0x40004400
 8004b30:	40004800 	.word	0x40004800
 8004b34:	40004c00 	.word	0x40004c00
 8004b38:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 812a 	beq.w	8004da4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	4a9e      	ldr	r2, [pc, #632]	; (8004dd0 <UART_SetConfig+0x590>)
 8004b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	4413      	add	r3, r2
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d305      	bcc.n	8004b80 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d903      	bls.n	8004b88 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b86:	e10d      	b.n	8004da4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	60fa      	str	r2, [r7, #12]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	4a8e      	ldr	r2, [pc, #568]	; (8004dd0 <UART_SetConfig+0x590>)
 8004b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	607a      	str	r2, [r7, #4]
 8004ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ba6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004baa:	f7fb fb99 	bl	80002e0 <__aeabi_uldivmod>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	020b      	lsls	r3, r1, #8
 8004bc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004bc4:	0202      	lsls	r2, r0, #8
 8004bc6:	6979      	ldr	r1, [r7, #20]
 8004bc8:	6849      	ldr	r1, [r1, #4]
 8004bca:	0849      	lsrs	r1, r1, #1
 8004bcc:	2000      	movs	r0, #0
 8004bce:	460c      	mov	r4, r1
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	eb12 0804 	adds.w	r8, r2, r4
 8004bd6:	eb43 0905 	adc.w	r9, r3, r5
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	469a      	mov	sl, r3
 8004be2:	4693      	mov	fp, r2
 8004be4:	4652      	mov	r2, sl
 8004be6:	465b      	mov	r3, fp
 8004be8:	4640      	mov	r0, r8
 8004bea:	4649      	mov	r1, r9
 8004bec:	f7fb fb78 	bl	80002e0 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfe:	d308      	bcc.n	8004c12 <UART_SetConfig+0x3d2>
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c06:	d204      	bcs.n	8004c12 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6a3a      	ldr	r2, [r7, #32]
 8004c0e:	60da      	str	r2, [r3, #12]
 8004c10:	e0c8      	b.n	8004da4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c18:	e0c4      	b.n	8004da4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c22:	d167      	bne.n	8004cf4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004c24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d828      	bhi.n	8004c7e <UART_SetConfig+0x43e>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <UART_SetConfig+0x3f4>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c61 	.word	0x08004c61
 8004c3c:	08004c69 	.word	0x08004c69
 8004c40:	08004c7f 	.word	0x08004c7f
 8004c44:	08004c6f 	.word	0x08004c6f
 8004c48:	08004c7f 	.word	0x08004c7f
 8004c4c:	08004c7f 	.word	0x08004c7f
 8004c50:	08004c7f 	.word	0x08004c7f
 8004c54:	08004c77 	.word	0x08004c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c58:	f7fd fc1c 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8004c5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c5e:	e014      	b.n	8004c8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c60:	f7fd fc2e 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 8004c64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c66:	e010      	b.n	8004c8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c68:	4b5a      	ldr	r3, [pc, #360]	; (8004dd4 <UART_SetConfig+0x594>)
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c6c:	e00d      	b.n	8004c8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c6e:	f7fd fba3 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8004c72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c74:	e009      	b.n	8004c8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c7c:	e005      	b.n	8004c8a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8089 	beq.w	8004da4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	4a4e      	ldr	r2, [pc, #312]	; (8004dd0 <UART_SetConfig+0x590>)
 8004c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ca4:	005a      	lsls	r2, r3, #1
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	085b      	lsrs	r3, r3, #1
 8004cac:	441a      	add	r2, r3
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	2b0f      	cmp	r3, #15
 8004cbc:	d916      	bls.n	8004cec <UART_SetConfig+0x4ac>
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc4:	d212      	bcs.n	8004cec <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f023 030f 	bic.w	r3, r3, #15
 8004cce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	8bfb      	ldrh	r3, [r7, #30]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	8bfa      	ldrh	r2, [r7, #30]
 8004ce8:	60da      	str	r2, [r3, #12]
 8004cea:	e05b      	b.n	8004da4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cf2:	e057      	b.n	8004da4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d828      	bhi.n	8004d4e <UART_SetConfig+0x50e>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <UART_SetConfig+0x4c4>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d29 	.word	0x08004d29
 8004d08:	08004d31 	.word	0x08004d31
 8004d0c:	08004d39 	.word	0x08004d39
 8004d10:	08004d4f 	.word	0x08004d4f
 8004d14:	08004d3f 	.word	0x08004d3f
 8004d18:	08004d4f 	.word	0x08004d4f
 8004d1c:	08004d4f 	.word	0x08004d4f
 8004d20:	08004d4f 	.word	0x08004d4f
 8004d24:	08004d47 	.word	0x08004d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d28:	f7fd fbb4 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8004d2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d2e:	e014      	b.n	8004d5a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d30:	f7fd fbc6 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 8004d34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d36:	e010      	b.n	8004d5a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d38:	4b26      	ldr	r3, [pc, #152]	; (8004dd4 <UART_SetConfig+0x594>)
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d3c:	e00d      	b.n	8004d5a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d3e:	f7fd fb3b 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8004d42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d44:	e009      	b.n	8004d5a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d4c:	e005      	b.n	8004d5a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d58:	bf00      	nop
    }

    if (pclk != 0U)
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d021      	beq.n	8004da4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	4a1a      	ldr	r2, [pc, #104]	; (8004dd0 <UART_SetConfig+0x590>)
 8004d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	441a      	add	r2, r3
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	2b0f      	cmp	r3, #15
 8004d88:	d909      	bls.n	8004d9e <UART_SetConfig+0x55e>
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d90:	d205      	bcs.n	8004d9e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	60da      	str	r2, [r3, #12]
 8004d9c:	e002      	b.n	8004da4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2200      	movs	r2, #0
 8004db8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004dc0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3730      	adds	r7, #48	; 0x30
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dce:	bf00      	nop
 8004dd0:	08007728 	.word	0x08007728
 8004dd4:	00f42400 	.word	0x00f42400

08004dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01a      	beq.n	8004eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ed6:	d10a      	bne.n	8004eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
  }
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f2c:	f7fc f9e4 	bl	80012f8 <HAL_GetTick>
 8004f30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d10e      	bne.n	8004f5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f82f 	bl	8004fb2 <UART_WaitOnFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e025      	b.n	8004faa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d10e      	bne.n	8004f8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f819 	bl	8004fb2 <UART_WaitOnFlagUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e00f      	b.n	8004faa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b09c      	sub	sp, #112	; 0x70
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc2:	e0a9      	b.n	8005118 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	f000 80a5 	beq.w	8005118 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fce:	f7fc f993 	bl	80012f8 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d302      	bcc.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d140      	bne.n	8005066 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005002:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005004:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005008:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e6      	bne.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3308      	adds	r3, #8
 800501c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	663b      	str	r3, [r7, #96]	; 0x60
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3308      	adds	r3, #8
 8005034:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005036:	64ba      	str	r2, [r7, #72]	; 0x48
 8005038:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800503c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e5      	bne.n	8005016 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2220      	movs	r2, #32
 800504e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2220      	movs	r2, #32
 8005056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e069      	b.n	800513a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d051      	beq.n	8005118 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800507e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005082:	d149      	bne.n	8005118 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800508c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	461a      	mov	r2, r3
 80050aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ac:	637b      	str	r3, [r7, #52]	; 0x34
 80050ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e6      	bne.n	800508e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3308      	adds	r3, #8
 80050c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	613b      	str	r3, [r7, #16]
   return(result);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f023 0301 	bic.w	r3, r3, #1
 80050d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3308      	adds	r3, #8
 80050de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050e0:	623a      	str	r2, [r7, #32]
 80050e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	69f9      	ldr	r1, [r7, #28]
 80050e6:	6a3a      	ldr	r2, [r7, #32]
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e5      	bne.n	80050c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2220      	movs	r2, #32
 8005108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e010      	b.n	800513a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	69da      	ldr	r2, [r3, #28]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4013      	ands	r3, r2
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	429a      	cmp	r2, r3
 8005126:	bf0c      	ite	eq
 8005128:	2301      	moveq	r3, #1
 800512a:	2300      	movne	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	429a      	cmp	r2, r3
 8005134:	f43f af46 	beq.w	8004fc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3770      	adds	r7, #112	; 0x70
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005144:	b480      	push	{r7}
 8005146:	b0a3      	sub	sp, #140	; 0x8c
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	4613      	mov	r3, r2
 8005150:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	88fa      	ldrh	r2, [r7, #6]
 800515c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	88fa      	ldrh	r2, [r7, #6]
 8005164:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005176:	d10e      	bne.n	8005196 <UART_Start_Receive_IT+0x52>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d105      	bne.n	800518c <UART_Start_Receive_IT+0x48>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005186:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800518a:	e02d      	b.n	80051e8 <UART_Start_Receive_IT+0xa4>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	22ff      	movs	r2, #255	; 0xff
 8005190:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005194:	e028      	b.n	80051e8 <UART_Start_Receive_IT+0xa4>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10d      	bne.n	80051ba <UART_Start_Receive_IT+0x76>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <UART_Start_Receive_IT+0x6c>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	22ff      	movs	r2, #255	; 0xff
 80051aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80051ae:	e01b      	b.n	80051e8 <UART_Start_Receive_IT+0xa4>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	227f      	movs	r2, #127	; 0x7f
 80051b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80051b8:	e016      	b.n	80051e8 <UART_Start_Receive_IT+0xa4>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051c2:	d10d      	bne.n	80051e0 <UART_Start_Receive_IT+0x9c>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <UART_Start_Receive_IT+0x92>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	227f      	movs	r2, #127	; 0x7f
 80051d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80051d4:	e008      	b.n	80051e8 <UART_Start_Receive_IT+0xa4>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	223f      	movs	r2, #63	; 0x3f
 80051da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80051de:	e003      	b.n	80051e8 <UART_Start_Receive_IT+0xa4>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2222      	movs	r2, #34	; 0x22
 80051f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3308      	adds	r3, #8
 80051fe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005202:	e853 3f00 	ldrex	r3, [r3]
 8005206:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3308      	adds	r3, #8
 8005218:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800521c:	673a      	str	r2, [r7, #112]	; 0x70
 800521e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005222:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800522a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e3      	bne.n	80051f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005238:	d153      	bne.n	80052e2 <UART_Start_Receive_IT+0x19e>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005240:	88fa      	ldrh	r2, [r7, #6]
 8005242:	429a      	cmp	r2, r3
 8005244:	d34d      	bcc.n	80052e2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524e:	d107      	bne.n	8005260 <UART_Start_Receive_IT+0x11c>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a4b      	ldr	r2, [pc, #300]	; (8005388 <UART_Start_Receive_IT+0x244>)
 800525c:	671a      	str	r2, [r3, #112]	; 0x70
 800525e:	e002      	b.n	8005266 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4a4a      	ldr	r2, [pc, #296]	; (800538c <UART_Start_Receive_IT+0x248>)
 8005264:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d01a      	beq.n	80052ac <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005298:	65fb      	str	r3, [r7, #92]	; 0x5c
 800529a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800529e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e4      	bne.n	8005276 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3308      	adds	r3, #8
 80052b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3308      	adds	r3, #8
 80052ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80052cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80052ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e5      	bne.n	80052ac <UART_Start_Receive_IT+0x168>
 80052e0:	e04a      	b.n	8005378 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ea:	d107      	bne.n	80052fc <UART_Start_Receive_IT+0x1b8>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d103      	bne.n	80052fc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a26      	ldr	r2, [pc, #152]	; (8005390 <UART_Start_Receive_IT+0x24c>)
 80052f8:	671a      	str	r2, [r3, #112]	; 0x70
 80052fa:	e002      	b.n	8005302 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a25      	ldr	r2, [pc, #148]	; (8005394 <UART_Start_Receive_IT+0x250>)
 8005300:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d019      	beq.n	8005346 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005326:	677b      	str	r3, [r7, #116]	; 0x74
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005330:	637b      	str	r3, [r7, #52]	; 0x34
 8005332:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e6      	bne.n	8005312 <UART_Start_Receive_IT+0x1ce>
 8005344:	e018      	b.n	8005378 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	613b      	str	r3, [r7, #16]
   return(result);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f043 0320 	orr.w	r3, r3, #32
 800535a:	67bb      	str	r3, [r7, #120]	; 0x78
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005364:	623b      	str	r3, [r7, #32]
 8005366:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	69f9      	ldr	r1, [r7, #28]
 800536a:	6a3a      	ldr	r2, [r7, #32]
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	61bb      	str	r3, [r7, #24]
   return(result);
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e6      	bne.n	8005346 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	378c      	adds	r7, #140	; 0x8c
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	08005aa1 	.word	0x08005aa1
 800538c:	080057a9 	.word	0x080057a9
 8005390:	08005647 	.word	0x08005647
 8005394:	080054e7 	.word	0x080054e7

08005398 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005398:	b480      	push	{r7}
 800539a:	b095      	sub	sp, #84	; 0x54
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053be:	643b      	str	r3, [r7, #64]	; 0x40
 80053c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e6      	bne.n	80053a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3308      	adds	r3, #8
 80053d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3308      	adds	r3, #8
 80053f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e3      	bne.n	80053d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800540e:	2b01      	cmp	r3, #1
 8005410:	d118      	bne.n	8005444 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f023 0310 	bic.w	r3, r3, #16
 8005426:	647b      	str	r3, [r7, #68]	; 0x44
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	6979      	ldr	r1, [r7, #20]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	613b      	str	r3, [r7, #16]
   return(result);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e6      	bne.n	8005412 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005458:	bf00      	nop
 800545a:	3754      	adds	r7, #84	; 0x54
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f7ff f9c6 	bl	8004814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	61bb      	str	r3, [r7, #24]
 80054b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6979      	ldr	r1, [r7, #20]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	613b      	str	r3, [r7, #16]
   return(result);
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e6      	bne.n	8005498 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff f991 	bl	8004800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054de:	bf00      	nop
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b096      	sub	sp, #88	; 0x58
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80054f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fe:	2b22      	cmp	r3, #34	; 0x22
 8005500:	f040 8095 	bne.w	800562e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800550e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005512:	b2d9      	uxtb	r1, r3
 8005514:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005518:	b2da      	uxtb	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551e:	400a      	ands	r2, r1
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d178      	bne.n	800563e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005560:	653b      	str	r3, [r7, #80]	; 0x50
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800556a:	647b      	str	r3, [r7, #68]	; 0x44
 800556c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005570:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e6      	bne.n	800554c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3308      	adds	r3, #8
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	623b      	str	r3, [r7, #32]
   return(result);
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3308      	adds	r3, #8
 800559c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800559e:	633a      	str	r2, [r7, #48]	; 0x30
 80055a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e5      	bne.n	800557e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d12e      	bne.n	8005626 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	60fb      	str	r3, [r7, #12]
   return(result);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0310 	bic.w	r3, r3, #16
 80055e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	69b9      	ldr	r1, [r7, #24]
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	617b      	str	r3, [r7, #20]
   return(result);
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e6      	bne.n	80055ce <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b10      	cmp	r3, #16
 800560c:	d103      	bne.n	8005616 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2210      	movs	r2, #16
 8005614:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800561c:	4619      	mov	r1, r3
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff f902 	bl	8004828 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005624:	e00b      	b.n	800563e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fb fb80 	bl	8000d2c <HAL_UART_RxCpltCallback>
}
 800562c:	e007      	b.n	800563e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	699a      	ldr	r2, [r3, #24]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f042 0208 	orr.w	r2, r2, #8
 800563c:	619a      	str	r2, [r3, #24]
}
 800563e:	bf00      	nop
 8005640:	3758      	adds	r7, #88	; 0x58
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b096      	sub	sp, #88	; 0x58
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005654:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	2b22      	cmp	r3, #34	; 0x22
 8005660:	f040 8095 	bne.w	800578e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005672:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005674:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005678:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800567c:	4013      	ands	r3, r2
 800567e:	b29a      	uxth	r2, r3
 8005680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005682:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005688:	1c9a      	adds	r2, r3, #2
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d178      	bne.n	800579e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ca:	643b      	str	r3, [r7, #64]	; 0x40
 80056cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e6      	bne.n	80056ac <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3308      	adds	r3, #8
 80056e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3308      	adds	r3, #8
 80056fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005700:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e5      	bne.n	80056de <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005724:	2b01      	cmp	r3, #1
 8005726:	d12e      	bne.n	8005786 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	60bb      	str	r3, [r7, #8]
   return(result);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f023 0310 	bic.w	r3, r3, #16
 8005742:	647b      	str	r3, [r7, #68]	; 0x44
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800574c:	61bb      	str	r3, [r7, #24]
 800574e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	6979      	ldr	r1, [r7, #20]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	613b      	str	r3, [r7, #16]
   return(result);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e6      	bne.n	800572e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b10      	cmp	r3, #16
 800576c:	d103      	bne.n	8005776 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2210      	movs	r2, #16
 8005774:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800577c:	4619      	mov	r1, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff f852 	bl	8004828 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005784:	e00b      	b.n	800579e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fb fad0 	bl	8000d2c <HAL_UART_RxCpltCallback>
}
 800578c:	e007      	b.n	800579e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699a      	ldr	r2, [r3, #24]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0208 	orr.w	r2, r2, #8
 800579c:	619a      	str	r2, [r3, #24]
}
 800579e:	bf00      	nop
 80057a0:	3758      	adds	r7, #88	; 0x58
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b0a6      	sub	sp, #152	; 0x98
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80057b6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057de:	2b22      	cmp	r3, #34	; 0x22
 80057e0:	f040 814f 	bne.w	8005a82 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80057ea:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057ee:	e0f6      	b.n	80059de <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057fa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80057fe:	b2d9      	uxtb	r1, r3
 8005800:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005804:	b2da      	uxtb	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580a:	400a      	ands	r2, r1
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005836:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	2b00      	cmp	r3, #0
 8005840:	d053      	beq.n	80058ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005842:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d011      	beq.n	8005872 <UART_RxISR_8BIT_FIFOEN+0xca>
 800584e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00b      	beq.n	8005872 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2201      	movs	r2, #1
 8005860:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005868:	f043 0201 	orr.w	r2, r3, #1
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005872:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d011      	beq.n	80058a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800587e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00b      	beq.n	80058a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2202      	movs	r2, #2
 8005890:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005898:	f043 0204 	orr.w	r2, r3, #4
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d011      	beq.n	80058d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80058ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00b      	beq.n	80058d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2204      	movs	r2, #4
 80058c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058c8:	f043 0202 	orr.w	r2, r3, #2
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d006      	beq.n	80058ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7fe ff99 	bl	8004814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d173      	bne.n	80059de <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005906:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800590a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005918:	66bb      	str	r3, [r7, #104]	; 0x68
 800591a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800591e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e4      	bne.n	80058f6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3308      	adds	r3, #8
 8005932:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800593c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800593e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3308      	adds	r3, #8
 800594e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005950:	657a      	str	r2, [r7, #84]	; 0x54
 8005952:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005956:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800595e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e3      	bne.n	800592c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2220      	movs	r2, #32
 8005968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005976:	2b01      	cmp	r3, #1
 8005978:	d12e      	bne.n	80059d8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	f023 0310 	bic.w	r3, r3, #16
 8005994:	67bb      	str	r3, [r7, #120]	; 0x78
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800599e:	643b      	str	r3, [r7, #64]	; 0x40
 80059a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e6      	bne.n	8005980 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b10      	cmp	r3, #16
 80059be:	d103      	bne.n	80059c8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2210      	movs	r2, #16
 80059c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fe ff29 	bl	8004828 <HAL_UARTEx_RxEventCallback>
 80059d6:	e002      	b.n	80059de <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7fb f9a7 	bl	8000d2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d006      	beq.n	80059f4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80059e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80059ea:	f003 0320 	and.w	r3, r3, #32
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f47f aefe 	bne.w	80057f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80059fe:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d045      	beq.n	8005a92 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d23e      	bcs.n	8005a92 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3308      	adds	r3, #8
 8005a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3308      	adds	r3, #8
 8005a32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e5      	bne.n	8005a14 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a14      	ldr	r2, [pc, #80]	; (8005a9c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005a4c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f043 0320 	orr.w	r3, r3, #32
 8005a62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6c:	61bb      	str	r3, [r7, #24]
 8005a6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	6979      	ldr	r1, [r7, #20]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	e841 2300 	strex	r3, r2, [r1]
 8005a78:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e6      	bne.n	8005a4e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a80:	e007      	b.n	8005a92 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699a      	ldr	r2, [r3, #24]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f042 0208 	orr.w	r2, r2, #8
 8005a90:	619a      	str	r2, [r3, #24]
}
 8005a92:	bf00      	nop
 8005a94:	3798      	adds	r7, #152	; 0x98
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	080054e7 	.word	0x080054e7

08005aa0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b0a8      	sub	sp, #160	; 0xa0
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005aae:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad6:	2b22      	cmp	r3, #34	; 0x22
 8005ad8:	f040 8153 	bne.w	8005d82 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005ae2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ae6:	e0fa      	b.n	8005cde <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005afa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005afe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b02:	4013      	ands	r3, r2
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b10:	1c9a      	adds	r2, r3, #2
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d053      	beq.n	8005be6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d011      	beq.n	8005b6e <UART_RxISR_16BIT_FIFOEN+0xce>
 8005b4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b64:	f043 0201 	orr.w	r2, r3, #1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d011      	beq.n	8005b9e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005b7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00b      	beq.n	8005b9e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b94:	f043 0204 	orr.w	r2, r3, #4
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d011      	beq.n	8005bce <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005baa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00b      	beq.n	8005bce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2204      	movs	r2, #4
 8005bbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc4:	f043 0202 	orr.w	r2, r3, #2
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d006      	beq.n	8005be6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7fe fe1b 	bl	8004814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d175      	bne.n	8005cde <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c16:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e4      	bne.n	8005bf2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	f023 0301 	bic.w	r3, r3, #1
 8005c42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c50:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c58:	e841 2300 	strex	r3, r2, [r1]
 8005c5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e1      	bne.n	8005c28 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d12e      	bne.n	8005cd8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c90:	f023 0310 	bic.w	r3, r3, #16
 8005c94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ca4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e6      	bne.n	8005c80 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	2b10      	cmp	r3, #16
 8005cbe:	d103      	bne.n	8005cc8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2210      	movs	r2, #16
 8005cc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cce:	4619      	mov	r1, r3
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7fe fda9 	bl	8004828 <HAL_UARTEx_RxEventCallback>
 8005cd6:	e002      	b.n	8005cde <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7fb f827 	bl	8000d2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cde:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d006      	beq.n	8005cf4 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005ce6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f47f aefa 	bne.w	8005ae8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cfa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005cfe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d045      	beq.n	8005d92 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d0c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d23e      	bcs.n	8005d92 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	623b      	str	r3, [r7, #32]
   return(result);
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d2a:	677b      	str	r3, [r7, #116]	; 0x74
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3308      	adds	r3, #8
 8005d32:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005d34:	633a      	str	r2, [r7, #48]	; 0x30
 8005d36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e5      	bne.n	8005d14 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a14      	ldr	r2, [pc, #80]	; (8005d9c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8005d4c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f043 0320 	orr.w	r3, r3, #32
 8005d62:	673b      	str	r3, [r7, #112]	; 0x70
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	69b9      	ldr	r1, [r7, #24]
 8005d72:	69fa      	ldr	r2, [r7, #28]
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	617b      	str	r3, [r7, #20]
   return(result);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e6      	bne.n	8005d4e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d80:	e007      	b.n	8005d92 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	699a      	ldr	r2, [r3, #24]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0208 	orr.w	r2, r2, #8
 8005d90:	619a      	str	r2, [r3, #24]
}
 8005d92:	bf00      	nop
 8005d94:	37a0      	adds	r7, #160	; 0xa0
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	08005647 	.word	0x08005647

08005da0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_UARTEx_DisableFifoMode+0x16>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e027      	b.n	8005e42 <HAL_UARTEx_DisableFifoMode+0x66>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2224      	movs	r2, #36	; 0x24
 8005dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0201 	bic.w	r2, r2, #1
 8005e18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e62:	2302      	movs	r3, #2
 8005e64:	e02d      	b.n	8005ec2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2224      	movs	r2, #36	; 0x24
 8005e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0201 	bic.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f850 	bl	8005f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d101      	bne.n	8005ee2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	e02d      	b.n	8005f3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2224      	movs	r2, #36	; 0x24
 8005eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0201 	bic.w	r2, r2, #1
 8005f08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f812 	bl	8005f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d108      	bne.n	8005f6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f68:	e031      	b.n	8005fce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f6a:	2308      	movs	r3, #8
 8005f6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f6e:	2308      	movs	r3, #8
 8005f70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	0e5b      	lsrs	r3, r3, #25
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	0f5b      	lsrs	r3, r3, #29
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f92:	7bbb      	ldrb	r3, [r7, #14]
 8005f94:	7b3a      	ldrb	r2, [r7, #12]
 8005f96:	4911      	ldr	r1, [pc, #68]	; (8005fdc <UARTEx_SetNbDataToProcess+0x94>)
 8005f98:	5c8a      	ldrb	r2, [r1, r2]
 8005f9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f9e:	7b3a      	ldrb	r2, [r7, #12]
 8005fa0:	490f      	ldr	r1, [pc, #60]	; (8005fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8005fa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	7b7a      	ldrb	r2, [r7, #13]
 8005fb4:	4909      	ldr	r1, [pc, #36]	; (8005fdc <UARTEx_SetNbDataToProcess+0x94>)
 8005fb6:	5c8a      	ldrb	r2, [r1, r2]
 8005fb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fbc:	7b7a      	ldrb	r2, [r7, #13]
 8005fbe:	4908      	ldr	r1, [pc, #32]	; (8005fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8005fc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005fce:	bf00      	nop
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	08007740 	.word	0x08007740
 8005fe0:	08007748 	.word	0x08007748

08005fe4 <atoi>:
 8005fe4:	220a      	movs	r2, #10
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	f000 b944 	b.w	8006274 <strtol>

08005fec <__errno>:
 8005fec:	4b01      	ldr	r3, [pc, #4]	; (8005ff4 <__errno+0x8>)
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	200000a4 	.word	0x200000a4

08005ff8 <__libc_init_array>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	4d0d      	ldr	r5, [pc, #52]	; (8006030 <__libc_init_array+0x38>)
 8005ffc:	4c0d      	ldr	r4, [pc, #52]	; (8006034 <__libc_init_array+0x3c>)
 8005ffe:	1b64      	subs	r4, r4, r5
 8006000:	10a4      	asrs	r4, r4, #2
 8006002:	2600      	movs	r6, #0
 8006004:	42a6      	cmp	r6, r4
 8006006:	d109      	bne.n	800601c <__libc_init_array+0x24>
 8006008:	4d0b      	ldr	r5, [pc, #44]	; (8006038 <__libc_init_array+0x40>)
 800600a:	4c0c      	ldr	r4, [pc, #48]	; (800603c <__libc_init_array+0x44>)
 800600c:	f001 faf2 	bl	80075f4 <_init>
 8006010:	1b64      	subs	r4, r4, r5
 8006012:	10a4      	asrs	r4, r4, #2
 8006014:	2600      	movs	r6, #0
 8006016:	42a6      	cmp	r6, r4
 8006018:	d105      	bne.n	8006026 <__libc_init_array+0x2e>
 800601a:	bd70      	pop	{r4, r5, r6, pc}
 800601c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006020:	4798      	blx	r3
 8006022:	3601      	adds	r6, #1
 8006024:	e7ee      	b.n	8006004 <__libc_init_array+0xc>
 8006026:	f855 3b04 	ldr.w	r3, [r5], #4
 800602a:	4798      	blx	r3
 800602c:	3601      	adds	r6, #1
 800602e:	e7f2      	b.n	8006016 <__libc_init_array+0x1e>
 8006030:	080079a0 	.word	0x080079a0
 8006034:	080079a0 	.word	0x080079a0
 8006038:	080079a0 	.word	0x080079a0
 800603c:	080079a4 	.word	0x080079a4

08006040 <memset>:
 8006040:	4402      	add	r2, r0
 8006042:	4603      	mov	r3, r0
 8006044:	4293      	cmp	r3, r2
 8006046:	d100      	bne.n	800604a <memset+0xa>
 8006048:	4770      	bx	lr
 800604a:	f803 1b01 	strb.w	r1, [r3], #1
 800604e:	e7f9      	b.n	8006044 <memset+0x4>

08006050 <sniprintf>:
 8006050:	b40c      	push	{r2, r3}
 8006052:	b530      	push	{r4, r5, lr}
 8006054:	4b17      	ldr	r3, [pc, #92]	; (80060b4 <sniprintf+0x64>)
 8006056:	1e0c      	subs	r4, r1, #0
 8006058:	681d      	ldr	r5, [r3, #0]
 800605a:	b09d      	sub	sp, #116	; 0x74
 800605c:	da08      	bge.n	8006070 <sniprintf+0x20>
 800605e:	238b      	movs	r3, #139	; 0x8b
 8006060:	602b      	str	r3, [r5, #0]
 8006062:	f04f 30ff 	mov.w	r0, #4294967295
 8006066:	b01d      	add	sp, #116	; 0x74
 8006068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800606c:	b002      	add	sp, #8
 800606e:	4770      	bx	lr
 8006070:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006074:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006078:	bf14      	ite	ne
 800607a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800607e:	4623      	moveq	r3, r4
 8006080:	9304      	str	r3, [sp, #16]
 8006082:	9307      	str	r3, [sp, #28]
 8006084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006088:	9002      	str	r0, [sp, #8]
 800608a:	9006      	str	r0, [sp, #24]
 800608c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006090:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006092:	ab21      	add	r3, sp, #132	; 0x84
 8006094:	a902      	add	r1, sp, #8
 8006096:	4628      	mov	r0, r5
 8006098:	9301      	str	r3, [sp, #4]
 800609a:	f000 fa69 	bl	8006570 <_svfiprintf_r>
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	bfbc      	itt	lt
 80060a2:	238b      	movlt	r3, #139	; 0x8b
 80060a4:	602b      	strlt	r3, [r5, #0]
 80060a6:	2c00      	cmp	r4, #0
 80060a8:	d0dd      	beq.n	8006066 <sniprintf+0x16>
 80060aa:	9b02      	ldr	r3, [sp, #8]
 80060ac:	2200      	movs	r2, #0
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	e7d9      	b.n	8006066 <sniprintf+0x16>
 80060b2:	bf00      	nop
 80060b4:	200000a4 	.word	0x200000a4

080060b8 <strtok>:
 80060b8:	4b16      	ldr	r3, [pc, #88]	; (8006114 <strtok+0x5c>)
 80060ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060bc:	681e      	ldr	r6, [r3, #0]
 80060be:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80060c0:	4605      	mov	r5, r0
 80060c2:	b9fc      	cbnz	r4, 8006104 <strtok+0x4c>
 80060c4:	2050      	movs	r0, #80	; 0x50
 80060c6:	9101      	str	r1, [sp, #4]
 80060c8:	f000 f90e 	bl	80062e8 <malloc>
 80060cc:	9901      	ldr	r1, [sp, #4]
 80060ce:	65b0      	str	r0, [r6, #88]	; 0x58
 80060d0:	4602      	mov	r2, r0
 80060d2:	b920      	cbnz	r0, 80060de <strtok+0x26>
 80060d4:	4b10      	ldr	r3, [pc, #64]	; (8006118 <strtok+0x60>)
 80060d6:	4811      	ldr	r0, [pc, #68]	; (800611c <strtok+0x64>)
 80060d8:	2157      	movs	r1, #87	; 0x57
 80060da:	f000 f8d5 	bl	8006288 <__assert_func>
 80060de:	e9c0 4400 	strd	r4, r4, [r0]
 80060e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80060e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80060ea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80060ee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80060f2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80060f6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80060fa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80060fe:	6184      	str	r4, [r0, #24]
 8006100:	7704      	strb	r4, [r0, #28]
 8006102:	6244      	str	r4, [r0, #36]	; 0x24
 8006104:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006106:	2301      	movs	r3, #1
 8006108:	4628      	mov	r0, r5
 800610a:	b002      	add	sp, #8
 800610c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006110:	f000 b806 	b.w	8006120 <__strtok_r>
 8006114:	200000a4 	.word	0x200000a4
 8006118:	08007754 	.word	0x08007754
 800611c:	0800776b 	.word	0x0800776b

08006120 <__strtok_r>:
 8006120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006122:	b908      	cbnz	r0, 8006128 <__strtok_r+0x8>
 8006124:	6810      	ldr	r0, [r2, #0]
 8006126:	b188      	cbz	r0, 800614c <__strtok_r+0x2c>
 8006128:	4604      	mov	r4, r0
 800612a:	4620      	mov	r0, r4
 800612c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006130:	460f      	mov	r7, r1
 8006132:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006136:	b91e      	cbnz	r6, 8006140 <__strtok_r+0x20>
 8006138:	b965      	cbnz	r5, 8006154 <__strtok_r+0x34>
 800613a:	6015      	str	r5, [r2, #0]
 800613c:	4628      	mov	r0, r5
 800613e:	e005      	b.n	800614c <__strtok_r+0x2c>
 8006140:	42b5      	cmp	r5, r6
 8006142:	d1f6      	bne.n	8006132 <__strtok_r+0x12>
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f0      	bne.n	800612a <__strtok_r+0xa>
 8006148:	6014      	str	r4, [r2, #0]
 800614a:	7003      	strb	r3, [r0, #0]
 800614c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800614e:	461c      	mov	r4, r3
 8006150:	e00c      	b.n	800616c <__strtok_r+0x4c>
 8006152:	b915      	cbnz	r5, 800615a <__strtok_r+0x3a>
 8006154:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006158:	460e      	mov	r6, r1
 800615a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800615e:	42ab      	cmp	r3, r5
 8006160:	d1f7      	bne.n	8006152 <__strtok_r+0x32>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0f3      	beq.n	800614e <__strtok_r+0x2e>
 8006166:	2300      	movs	r3, #0
 8006168:	f804 3c01 	strb.w	r3, [r4, #-1]
 800616c:	6014      	str	r4, [r2, #0]
 800616e:	e7ed      	b.n	800614c <__strtok_r+0x2c>

08006170 <_strtol_l.constprop.0>:
 8006170:	2b01      	cmp	r3, #1
 8006172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006176:	d001      	beq.n	800617c <_strtol_l.constprop.0+0xc>
 8006178:	2b24      	cmp	r3, #36	; 0x24
 800617a:	d906      	bls.n	800618a <_strtol_l.constprop.0+0x1a>
 800617c:	f7ff ff36 	bl	8005fec <__errno>
 8006180:	2316      	movs	r3, #22
 8006182:	6003      	str	r3, [r0, #0]
 8006184:	2000      	movs	r0, #0
 8006186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800618a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006270 <_strtol_l.constprop.0+0x100>
 800618e:	460d      	mov	r5, r1
 8006190:	462e      	mov	r6, r5
 8006192:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006196:	f814 700c 	ldrb.w	r7, [r4, ip]
 800619a:	f017 0708 	ands.w	r7, r7, #8
 800619e:	d1f7      	bne.n	8006190 <_strtol_l.constprop.0+0x20>
 80061a0:	2c2d      	cmp	r4, #45	; 0x2d
 80061a2:	d132      	bne.n	800620a <_strtol_l.constprop.0+0x9a>
 80061a4:	782c      	ldrb	r4, [r5, #0]
 80061a6:	2701      	movs	r7, #1
 80061a8:	1cb5      	adds	r5, r6, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d05b      	beq.n	8006266 <_strtol_l.constprop.0+0xf6>
 80061ae:	2b10      	cmp	r3, #16
 80061b0:	d109      	bne.n	80061c6 <_strtol_l.constprop.0+0x56>
 80061b2:	2c30      	cmp	r4, #48	; 0x30
 80061b4:	d107      	bne.n	80061c6 <_strtol_l.constprop.0+0x56>
 80061b6:	782c      	ldrb	r4, [r5, #0]
 80061b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80061bc:	2c58      	cmp	r4, #88	; 0x58
 80061be:	d14d      	bne.n	800625c <_strtol_l.constprop.0+0xec>
 80061c0:	786c      	ldrb	r4, [r5, #1]
 80061c2:	2310      	movs	r3, #16
 80061c4:	3502      	adds	r5, #2
 80061c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80061ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80061ce:	f04f 0c00 	mov.w	ip, #0
 80061d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80061d6:	4666      	mov	r6, ip
 80061d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80061dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80061e0:	f1be 0f09 	cmp.w	lr, #9
 80061e4:	d816      	bhi.n	8006214 <_strtol_l.constprop.0+0xa4>
 80061e6:	4674      	mov	r4, lr
 80061e8:	42a3      	cmp	r3, r4
 80061ea:	dd24      	ble.n	8006236 <_strtol_l.constprop.0+0xc6>
 80061ec:	f1bc 0f00 	cmp.w	ip, #0
 80061f0:	db1e      	blt.n	8006230 <_strtol_l.constprop.0+0xc0>
 80061f2:	45b1      	cmp	r9, r6
 80061f4:	d31c      	bcc.n	8006230 <_strtol_l.constprop.0+0xc0>
 80061f6:	d101      	bne.n	80061fc <_strtol_l.constprop.0+0x8c>
 80061f8:	45a2      	cmp	sl, r4
 80061fa:	db19      	blt.n	8006230 <_strtol_l.constprop.0+0xc0>
 80061fc:	fb06 4603 	mla	r6, r6, r3, r4
 8006200:	f04f 0c01 	mov.w	ip, #1
 8006204:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006208:	e7e8      	b.n	80061dc <_strtol_l.constprop.0+0x6c>
 800620a:	2c2b      	cmp	r4, #43	; 0x2b
 800620c:	bf04      	itt	eq
 800620e:	782c      	ldrbeq	r4, [r5, #0]
 8006210:	1cb5      	addeq	r5, r6, #2
 8006212:	e7ca      	b.n	80061aa <_strtol_l.constprop.0+0x3a>
 8006214:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006218:	f1be 0f19 	cmp.w	lr, #25
 800621c:	d801      	bhi.n	8006222 <_strtol_l.constprop.0+0xb2>
 800621e:	3c37      	subs	r4, #55	; 0x37
 8006220:	e7e2      	b.n	80061e8 <_strtol_l.constprop.0+0x78>
 8006222:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006226:	f1be 0f19 	cmp.w	lr, #25
 800622a:	d804      	bhi.n	8006236 <_strtol_l.constprop.0+0xc6>
 800622c:	3c57      	subs	r4, #87	; 0x57
 800622e:	e7db      	b.n	80061e8 <_strtol_l.constprop.0+0x78>
 8006230:	f04f 3cff 	mov.w	ip, #4294967295
 8006234:	e7e6      	b.n	8006204 <_strtol_l.constprop.0+0x94>
 8006236:	f1bc 0f00 	cmp.w	ip, #0
 800623a:	da05      	bge.n	8006248 <_strtol_l.constprop.0+0xd8>
 800623c:	2322      	movs	r3, #34	; 0x22
 800623e:	6003      	str	r3, [r0, #0]
 8006240:	4646      	mov	r6, r8
 8006242:	b942      	cbnz	r2, 8006256 <_strtol_l.constprop.0+0xe6>
 8006244:	4630      	mov	r0, r6
 8006246:	e79e      	b.n	8006186 <_strtol_l.constprop.0+0x16>
 8006248:	b107      	cbz	r7, 800624c <_strtol_l.constprop.0+0xdc>
 800624a:	4276      	negs	r6, r6
 800624c:	2a00      	cmp	r2, #0
 800624e:	d0f9      	beq.n	8006244 <_strtol_l.constprop.0+0xd4>
 8006250:	f1bc 0f00 	cmp.w	ip, #0
 8006254:	d000      	beq.n	8006258 <_strtol_l.constprop.0+0xe8>
 8006256:	1e69      	subs	r1, r5, #1
 8006258:	6011      	str	r1, [r2, #0]
 800625a:	e7f3      	b.n	8006244 <_strtol_l.constprop.0+0xd4>
 800625c:	2430      	movs	r4, #48	; 0x30
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1b1      	bne.n	80061c6 <_strtol_l.constprop.0+0x56>
 8006262:	2308      	movs	r3, #8
 8006264:	e7af      	b.n	80061c6 <_strtol_l.constprop.0+0x56>
 8006266:	2c30      	cmp	r4, #48	; 0x30
 8006268:	d0a5      	beq.n	80061b6 <_strtol_l.constprop.0+0x46>
 800626a:	230a      	movs	r3, #10
 800626c:	e7ab      	b.n	80061c6 <_strtol_l.constprop.0+0x56>
 800626e:	bf00      	nop
 8006270:	08007805 	.word	0x08007805

08006274 <strtol>:
 8006274:	4613      	mov	r3, r2
 8006276:	460a      	mov	r2, r1
 8006278:	4601      	mov	r1, r0
 800627a:	4802      	ldr	r0, [pc, #8]	; (8006284 <strtol+0x10>)
 800627c:	6800      	ldr	r0, [r0, #0]
 800627e:	f7ff bf77 	b.w	8006170 <_strtol_l.constprop.0>
 8006282:	bf00      	nop
 8006284:	200000a4 	.word	0x200000a4

08006288 <__assert_func>:
 8006288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800628a:	4614      	mov	r4, r2
 800628c:	461a      	mov	r2, r3
 800628e:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <__assert_func+0x2c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4605      	mov	r5, r0
 8006294:	68d8      	ldr	r0, [r3, #12]
 8006296:	b14c      	cbz	r4, 80062ac <__assert_func+0x24>
 8006298:	4b07      	ldr	r3, [pc, #28]	; (80062b8 <__assert_func+0x30>)
 800629a:	9100      	str	r1, [sp, #0]
 800629c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062a0:	4906      	ldr	r1, [pc, #24]	; (80062bc <__assert_func+0x34>)
 80062a2:	462b      	mov	r3, r5
 80062a4:	f000 f80e 	bl	80062c4 <fiprintf>
 80062a8:	f000 fe20 	bl	8006eec <abort>
 80062ac:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <__assert_func+0x38>)
 80062ae:	461c      	mov	r4, r3
 80062b0:	e7f3      	b.n	800629a <__assert_func+0x12>
 80062b2:	bf00      	nop
 80062b4:	200000a4 	.word	0x200000a4
 80062b8:	080077c8 	.word	0x080077c8
 80062bc:	080077d5 	.word	0x080077d5
 80062c0:	08007803 	.word	0x08007803

080062c4 <fiprintf>:
 80062c4:	b40e      	push	{r1, r2, r3}
 80062c6:	b503      	push	{r0, r1, lr}
 80062c8:	4601      	mov	r1, r0
 80062ca:	ab03      	add	r3, sp, #12
 80062cc:	4805      	ldr	r0, [pc, #20]	; (80062e4 <fiprintf+0x20>)
 80062ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80062d2:	6800      	ldr	r0, [r0, #0]
 80062d4:	9301      	str	r3, [sp, #4]
 80062d6:	f000 fa75 	bl	80067c4 <_vfiprintf_r>
 80062da:	b002      	add	sp, #8
 80062dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80062e0:	b003      	add	sp, #12
 80062e2:	4770      	bx	lr
 80062e4:	200000a4 	.word	0x200000a4

080062e8 <malloc>:
 80062e8:	4b02      	ldr	r3, [pc, #8]	; (80062f4 <malloc+0xc>)
 80062ea:	4601      	mov	r1, r0
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	f000 b86f 	b.w	80063d0 <_malloc_r>
 80062f2:	bf00      	nop
 80062f4:	200000a4 	.word	0x200000a4

080062f8 <_free_r>:
 80062f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062fa:	2900      	cmp	r1, #0
 80062fc:	d044      	beq.n	8006388 <_free_r+0x90>
 80062fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006302:	9001      	str	r0, [sp, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f1a1 0404 	sub.w	r4, r1, #4
 800630a:	bfb8      	it	lt
 800630c:	18e4      	addlt	r4, r4, r3
 800630e:	f001 f83d 	bl	800738c <__malloc_lock>
 8006312:	4a1e      	ldr	r2, [pc, #120]	; (800638c <_free_r+0x94>)
 8006314:	9801      	ldr	r0, [sp, #4]
 8006316:	6813      	ldr	r3, [r2, #0]
 8006318:	b933      	cbnz	r3, 8006328 <_free_r+0x30>
 800631a:	6063      	str	r3, [r4, #4]
 800631c:	6014      	str	r4, [r2, #0]
 800631e:	b003      	add	sp, #12
 8006320:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006324:	f001 b838 	b.w	8007398 <__malloc_unlock>
 8006328:	42a3      	cmp	r3, r4
 800632a:	d908      	bls.n	800633e <_free_r+0x46>
 800632c:	6825      	ldr	r5, [r4, #0]
 800632e:	1961      	adds	r1, r4, r5
 8006330:	428b      	cmp	r3, r1
 8006332:	bf01      	itttt	eq
 8006334:	6819      	ldreq	r1, [r3, #0]
 8006336:	685b      	ldreq	r3, [r3, #4]
 8006338:	1949      	addeq	r1, r1, r5
 800633a:	6021      	streq	r1, [r4, #0]
 800633c:	e7ed      	b.n	800631a <_free_r+0x22>
 800633e:	461a      	mov	r2, r3
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	b10b      	cbz	r3, 8006348 <_free_r+0x50>
 8006344:	42a3      	cmp	r3, r4
 8006346:	d9fa      	bls.n	800633e <_free_r+0x46>
 8006348:	6811      	ldr	r1, [r2, #0]
 800634a:	1855      	adds	r5, r2, r1
 800634c:	42a5      	cmp	r5, r4
 800634e:	d10b      	bne.n	8006368 <_free_r+0x70>
 8006350:	6824      	ldr	r4, [r4, #0]
 8006352:	4421      	add	r1, r4
 8006354:	1854      	adds	r4, r2, r1
 8006356:	42a3      	cmp	r3, r4
 8006358:	6011      	str	r1, [r2, #0]
 800635a:	d1e0      	bne.n	800631e <_free_r+0x26>
 800635c:	681c      	ldr	r4, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	6053      	str	r3, [r2, #4]
 8006362:	4421      	add	r1, r4
 8006364:	6011      	str	r1, [r2, #0]
 8006366:	e7da      	b.n	800631e <_free_r+0x26>
 8006368:	d902      	bls.n	8006370 <_free_r+0x78>
 800636a:	230c      	movs	r3, #12
 800636c:	6003      	str	r3, [r0, #0]
 800636e:	e7d6      	b.n	800631e <_free_r+0x26>
 8006370:	6825      	ldr	r5, [r4, #0]
 8006372:	1961      	adds	r1, r4, r5
 8006374:	428b      	cmp	r3, r1
 8006376:	bf04      	itt	eq
 8006378:	6819      	ldreq	r1, [r3, #0]
 800637a:	685b      	ldreq	r3, [r3, #4]
 800637c:	6063      	str	r3, [r4, #4]
 800637e:	bf04      	itt	eq
 8006380:	1949      	addeq	r1, r1, r5
 8006382:	6021      	streq	r1, [r4, #0]
 8006384:	6054      	str	r4, [r2, #4]
 8006386:	e7ca      	b.n	800631e <_free_r+0x26>
 8006388:	b003      	add	sp, #12
 800638a:	bd30      	pop	{r4, r5, pc}
 800638c:	200002a0 	.word	0x200002a0

08006390 <sbrk_aligned>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	4e0e      	ldr	r6, [pc, #56]	; (80063cc <sbrk_aligned+0x3c>)
 8006394:	460c      	mov	r4, r1
 8006396:	6831      	ldr	r1, [r6, #0]
 8006398:	4605      	mov	r5, r0
 800639a:	b911      	cbnz	r1, 80063a2 <sbrk_aligned+0x12>
 800639c:	f000 fcd6 	bl	8006d4c <_sbrk_r>
 80063a0:	6030      	str	r0, [r6, #0]
 80063a2:	4621      	mov	r1, r4
 80063a4:	4628      	mov	r0, r5
 80063a6:	f000 fcd1 	bl	8006d4c <_sbrk_r>
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	d00a      	beq.n	80063c4 <sbrk_aligned+0x34>
 80063ae:	1cc4      	adds	r4, r0, #3
 80063b0:	f024 0403 	bic.w	r4, r4, #3
 80063b4:	42a0      	cmp	r0, r4
 80063b6:	d007      	beq.n	80063c8 <sbrk_aligned+0x38>
 80063b8:	1a21      	subs	r1, r4, r0
 80063ba:	4628      	mov	r0, r5
 80063bc:	f000 fcc6 	bl	8006d4c <_sbrk_r>
 80063c0:	3001      	adds	r0, #1
 80063c2:	d101      	bne.n	80063c8 <sbrk_aligned+0x38>
 80063c4:	f04f 34ff 	mov.w	r4, #4294967295
 80063c8:	4620      	mov	r0, r4
 80063ca:	bd70      	pop	{r4, r5, r6, pc}
 80063cc:	200002a4 	.word	0x200002a4

080063d0 <_malloc_r>:
 80063d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d4:	1ccd      	adds	r5, r1, #3
 80063d6:	f025 0503 	bic.w	r5, r5, #3
 80063da:	3508      	adds	r5, #8
 80063dc:	2d0c      	cmp	r5, #12
 80063de:	bf38      	it	cc
 80063e0:	250c      	movcc	r5, #12
 80063e2:	2d00      	cmp	r5, #0
 80063e4:	4607      	mov	r7, r0
 80063e6:	db01      	blt.n	80063ec <_malloc_r+0x1c>
 80063e8:	42a9      	cmp	r1, r5
 80063ea:	d905      	bls.n	80063f8 <_malloc_r+0x28>
 80063ec:	230c      	movs	r3, #12
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	2600      	movs	r6, #0
 80063f2:	4630      	mov	r0, r6
 80063f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063f8:	4e2e      	ldr	r6, [pc, #184]	; (80064b4 <_malloc_r+0xe4>)
 80063fa:	f000 ffc7 	bl	800738c <__malloc_lock>
 80063fe:	6833      	ldr	r3, [r6, #0]
 8006400:	461c      	mov	r4, r3
 8006402:	bb34      	cbnz	r4, 8006452 <_malloc_r+0x82>
 8006404:	4629      	mov	r1, r5
 8006406:	4638      	mov	r0, r7
 8006408:	f7ff ffc2 	bl	8006390 <sbrk_aligned>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	4604      	mov	r4, r0
 8006410:	d14d      	bne.n	80064ae <_malloc_r+0xde>
 8006412:	6834      	ldr	r4, [r6, #0]
 8006414:	4626      	mov	r6, r4
 8006416:	2e00      	cmp	r6, #0
 8006418:	d140      	bne.n	800649c <_malloc_r+0xcc>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	4631      	mov	r1, r6
 800641e:	4638      	mov	r0, r7
 8006420:	eb04 0803 	add.w	r8, r4, r3
 8006424:	f000 fc92 	bl	8006d4c <_sbrk_r>
 8006428:	4580      	cmp	r8, r0
 800642a:	d13a      	bne.n	80064a2 <_malloc_r+0xd2>
 800642c:	6821      	ldr	r1, [r4, #0]
 800642e:	3503      	adds	r5, #3
 8006430:	1a6d      	subs	r5, r5, r1
 8006432:	f025 0503 	bic.w	r5, r5, #3
 8006436:	3508      	adds	r5, #8
 8006438:	2d0c      	cmp	r5, #12
 800643a:	bf38      	it	cc
 800643c:	250c      	movcc	r5, #12
 800643e:	4629      	mov	r1, r5
 8006440:	4638      	mov	r0, r7
 8006442:	f7ff ffa5 	bl	8006390 <sbrk_aligned>
 8006446:	3001      	adds	r0, #1
 8006448:	d02b      	beq.n	80064a2 <_malloc_r+0xd2>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	442b      	add	r3, r5
 800644e:	6023      	str	r3, [r4, #0]
 8006450:	e00e      	b.n	8006470 <_malloc_r+0xa0>
 8006452:	6822      	ldr	r2, [r4, #0]
 8006454:	1b52      	subs	r2, r2, r5
 8006456:	d41e      	bmi.n	8006496 <_malloc_r+0xc6>
 8006458:	2a0b      	cmp	r2, #11
 800645a:	d916      	bls.n	800648a <_malloc_r+0xba>
 800645c:	1961      	adds	r1, r4, r5
 800645e:	42a3      	cmp	r3, r4
 8006460:	6025      	str	r5, [r4, #0]
 8006462:	bf18      	it	ne
 8006464:	6059      	strne	r1, [r3, #4]
 8006466:	6863      	ldr	r3, [r4, #4]
 8006468:	bf08      	it	eq
 800646a:	6031      	streq	r1, [r6, #0]
 800646c:	5162      	str	r2, [r4, r5]
 800646e:	604b      	str	r3, [r1, #4]
 8006470:	4638      	mov	r0, r7
 8006472:	f104 060b 	add.w	r6, r4, #11
 8006476:	f000 ff8f 	bl	8007398 <__malloc_unlock>
 800647a:	f026 0607 	bic.w	r6, r6, #7
 800647e:	1d23      	adds	r3, r4, #4
 8006480:	1af2      	subs	r2, r6, r3
 8006482:	d0b6      	beq.n	80063f2 <_malloc_r+0x22>
 8006484:	1b9b      	subs	r3, r3, r6
 8006486:	50a3      	str	r3, [r4, r2]
 8006488:	e7b3      	b.n	80063f2 <_malloc_r+0x22>
 800648a:	6862      	ldr	r2, [r4, #4]
 800648c:	42a3      	cmp	r3, r4
 800648e:	bf0c      	ite	eq
 8006490:	6032      	streq	r2, [r6, #0]
 8006492:	605a      	strne	r2, [r3, #4]
 8006494:	e7ec      	b.n	8006470 <_malloc_r+0xa0>
 8006496:	4623      	mov	r3, r4
 8006498:	6864      	ldr	r4, [r4, #4]
 800649a:	e7b2      	b.n	8006402 <_malloc_r+0x32>
 800649c:	4634      	mov	r4, r6
 800649e:	6876      	ldr	r6, [r6, #4]
 80064a0:	e7b9      	b.n	8006416 <_malloc_r+0x46>
 80064a2:	230c      	movs	r3, #12
 80064a4:	603b      	str	r3, [r7, #0]
 80064a6:	4638      	mov	r0, r7
 80064a8:	f000 ff76 	bl	8007398 <__malloc_unlock>
 80064ac:	e7a1      	b.n	80063f2 <_malloc_r+0x22>
 80064ae:	6025      	str	r5, [r4, #0]
 80064b0:	e7de      	b.n	8006470 <_malloc_r+0xa0>
 80064b2:	bf00      	nop
 80064b4:	200002a0 	.word	0x200002a0

080064b8 <__ssputs_r>:
 80064b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064bc:	688e      	ldr	r6, [r1, #8]
 80064be:	429e      	cmp	r6, r3
 80064c0:	4682      	mov	sl, r0
 80064c2:	460c      	mov	r4, r1
 80064c4:	4690      	mov	r8, r2
 80064c6:	461f      	mov	r7, r3
 80064c8:	d838      	bhi.n	800653c <__ssputs_r+0x84>
 80064ca:	898a      	ldrh	r2, [r1, #12]
 80064cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064d0:	d032      	beq.n	8006538 <__ssputs_r+0x80>
 80064d2:	6825      	ldr	r5, [r4, #0]
 80064d4:	6909      	ldr	r1, [r1, #16]
 80064d6:	eba5 0901 	sub.w	r9, r5, r1
 80064da:	6965      	ldr	r5, [r4, #20]
 80064dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064e4:	3301      	adds	r3, #1
 80064e6:	444b      	add	r3, r9
 80064e8:	106d      	asrs	r5, r5, #1
 80064ea:	429d      	cmp	r5, r3
 80064ec:	bf38      	it	cc
 80064ee:	461d      	movcc	r5, r3
 80064f0:	0553      	lsls	r3, r2, #21
 80064f2:	d531      	bpl.n	8006558 <__ssputs_r+0xa0>
 80064f4:	4629      	mov	r1, r5
 80064f6:	f7ff ff6b 	bl	80063d0 <_malloc_r>
 80064fa:	4606      	mov	r6, r0
 80064fc:	b950      	cbnz	r0, 8006514 <__ssputs_r+0x5c>
 80064fe:	230c      	movs	r3, #12
 8006500:	f8ca 3000 	str.w	r3, [sl]
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006514:	6921      	ldr	r1, [r4, #16]
 8006516:	464a      	mov	r2, r9
 8006518:	f000 ff10 	bl	800733c <memcpy>
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006526:	81a3      	strh	r3, [r4, #12]
 8006528:	6126      	str	r6, [r4, #16]
 800652a:	6165      	str	r5, [r4, #20]
 800652c:	444e      	add	r6, r9
 800652e:	eba5 0509 	sub.w	r5, r5, r9
 8006532:	6026      	str	r6, [r4, #0]
 8006534:	60a5      	str	r5, [r4, #8]
 8006536:	463e      	mov	r6, r7
 8006538:	42be      	cmp	r6, r7
 800653a:	d900      	bls.n	800653e <__ssputs_r+0x86>
 800653c:	463e      	mov	r6, r7
 800653e:	6820      	ldr	r0, [r4, #0]
 8006540:	4632      	mov	r2, r6
 8006542:	4641      	mov	r1, r8
 8006544:	f000 ff08 	bl	8007358 <memmove>
 8006548:	68a3      	ldr	r3, [r4, #8]
 800654a:	1b9b      	subs	r3, r3, r6
 800654c:	60a3      	str	r3, [r4, #8]
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	4433      	add	r3, r6
 8006552:	6023      	str	r3, [r4, #0]
 8006554:	2000      	movs	r0, #0
 8006556:	e7db      	b.n	8006510 <__ssputs_r+0x58>
 8006558:	462a      	mov	r2, r5
 800655a:	f000 ff23 	bl	80073a4 <_realloc_r>
 800655e:	4606      	mov	r6, r0
 8006560:	2800      	cmp	r0, #0
 8006562:	d1e1      	bne.n	8006528 <__ssputs_r+0x70>
 8006564:	6921      	ldr	r1, [r4, #16]
 8006566:	4650      	mov	r0, sl
 8006568:	f7ff fec6 	bl	80062f8 <_free_r>
 800656c:	e7c7      	b.n	80064fe <__ssputs_r+0x46>
	...

08006570 <_svfiprintf_r>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	4698      	mov	r8, r3
 8006576:	898b      	ldrh	r3, [r1, #12]
 8006578:	061b      	lsls	r3, r3, #24
 800657a:	b09d      	sub	sp, #116	; 0x74
 800657c:	4607      	mov	r7, r0
 800657e:	460d      	mov	r5, r1
 8006580:	4614      	mov	r4, r2
 8006582:	d50e      	bpl.n	80065a2 <_svfiprintf_r+0x32>
 8006584:	690b      	ldr	r3, [r1, #16]
 8006586:	b963      	cbnz	r3, 80065a2 <_svfiprintf_r+0x32>
 8006588:	2140      	movs	r1, #64	; 0x40
 800658a:	f7ff ff21 	bl	80063d0 <_malloc_r>
 800658e:	6028      	str	r0, [r5, #0]
 8006590:	6128      	str	r0, [r5, #16]
 8006592:	b920      	cbnz	r0, 800659e <_svfiprintf_r+0x2e>
 8006594:	230c      	movs	r3, #12
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
 800659c:	e0d1      	b.n	8006742 <_svfiprintf_r+0x1d2>
 800659e:	2340      	movs	r3, #64	; 0x40
 80065a0:	616b      	str	r3, [r5, #20]
 80065a2:	2300      	movs	r3, #0
 80065a4:	9309      	str	r3, [sp, #36]	; 0x24
 80065a6:	2320      	movs	r3, #32
 80065a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80065b0:	2330      	movs	r3, #48	; 0x30
 80065b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800675c <_svfiprintf_r+0x1ec>
 80065b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ba:	f04f 0901 	mov.w	r9, #1
 80065be:	4623      	mov	r3, r4
 80065c0:	469a      	mov	sl, r3
 80065c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065c6:	b10a      	cbz	r2, 80065cc <_svfiprintf_r+0x5c>
 80065c8:	2a25      	cmp	r2, #37	; 0x25
 80065ca:	d1f9      	bne.n	80065c0 <_svfiprintf_r+0x50>
 80065cc:	ebba 0b04 	subs.w	fp, sl, r4
 80065d0:	d00b      	beq.n	80065ea <_svfiprintf_r+0x7a>
 80065d2:	465b      	mov	r3, fp
 80065d4:	4622      	mov	r2, r4
 80065d6:	4629      	mov	r1, r5
 80065d8:	4638      	mov	r0, r7
 80065da:	f7ff ff6d 	bl	80064b8 <__ssputs_r>
 80065de:	3001      	adds	r0, #1
 80065e0:	f000 80aa 	beq.w	8006738 <_svfiprintf_r+0x1c8>
 80065e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065e6:	445a      	add	r2, fp
 80065e8:	9209      	str	r2, [sp, #36]	; 0x24
 80065ea:	f89a 3000 	ldrb.w	r3, [sl]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 80a2 	beq.w	8006738 <_svfiprintf_r+0x1c8>
 80065f4:	2300      	movs	r3, #0
 80065f6:	f04f 32ff 	mov.w	r2, #4294967295
 80065fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065fe:	f10a 0a01 	add.w	sl, sl, #1
 8006602:	9304      	str	r3, [sp, #16]
 8006604:	9307      	str	r3, [sp, #28]
 8006606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800660a:	931a      	str	r3, [sp, #104]	; 0x68
 800660c:	4654      	mov	r4, sl
 800660e:	2205      	movs	r2, #5
 8006610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006614:	4851      	ldr	r0, [pc, #324]	; (800675c <_svfiprintf_r+0x1ec>)
 8006616:	f7f9 fe13 	bl	8000240 <memchr>
 800661a:	9a04      	ldr	r2, [sp, #16]
 800661c:	b9d8      	cbnz	r0, 8006656 <_svfiprintf_r+0xe6>
 800661e:	06d0      	lsls	r0, r2, #27
 8006620:	bf44      	itt	mi
 8006622:	2320      	movmi	r3, #32
 8006624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006628:	0711      	lsls	r1, r2, #28
 800662a:	bf44      	itt	mi
 800662c:	232b      	movmi	r3, #43	; 0x2b
 800662e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006632:	f89a 3000 	ldrb.w	r3, [sl]
 8006636:	2b2a      	cmp	r3, #42	; 0x2a
 8006638:	d015      	beq.n	8006666 <_svfiprintf_r+0xf6>
 800663a:	9a07      	ldr	r2, [sp, #28]
 800663c:	4654      	mov	r4, sl
 800663e:	2000      	movs	r0, #0
 8006640:	f04f 0c0a 	mov.w	ip, #10
 8006644:	4621      	mov	r1, r4
 8006646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800664a:	3b30      	subs	r3, #48	; 0x30
 800664c:	2b09      	cmp	r3, #9
 800664e:	d94e      	bls.n	80066ee <_svfiprintf_r+0x17e>
 8006650:	b1b0      	cbz	r0, 8006680 <_svfiprintf_r+0x110>
 8006652:	9207      	str	r2, [sp, #28]
 8006654:	e014      	b.n	8006680 <_svfiprintf_r+0x110>
 8006656:	eba0 0308 	sub.w	r3, r0, r8
 800665a:	fa09 f303 	lsl.w	r3, r9, r3
 800665e:	4313      	orrs	r3, r2
 8006660:	9304      	str	r3, [sp, #16]
 8006662:	46a2      	mov	sl, r4
 8006664:	e7d2      	b.n	800660c <_svfiprintf_r+0x9c>
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	1d19      	adds	r1, r3, #4
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	9103      	str	r1, [sp, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	bfbb      	ittet	lt
 8006672:	425b      	neglt	r3, r3
 8006674:	f042 0202 	orrlt.w	r2, r2, #2
 8006678:	9307      	strge	r3, [sp, #28]
 800667a:	9307      	strlt	r3, [sp, #28]
 800667c:	bfb8      	it	lt
 800667e:	9204      	strlt	r2, [sp, #16]
 8006680:	7823      	ldrb	r3, [r4, #0]
 8006682:	2b2e      	cmp	r3, #46	; 0x2e
 8006684:	d10c      	bne.n	80066a0 <_svfiprintf_r+0x130>
 8006686:	7863      	ldrb	r3, [r4, #1]
 8006688:	2b2a      	cmp	r3, #42	; 0x2a
 800668a:	d135      	bne.n	80066f8 <_svfiprintf_r+0x188>
 800668c:	9b03      	ldr	r3, [sp, #12]
 800668e:	1d1a      	adds	r2, r3, #4
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	9203      	str	r2, [sp, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	bfb8      	it	lt
 8006698:	f04f 33ff 	movlt.w	r3, #4294967295
 800669c:	3402      	adds	r4, #2
 800669e:	9305      	str	r3, [sp, #20]
 80066a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800676c <_svfiprintf_r+0x1fc>
 80066a4:	7821      	ldrb	r1, [r4, #0]
 80066a6:	2203      	movs	r2, #3
 80066a8:	4650      	mov	r0, sl
 80066aa:	f7f9 fdc9 	bl	8000240 <memchr>
 80066ae:	b140      	cbz	r0, 80066c2 <_svfiprintf_r+0x152>
 80066b0:	2340      	movs	r3, #64	; 0x40
 80066b2:	eba0 000a 	sub.w	r0, r0, sl
 80066b6:	fa03 f000 	lsl.w	r0, r3, r0
 80066ba:	9b04      	ldr	r3, [sp, #16]
 80066bc:	4303      	orrs	r3, r0
 80066be:	3401      	adds	r4, #1
 80066c0:	9304      	str	r3, [sp, #16]
 80066c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066c6:	4826      	ldr	r0, [pc, #152]	; (8006760 <_svfiprintf_r+0x1f0>)
 80066c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066cc:	2206      	movs	r2, #6
 80066ce:	f7f9 fdb7 	bl	8000240 <memchr>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d038      	beq.n	8006748 <_svfiprintf_r+0x1d8>
 80066d6:	4b23      	ldr	r3, [pc, #140]	; (8006764 <_svfiprintf_r+0x1f4>)
 80066d8:	bb1b      	cbnz	r3, 8006722 <_svfiprintf_r+0x1b2>
 80066da:	9b03      	ldr	r3, [sp, #12]
 80066dc:	3307      	adds	r3, #7
 80066de:	f023 0307 	bic.w	r3, r3, #7
 80066e2:	3308      	adds	r3, #8
 80066e4:	9303      	str	r3, [sp, #12]
 80066e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e8:	4433      	add	r3, r6
 80066ea:	9309      	str	r3, [sp, #36]	; 0x24
 80066ec:	e767      	b.n	80065be <_svfiprintf_r+0x4e>
 80066ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80066f2:	460c      	mov	r4, r1
 80066f4:	2001      	movs	r0, #1
 80066f6:	e7a5      	b.n	8006644 <_svfiprintf_r+0xd4>
 80066f8:	2300      	movs	r3, #0
 80066fa:	3401      	adds	r4, #1
 80066fc:	9305      	str	r3, [sp, #20]
 80066fe:	4619      	mov	r1, r3
 8006700:	f04f 0c0a 	mov.w	ip, #10
 8006704:	4620      	mov	r0, r4
 8006706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800670a:	3a30      	subs	r2, #48	; 0x30
 800670c:	2a09      	cmp	r2, #9
 800670e:	d903      	bls.n	8006718 <_svfiprintf_r+0x1a8>
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0c5      	beq.n	80066a0 <_svfiprintf_r+0x130>
 8006714:	9105      	str	r1, [sp, #20]
 8006716:	e7c3      	b.n	80066a0 <_svfiprintf_r+0x130>
 8006718:	fb0c 2101 	mla	r1, ip, r1, r2
 800671c:	4604      	mov	r4, r0
 800671e:	2301      	movs	r3, #1
 8006720:	e7f0      	b.n	8006704 <_svfiprintf_r+0x194>
 8006722:	ab03      	add	r3, sp, #12
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	462a      	mov	r2, r5
 8006728:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <_svfiprintf_r+0x1f8>)
 800672a:	a904      	add	r1, sp, #16
 800672c:	4638      	mov	r0, r7
 800672e:	f3af 8000 	nop.w
 8006732:	1c42      	adds	r2, r0, #1
 8006734:	4606      	mov	r6, r0
 8006736:	d1d6      	bne.n	80066e6 <_svfiprintf_r+0x176>
 8006738:	89ab      	ldrh	r3, [r5, #12]
 800673a:	065b      	lsls	r3, r3, #25
 800673c:	f53f af2c 	bmi.w	8006598 <_svfiprintf_r+0x28>
 8006740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006742:	b01d      	add	sp, #116	; 0x74
 8006744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006748:	ab03      	add	r3, sp, #12
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	462a      	mov	r2, r5
 800674e:	4b06      	ldr	r3, [pc, #24]	; (8006768 <_svfiprintf_r+0x1f8>)
 8006750:	a904      	add	r1, sp, #16
 8006752:	4638      	mov	r0, r7
 8006754:	f000 f9d4 	bl	8006b00 <_printf_i>
 8006758:	e7eb      	b.n	8006732 <_svfiprintf_r+0x1c2>
 800675a:	bf00      	nop
 800675c:	08007905 	.word	0x08007905
 8006760:	0800790f 	.word	0x0800790f
 8006764:	00000000 	.word	0x00000000
 8006768:	080064b9 	.word	0x080064b9
 800676c:	0800790b 	.word	0x0800790b

08006770 <__sfputc_r>:
 8006770:	6893      	ldr	r3, [r2, #8]
 8006772:	3b01      	subs	r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	b410      	push	{r4}
 8006778:	6093      	str	r3, [r2, #8]
 800677a:	da08      	bge.n	800678e <__sfputc_r+0x1e>
 800677c:	6994      	ldr	r4, [r2, #24]
 800677e:	42a3      	cmp	r3, r4
 8006780:	db01      	blt.n	8006786 <__sfputc_r+0x16>
 8006782:	290a      	cmp	r1, #10
 8006784:	d103      	bne.n	800678e <__sfputc_r+0x1e>
 8006786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800678a:	f000 baef 	b.w	8006d6c <__swbuf_r>
 800678e:	6813      	ldr	r3, [r2, #0]
 8006790:	1c58      	adds	r0, r3, #1
 8006792:	6010      	str	r0, [r2, #0]
 8006794:	7019      	strb	r1, [r3, #0]
 8006796:	4608      	mov	r0, r1
 8006798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800679c:	4770      	bx	lr

0800679e <__sfputs_r>:
 800679e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a0:	4606      	mov	r6, r0
 80067a2:	460f      	mov	r7, r1
 80067a4:	4614      	mov	r4, r2
 80067a6:	18d5      	adds	r5, r2, r3
 80067a8:	42ac      	cmp	r4, r5
 80067aa:	d101      	bne.n	80067b0 <__sfputs_r+0x12>
 80067ac:	2000      	movs	r0, #0
 80067ae:	e007      	b.n	80067c0 <__sfputs_r+0x22>
 80067b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b4:	463a      	mov	r2, r7
 80067b6:	4630      	mov	r0, r6
 80067b8:	f7ff ffda 	bl	8006770 <__sfputc_r>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d1f3      	bne.n	80067a8 <__sfputs_r+0xa>
 80067c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067c4 <_vfiprintf_r>:
 80067c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c8:	460d      	mov	r5, r1
 80067ca:	b09d      	sub	sp, #116	; 0x74
 80067cc:	4614      	mov	r4, r2
 80067ce:	4698      	mov	r8, r3
 80067d0:	4606      	mov	r6, r0
 80067d2:	b118      	cbz	r0, 80067dc <_vfiprintf_r+0x18>
 80067d4:	6983      	ldr	r3, [r0, #24]
 80067d6:	b90b      	cbnz	r3, 80067dc <_vfiprintf_r+0x18>
 80067d8:	f000 fcaa 	bl	8007130 <__sinit>
 80067dc:	4b89      	ldr	r3, [pc, #548]	; (8006a04 <_vfiprintf_r+0x240>)
 80067de:	429d      	cmp	r5, r3
 80067e0:	d11b      	bne.n	800681a <_vfiprintf_r+0x56>
 80067e2:	6875      	ldr	r5, [r6, #4]
 80067e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067e6:	07d9      	lsls	r1, r3, #31
 80067e8:	d405      	bmi.n	80067f6 <_vfiprintf_r+0x32>
 80067ea:	89ab      	ldrh	r3, [r5, #12]
 80067ec:	059a      	lsls	r2, r3, #22
 80067ee:	d402      	bmi.n	80067f6 <_vfiprintf_r+0x32>
 80067f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067f2:	f000 fd3b 	bl	800726c <__retarget_lock_acquire_recursive>
 80067f6:	89ab      	ldrh	r3, [r5, #12]
 80067f8:	071b      	lsls	r3, r3, #28
 80067fa:	d501      	bpl.n	8006800 <_vfiprintf_r+0x3c>
 80067fc:	692b      	ldr	r3, [r5, #16]
 80067fe:	b9eb      	cbnz	r3, 800683c <_vfiprintf_r+0x78>
 8006800:	4629      	mov	r1, r5
 8006802:	4630      	mov	r0, r6
 8006804:	f000 fb04 	bl	8006e10 <__swsetup_r>
 8006808:	b1c0      	cbz	r0, 800683c <_vfiprintf_r+0x78>
 800680a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800680c:	07dc      	lsls	r4, r3, #31
 800680e:	d50e      	bpl.n	800682e <_vfiprintf_r+0x6a>
 8006810:	f04f 30ff 	mov.w	r0, #4294967295
 8006814:	b01d      	add	sp, #116	; 0x74
 8006816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681a:	4b7b      	ldr	r3, [pc, #492]	; (8006a08 <_vfiprintf_r+0x244>)
 800681c:	429d      	cmp	r5, r3
 800681e:	d101      	bne.n	8006824 <_vfiprintf_r+0x60>
 8006820:	68b5      	ldr	r5, [r6, #8]
 8006822:	e7df      	b.n	80067e4 <_vfiprintf_r+0x20>
 8006824:	4b79      	ldr	r3, [pc, #484]	; (8006a0c <_vfiprintf_r+0x248>)
 8006826:	429d      	cmp	r5, r3
 8006828:	bf08      	it	eq
 800682a:	68f5      	ldreq	r5, [r6, #12]
 800682c:	e7da      	b.n	80067e4 <_vfiprintf_r+0x20>
 800682e:	89ab      	ldrh	r3, [r5, #12]
 8006830:	0598      	lsls	r0, r3, #22
 8006832:	d4ed      	bmi.n	8006810 <_vfiprintf_r+0x4c>
 8006834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006836:	f000 fd1a 	bl	800726e <__retarget_lock_release_recursive>
 800683a:	e7e9      	b.n	8006810 <_vfiprintf_r+0x4c>
 800683c:	2300      	movs	r3, #0
 800683e:	9309      	str	r3, [sp, #36]	; 0x24
 8006840:	2320      	movs	r3, #32
 8006842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006846:	f8cd 800c 	str.w	r8, [sp, #12]
 800684a:	2330      	movs	r3, #48	; 0x30
 800684c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006a10 <_vfiprintf_r+0x24c>
 8006850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006854:	f04f 0901 	mov.w	r9, #1
 8006858:	4623      	mov	r3, r4
 800685a:	469a      	mov	sl, r3
 800685c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006860:	b10a      	cbz	r2, 8006866 <_vfiprintf_r+0xa2>
 8006862:	2a25      	cmp	r2, #37	; 0x25
 8006864:	d1f9      	bne.n	800685a <_vfiprintf_r+0x96>
 8006866:	ebba 0b04 	subs.w	fp, sl, r4
 800686a:	d00b      	beq.n	8006884 <_vfiprintf_r+0xc0>
 800686c:	465b      	mov	r3, fp
 800686e:	4622      	mov	r2, r4
 8006870:	4629      	mov	r1, r5
 8006872:	4630      	mov	r0, r6
 8006874:	f7ff ff93 	bl	800679e <__sfputs_r>
 8006878:	3001      	adds	r0, #1
 800687a:	f000 80aa 	beq.w	80069d2 <_vfiprintf_r+0x20e>
 800687e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006880:	445a      	add	r2, fp
 8006882:	9209      	str	r2, [sp, #36]	; 0x24
 8006884:	f89a 3000 	ldrb.w	r3, [sl]
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 80a2 	beq.w	80069d2 <_vfiprintf_r+0x20e>
 800688e:	2300      	movs	r3, #0
 8006890:	f04f 32ff 	mov.w	r2, #4294967295
 8006894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006898:	f10a 0a01 	add.w	sl, sl, #1
 800689c:	9304      	str	r3, [sp, #16]
 800689e:	9307      	str	r3, [sp, #28]
 80068a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068a4:	931a      	str	r3, [sp, #104]	; 0x68
 80068a6:	4654      	mov	r4, sl
 80068a8:	2205      	movs	r2, #5
 80068aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ae:	4858      	ldr	r0, [pc, #352]	; (8006a10 <_vfiprintf_r+0x24c>)
 80068b0:	f7f9 fcc6 	bl	8000240 <memchr>
 80068b4:	9a04      	ldr	r2, [sp, #16]
 80068b6:	b9d8      	cbnz	r0, 80068f0 <_vfiprintf_r+0x12c>
 80068b8:	06d1      	lsls	r1, r2, #27
 80068ba:	bf44      	itt	mi
 80068bc:	2320      	movmi	r3, #32
 80068be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068c2:	0713      	lsls	r3, r2, #28
 80068c4:	bf44      	itt	mi
 80068c6:	232b      	movmi	r3, #43	; 0x2b
 80068c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068cc:	f89a 3000 	ldrb.w	r3, [sl]
 80068d0:	2b2a      	cmp	r3, #42	; 0x2a
 80068d2:	d015      	beq.n	8006900 <_vfiprintf_r+0x13c>
 80068d4:	9a07      	ldr	r2, [sp, #28]
 80068d6:	4654      	mov	r4, sl
 80068d8:	2000      	movs	r0, #0
 80068da:	f04f 0c0a 	mov.w	ip, #10
 80068de:	4621      	mov	r1, r4
 80068e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068e4:	3b30      	subs	r3, #48	; 0x30
 80068e6:	2b09      	cmp	r3, #9
 80068e8:	d94e      	bls.n	8006988 <_vfiprintf_r+0x1c4>
 80068ea:	b1b0      	cbz	r0, 800691a <_vfiprintf_r+0x156>
 80068ec:	9207      	str	r2, [sp, #28]
 80068ee:	e014      	b.n	800691a <_vfiprintf_r+0x156>
 80068f0:	eba0 0308 	sub.w	r3, r0, r8
 80068f4:	fa09 f303 	lsl.w	r3, r9, r3
 80068f8:	4313      	orrs	r3, r2
 80068fa:	9304      	str	r3, [sp, #16]
 80068fc:	46a2      	mov	sl, r4
 80068fe:	e7d2      	b.n	80068a6 <_vfiprintf_r+0xe2>
 8006900:	9b03      	ldr	r3, [sp, #12]
 8006902:	1d19      	adds	r1, r3, #4
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	9103      	str	r1, [sp, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	bfbb      	ittet	lt
 800690c:	425b      	neglt	r3, r3
 800690e:	f042 0202 	orrlt.w	r2, r2, #2
 8006912:	9307      	strge	r3, [sp, #28]
 8006914:	9307      	strlt	r3, [sp, #28]
 8006916:	bfb8      	it	lt
 8006918:	9204      	strlt	r2, [sp, #16]
 800691a:	7823      	ldrb	r3, [r4, #0]
 800691c:	2b2e      	cmp	r3, #46	; 0x2e
 800691e:	d10c      	bne.n	800693a <_vfiprintf_r+0x176>
 8006920:	7863      	ldrb	r3, [r4, #1]
 8006922:	2b2a      	cmp	r3, #42	; 0x2a
 8006924:	d135      	bne.n	8006992 <_vfiprintf_r+0x1ce>
 8006926:	9b03      	ldr	r3, [sp, #12]
 8006928:	1d1a      	adds	r2, r3, #4
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	9203      	str	r2, [sp, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	bfb8      	it	lt
 8006932:	f04f 33ff 	movlt.w	r3, #4294967295
 8006936:	3402      	adds	r4, #2
 8006938:	9305      	str	r3, [sp, #20]
 800693a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006a20 <_vfiprintf_r+0x25c>
 800693e:	7821      	ldrb	r1, [r4, #0]
 8006940:	2203      	movs	r2, #3
 8006942:	4650      	mov	r0, sl
 8006944:	f7f9 fc7c 	bl	8000240 <memchr>
 8006948:	b140      	cbz	r0, 800695c <_vfiprintf_r+0x198>
 800694a:	2340      	movs	r3, #64	; 0x40
 800694c:	eba0 000a 	sub.w	r0, r0, sl
 8006950:	fa03 f000 	lsl.w	r0, r3, r0
 8006954:	9b04      	ldr	r3, [sp, #16]
 8006956:	4303      	orrs	r3, r0
 8006958:	3401      	adds	r4, #1
 800695a:	9304      	str	r3, [sp, #16]
 800695c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006960:	482c      	ldr	r0, [pc, #176]	; (8006a14 <_vfiprintf_r+0x250>)
 8006962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006966:	2206      	movs	r2, #6
 8006968:	f7f9 fc6a 	bl	8000240 <memchr>
 800696c:	2800      	cmp	r0, #0
 800696e:	d03f      	beq.n	80069f0 <_vfiprintf_r+0x22c>
 8006970:	4b29      	ldr	r3, [pc, #164]	; (8006a18 <_vfiprintf_r+0x254>)
 8006972:	bb1b      	cbnz	r3, 80069bc <_vfiprintf_r+0x1f8>
 8006974:	9b03      	ldr	r3, [sp, #12]
 8006976:	3307      	adds	r3, #7
 8006978:	f023 0307 	bic.w	r3, r3, #7
 800697c:	3308      	adds	r3, #8
 800697e:	9303      	str	r3, [sp, #12]
 8006980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006982:	443b      	add	r3, r7
 8006984:	9309      	str	r3, [sp, #36]	; 0x24
 8006986:	e767      	b.n	8006858 <_vfiprintf_r+0x94>
 8006988:	fb0c 3202 	mla	r2, ip, r2, r3
 800698c:	460c      	mov	r4, r1
 800698e:	2001      	movs	r0, #1
 8006990:	e7a5      	b.n	80068de <_vfiprintf_r+0x11a>
 8006992:	2300      	movs	r3, #0
 8006994:	3401      	adds	r4, #1
 8006996:	9305      	str	r3, [sp, #20]
 8006998:	4619      	mov	r1, r3
 800699a:	f04f 0c0a 	mov.w	ip, #10
 800699e:	4620      	mov	r0, r4
 80069a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069a4:	3a30      	subs	r2, #48	; 0x30
 80069a6:	2a09      	cmp	r2, #9
 80069a8:	d903      	bls.n	80069b2 <_vfiprintf_r+0x1ee>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0c5      	beq.n	800693a <_vfiprintf_r+0x176>
 80069ae:	9105      	str	r1, [sp, #20]
 80069b0:	e7c3      	b.n	800693a <_vfiprintf_r+0x176>
 80069b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80069b6:	4604      	mov	r4, r0
 80069b8:	2301      	movs	r3, #1
 80069ba:	e7f0      	b.n	800699e <_vfiprintf_r+0x1da>
 80069bc:	ab03      	add	r3, sp, #12
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	462a      	mov	r2, r5
 80069c2:	4b16      	ldr	r3, [pc, #88]	; (8006a1c <_vfiprintf_r+0x258>)
 80069c4:	a904      	add	r1, sp, #16
 80069c6:	4630      	mov	r0, r6
 80069c8:	f3af 8000 	nop.w
 80069cc:	4607      	mov	r7, r0
 80069ce:	1c78      	adds	r0, r7, #1
 80069d0:	d1d6      	bne.n	8006980 <_vfiprintf_r+0x1bc>
 80069d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069d4:	07d9      	lsls	r1, r3, #31
 80069d6:	d405      	bmi.n	80069e4 <_vfiprintf_r+0x220>
 80069d8:	89ab      	ldrh	r3, [r5, #12]
 80069da:	059a      	lsls	r2, r3, #22
 80069dc:	d402      	bmi.n	80069e4 <_vfiprintf_r+0x220>
 80069de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069e0:	f000 fc45 	bl	800726e <__retarget_lock_release_recursive>
 80069e4:	89ab      	ldrh	r3, [r5, #12]
 80069e6:	065b      	lsls	r3, r3, #25
 80069e8:	f53f af12 	bmi.w	8006810 <_vfiprintf_r+0x4c>
 80069ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ee:	e711      	b.n	8006814 <_vfiprintf_r+0x50>
 80069f0:	ab03      	add	r3, sp, #12
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	462a      	mov	r2, r5
 80069f6:	4b09      	ldr	r3, [pc, #36]	; (8006a1c <_vfiprintf_r+0x258>)
 80069f8:	a904      	add	r1, sp, #16
 80069fa:	4630      	mov	r0, r6
 80069fc:	f000 f880 	bl	8006b00 <_printf_i>
 8006a00:	e7e4      	b.n	80069cc <_vfiprintf_r+0x208>
 8006a02:	bf00      	nop
 8006a04:	08007958 	.word	0x08007958
 8006a08:	08007978 	.word	0x08007978
 8006a0c:	08007938 	.word	0x08007938
 8006a10:	08007905 	.word	0x08007905
 8006a14:	0800790f 	.word	0x0800790f
 8006a18:	00000000 	.word	0x00000000
 8006a1c:	0800679f 	.word	0x0800679f
 8006a20:	0800790b 	.word	0x0800790b

08006a24 <_printf_common>:
 8006a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a28:	4616      	mov	r6, r2
 8006a2a:	4699      	mov	r9, r3
 8006a2c:	688a      	ldr	r2, [r1, #8]
 8006a2e:	690b      	ldr	r3, [r1, #16]
 8006a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a34:	4293      	cmp	r3, r2
 8006a36:	bfb8      	it	lt
 8006a38:	4613      	movlt	r3, r2
 8006a3a:	6033      	str	r3, [r6, #0]
 8006a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a40:	4607      	mov	r7, r0
 8006a42:	460c      	mov	r4, r1
 8006a44:	b10a      	cbz	r2, 8006a4a <_printf_common+0x26>
 8006a46:	3301      	adds	r3, #1
 8006a48:	6033      	str	r3, [r6, #0]
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	0699      	lsls	r1, r3, #26
 8006a4e:	bf42      	ittt	mi
 8006a50:	6833      	ldrmi	r3, [r6, #0]
 8006a52:	3302      	addmi	r3, #2
 8006a54:	6033      	strmi	r3, [r6, #0]
 8006a56:	6825      	ldr	r5, [r4, #0]
 8006a58:	f015 0506 	ands.w	r5, r5, #6
 8006a5c:	d106      	bne.n	8006a6c <_printf_common+0x48>
 8006a5e:	f104 0a19 	add.w	sl, r4, #25
 8006a62:	68e3      	ldr	r3, [r4, #12]
 8006a64:	6832      	ldr	r2, [r6, #0]
 8006a66:	1a9b      	subs	r3, r3, r2
 8006a68:	42ab      	cmp	r3, r5
 8006a6a:	dc26      	bgt.n	8006aba <_printf_common+0x96>
 8006a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a70:	1e13      	subs	r3, r2, #0
 8006a72:	6822      	ldr	r2, [r4, #0]
 8006a74:	bf18      	it	ne
 8006a76:	2301      	movne	r3, #1
 8006a78:	0692      	lsls	r2, r2, #26
 8006a7a:	d42b      	bmi.n	8006ad4 <_printf_common+0xb0>
 8006a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a80:	4649      	mov	r1, r9
 8006a82:	4638      	mov	r0, r7
 8006a84:	47c0      	blx	r8
 8006a86:	3001      	adds	r0, #1
 8006a88:	d01e      	beq.n	8006ac8 <_printf_common+0xa4>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	68e5      	ldr	r5, [r4, #12]
 8006a8e:	6832      	ldr	r2, [r6, #0]
 8006a90:	f003 0306 	and.w	r3, r3, #6
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	bf08      	it	eq
 8006a98:	1aad      	subeq	r5, r5, r2
 8006a9a:	68a3      	ldr	r3, [r4, #8]
 8006a9c:	6922      	ldr	r2, [r4, #16]
 8006a9e:	bf0c      	ite	eq
 8006aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aa4:	2500      	movne	r5, #0
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	bfc4      	itt	gt
 8006aaa:	1a9b      	subgt	r3, r3, r2
 8006aac:	18ed      	addgt	r5, r5, r3
 8006aae:	2600      	movs	r6, #0
 8006ab0:	341a      	adds	r4, #26
 8006ab2:	42b5      	cmp	r5, r6
 8006ab4:	d11a      	bne.n	8006aec <_printf_common+0xc8>
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	e008      	b.n	8006acc <_printf_common+0xa8>
 8006aba:	2301      	movs	r3, #1
 8006abc:	4652      	mov	r2, sl
 8006abe:	4649      	mov	r1, r9
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	47c0      	blx	r8
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d103      	bne.n	8006ad0 <_printf_common+0xac>
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8006acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad0:	3501      	adds	r5, #1
 8006ad2:	e7c6      	b.n	8006a62 <_printf_common+0x3e>
 8006ad4:	18e1      	adds	r1, r4, r3
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	2030      	movs	r0, #48	; 0x30
 8006ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ade:	4422      	add	r2, r4
 8006ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ae8:	3302      	adds	r3, #2
 8006aea:	e7c7      	b.n	8006a7c <_printf_common+0x58>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4622      	mov	r2, r4
 8006af0:	4649      	mov	r1, r9
 8006af2:	4638      	mov	r0, r7
 8006af4:	47c0      	blx	r8
 8006af6:	3001      	adds	r0, #1
 8006af8:	d0e6      	beq.n	8006ac8 <_printf_common+0xa4>
 8006afa:	3601      	adds	r6, #1
 8006afc:	e7d9      	b.n	8006ab2 <_printf_common+0x8e>
	...

08006b00 <_printf_i>:
 8006b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b04:	7e0f      	ldrb	r7, [r1, #24]
 8006b06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b08:	2f78      	cmp	r7, #120	; 0x78
 8006b0a:	4691      	mov	r9, r2
 8006b0c:	4680      	mov	r8, r0
 8006b0e:	460c      	mov	r4, r1
 8006b10:	469a      	mov	sl, r3
 8006b12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b16:	d807      	bhi.n	8006b28 <_printf_i+0x28>
 8006b18:	2f62      	cmp	r7, #98	; 0x62
 8006b1a:	d80a      	bhi.n	8006b32 <_printf_i+0x32>
 8006b1c:	2f00      	cmp	r7, #0
 8006b1e:	f000 80d8 	beq.w	8006cd2 <_printf_i+0x1d2>
 8006b22:	2f58      	cmp	r7, #88	; 0x58
 8006b24:	f000 80a3 	beq.w	8006c6e <_printf_i+0x16e>
 8006b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b30:	e03a      	b.n	8006ba8 <_printf_i+0xa8>
 8006b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b36:	2b15      	cmp	r3, #21
 8006b38:	d8f6      	bhi.n	8006b28 <_printf_i+0x28>
 8006b3a:	a101      	add	r1, pc, #4	; (adr r1, 8006b40 <_printf_i+0x40>)
 8006b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b40:	08006b99 	.word	0x08006b99
 8006b44:	08006bad 	.word	0x08006bad
 8006b48:	08006b29 	.word	0x08006b29
 8006b4c:	08006b29 	.word	0x08006b29
 8006b50:	08006b29 	.word	0x08006b29
 8006b54:	08006b29 	.word	0x08006b29
 8006b58:	08006bad 	.word	0x08006bad
 8006b5c:	08006b29 	.word	0x08006b29
 8006b60:	08006b29 	.word	0x08006b29
 8006b64:	08006b29 	.word	0x08006b29
 8006b68:	08006b29 	.word	0x08006b29
 8006b6c:	08006cb9 	.word	0x08006cb9
 8006b70:	08006bdd 	.word	0x08006bdd
 8006b74:	08006c9b 	.word	0x08006c9b
 8006b78:	08006b29 	.word	0x08006b29
 8006b7c:	08006b29 	.word	0x08006b29
 8006b80:	08006cdb 	.word	0x08006cdb
 8006b84:	08006b29 	.word	0x08006b29
 8006b88:	08006bdd 	.word	0x08006bdd
 8006b8c:	08006b29 	.word	0x08006b29
 8006b90:	08006b29 	.word	0x08006b29
 8006b94:	08006ca3 	.word	0x08006ca3
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	1d1a      	adds	r2, r3, #4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	602a      	str	r2, [r5, #0]
 8006ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e0a3      	b.n	8006cf4 <_printf_i+0x1f4>
 8006bac:	6820      	ldr	r0, [r4, #0]
 8006bae:	6829      	ldr	r1, [r5, #0]
 8006bb0:	0606      	lsls	r6, r0, #24
 8006bb2:	f101 0304 	add.w	r3, r1, #4
 8006bb6:	d50a      	bpl.n	8006bce <_printf_i+0xce>
 8006bb8:	680e      	ldr	r6, [r1, #0]
 8006bba:	602b      	str	r3, [r5, #0]
 8006bbc:	2e00      	cmp	r6, #0
 8006bbe:	da03      	bge.n	8006bc8 <_printf_i+0xc8>
 8006bc0:	232d      	movs	r3, #45	; 0x2d
 8006bc2:	4276      	negs	r6, r6
 8006bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc8:	485e      	ldr	r0, [pc, #376]	; (8006d44 <_printf_i+0x244>)
 8006bca:	230a      	movs	r3, #10
 8006bcc:	e019      	b.n	8006c02 <_printf_i+0x102>
 8006bce:	680e      	ldr	r6, [r1, #0]
 8006bd0:	602b      	str	r3, [r5, #0]
 8006bd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006bd6:	bf18      	it	ne
 8006bd8:	b236      	sxthne	r6, r6
 8006bda:	e7ef      	b.n	8006bbc <_printf_i+0xbc>
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	6820      	ldr	r0, [r4, #0]
 8006be0:	1d19      	adds	r1, r3, #4
 8006be2:	6029      	str	r1, [r5, #0]
 8006be4:	0601      	lsls	r1, r0, #24
 8006be6:	d501      	bpl.n	8006bec <_printf_i+0xec>
 8006be8:	681e      	ldr	r6, [r3, #0]
 8006bea:	e002      	b.n	8006bf2 <_printf_i+0xf2>
 8006bec:	0646      	lsls	r6, r0, #25
 8006bee:	d5fb      	bpl.n	8006be8 <_printf_i+0xe8>
 8006bf0:	881e      	ldrh	r6, [r3, #0]
 8006bf2:	4854      	ldr	r0, [pc, #336]	; (8006d44 <_printf_i+0x244>)
 8006bf4:	2f6f      	cmp	r7, #111	; 0x6f
 8006bf6:	bf0c      	ite	eq
 8006bf8:	2308      	moveq	r3, #8
 8006bfa:	230a      	movne	r3, #10
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c02:	6865      	ldr	r5, [r4, #4]
 8006c04:	60a5      	str	r5, [r4, #8]
 8006c06:	2d00      	cmp	r5, #0
 8006c08:	bfa2      	ittt	ge
 8006c0a:	6821      	ldrge	r1, [r4, #0]
 8006c0c:	f021 0104 	bicge.w	r1, r1, #4
 8006c10:	6021      	strge	r1, [r4, #0]
 8006c12:	b90e      	cbnz	r6, 8006c18 <_printf_i+0x118>
 8006c14:	2d00      	cmp	r5, #0
 8006c16:	d04d      	beq.n	8006cb4 <_printf_i+0x1b4>
 8006c18:	4615      	mov	r5, r2
 8006c1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c1e:	fb03 6711 	mls	r7, r3, r1, r6
 8006c22:	5dc7      	ldrb	r7, [r0, r7]
 8006c24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c28:	4637      	mov	r7, r6
 8006c2a:	42bb      	cmp	r3, r7
 8006c2c:	460e      	mov	r6, r1
 8006c2e:	d9f4      	bls.n	8006c1a <_printf_i+0x11a>
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d10b      	bne.n	8006c4c <_printf_i+0x14c>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	07de      	lsls	r6, r3, #31
 8006c38:	d508      	bpl.n	8006c4c <_printf_i+0x14c>
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	6861      	ldr	r1, [r4, #4]
 8006c3e:	4299      	cmp	r1, r3
 8006c40:	bfde      	ittt	le
 8006c42:	2330      	movle	r3, #48	; 0x30
 8006c44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c4c:	1b52      	subs	r2, r2, r5
 8006c4e:	6122      	str	r2, [r4, #16]
 8006c50:	f8cd a000 	str.w	sl, [sp]
 8006c54:	464b      	mov	r3, r9
 8006c56:	aa03      	add	r2, sp, #12
 8006c58:	4621      	mov	r1, r4
 8006c5a:	4640      	mov	r0, r8
 8006c5c:	f7ff fee2 	bl	8006a24 <_printf_common>
 8006c60:	3001      	adds	r0, #1
 8006c62:	d14c      	bne.n	8006cfe <_printf_i+0x1fe>
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	b004      	add	sp, #16
 8006c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6e:	4835      	ldr	r0, [pc, #212]	; (8006d44 <_printf_i+0x244>)
 8006c70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c74:	6829      	ldr	r1, [r5, #0]
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c7c:	6029      	str	r1, [r5, #0]
 8006c7e:	061d      	lsls	r5, r3, #24
 8006c80:	d514      	bpl.n	8006cac <_printf_i+0x1ac>
 8006c82:	07df      	lsls	r7, r3, #31
 8006c84:	bf44      	itt	mi
 8006c86:	f043 0320 	orrmi.w	r3, r3, #32
 8006c8a:	6023      	strmi	r3, [r4, #0]
 8006c8c:	b91e      	cbnz	r6, 8006c96 <_printf_i+0x196>
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	f023 0320 	bic.w	r3, r3, #32
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	2310      	movs	r3, #16
 8006c98:	e7b0      	b.n	8006bfc <_printf_i+0xfc>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	f043 0320 	orr.w	r3, r3, #32
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	2378      	movs	r3, #120	; 0x78
 8006ca4:	4828      	ldr	r0, [pc, #160]	; (8006d48 <_printf_i+0x248>)
 8006ca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006caa:	e7e3      	b.n	8006c74 <_printf_i+0x174>
 8006cac:	0659      	lsls	r1, r3, #25
 8006cae:	bf48      	it	mi
 8006cb0:	b2b6      	uxthmi	r6, r6
 8006cb2:	e7e6      	b.n	8006c82 <_printf_i+0x182>
 8006cb4:	4615      	mov	r5, r2
 8006cb6:	e7bb      	b.n	8006c30 <_printf_i+0x130>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	6826      	ldr	r6, [r4, #0]
 8006cbc:	6961      	ldr	r1, [r4, #20]
 8006cbe:	1d18      	adds	r0, r3, #4
 8006cc0:	6028      	str	r0, [r5, #0]
 8006cc2:	0635      	lsls	r5, r6, #24
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	d501      	bpl.n	8006ccc <_printf_i+0x1cc>
 8006cc8:	6019      	str	r1, [r3, #0]
 8006cca:	e002      	b.n	8006cd2 <_printf_i+0x1d2>
 8006ccc:	0670      	lsls	r0, r6, #25
 8006cce:	d5fb      	bpl.n	8006cc8 <_printf_i+0x1c8>
 8006cd0:	8019      	strh	r1, [r3, #0]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	6123      	str	r3, [r4, #16]
 8006cd6:	4615      	mov	r5, r2
 8006cd8:	e7ba      	b.n	8006c50 <_printf_i+0x150>
 8006cda:	682b      	ldr	r3, [r5, #0]
 8006cdc:	1d1a      	adds	r2, r3, #4
 8006cde:	602a      	str	r2, [r5, #0]
 8006ce0:	681d      	ldr	r5, [r3, #0]
 8006ce2:	6862      	ldr	r2, [r4, #4]
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	f7f9 faaa 	bl	8000240 <memchr>
 8006cec:	b108      	cbz	r0, 8006cf2 <_printf_i+0x1f2>
 8006cee:	1b40      	subs	r0, r0, r5
 8006cf0:	6060      	str	r0, [r4, #4]
 8006cf2:	6863      	ldr	r3, [r4, #4]
 8006cf4:	6123      	str	r3, [r4, #16]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cfc:	e7a8      	b.n	8006c50 <_printf_i+0x150>
 8006cfe:	6923      	ldr	r3, [r4, #16]
 8006d00:	462a      	mov	r2, r5
 8006d02:	4649      	mov	r1, r9
 8006d04:	4640      	mov	r0, r8
 8006d06:	47d0      	blx	sl
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d0ab      	beq.n	8006c64 <_printf_i+0x164>
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	079b      	lsls	r3, r3, #30
 8006d10:	d413      	bmi.n	8006d3a <_printf_i+0x23a>
 8006d12:	68e0      	ldr	r0, [r4, #12]
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	4298      	cmp	r0, r3
 8006d18:	bfb8      	it	lt
 8006d1a:	4618      	movlt	r0, r3
 8006d1c:	e7a4      	b.n	8006c68 <_printf_i+0x168>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	4632      	mov	r2, r6
 8006d22:	4649      	mov	r1, r9
 8006d24:	4640      	mov	r0, r8
 8006d26:	47d0      	blx	sl
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d09b      	beq.n	8006c64 <_printf_i+0x164>
 8006d2c:	3501      	adds	r5, #1
 8006d2e:	68e3      	ldr	r3, [r4, #12]
 8006d30:	9903      	ldr	r1, [sp, #12]
 8006d32:	1a5b      	subs	r3, r3, r1
 8006d34:	42ab      	cmp	r3, r5
 8006d36:	dcf2      	bgt.n	8006d1e <_printf_i+0x21e>
 8006d38:	e7eb      	b.n	8006d12 <_printf_i+0x212>
 8006d3a:	2500      	movs	r5, #0
 8006d3c:	f104 0619 	add.w	r6, r4, #25
 8006d40:	e7f5      	b.n	8006d2e <_printf_i+0x22e>
 8006d42:	bf00      	nop
 8006d44:	08007916 	.word	0x08007916
 8006d48:	08007927 	.word	0x08007927

08006d4c <_sbrk_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	4d06      	ldr	r5, [pc, #24]	; (8006d68 <_sbrk_r+0x1c>)
 8006d50:	2300      	movs	r3, #0
 8006d52:	4604      	mov	r4, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	602b      	str	r3, [r5, #0]
 8006d58:	f7fa fa32 	bl	80011c0 <_sbrk>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d102      	bne.n	8006d66 <_sbrk_r+0x1a>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	b103      	cbz	r3, 8006d66 <_sbrk_r+0x1a>
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	200002ac 	.word	0x200002ac

08006d6c <__swbuf_r>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	460e      	mov	r6, r1
 8006d70:	4614      	mov	r4, r2
 8006d72:	4605      	mov	r5, r0
 8006d74:	b118      	cbz	r0, 8006d7e <__swbuf_r+0x12>
 8006d76:	6983      	ldr	r3, [r0, #24]
 8006d78:	b90b      	cbnz	r3, 8006d7e <__swbuf_r+0x12>
 8006d7a:	f000 f9d9 	bl	8007130 <__sinit>
 8006d7e:	4b21      	ldr	r3, [pc, #132]	; (8006e04 <__swbuf_r+0x98>)
 8006d80:	429c      	cmp	r4, r3
 8006d82:	d12b      	bne.n	8006ddc <__swbuf_r+0x70>
 8006d84:	686c      	ldr	r4, [r5, #4]
 8006d86:	69a3      	ldr	r3, [r4, #24]
 8006d88:	60a3      	str	r3, [r4, #8]
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	071a      	lsls	r2, r3, #28
 8006d8e:	d52f      	bpl.n	8006df0 <__swbuf_r+0x84>
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	b36b      	cbz	r3, 8006df0 <__swbuf_r+0x84>
 8006d94:	6923      	ldr	r3, [r4, #16]
 8006d96:	6820      	ldr	r0, [r4, #0]
 8006d98:	1ac0      	subs	r0, r0, r3
 8006d9a:	6963      	ldr	r3, [r4, #20]
 8006d9c:	b2f6      	uxtb	r6, r6
 8006d9e:	4283      	cmp	r3, r0
 8006da0:	4637      	mov	r7, r6
 8006da2:	dc04      	bgt.n	8006dae <__swbuf_r+0x42>
 8006da4:	4621      	mov	r1, r4
 8006da6:	4628      	mov	r0, r5
 8006da8:	f000 f92e 	bl	8007008 <_fflush_r>
 8006dac:	bb30      	cbnz	r0, 8006dfc <__swbuf_r+0x90>
 8006dae:	68a3      	ldr	r3, [r4, #8]
 8006db0:	3b01      	subs	r3, #1
 8006db2:	60a3      	str	r3, [r4, #8]
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	6022      	str	r2, [r4, #0]
 8006dba:	701e      	strb	r6, [r3, #0]
 8006dbc:	6963      	ldr	r3, [r4, #20]
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	4283      	cmp	r3, r0
 8006dc2:	d004      	beq.n	8006dce <__swbuf_r+0x62>
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	07db      	lsls	r3, r3, #31
 8006dc8:	d506      	bpl.n	8006dd8 <__swbuf_r+0x6c>
 8006dca:	2e0a      	cmp	r6, #10
 8006dcc:	d104      	bne.n	8006dd8 <__swbuf_r+0x6c>
 8006dce:	4621      	mov	r1, r4
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	f000 f919 	bl	8007008 <_fflush_r>
 8006dd6:	b988      	cbnz	r0, 8006dfc <__swbuf_r+0x90>
 8006dd8:	4638      	mov	r0, r7
 8006dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <__swbuf_r+0x9c>)
 8006dde:	429c      	cmp	r4, r3
 8006de0:	d101      	bne.n	8006de6 <__swbuf_r+0x7a>
 8006de2:	68ac      	ldr	r4, [r5, #8]
 8006de4:	e7cf      	b.n	8006d86 <__swbuf_r+0x1a>
 8006de6:	4b09      	ldr	r3, [pc, #36]	; (8006e0c <__swbuf_r+0xa0>)
 8006de8:	429c      	cmp	r4, r3
 8006dea:	bf08      	it	eq
 8006dec:	68ec      	ldreq	r4, [r5, #12]
 8006dee:	e7ca      	b.n	8006d86 <__swbuf_r+0x1a>
 8006df0:	4621      	mov	r1, r4
 8006df2:	4628      	mov	r0, r5
 8006df4:	f000 f80c 	bl	8006e10 <__swsetup_r>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d0cb      	beq.n	8006d94 <__swbuf_r+0x28>
 8006dfc:	f04f 37ff 	mov.w	r7, #4294967295
 8006e00:	e7ea      	b.n	8006dd8 <__swbuf_r+0x6c>
 8006e02:	bf00      	nop
 8006e04:	08007958 	.word	0x08007958
 8006e08:	08007978 	.word	0x08007978
 8006e0c:	08007938 	.word	0x08007938

08006e10 <__swsetup_r>:
 8006e10:	4b32      	ldr	r3, [pc, #200]	; (8006edc <__swsetup_r+0xcc>)
 8006e12:	b570      	push	{r4, r5, r6, lr}
 8006e14:	681d      	ldr	r5, [r3, #0]
 8006e16:	4606      	mov	r6, r0
 8006e18:	460c      	mov	r4, r1
 8006e1a:	b125      	cbz	r5, 8006e26 <__swsetup_r+0x16>
 8006e1c:	69ab      	ldr	r3, [r5, #24]
 8006e1e:	b913      	cbnz	r3, 8006e26 <__swsetup_r+0x16>
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 f985 	bl	8007130 <__sinit>
 8006e26:	4b2e      	ldr	r3, [pc, #184]	; (8006ee0 <__swsetup_r+0xd0>)
 8006e28:	429c      	cmp	r4, r3
 8006e2a:	d10f      	bne.n	8006e4c <__swsetup_r+0x3c>
 8006e2c:	686c      	ldr	r4, [r5, #4]
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e34:	0719      	lsls	r1, r3, #28
 8006e36:	d42c      	bmi.n	8006e92 <__swsetup_r+0x82>
 8006e38:	06dd      	lsls	r5, r3, #27
 8006e3a:	d411      	bmi.n	8006e60 <__swsetup_r+0x50>
 8006e3c:	2309      	movs	r3, #9
 8006e3e:	6033      	str	r3, [r6, #0]
 8006e40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e44:	81a3      	strh	r3, [r4, #12]
 8006e46:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4a:	e03e      	b.n	8006eca <__swsetup_r+0xba>
 8006e4c:	4b25      	ldr	r3, [pc, #148]	; (8006ee4 <__swsetup_r+0xd4>)
 8006e4e:	429c      	cmp	r4, r3
 8006e50:	d101      	bne.n	8006e56 <__swsetup_r+0x46>
 8006e52:	68ac      	ldr	r4, [r5, #8]
 8006e54:	e7eb      	b.n	8006e2e <__swsetup_r+0x1e>
 8006e56:	4b24      	ldr	r3, [pc, #144]	; (8006ee8 <__swsetup_r+0xd8>)
 8006e58:	429c      	cmp	r4, r3
 8006e5a:	bf08      	it	eq
 8006e5c:	68ec      	ldreq	r4, [r5, #12]
 8006e5e:	e7e6      	b.n	8006e2e <__swsetup_r+0x1e>
 8006e60:	0758      	lsls	r0, r3, #29
 8006e62:	d512      	bpl.n	8006e8a <__swsetup_r+0x7a>
 8006e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e66:	b141      	cbz	r1, 8006e7a <__swsetup_r+0x6a>
 8006e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e6c:	4299      	cmp	r1, r3
 8006e6e:	d002      	beq.n	8006e76 <__swsetup_r+0x66>
 8006e70:	4630      	mov	r0, r6
 8006e72:	f7ff fa41 	bl	80062f8 <_free_r>
 8006e76:	2300      	movs	r3, #0
 8006e78:	6363      	str	r3, [r4, #52]	; 0x34
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	2300      	movs	r3, #0
 8006e84:	6063      	str	r3, [r4, #4]
 8006e86:	6923      	ldr	r3, [r4, #16]
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	89a3      	ldrh	r3, [r4, #12]
 8006e8c:	f043 0308 	orr.w	r3, r3, #8
 8006e90:	81a3      	strh	r3, [r4, #12]
 8006e92:	6923      	ldr	r3, [r4, #16]
 8006e94:	b94b      	cbnz	r3, 8006eaa <__swsetup_r+0x9a>
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea0:	d003      	beq.n	8006eaa <__swsetup_r+0x9a>
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	f000 fa09 	bl	80072bc <__smakebuf_r>
 8006eaa:	89a0      	ldrh	r0, [r4, #12]
 8006eac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006eb0:	f010 0301 	ands.w	r3, r0, #1
 8006eb4:	d00a      	beq.n	8006ecc <__swsetup_r+0xbc>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60a3      	str	r3, [r4, #8]
 8006eba:	6963      	ldr	r3, [r4, #20]
 8006ebc:	425b      	negs	r3, r3
 8006ebe:	61a3      	str	r3, [r4, #24]
 8006ec0:	6923      	ldr	r3, [r4, #16]
 8006ec2:	b943      	cbnz	r3, 8006ed6 <__swsetup_r+0xc6>
 8006ec4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ec8:	d1ba      	bne.n	8006e40 <__swsetup_r+0x30>
 8006eca:	bd70      	pop	{r4, r5, r6, pc}
 8006ecc:	0781      	lsls	r1, r0, #30
 8006ece:	bf58      	it	pl
 8006ed0:	6963      	ldrpl	r3, [r4, #20]
 8006ed2:	60a3      	str	r3, [r4, #8]
 8006ed4:	e7f4      	b.n	8006ec0 <__swsetup_r+0xb0>
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	e7f7      	b.n	8006eca <__swsetup_r+0xba>
 8006eda:	bf00      	nop
 8006edc:	200000a4 	.word	0x200000a4
 8006ee0:	08007958 	.word	0x08007958
 8006ee4:	08007978 	.word	0x08007978
 8006ee8:	08007938 	.word	0x08007938

08006eec <abort>:
 8006eec:	b508      	push	{r3, lr}
 8006eee:	2006      	movs	r0, #6
 8006ef0:	f000 fab0 	bl	8007454 <raise>
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	f7fa f8eb 	bl	80010d0 <_exit>
	...

08006efc <__sflush_r>:
 8006efc:	898a      	ldrh	r2, [r1, #12]
 8006efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f02:	4605      	mov	r5, r0
 8006f04:	0710      	lsls	r0, r2, #28
 8006f06:	460c      	mov	r4, r1
 8006f08:	d458      	bmi.n	8006fbc <__sflush_r+0xc0>
 8006f0a:	684b      	ldr	r3, [r1, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	dc05      	bgt.n	8006f1c <__sflush_r+0x20>
 8006f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dc02      	bgt.n	8006f1c <__sflush_r+0x20>
 8006f16:	2000      	movs	r0, #0
 8006f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f1e:	2e00      	cmp	r6, #0
 8006f20:	d0f9      	beq.n	8006f16 <__sflush_r+0x1a>
 8006f22:	2300      	movs	r3, #0
 8006f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f28:	682f      	ldr	r7, [r5, #0]
 8006f2a:	602b      	str	r3, [r5, #0]
 8006f2c:	d032      	beq.n	8006f94 <__sflush_r+0x98>
 8006f2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	075a      	lsls	r2, r3, #29
 8006f34:	d505      	bpl.n	8006f42 <__sflush_r+0x46>
 8006f36:	6863      	ldr	r3, [r4, #4]
 8006f38:	1ac0      	subs	r0, r0, r3
 8006f3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f3c:	b10b      	cbz	r3, 8006f42 <__sflush_r+0x46>
 8006f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f40:	1ac0      	subs	r0, r0, r3
 8006f42:	2300      	movs	r3, #0
 8006f44:	4602      	mov	r2, r0
 8006f46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f48:	6a21      	ldr	r1, [r4, #32]
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	47b0      	blx	r6
 8006f4e:	1c43      	adds	r3, r0, #1
 8006f50:	89a3      	ldrh	r3, [r4, #12]
 8006f52:	d106      	bne.n	8006f62 <__sflush_r+0x66>
 8006f54:	6829      	ldr	r1, [r5, #0]
 8006f56:	291d      	cmp	r1, #29
 8006f58:	d82c      	bhi.n	8006fb4 <__sflush_r+0xb8>
 8006f5a:	4a2a      	ldr	r2, [pc, #168]	; (8007004 <__sflush_r+0x108>)
 8006f5c:	40ca      	lsrs	r2, r1
 8006f5e:	07d6      	lsls	r6, r2, #31
 8006f60:	d528      	bpl.n	8006fb4 <__sflush_r+0xb8>
 8006f62:	2200      	movs	r2, #0
 8006f64:	6062      	str	r2, [r4, #4]
 8006f66:	04d9      	lsls	r1, r3, #19
 8006f68:	6922      	ldr	r2, [r4, #16]
 8006f6a:	6022      	str	r2, [r4, #0]
 8006f6c:	d504      	bpl.n	8006f78 <__sflush_r+0x7c>
 8006f6e:	1c42      	adds	r2, r0, #1
 8006f70:	d101      	bne.n	8006f76 <__sflush_r+0x7a>
 8006f72:	682b      	ldr	r3, [r5, #0]
 8006f74:	b903      	cbnz	r3, 8006f78 <__sflush_r+0x7c>
 8006f76:	6560      	str	r0, [r4, #84]	; 0x54
 8006f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f7a:	602f      	str	r7, [r5, #0]
 8006f7c:	2900      	cmp	r1, #0
 8006f7e:	d0ca      	beq.n	8006f16 <__sflush_r+0x1a>
 8006f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f84:	4299      	cmp	r1, r3
 8006f86:	d002      	beq.n	8006f8e <__sflush_r+0x92>
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f7ff f9b5 	bl	80062f8 <_free_r>
 8006f8e:	2000      	movs	r0, #0
 8006f90:	6360      	str	r0, [r4, #52]	; 0x34
 8006f92:	e7c1      	b.n	8006f18 <__sflush_r+0x1c>
 8006f94:	6a21      	ldr	r1, [r4, #32]
 8006f96:	2301      	movs	r3, #1
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b0      	blx	r6
 8006f9c:	1c41      	adds	r1, r0, #1
 8006f9e:	d1c7      	bne.n	8006f30 <__sflush_r+0x34>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0c4      	beq.n	8006f30 <__sflush_r+0x34>
 8006fa6:	2b1d      	cmp	r3, #29
 8006fa8:	d001      	beq.n	8006fae <__sflush_r+0xb2>
 8006faa:	2b16      	cmp	r3, #22
 8006fac:	d101      	bne.n	8006fb2 <__sflush_r+0xb6>
 8006fae:	602f      	str	r7, [r5, #0]
 8006fb0:	e7b1      	b.n	8006f16 <__sflush_r+0x1a>
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb8:	81a3      	strh	r3, [r4, #12]
 8006fba:	e7ad      	b.n	8006f18 <__sflush_r+0x1c>
 8006fbc:	690f      	ldr	r7, [r1, #16]
 8006fbe:	2f00      	cmp	r7, #0
 8006fc0:	d0a9      	beq.n	8006f16 <__sflush_r+0x1a>
 8006fc2:	0793      	lsls	r3, r2, #30
 8006fc4:	680e      	ldr	r6, [r1, #0]
 8006fc6:	bf08      	it	eq
 8006fc8:	694b      	ldreq	r3, [r1, #20]
 8006fca:	600f      	str	r7, [r1, #0]
 8006fcc:	bf18      	it	ne
 8006fce:	2300      	movne	r3, #0
 8006fd0:	eba6 0807 	sub.w	r8, r6, r7
 8006fd4:	608b      	str	r3, [r1, #8]
 8006fd6:	f1b8 0f00 	cmp.w	r8, #0
 8006fda:	dd9c      	ble.n	8006f16 <__sflush_r+0x1a>
 8006fdc:	6a21      	ldr	r1, [r4, #32]
 8006fde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fe0:	4643      	mov	r3, r8
 8006fe2:	463a      	mov	r2, r7
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	47b0      	blx	r6
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	dc06      	bgt.n	8006ffa <__sflush_r+0xfe>
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff2:	81a3      	strh	r3, [r4, #12]
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff8:	e78e      	b.n	8006f18 <__sflush_r+0x1c>
 8006ffa:	4407      	add	r7, r0
 8006ffc:	eba8 0800 	sub.w	r8, r8, r0
 8007000:	e7e9      	b.n	8006fd6 <__sflush_r+0xda>
 8007002:	bf00      	nop
 8007004:	20400001 	.word	0x20400001

08007008 <_fflush_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	690b      	ldr	r3, [r1, #16]
 800700c:	4605      	mov	r5, r0
 800700e:	460c      	mov	r4, r1
 8007010:	b913      	cbnz	r3, 8007018 <_fflush_r+0x10>
 8007012:	2500      	movs	r5, #0
 8007014:	4628      	mov	r0, r5
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	b118      	cbz	r0, 8007022 <_fflush_r+0x1a>
 800701a:	6983      	ldr	r3, [r0, #24]
 800701c:	b90b      	cbnz	r3, 8007022 <_fflush_r+0x1a>
 800701e:	f000 f887 	bl	8007130 <__sinit>
 8007022:	4b14      	ldr	r3, [pc, #80]	; (8007074 <_fflush_r+0x6c>)
 8007024:	429c      	cmp	r4, r3
 8007026:	d11b      	bne.n	8007060 <_fflush_r+0x58>
 8007028:	686c      	ldr	r4, [r5, #4]
 800702a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d0ef      	beq.n	8007012 <_fflush_r+0xa>
 8007032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007034:	07d0      	lsls	r0, r2, #31
 8007036:	d404      	bmi.n	8007042 <_fflush_r+0x3a>
 8007038:	0599      	lsls	r1, r3, #22
 800703a:	d402      	bmi.n	8007042 <_fflush_r+0x3a>
 800703c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800703e:	f000 f915 	bl	800726c <__retarget_lock_acquire_recursive>
 8007042:	4628      	mov	r0, r5
 8007044:	4621      	mov	r1, r4
 8007046:	f7ff ff59 	bl	8006efc <__sflush_r>
 800704a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800704c:	07da      	lsls	r2, r3, #31
 800704e:	4605      	mov	r5, r0
 8007050:	d4e0      	bmi.n	8007014 <_fflush_r+0xc>
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	059b      	lsls	r3, r3, #22
 8007056:	d4dd      	bmi.n	8007014 <_fflush_r+0xc>
 8007058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800705a:	f000 f908 	bl	800726e <__retarget_lock_release_recursive>
 800705e:	e7d9      	b.n	8007014 <_fflush_r+0xc>
 8007060:	4b05      	ldr	r3, [pc, #20]	; (8007078 <_fflush_r+0x70>)
 8007062:	429c      	cmp	r4, r3
 8007064:	d101      	bne.n	800706a <_fflush_r+0x62>
 8007066:	68ac      	ldr	r4, [r5, #8]
 8007068:	e7df      	b.n	800702a <_fflush_r+0x22>
 800706a:	4b04      	ldr	r3, [pc, #16]	; (800707c <_fflush_r+0x74>)
 800706c:	429c      	cmp	r4, r3
 800706e:	bf08      	it	eq
 8007070:	68ec      	ldreq	r4, [r5, #12]
 8007072:	e7da      	b.n	800702a <_fflush_r+0x22>
 8007074:	08007958 	.word	0x08007958
 8007078:	08007978 	.word	0x08007978
 800707c:	08007938 	.word	0x08007938

08007080 <std>:
 8007080:	2300      	movs	r3, #0
 8007082:	b510      	push	{r4, lr}
 8007084:	4604      	mov	r4, r0
 8007086:	e9c0 3300 	strd	r3, r3, [r0]
 800708a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800708e:	6083      	str	r3, [r0, #8]
 8007090:	8181      	strh	r1, [r0, #12]
 8007092:	6643      	str	r3, [r0, #100]	; 0x64
 8007094:	81c2      	strh	r2, [r0, #14]
 8007096:	6183      	str	r3, [r0, #24]
 8007098:	4619      	mov	r1, r3
 800709a:	2208      	movs	r2, #8
 800709c:	305c      	adds	r0, #92	; 0x5c
 800709e:	f7fe ffcf 	bl	8006040 <memset>
 80070a2:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <std+0x38>)
 80070a4:	6263      	str	r3, [r4, #36]	; 0x24
 80070a6:	4b05      	ldr	r3, [pc, #20]	; (80070bc <std+0x3c>)
 80070a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80070aa:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <std+0x40>)
 80070ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070ae:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <std+0x44>)
 80070b0:	6224      	str	r4, [r4, #32]
 80070b2:	6323      	str	r3, [r4, #48]	; 0x30
 80070b4:	bd10      	pop	{r4, pc}
 80070b6:	bf00      	nop
 80070b8:	0800748d 	.word	0x0800748d
 80070bc:	080074af 	.word	0x080074af
 80070c0:	080074e7 	.word	0x080074e7
 80070c4:	0800750b 	.word	0x0800750b

080070c8 <_cleanup_r>:
 80070c8:	4901      	ldr	r1, [pc, #4]	; (80070d0 <_cleanup_r+0x8>)
 80070ca:	f000 b8af 	b.w	800722c <_fwalk_reent>
 80070ce:	bf00      	nop
 80070d0:	08007009 	.word	0x08007009

080070d4 <__sfmoreglue>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	2268      	movs	r2, #104	; 0x68
 80070d8:	1e4d      	subs	r5, r1, #1
 80070da:	4355      	muls	r5, r2
 80070dc:	460e      	mov	r6, r1
 80070de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070e2:	f7ff f975 	bl	80063d0 <_malloc_r>
 80070e6:	4604      	mov	r4, r0
 80070e8:	b140      	cbz	r0, 80070fc <__sfmoreglue+0x28>
 80070ea:	2100      	movs	r1, #0
 80070ec:	e9c0 1600 	strd	r1, r6, [r0]
 80070f0:	300c      	adds	r0, #12
 80070f2:	60a0      	str	r0, [r4, #8]
 80070f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070f8:	f7fe ffa2 	bl	8006040 <memset>
 80070fc:	4620      	mov	r0, r4
 80070fe:	bd70      	pop	{r4, r5, r6, pc}

08007100 <__sfp_lock_acquire>:
 8007100:	4801      	ldr	r0, [pc, #4]	; (8007108 <__sfp_lock_acquire+0x8>)
 8007102:	f000 b8b3 	b.w	800726c <__retarget_lock_acquire_recursive>
 8007106:	bf00      	nop
 8007108:	200002a9 	.word	0x200002a9

0800710c <__sfp_lock_release>:
 800710c:	4801      	ldr	r0, [pc, #4]	; (8007114 <__sfp_lock_release+0x8>)
 800710e:	f000 b8ae 	b.w	800726e <__retarget_lock_release_recursive>
 8007112:	bf00      	nop
 8007114:	200002a9 	.word	0x200002a9

08007118 <__sinit_lock_acquire>:
 8007118:	4801      	ldr	r0, [pc, #4]	; (8007120 <__sinit_lock_acquire+0x8>)
 800711a:	f000 b8a7 	b.w	800726c <__retarget_lock_acquire_recursive>
 800711e:	bf00      	nop
 8007120:	200002aa 	.word	0x200002aa

08007124 <__sinit_lock_release>:
 8007124:	4801      	ldr	r0, [pc, #4]	; (800712c <__sinit_lock_release+0x8>)
 8007126:	f000 b8a2 	b.w	800726e <__retarget_lock_release_recursive>
 800712a:	bf00      	nop
 800712c:	200002aa 	.word	0x200002aa

08007130 <__sinit>:
 8007130:	b510      	push	{r4, lr}
 8007132:	4604      	mov	r4, r0
 8007134:	f7ff fff0 	bl	8007118 <__sinit_lock_acquire>
 8007138:	69a3      	ldr	r3, [r4, #24]
 800713a:	b11b      	cbz	r3, 8007144 <__sinit+0x14>
 800713c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007140:	f7ff bff0 	b.w	8007124 <__sinit_lock_release>
 8007144:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007148:	6523      	str	r3, [r4, #80]	; 0x50
 800714a:	4b13      	ldr	r3, [pc, #76]	; (8007198 <__sinit+0x68>)
 800714c:	4a13      	ldr	r2, [pc, #76]	; (800719c <__sinit+0x6c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	62a2      	str	r2, [r4, #40]	; 0x28
 8007152:	42a3      	cmp	r3, r4
 8007154:	bf04      	itt	eq
 8007156:	2301      	moveq	r3, #1
 8007158:	61a3      	streq	r3, [r4, #24]
 800715a:	4620      	mov	r0, r4
 800715c:	f000 f820 	bl	80071a0 <__sfp>
 8007160:	6060      	str	r0, [r4, #4]
 8007162:	4620      	mov	r0, r4
 8007164:	f000 f81c 	bl	80071a0 <__sfp>
 8007168:	60a0      	str	r0, [r4, #8]
 800716a:	4620      	mov	r0, r4
 800716c:	f000 f818 	bl	80071a0 <__sfp>
 8007170:	2200      	movs	r2, #0
 8007172:	60e0      	str	r0, [r4, #12]
 8007174:	2104      	movs	r1, #4
 8007176:	6860      	ldr	r0, [r4, #4]
 8007178:	f7ff ff82 	bl	8007080 <std>
 800717c:	68a0      	ldr	r0, [r4, #8]
 800717e:	2201      	movs	r2, #1
 8007180:	2109      	movs	r1, #9
 8007182:	f7ff ff7d 	bl	8007080 <std>
 8007186:	68e0      	ldr	r0, [r4, #12]
 8007188:	2202      	movs	r2, #2
 800718a:	2112      	movs	r1, #18
 800718c:	f7ff ff78 	bl	8007080 <std>
 8007190:	2301      	movs	r3, #1
 8007192:	61a3      	str	r3, [r4, #24]
 8007194:	e7d2      	b.n	800713c <__sinit+0xc>
 8007196:	bf00      	nop
 8007198:	08007750 	.word	0x08007750
 800719c:	080070c9 	.word	0x080070c9

080071a0 <__sfp>:
 80071a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a2:	4607      	mov	r7, r0
 80071a4:	f7ff ffac 	bl	8007100 <__sfp_lock_acquire>
 80071a8:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <__sfp+0x84>)
 80071aa:	681e      	ldr	r6, [r3, #0]
 80071ac:	69b3      	ldr	r3, [r6, #24]
 80071ae:	b913      	cbnz	r3, 80071b6 <__sfp+0x16>
 80071b0:	4630      	mov	r0, r6
 80071b2:	f7ff ffbd 	bl	8007130 <__sinit>
 80071b6:	3648      	adds	r6, #72	; 0x48
 80071b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80071bc:	3b01      	subs	r3, #1
 80071be:	d503      	bpl.n	80071c8 <__sfp+0x28>
 80071c0:	6833      	ldr	r3, [r6, #0]
 80071c2:	b30b      	cbz	r3, 8007208 <__sfp+0x68>
 80071c4:	6836      	ldr	r6, [r6, #0]
 80071c6:	e7f7      	b.n	80071b8 <__sfp+0x18>
 80071c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80071cc:	b9d5      	cbnz	r5, 8007204 <__sfp+0x64>
 80071ce:	4b16      	ldr	r3, [pc, #88]	; (8007228 <__sfp+0x88>)
 80071d0:	60e3      	str	r3, [r4, #12]
 80071d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071d6:	6665      	str	r5, [r4, #100]	; 0x64
 80071d8:	f000 f847 	bl	800726a <__retarget_lock_init_recursive>
 80071dc:	f7ff ff96 	bl	800710c <__sfp_lock_release>
 80071e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071e8:	6025      	str	r5, [r4, #0]
 80071ea:	61a5      	str	r5, [r4, #24]
 80071ec:	2208      	movs	r2, #8
 80071ee:	4629      	mov	r1, r5
 80071f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071f4:	f7fe ff24 	bl	8006040 <memset>
 80071f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007200:	4620      	mov	r0, r4
 8007202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007204:	3468      	adds	r4, #104	; 0x68
 8007206:	e7d9      	b.n	80071bc <__sfp+0x1c>
 8007208:	2104      	movs	r1, #4
 800720a:	4638      	mov	r0, r7
 800720c:	f7ff ff62 	bl	80070d4 <__sfmoreglue>
 8007210:	4604      	mov	r4, r0
 8007212:	6030      	str	r0, [r6, #0]
 8007214:	2800      	cmp	r0, #0
 8007216:	d1d5      	bne.n	80071c4 <__sfp+0x24>
 8007218:	f7ff ff78 	bl	800710c <__sfp_lock_release>
 800721c:	230c      	movs	r3, #12
 800721e:	603b      	str	r3, [r7, #0]
 8007220:	e7ee      	b.n	8007200 <__sfp+0x60>
 8007222:	bf00      	nop
 8007224:	08007750 	.word	0x08007750
 8007228:	ffff0001 	.word	0xffff0001

0800722c <_fwalk_reent>:
 800722c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007230:	4606      	mov	r6, r0
 8007232:	4688      	mov	r8, r1
 8007234:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007238:	2700      	movs	r7, #0
 800723a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800723e:	f1b9 0901 	subs.w	r9, r9, #1
 8007242:	d505      	bpl.n	8007250 <_fwalk_reent+0x24>
 8007244:	6824      	ldr	r4, [r4, #0]
 8007246:	2c00      	cmp	r4, #0
 8007248:	d1f7      	bne.n	800723a <_fwalk_reent+0xe>
 800724a:	4638      	mov	r0, r7
 800724c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007250:	89ab      	ldrh	r3, [r5, #12]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d907      	bls.n	8007266 <_fwalk_reent+0x3a>
 8007256:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800725a:	3301      	adds	r3, #1
 800725c:	d003      	beq.n	8007266 <_fwalk_reent+0x3a>
 800725e:	4629      	mov	r1, r5
 8007260:	4630      	mov	r0, r6
 8007262:	47c0      	blx	r8
 8007264:	4307      	orrs	r7, r0
 8007266:	3568      	adds	r5, #104	; 0x68
 8007268:	e7e9      	b.n	800723e <_fwalk_reent+0x12>

0800726a <__retarget_lock_init_recursive>:
 800726a:	4770      	bx	lr

0800726c <__retarget_lock_acquire_recursive>:
 800726c:	4770      	bx	lr

0800726e <__retarget_lock_release_recursive>:
 800726e:	4770      	bx	lr

08007270 <__swhatbuf_r>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	460e      	mov	r6, r1
 8007274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007278:	2900      	cmp	r1, #0
 800727a:	b096      	sub	sp, #88	; 0x58
 800727c:	4614      	mov	r4, r2
 800727e:	461d      	mov	r5, r3
 8007280:	da08      	bge.n	8007294 <__swhatbuf_r+0x24>
 8007282:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	602a      	str	r2, [r5, #0]
 800728a:	061a      	lsls	r2, r3, #24
 800728c:	d410      	bmi.n	80072b0 <__swhatbuf_r+0x40>
 800728e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007292:	e00e      	b.n	80072b2 <__swhatbuf_r+0x42>
 8007294:	466a      	mov	r2, sp
 8007296:	f000 f95f 	bl	8007558 <_fstat_r>
 800729a:	2800      	cmp	r0, #0
 800729c:	dbf1      	blt.n	8007282 <__swhatbuf_r+0x12>
 800729e:	9a01      	ldr	r2, [sp, #4]
 80072a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072a8:	425a      	negs	r2, r3
 80072aa:	415a      	adcs	r2, r3
 80072ac:	602a      	str	r2, [r5, #0]
 80072ae:	e7ee      	b.n	800728e <__swhatbuf_r+0x1e>
 80072b0:	2340      	movs	r3, #64	; 0x40
 80072b2:	2000      	movs	r0, #0
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	b016      	add	sp, #88	; 0x58
 80072b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080072bc <__smakebuf_r>:
 80072bc:	898b      	ldrh	r3, [r1, #12]
 80072be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072c0:	079d      	lsls	r5, r3, #30
 80072c2:	4606      	mov	r6, r0
 80072c4:	460c      	mov	r4, r1
 80072c6:	d507      	bpl.n	80072d8 <__smakebuf_r+0x1c>
 80072c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	6123      	str	r3, [r4, #16]
 80072d0:	2301      	movs	r3, #1
 80072d2:	6163      	str	r3, [r4, #20]
 80072d4:	b002      	add	sp, #8
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
 80072d8:	ab01      	add	r3, sp, #4
 80072da:	466a      	mov	r2, sp
 80072dc:	f7ff ffc8 	bl	8007270 <__swhatbuf_r>
 80072e0:	9900      	ldr	r1, [sp, #0]
 80072e2:	4605      	mov	r5, r0
 80072e4:	4630      	mov	r0, r6
 80072e6:	f7ff f873 	bl	80063d0 <_malloc_r>
 80072ea:	b948      	cbnz	r0, 8007300 <__smakebuf_r+0x44>
 80072ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072f0:	059a      	lsls	r2, r3, #22
 80072f2:	d4ef      	bmi.n	80072d4 <__smakebuf_r+0x18>
 80072f4:	f023 0303 	bic.w	r3, r3, #3
 80072f8:	f043 0302 	orr.w	r3, r3, #2
 80072fc:	81a3      	strh	r3, [r4, #12]
 80072fe:	e7e3      	b.n	80072c8 <__smakebuf_r+0xc>
 8007300:	4b0d      	ldr	r3, [pc, #52]	; (8007338 <__smakebuf_r+0x7c>)
 8007302:	62b3      	str	r3, [r6, #40]	; 0x28
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	6020      	str	r0, [r4, #0]
 8007308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	9b00      	ldr	r3, [sp, #0]
 8007310:	6163      	str	r3, [r4, #20]
 8007312:	9b01      	ldr	r3, [sp, #4]
 8007314:	6120      	str	r0, [r4, #16]
 8007316:	b15b      	cbz	r3, 8007330 <__smakebuf_r+0x74>
 8007318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800731c:	4630      	mov	r0, r6
 800731e:	f000 f92d 	bl	800757c <_isatty_r>
 8007322:	b128      	cbz	r0, 8007330 <__smakebuf_r+0x74>
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	f023 0303 	bic.w	r3, r3, #3
 800732a:	f043 0301 	orr.w	r3, r3, #1
 800732e:	81a3      	strh	r3, [r4, #12]
 8007330:	89a0      	ldrh	r0, [r4, #12]
 8007332:	4305      	orrs	r5, r0
 8007334:	81a5      	strh	r5, [r4, #12]
 8007336:	e7cd      	b.n	80072d4 <__smakebuf_r+0x18>
 8007338:	080070c9 	.word	0x080070c9

0800733c <memcpy>:
 800733c:	440a      	add	r2, r1
 800733e:	4291      	cmp	r1, r2
 8007340:	f100 33ff 	add.w	r3, r0, #4294967295
 8007344:	d100      	bne.n	8007348 <memcpy+0xc>
 8007346:	4770      	bx	lr
 8007348:	b510      	push	{r4, lr}
 800734a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800734e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007352:	4291      	cmp	r1, r2
 8007354:	d1f9      	bne.n	800734a <memcpy+0xe>
 8007356:	bd10      	pop	{r4, pc}

08007358 <memmove>:
 8007358:	4288      	cmp	r0, r1
 800735a:	b510      	push	{r4, lr}
 800735c:	eb01 0402 	add.w	r4, r1, r2
 8007360:	d902      	bls.n	8007368 <memmove+0x10>
 8007362:	4284      	cmp	r4, r0
 8007364:	4623      	mov	r3, r4
 8007366:	d807      	bhi.n	8007378 <memmove+0x20>
 8007368:	1e43      	subs	r3, r0, #1
 800736a:	42a1      	cmp	r1, r4
 800736c:	d008      	beq.n	8007380 <memmove+0x28>
 800736e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007372:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007376:	e7f8      	b.n	800736a <memmove+0x12>
 8007378:	4402      	add	r2, r0
 800737a:	4601      	mov	r1, r0
 800737c:	428a      	cmp	r2, r1
 800737e:	d100      	bne.n	8007382 <memmove+0x2a>
 8007380:	bd10      	pop	{r4, pc}
 8007382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800738a:	e7f7      	b.n	800737c <memmove+0x24>

0800738c <__malloc_lock>:
 800738c:	4801      	ldr	r0, [pc, #4]	; (8007394 <__malloc_lock+0x8>)
 800738e:	f7ff bf6d 	b.w	800726c <__retarget_lock_acquire_recursive>
 8007392:	bf00      	nop
 8007394:	200002a8 	.word	0x200002a8

08007398 <__malloc_unlock>:
 8007398:	4801      	ldr	r0, [pc, #4]	; (80073a0 <__malloc_unlock+0x8>)
 800739a:	f7ff bf68 	b.w	800726e <__retarget_lock_release_recursive>
 800739e:	bf00      	nop
 80073a0:	200002a8 	.word	0x200002a8

080073a4 <_realloc_r>:
 80073a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a8:	4680      	mov	r8, r0
 80073aa:	4614      	mov	r4, r2
 80073ac:	460e      	mov	r6, r1
 80073ae:	b921      	cbnz	r1, 80073ba <_realloc_r+0x16>
 80073b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073b4:	4611      	mov	r1, r2
 80073b6:	f7ff b80b 	b.w	80063d0 <_malloc_r>
 80073ba:	b92a      	cbnz	r2, 80073c8 <_realloc_r+0x24>
 80073bc:	f7fe ff9c 	bl	80062f8 <_free_r>
 80073c0:	4625      	mov	r5, r4
 80073c2:	4628      	mov	r0, r5
 80073c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c8:	f000 f8fa 	bl	80075c0 <_malloc_usable_size_r>
 80073cc:	4284      	cmp	r4, r0
 80073ce:	4607      	mov	r7, r0
 80073d0:	d802      	bhi.n	80073d8 <_realloc_r+0x34>
 80073d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073d6:	d812      	bhi.n	80073fe <_realloc_r+0x5a>
 80073d8:	4621      	mov	r1, r4
 80073da:	4640      	mov	r0, r8
 80073dc:	f7fe fff8 	bl	80063d0 <_malloc_r>
 80073e0:	4605      	mov	r5, r0
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d0ed      	beq.n	80073c2 <_realloc_r+0x1e>
 80073e6:	42bc      	cmp	r4, r7
 80073e8:	4622      	mov	r2, r4
 80073ea:	4631      	mov	r1, r6
 80073ec:	bf28      	it	cs
 80073ee:	463a      	movcs	r2, r7
 80073f0:	f7ff ffa4 	bl	800733c <memcpy>
 80073f4:	4631      	mov	r1, r6
 80073f6:	4640      	mov	r0, r8
 80073f8:	f7fe ff7e 	bl	80062f8 <_free_r>
 80073fc:	e7e1      	b.n	80073c2 <_realloc_r+0x1e>
 80073fe:	4635      	mov	r5, r6
 8007400:	e7df      	b.n	80073c2 <_realloc_r+0x1e>

08007402 <_raise_r>:
 8007402:	291f      	cmp	r1, #31
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4604      	mov	r4, r0
 8007408:	460d      	mov	r5, r1
 800740a:	d904      	bls.n	8007416 <_raise_r+0x14>
 800740c:	2316      	movs	r3, #22
 800740e:	6003      	str	r3, [r0, #0]
 8007410:	f04f 30ff 	mov.w	r0, #4294967295
 8007414:	bd38      	pop	{r3, r4, r5, pc}
 8007416:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007418:	b112      	cbz	r2, 8007420 <_raise_r+0x1e>
 800741a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800741e:	b94b      	cbnz	r3, 8007434 <_raise_r+0x32>
 8007420:	4620      	mov	r0, r4
 8007422:	f000 f831 	bl	8007488 <_getpid_r>
 8007426:	462a      	mov	r2, r5
 8007428:	4601      	mov	r1, r0
 800742a:	4620      	mov	r0, r4
 800742c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007430:	f000 b818 	b.w	8007464 <_kill_r>
 8007434:	2b01      	cmp	r3, #1
 8007436:	d00a      	beq.n	800744e <_raise_r+0x4c>
 8007438:	1c59      	adds	r1, r3, #1
 800743a:	d103      	bne.n	8007444 <_raise_r+0x42>
 800743c:	2316      	movs	r3, #22
 800743e:	6003      	str	r3, [r0, #0]
 8007440:	2001      	movs	r0, #1
 8007442:	e7e7      	b.n	8007414 <_raise_r+0x12>
 8007444:	2400      	movs	r4, #0
 8007446:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800744a:	4628      	mov	r0, r5
 800744c:	4798      	blx	r3
 800744e:	2000      	movs	r0, #0
 8007450:	e7e0      	b.n	8007414 <_raise_r+0x12>
	...

08007454 <raise>:
 8007454:	4b02      	ldr	r3, [pc, #8]	; (8007460 <raise+0xc>)
 8007456:	4601      	mov	r1, r0
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	f7ff bfd2 	b.w	8007402 <_raise_r>
 800745e:	bf00      	nop
 8007460:	200000a4 	.word	0x200000a4

08007464 <_kill_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4d07      	ldr	r5, [pc, #28]	; (8007484 <_kill_r+0x20>)
 8007468:	2300      	movs	r3, #0
 800746a:	4604      	mov	r4, r0
 800746c:	4608      	mov	r0, r1
 800746e:	4611      	mov	r1, r2
 8007470:	602b      	str	r3, [r5, #0]
 8007472:	f7f9 fe1d 	bl	80010b0 <_kill>
 8007476:	1c43      	adds	r3, r0, #1
 8007478:	d102      	bne.n	8007480 <_kill_r+0x1c>
 800747a:	682b      	ldr	r3, [r5, #0]
 800747c:	b103      	cbz	r3, 8007480 <_kill_r+0x1c>
 800747e:	6023      	str	r3, [r4, #0]
 8007480:	bd38      	pop	{r3, r4, r5, pc}
 8007482:	bf00      	nop
 8007484:	200002ac 	.word	0x200002ac

08007488 <_getpid_r>:
 8007488:	f7f9 be0a 	b.w	80010a0 <_getpid>

0800748c <__sread>:
 800748c:	b510      	push	{r4, lr}
 800748e:	460c      	mov	r4, r1
 8007490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007494:	f000 f89c 	bl	80075d0 <_read_r>
 8007498:	2800      	cmp	r0, #0
 800749a:	bfab      	itete	ge
 800749c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800749e:	89a3      	ldrhlt	r3, [r4, #12]
 80074a0:	181b      	addge	r3, r3, r0
 80074a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074a6:	bfac      	ite	ge
 80074a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80074aa:	81a3      	strhlt	r3, [r4, #12]
 80074ac:	bd10      	pop	{r4, pc}

080074ae <__swrite>:
 80074ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b2:	461f      	mov	r7, r3
 80074b4:	898b      	ldrh	r3, [r1, #12]
 80074b6:	05db      	lsls	r3, r3, #23
 80074b8:	4605      	mov	r5, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	4616      	mov	r6, r2
 80074be:	d505      	bpl.n	80074cc <__swrite+0x1e>
 80074c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074c4:	2302      	movs	r3, #2
 80074c6:	2200      	movs	r2, #0
 80074c8:	f000 f868 	bl	800759c <_lseek_r>
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074d6:	81a3      	strh	r3, [r4, #12]
 80074d8:	4632      	mov	r2, r6
 80074da:	463b      	mov	r3, r7
 80074dc:	4628      	mov	r0, r5
 80074de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074e2:	f000 b817 	b.w	8007514 <_write_r>

080074e6 <__sseek>:
 80074e6:	b510      	push	{r4, lr}
 80074e8:	460c      	mov	r4, r1
 80074ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ee:	f000 f855 	bl	800759c <_lseek_r>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	bf15      	itete	ne
 80074f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80074fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007502:	81a3      	strheq	r3, [r4, #12]
 8007504:	bf18      	it	ne
 8007506:	81a3      	strhne	r3, [r4, #12]
 8007508:	bd10      	pop	{r4, pc}

0800750a <__sclose>:
 800750a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750e:	f000 b813 	b.w	8007538 <_close_r>
	...

08007514 <_write_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4d07      	ldr	r5, [pc, #28]	; (8007534 <_write_r+0x20>)
 8007518:	4604      	mov	r4, r0
 800751a:	4608      	mov	r0, r1
 800751c:	4611      	mov	r1, r2
 800751e:	2200      	movs	r2, #0
 8007520:	602a      	str	r2, [r5, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	f7f9 fdfb 	bl	800111e <_write>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d102      	bne.n	8007532 <_write_r+0x1e>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	b103      	cbz	r3, 8007532 <_write_r+0x1e>
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	200002ac 	.word	0x200002ac

08007538 <_close_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	4d06      	ldr	r5, [pc, #24]	; (8007554 <_close_r+0x1c>)
 800753c:	2300      	movs	r3, #0
 800753e:	4604      	mov	r4, r0
 8007540:	4608      	mov	r0, r1
 8007542:	602b      	str	r3, [r5, #0]
 8007544:	f7f9 fe07 	bl	8001156 <_close>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_close_r+0x1a>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_close_r+0x1a>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	200002ac 	.word	0x200002ac

08007558 <_fstat_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d07      	ldr	r5, [pc, #28]	; (8007578 <_fstat_r+0x20>)
 800755c:	2300      	movs	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	4608      	mov	r0, r1
 8007562:	4611      	mov	r1, r2
 8007564:	602b      	str	r3, [r5, #0]
 8007566:	f7f9 fe02 	bl	800116e <_fstat>
 800756a:	1c43      	adds	r3, r0, #1
 800756c:	d102      	bne.n	8007574 <_fstat_r+0x1c>
 800756e:	682b      	ldr	r3, [r5, #0]
 8007570:	b103      	cbz	r3, 8007574 <_fstat_r+0x1c>
 8007572:	6023      	str	r3, [r4, #0]
 8007574:	bd38      	pop	{r3, r4, r5, pc}
 8007576:	bf00      	nop
 8007578:	200002ac 	.word	0x200002ac

0800757c <_isatty_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4d06      	ldr	r5, [pc, #24]	; (8007598 <_isatty_r+0x1c>)
 8007580:	2300      	movs	r3, #0
 8007582:	4604      	mov	r4, r0
 8007584:	4608      	mov	r0, r1
 8007586:	602b      	str	r3, [r5, #0]
 8007588:	f7f9 fe01 	bl	800118e <_isatty>
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	d102      	bne.n	8007596 <_isatty_r+0x1a>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	b103      	cbz	r3, 8007596 <_isatty_r+0x1a>
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	bd38      	pop	{r3, r4, r5, pc}
 8007598:	200002ac 	.word	0x200002ac

0800759c <_lseek_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4d07      	ldr	r5, [pc, #28]	; (80075bc <_lseek_r+0x20>)
 80075a0:	4604      	mov	r4, r0
 80075a2:	4608      	mov	r0, r1
 80075a4:	4611      	mov	r1, r2
 80075a6:	2200      	movs	r2, #0
 80075a8:	602a      	str	r2, [r5, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f7f9 fdfa 	bl	80011a4 <_lseek>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d102      	bne.n	80075ba <_lseek_r+0x1e>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	b103      	cbz	r3, 80075ba <_lseek_r+0x1e>
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	200002ac 	.word	0x200002ac

080075c0 <_malloc_usable_size_r>:
 80075c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075c4:	1f18      	subs	r0, r3, #4
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	bfbc      	itt	lt
 80075ca:	580b      	ldrlt	r3, [r1, r0]
 80075cc:	18c0      	addlt	r0, r0, r3
 80075ce:	4770      	bx	lr

080075d0 <_read_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4d07      	ldr	r5, [pc, #28]	; (80075f0 <_read_r+0x20>)
 80075d4:	4604      	mov	r4, r0
 80075d6:	4608      	mov	r0, r1
 80075d8:	4611      	mov	r1, r2
 80075da:	2200      	movs	r2, #0
 80075dc:	602a      	str	r2, [r5, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	f7f9 fd80 	bl	80010e4 <_read>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d102      	bne.n	80075ee <_read_r+0x1e>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	b103      	cbz	r3, 80075ee <_read_r+0x1e>
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	200002ac 	.word	0x200002ac

080075f4 <_init>:
 80075f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f6:	bf00      	nop
 80075f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075fa:	bc08      	pop	{r3}
 80075fc:	469e      	mov	lr, r3
 80075fe:	4770      	bx	lr

08007600 <_fini>:
 8007600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007602:	bf00      	nop
 8007604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007606:	bc08      	pop	{r3}
 8007608:	469e      	mov	lr, r3
 800760a:	4770      	bx	lr
