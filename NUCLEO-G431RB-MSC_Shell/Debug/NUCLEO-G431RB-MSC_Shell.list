
NUCLEO-G431RB-MSC_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e58  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800a038  0800a038  0001a038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a490  0800a490  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  0800a490  0800a490  0001a490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a498  0800a498  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a498  0800a498  0001a498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a49c  0800a49c  0001a49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0800a4a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000108  0800a5a8  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  0800a5a8  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019928  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc3  00000000  00000000  00039a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  0003c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001458  00000000  00000000  0003dd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214f5  00000000  00000000  0003f1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001787b  00000000  00000000  000606e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcd6f  00000000  00000000  00077f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154ccf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000695c  00000000  00000000  00154d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000108 	.word	0x20000108
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a020 	.word	0x0800a020

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000010c 	.word	0x2000010c
 800021c:	0800a020 	.word	0x0800a020

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b0a2      	sub	sp, #136	; 0x88
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	char*		token;
	int 		newCmdReady = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	67bb      	str	r3, [r7, #120]	; 0x78
	int 		alpha = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	677b      	str	r3, [r7, #116]	; 0x74
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 f8f1 	bl	80017de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 fac4 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fcec 	bl	8000fdc <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f000 fcc0 	bl	8000f88 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000608:	f000 fc72 	bl	8000ef0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800060c:	f000 fb82 	bl	8000d14 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000610:	f000 fb06 	bl	8000c20 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000614:	f000 fc1e 	bl	8000e54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // POUR LE SHELL
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000618:	463b      	mov	r3, r7
 800061a:	2224      	movs	r2, #36	; 0x24
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f008 f996 	bl	8008950 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000628:	2240      	movs	r2, #64	; 0x40
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f008 f98f 	bl	8008950 <memset>
 8000632:	4bb2      	ldr	r3, [pc, #712]	; (80008fc <main+0x318>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000638:	2240      	movs	r2, #64	; 0x40
 800063a:	2100      	movs	r1, #0
 800063c:	48b0      	ldr	r0, [pc, #704]	; (8000900 <main+0x31c>)
 800063e:	f008 f987 	bl	8008950 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000642:	2201      	movs	r2, #1
 8000644:	49ad      	ldr	r1, [pc, #692]	; (80008fc <main+0x318>)
 8000646:	48af      	ldr	r0, [pc, #700]	; (8000904 <main+0x320>)
 8000648:	f006 f9f4 	bl	8006a34 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 800064c:	200a      	movs	r0, #10
 800064e:	f001 f8fd 	bl	800184c <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	2266      	movs	r2, #102	; 0x66
 8000658:	49ab      	ldr	r1, [pc, #684]	; (8000908 <main+0x324>)
 800065a:	48aa      	ldr	r0, [pc, #680]	; (8000904 <main+0x320>)
 800065c:	f006 f953 	bl	8006906 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	2218      	movs	r2, #24
 8000666:	49a9      	ldr	r1, [pc, #676]	; (800090c <main+0x328>)
 8000668:	48a6      	ldr	r0, [pc, #664]	; (8000904 <main+0x320>)
 800066a:	f006 f94c 	bl	8006906 <HAL_UART_Transmit>
 // FIN POUR LE SHELL

 // init PWM

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800066e:	2100      	movs	r1, #0
 8000670:	48a7      	ldr	r0, [pc, #668]	; (8000910 <main+0x32c>)
 8000672:	f004 fcc5 	bl	8005000 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000676:	2104      	movs	r1, #4
 8000678:	48a5      	ldr	r0, [pc, #660]	; (8000910 <main+0x32c>)
 800067a:	f004 fcc1 	bl	8005000 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800067e:	2100      	movs	r1, #0
 8000680:	48a3      	ldr	r0, [pc, #652]	; (8000910 <main+0x32c>)
 8000682:	f005 fe51 	bl	8006328 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000686:	2104      	movs	r1, #4
 8000688:	48a1      	ldr	r0, [pc, #644]	; (8000910 <main+0x32c>)
 800068a:	f005 fe4d 	bl	8006328 <HAL_TIMEx_PWMN_Start>

 // initialisation de l'ADC pour la mesure du courant sur la phase RED

	if(HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED))
 800068e:	217f      	movs	r1, #127	; 0x7f
 8000690:	48a0      	ldr	r0, [pc, #640]	; (8000914 <main+0x330>)
 8000692:	f002 fc75 	bl	8002f80 <HAL_ADCEx_Calibration_Start>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <main+0xbe>
		printf("probleme avec la calibration de l'ADC \r\n");
 800069c:	489e      	ldr	r0, [pc, #632]	; (8000918 <main+0x334>)
 800069e:	f008 f9e5 	bl	8008a6c <puts>

	if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, ADC_Buffer, ADC_BUF_SIZE))
 80006a2:	2214      	movs	r2, #20
 80006a4:	499d      	ldr	r1, [pc, #628]	; (800091c <main+0x338>)
 80006a6:	489b      	ldr	r0, [pc, #620]	; (8000914 <main+0x330>)
 80006a8:	f001 fcec 	bl	8002084 <HAL_ADC_Start_DMA>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d002      	beq.n	80006b8 <main+0xd4>
		printf("probleme avec le demarrage du DMA \r\n");
 80006b2:	489b      	ldr	r0, [pc, #620]	; (8000920 <main+0x33c>)
 80006b4:	f008 f9da 	bl	8008a6c <puts>

	if(HAL_OK != HAL_TIM_Base_Start(&htim2))
 80006b8:	489a      	ldr	r0, [pc, #616]	; (8000924 <main+0x340>)
 80006ba:	f004 fb7d 	bl	8004db8 <HAL_TIM_Base_Start>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d002      	beq.n	80006ca <main+0xe6>
		printf("probleme avec l'initialisation du Timer 2 \r\n");
 80006c4:	4898      	ldr	r0, [pc, #608]	; (8000928 <main+0x344>)
 80006c6:	f008 f9d1 	bl	8008a6c <puts>
	{

/******************** BEGIN SHELL **************************/

		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 80006ca:	4b98      	ldr	r3, [pc, #608]	; (800092c <main+0x348>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d05f      	beq.n	8000792 <main+0x1ae>
			switch(uartRxBuffer[0]){
 80006d2:	4b8a      	ldr	r3, [pc, #552]	; (80008fc <main+0x318>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b0d      	cmp	r3, #13
 80006d8:	d002      	beq.n	80006e0 <main+0xfc>
 80006da:	2b7f      	cmp	r3, #127	; 0x7f
 80006dc:	d032      	beq.n	8000744 <main+0x160>
 80006de:	e043      	b.n	8000768 <main+0x184>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	2203      	movs	r2, #3
 80006e6:	4992      	ldr	r1, [pc, #584]	; (8000930 <main+0x34c>)
 80006e8:	4886      	ldr	r0, [pc, #536]	; (8000904 <main+0x320>)
 80006ea:	f006 f90c 	bl	8006906 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 80006ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006f6:	4413      	add	r3, r2
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
				argc = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				token = strtok(cmdBuffer, " ");
 8000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000706:	498b      	ldr	r1, [pc, #556]	; (8000934 <main+0x350>)
 8000708:	4618      	mov	r0, r3
 800070a:	f008 f9eb 	bl	8008ae4 <strtok>
 800070e:	67f8      	str	r0, [r7, #124]	; 0x7c
				while(token!=NULL){
 8000710:	e00f      	b.n	8000732 <main+0x14e>
					argv[argc++] = token;
 8000712:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	3388      	adds	r3, #136	; 0x88
 8000720:	443b      	add	r3, r7
 8000722:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000724:	f843 2c88 	str.w	r2, [r3, #-136]
					token = strtok(NULL, " ");
 8000728:	4982      	ldr	r1, [pc, #520]	; (8000934 <main+0x350>)
 800072a:	2000      	movs	r0, #0
 800072c:	f008 f9da 	bl	8008ae4 <strtok>
 8000730:	67f8      	str	r0, [r7, #124]	; 0x7c
				while(token!=NULL){
 8000732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1ec      	bne.n	8000712 <main+0x12e>
				}
				idx_cmd = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				newCmdReady = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	67bb      	str	r3, [r7, #120]	; 0x78
				break;
 8000742:	e023      	b.n	800078c <main+0x1a8>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 8000744:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800074e:	3388      	adds	r3, #136	; 0x88
 8000750:	443b      	add	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	f803 2c64 	strb.w	r2, [r3, #-100]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	2201      	movs	r2, #1
 800075e:	4967      	ldr	r1, [pc, #412]	; (80008fc <main+0x318>)
 8000760:	4868      	ldr	r0, [pc, #416]	; (8000904 <main+0x320>)
 8000762:	f006 f8d0 	bl	8006906 <HAL_UART_Transmit>
				break;
 8000766:	e011      	b.n	800078c <main+0x1a8>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800076c:	1c5a      	adds	r2, r3, #1
 800076e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000772:	4a62      	ldr	r2, [pc, #392]	; (80008fc <main+0x318>)
 8000774:	7812      	ldrb	r2, [r2, #0]
 8000776:	3388      	adds	r3, #136	; 0x88
 8000778:	443b      	add	r3, r7
 800077a:	f803 2c64 	strb.w	r2, [r3, #-100]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	2201      	movs	r2, #1
 8000784:	495d      	ldr	r1, [pc, #372]	; (80008fc <main+0x318>)
 8000786:	485f      	ldr	r0, [pc, #380]	; (8000904 <main+0x320>)
 8000788:	f006 f8bd 	bl	8006906 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 800078c:	4b67      	ldr	r3, [pc, #412]	; (800092c <main+0x348>)
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8000792:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000794:	2b00      	cmp	r3, #0
 8000796:	f000 81cb 	beq.w	8000b30 <main+0x54c>
			if(strcmp(argv[0],"set")==0){
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	4966      	ldr	r1, [pc, #408]	; (8000938 <main+0x354>)
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fd3e 	bl	8000220 <strcmp>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d133      	bne.n	8000812 <main+0x22e>
				if(strcmp(argv[1],"PA5")==0){
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4963      	ldr	r1, [pc, #396]	; (800093c <main+0x358>)
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fd36 	bl	8000220 <strcmp>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d123      	bne.n	8000802 <main+0x21e>
					HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4618      	mov	r0, r3
 80007be:	f008 f899 	bl	80088f4 <atoi>
 80007c2:	4603      	mov	r3, r0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	2120      	movs	r1, #32
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ce:	f003 fa71 	bl	8003cb4 <HAL_GPIO_WritePin>
					stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f008 f88d 	bl	80088f4 <atoi>
 80007da:	4603      	mov	r3, r0
 80007dc:	4a58      	ldr	r2, [pc, #352]	; (8000940 <main+0x35c>)
 80007de:	2140      	movs	r1, #64	; 0x40
 80007e0:	4847      	ldr	r0, [pc, #284]	; (8000900 <main+0x31c>)
 80007e2:	f008 f94b 	bl	8008a7c <sniprintf>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b56      	ldr	r3, [pc, #344]	; (8000944 <main+0x360>)
 80007ec:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 80007ee:	4b55      	ldr	r3, [pc, #340]	; (8000944 <main+0x360>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
 80007f8:	4941      	ldr	r1, [pc, #260]	; (8000900 <main+0x31c>)
 80007fa:	4842      	ldr	r0, [pc, #264]	; (8000904 <main+0x320>)
 80007fc:	f006 f883 	bl	8006906 <HAL_UART_Transmit>
 8000800:	e18d      	b.n	8000b1e <main+0x53a>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	2214      	movs	r2, #20
 8000808:	494f      	ldr	r1, [pc, #316]	; (8000948 <main+0x364>)
 800080a:	483e      	ldr	r0, [pc, #248]	; (8000904 <main+0x320>)
 800080c:	f006 f87b 	bl	8006906 <HAL_UART_Transmit>
 8000810:	e185      	b.n	8000b1e <main+0x53a>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	494d      	ldr	r1, [pc, #308]	; (800094c <main+0x368>)
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fd02 	bl	8000220 <strcmp>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d107      	bne.n	8000832 <main+0x24e>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	2214      	movs	r2, #20
 8000828:	4947      	ldr	r1, [pc, #284]	; (8000948 <main+0x364>)
 800082a:	4836      	ldr	r0, [pc, #216]	; (8000904 <main+0x320>)
 800082c:	f006 f86b 	bl	8006906 <HAL_UART_Transmit>
 8000830:	e175      	b.n	8000b1e <main+0x53a>
			}
			else if (strcmp(argv[0],"help")==0){
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	4946      	ldr	r1, [pc, #280]	; (8000950 <main+0x36c>)
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fcf2 	bl	8000220 <strcmp>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d120      	bne.n	8000884 <main+0x2a0>
				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE," set PA5\r\n get\r\n start\r\n stop\r\n pinout\r\n");
 8000842:	4a44      	ldr	r2, [pc, #272]	; (8000954 <main+0x370>)
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	482e      	ldr	r0, [pc, #184]	; (8000900 <main+0x31c>)
 8000848:	f008 f918 	bl	8008a7c <sniprintf>
 800084c:	4603      	mov	r3, r0
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <main+0x360>)
 8000852:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8000854:	4b3b      	ldr	r3, [pc, #236]	; (8000944 <main+0x360>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b29a      	uxth	r2, r3
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	4928      	ldr	r1, [pc, #160]	; (8000900 <main+0x31c>)
 8000860:	4828      	ldr	r0, [pc, #160]	; (8000904 <main+0x320>)
 8000862:	f006 f850 	bl	8006906 <HAL_UART_Transmit>
				for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 8000866:	2300      	movs	r3, #0
 8000868:	673b      	str	r3, [r7, #112]	; 0x70
 800086a:	e007      	b.n	800087c <main+0x298>
					uartTxBuffer[i]=0;
 800086c:	4a24      	ldr	r2, [pc, #144]	; (8000900 <main+0x31c>)
 800086e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000870:	4413      	add	r3, r2
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
				for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 8000876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000878:	3301      	adds	r3, #1
 800087a:	673b      	str	r3, [r7, #112]	; 0x70
 800087c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800087e:	2b3f      	cmp	r3, #63	; 0x3f
 8000880:	ddf4      	ble.n	800086c <main+0x288>
 8000882:	e14c      	b.n	8000b1e <main+0x53a>
				}

			}
			else if (strcmp(argv[0],"pinout")==0){
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	4934      	ldr	r1, [pc, #208]	; (8000958 <main+0x374>)
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fcc9 	bl	8000220 <strcmp>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d167      	bne.n	8000964 <main+0x380>
				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE, " PA2:UART TX\r\n PA3:UART RX\r\n PA5:LED\r\n PA8:TIM1_CH1\r\n");
 8000894:	4a31      	ldr	r2, [pc, #196]	; (800095c <main+0x378>)
 8000896:	2140      	movs	r1, #64	; 0x40
 8000898:	4819      	ldr	r0, [pc, #100]	; (8000900 <main+0x31c>)
 800089a:	f008 f8ef 	bl	8008a7c <sniprintf>
 800089e:	4603      	mov	r3, r0
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b28      	ldr	r3, [pc, #160]	; (8000944 <main+0x360>)
 80008a4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 80008a6:	4b27      	ldr	r3, [pc, #156]	; (8000944 <main+0x360>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	f04f 33ff 	mov.w	r3, #4294967295
 80008b0:	4913      	ldr	r1, [pc, #76]	; (8000900 <main+0x31c>)
 80008b2:	4814      	ldr	r0, [pc, #80]	; (8000904 <main+0x320>)
 80008b4:	f006 f827 	bl	8006906 <HAL_UART_Transmit>
				for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 80008b8:	2300      	movs	r3, #0
 80008ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80008bc:	e007      	b.n	80008ce <main+0x2ea>
					uartTxBuffer[i]=0;
 80008be:	4a10      	ldr	r2, [pc, #64]	; (8000900 <main+0x31c>)
 80008c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008c2:	4413      	add	r3, r2
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
				for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 80008c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008ca:	3301      	adds	r3, #1
 80008cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80008ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008d0:	2b3f      	cmp	r3, #63	; 0x3f
 80008d2:	ddf4      	ble.n	80008be <main+0x2da>
				}
				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE," PA9:TIM1_CH2\r\n PA11:TIM1_CH1N\r\n PA12:TIM1_CH2N\r\n");
 80008d4:	4a22      	ldr	r2, [pc, #136]	; (8000960 <main+0x37c>)
 80008d6:	2140      	movs	r1, #64	; 0x40
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <main+0x31c>)
 80008da:	f008 f8cf 	bl	8008a7c <sniprintf>
 80008de:	4603      	mov	r3, r0
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <main+0x360>)
 80008e4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <main+0x360>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	4903      	ldr	r1, [pc, #12]	; (8000900 <main+0x31c>)
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <main+0x320>)
 80008f4:	f006 f807 	bl	8006906 <HAL_UART_Transmit>
 80008f8:	e111      	b.n	8000b1e <main+0x53a>
 80008fa:	bf00      	nop
 80008fc:	2000031c 	.word	0x2000031c
 8000900:	20000320 	.word	0x20000320
 8000904:	20000288 	.word	0x20000288
 8000908:	20000018 	.word	0x20000018
 800090c:	20000000 	.word	0x20000000
 8000910:	200001f0 	.word	0x200001f0
 8000914:	20000124 	.word	0x20000124
 8000918:	0800a038 	.word	0x0800a038
 800091c:	20000364 	.word	0x20000364
 8000920:	0800a060 	.word	0x0800a060
 8000924:	2000023c 	.word	0x2000023c
 8000928:	0800a084 	.word	0x0800a084
 800092c:	20000318 	.word	0x20000318
 8000930:	20000080 	.word	0x20000080
 8000934:	0800a0b0 	.word	0x0800a0b0
 8000938:	0800a0b4 	.word	0x0800a0b4
 800093c:	0800a0b8 	.word	0x0800a0b8
 8000940:	0800a0bc 	.word	0x0800a0bc
 8000944:	20000360 	.word	0x20000360
 8000948:	20000084 	.word	0x20000084
 800094c:	0800a0d8 	.word	0x0800a0d8
 8000950:	0800a0dc 	.word	0x0800a0dc
 8000954:	0800a0e4 	.word	0x0800a0e4
 8000958:	0800a110 	.word	0x0800a110
 800095c:	0800a118 	.word	0x0800a118
 8000960:	0800a150 	.word	0x0800a150

			}
			else if (strcmp(argv[0],"start")==0){
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	4975      	ldr	r1, [pc, #468]	; (8000b3c <main+0x558>)
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fc59 	bl	8000220 <strcmp>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d13c      	bne.n	80009ee <main+0x40a>

				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000974:	2100      	movs	r1, #0
 8000976:	4872      	ldr	r0, [pc, #456]	; (8000b40 <main+0x55c>)
 8000978:	f004 fb42 	bl	8005000 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800097c:	2104      	movs	r1, #4
 800097e:	4870      	ldr	r0, [pc, #448]	; (8000b40 <main+0x55c>)
 8000980:	f004 fb3e 	bl	8005000 <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000984:	2100      	movs	r1, #0
 8000986:	486e      	ldr	r0, [pc, #440]	; (8000b40 <main+0x55c>)
 8000988:	f005 fcce 	bl	8006328 <HAL_TIMEx_PWMN_Start>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800098c:	2104      	movs	r1, #4
 800098e:	486c      	ldr	r0, [pc, #432]	; (8000b40 <main+0x55c>)
 8000990:	f005 fcca 	bl	8006328 <HAL_TIMEx_PWMN_Start>

				// on met le rapport cyclique à 50 à chaque lancement (le moteur ne tourne pas)
				TIM1->CCR1=2656;
 8000994:	4b6b      	ldr	r3, [pc, #428]	; (8000b44 <main+0x560>)
 8000996:	f44f 6226 	mov.w	r2, #2656	; 0xa60
 800099a:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2=2656;
 800099c:	4b69      	ldr	r3, [pc, #420]	; (8000b44 <main+0x560>)
 800099e:	f44f 6226 	mov.w	r2, #2656	; 0xa60
 80009a2:	639a      	str	r2, [r3, #56]	; 0x38

				// Activation du GPIO pour l'allumage du hacheur (pin 33)
				// GPIOC Pin 0 à 1 pendant au moins 2micro s d'après la doc
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2101      	movs	r1, #1
 80009a8:	4867      	ldr	r0, [pc, #412]	; (8000b48 <main+0x564>)
 80009aa:	f003 f983 	bl	8003cb4 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f000 ff4c 	bl	800184c <HAL_Delay>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2101      	movs	r1, #1
 80009b8:	4863      	ldr	r0, [pc, #396]	; (8000b48 <main+0x564>)
 80009ba:	f003 f97b 	bl	8003cb4 <HAL_GPIO_WritePin>


				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE,"Power ON\r\n",atoi(argv[2]));
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f007 ff97 	bl	80088f4 <atoi>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a60      	ldr	r2, [pc, #384]	; (8000b4c <main+0x568>)
 80009ca:	2140      	movs	r1, #64	; 0x40
 80009cc:	4860      	ldr	r0, [pc, #384]	; (8000b50 <main+0x56c>)
 80009ce:	f008 f855 	bl	8008a7c <sniprintf>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b5f      	ldr	r3, [pc, #380]	; (8000b54 <main+0x570>)
 80009d8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 80009da:	4b5e      	ldr	r3, [pc, #376]	; (8000b54 <main+0x570>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b29a      	uxth	r2, r3
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
 80009e4:	495a      	ldr	r1, [pc, #360]	; (8000b50 <main+0x56c>)
 80009e6:	485c      	ldr	r0, [pc, #368]	; (8000b58 <main+0x574>)
 80009e8:	f005 ff8d 	bl	8006906 <HAL_UART_Transmit>
 80009ec:	e097      	b.n	8000b1e <main+0x53a>
			}
			else if (strcmp(argv[0],"stop")==0){
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	495a      	ldr	r1, [pc, #360]	; (8000b5c <main+0x578>)
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fc14 	bl	8000220 <strcmp>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d127      	bne.n	8000a4e <main+0x46a>

				// On stoppe les PWM
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80009fe:	2100      	movs	r1, #0
 8000a00:	484f      	ldr	r0, [pc, #316]	; (8000b40 <main+0x55c>)
 8000a02:	f004 fbfd 	bl	8005200 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000a06:	2104      	movs	r1, #4
 8000a08:	484d      	ldr	r0, [pc, #308]	; (8000b40 <main+0x55c>)
 8000a0a:	f004 fbf9 	bl	8005200 <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	484b      	ldr	r0, [pc, #300]	; (8000b40 <main+0x55c>)
 8000a12:	f005 fd3d 	bl	8006490 <HAL_TIMEx_PWMN_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000a16:	2104      	movs	r1, #4
 8000a18:	4849      	ldr	r0, [pc, #292]	; (8000b40 <main+0x55c>)
 8000a1a:	f005 fd39 	bl	8006490 <HAL_TIMEx_PWMN_Stop>

				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE,"Power OFF\r\n",atoi(argv[2]));
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f007 ff67 	bl	80088f4 <atoi>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a4d      	ldr	r2, [pc, #308]	; (8000b60 <main+0x57c>)
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	4848      	ldr	r0, [pc, #288]	; (8000b50 <main+0x56c>)
 8000a2e:	f008 f825 	bl	8008a7c <sniprintf>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b47      	ldr	r3, [pc, #284]	; (8000b54 <main+0x570>)
 8000a38:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8000a3a:	4b46      	ldr	r3, [pc, #280]	; (8000b54 <main+0x570>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	4942      	ldr	r1, [pc, #264]	; (8000b50 <main+0x56c>)
 8000a46:	4844      	ldr	r0, [pc, #272]	; (8000b58 <main+0x574>)
 8000a48:	f005 ff5d 	bl	8006906 <HAL_UART_Transmit>
 8000a4c:	e067      	b.n	8000b1e <main+0x53a>
			}
			else if(strcmp(argv[0],"alpha")==0){
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	4944      	ldr	r1, [pc, #272]	; (8000b64 <main+0x580>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fbe4 	bl	8000220 <strcmp>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d11d      	bne.n	8000a9a <main+0x4b6>
				alpha = atoi(argv[1]);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f007 ff47 	bl	80088f4 <atoi>
 8000a66:	6778      	str	r0, [r7, #116]	; 0x74
				if (alpha > 100){
 8000a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a6a:	2b64      	cmp	r3, #100	; 0x64
 8000a6c:	dd01      	ble.n	8000a72 <main+0x48e>
					alpha = 100;
 8000a6e:	2364      	movs	r3, #100	; 0x64
 8000a70:	677b      	str	r3, [r7, #116]	; 0x74
				}
				TIM1->CCR1=(5312*alpha)/100;
 8000a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a74:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8000a78:	fb02 f303 	mul.w	r3, r2, r3
 8000a7c:	4a3a      	ldr	r2, [pc, #232]	; (8000b68 <main+0x584>)
 8000a7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a82:	1152      	asrs	r2, r2, #5
 8000a84:	17db      	asrs	r3, r3, #31
 8000a86:	1ad2      	subs	r2, r2, r3
 8000a88:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <main+0x560>)
 8000a8a:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2=(5312-TIM1->CCR1);
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <main+0x560>)
 8000a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a90:	4a2c      	ldr	r2, [pc, #176]	; (8000b44 <main+0x560>)
 8000a92:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 8000a96:	6393      	str	r3, [r2, #56]	; 0x38
 8000a98:	e041      	b.n	8000b1e <main+0x53a>
			}
			else if(strcmp(argv[0],"ADC")==0){
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	4933      	ldr	r1, [pc, #204]	; (8000b6c <main+0x588>)
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fbbe 	bl	8000220 <strcmp>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d132      	bne.n	8000b10 <main+0x52c>

				int courant=0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	66bb      	str	r3, [r7, #104]	; 0x68

				for(int i=0;i<20;i++){
 8000aae:	2300      	movs	r3, #0
 8000ab0:	667b      	str	r3, [r7, #100]	; 0x64
 8000ab2:	e00a      	b.n	8000aca <main+0x4e6>
					courant = courant + (int)(ADC_Buffer[i]);
 8000ab4:	4a2e      	ldr	r2, [pc, #184]	; (8000b70 <main+0x58c>)
 8000ab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	461a      	mov	r2, r3
 8000abe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ac0:	4413      	add	r3, r2
 8000ac2:	66bb      	str	r3, [r7, #104]	; 0x68
				for(int i=0;i<20;i++){
 8000ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	667b      	str	r3, [r7, #100]	; 0x64
 8000aca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000acc:	2b13      	cmp	r3, #19
 8000ace:	ddf1      	ble.n	8000ab4 <main+0x4d0>
				}
				courant = courant/20;
 8000ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ad2:	4a28      	ldr	r2, [pc, #160]	; (8000b74 <main+0x590>)
 8000ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad8:	10d2      	asrs	r2, r2, #3
 8000ada:	17db      	asrs	r3, r3, #31
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	66bb      	str	r3, [r7, #104]	; 0x68

				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE,"%d \r\n", courant);
 8000ae0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ae2:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <main+0x594>)
 8000ae4:	2140      	movs	r1, #64	; 0x40
 8000ae6:	481a      	ldr	r0, [pc, #104]	; (8000b50 <main+0x56c>)
 8000ae8:	f007 ffc8 	bl	8008a7c <sniprintf>
 8000aec:	4603      	mov	r3, r0
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <main+0x570>)
 8000af2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <main+0x570>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	4914      	ldr	r1, [pc, #80]	; (8000b50 <main+0x56c>)
 8000b00:	4815      	ldr	r0, [pc, #84]	; (8000b58 <main+0x574>)
 8000b02:	f005 ff00 	bl	8006906 <HAL_UART_Transmit>

				printf("Le courant dans la phase RED vaut : %d A \r\n", courant);
 8000b06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000b08:	481c      	ldr	r0, [pc, #112]	; (8000b7c <main+0x598>)
 8000b0a:	f007 ff29 	bl	8008960 <iprintf>
 8000b0e:	e006      	b.n	8000b1e <main+0x53a>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	2214      	movs	r2, #20
 8000b16:	491a      	ldr	r1, [pc, #104]	; (8000b80 <main+0x59c>)
 8000b18:	480f      	ldr	r0, [pc, #60]	; (8000b58 <main+0x574>)
 8000b1a:	f005 fef4 	bl	8006906 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	2218      	movs	r2, #24
 8000b24:	4917      	ldr	r1, [pc, #92]	; (8000b84 <main+0x5a0>)
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <main+0x574>)
 8000b28:	f005 feed 	bl	8006906 <HAL_UART_Transmit>
			newCmdReady = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	67bb      	str	r3, [r7, #120]	; 0x78
		/*********************** END SHELL *****************************/


		/****************** BEGIN BLUE_BUTTON HACHEUR ******************/

		HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000b30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b34:	f003 f8d6 	bl	8003ce4 <HAL_GPIO_EXTI_IRQHandler>
		if(uartRxReceived){
 8000b38:	e5c7      	b.n	80006ca <main+0xe6>
 8000b3a:	bf00      	nop
 8000b3c:	0800a184 	.word	0x0800a184
 8000b40:	200001f0 	.word	0x200001f0
 8000b44:	40012c00 	.word	0x40012c00
 8000b48:	48000800 	.word	0x48000800
 8000b4c:	0800a18c 	.word	0x0800a18c
 8000b50:	20000320 	.word	0x20000320
 8000b54:	20000360 	.word	0x20000360
 8000b58:	20000288 	.word	0x20000288
 8000b5c:	0800a198 	.word	0x0800a198
 8000b60:	0800a1a0 	.word	0x0800a1a0
 8000b64:	0800a1ac 	.word	0x0800a1ac
 8000b68:	51eb851f 	.word	0x51eb851f
 8000b6c:	0800a1b4 	.word	0x0800a1b4
 8000b70:	20000364 	.word	0x20000364
 8000b74:	66666667 	.word	0x66666667
 8000b78:	0800a1b8 	.word	0x0800a1b8
 8000b7c:	0800a1c0 	.word	0x0800a1c0
 8000b80:	20000084 	.word	0x20000084
 8000b84:	20000000 	.word	0x20000000

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b094      	sub	sp, #80	; 0x50
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	2238      	movs	r2, #56	; 0x38
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f007 feda 	bl	8008950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f003 f8b2 	bl	8003d14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bba:	2340      	movs	r3, #64	; 0x40
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000bca:	2355      	movs	r3, #85	; 0x55
 8000bcc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	f107 0318 	add.w	r3, r7, #24
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 f93c 	bl	8003e5c <HAL_RCC_OscConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bea:	f000 fabb 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bee:	230f      	movs	r3, #15
 8000bf0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2104      	movs	r1, #4
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 fc40 	bl	800448c <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c12:	f000 faa7 	bl	8001164 <Error_Handler>
  }
}
 8000c16:	bf00      	nop
 8000c18:	3750      	adds	r7, #80	; 0x50
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	; 0x30
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2220      	movs	r2, #32
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f007 fe89 	bl	8008950 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c3e:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000c40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000c48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c54:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000c5a:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c60:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c66:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000c68:	2204      	movs	r2, #4
 8000c6a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c7e:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000c88:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000c90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c94:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cac:	4817      	ldr	r0, [pc, #92]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000cae:	f001 f85f 	bl	8001d70 <HAL_ADC_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000cb8:	f000 fa54 	bl	8001164 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4811      	ldr	r0, [pc, #68]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000cc8:	f002 f9bc 	bl	8003044 <HAL_ADCEx_MultiModeConfigChannel>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000cd2:	f000 fa47 	bl	8001164 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_ADC1_Init+0xf0>)
 8000cd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cda:	2306      	movs	r3, #6
 8000cdc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ce2:	237f      	movs	r3, #127	; 0x7f
 8000ce4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <MX_ADC1_Init+0xec>)
 8000cf4:	f001 faf0 	bl	80022d8 <HAL_ADC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000cfe:	f000 fa31 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	3730      	adds	r7, #48	; 0x30
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000124 	.word	0x20000124
 8000d10:	04300002 	.word	0x04300002

08000d14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b098      	sub	sp, #96	; 0x60
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
 8000d36:	615a      	str	r2, [r3, #20]
 8000d38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2234      	movs	r2, #52	; 0x34
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f007 fe05 	bl	8008950 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d46:	4b41      	ldr	r3, [pc, #260]	; (8000e4c <MX_TIM1_Init+0x138>)
 8000d48:	4a41      	ldr	r2, [pc, #260]	; (8000e50 <MX_TIM1_Init+0x13c>)
 8000d4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d4c:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <MX_TIM1_Init+0x138>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000d52:	4b3e      	ldr	r3, [pc, #248]	; (8000e4c <MX_TIM1_Init+0x138>)
 8000d54:	2220      	movs	r2, #32
 8000d56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5311;
 8000d58:	4b3c      	ldr	r3, [pc, #240]	; (8000e4c <MX_TIM1_Init+0x138>)
 8000d5a:	f241 42bf 	movw	r2, #5311	; 0x14bf
 8000d5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b3a      	ldr	r3, [pc, #232]	; (8000e4c <MX_TIM1_Init+0x138>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d66:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <MX_TIM1_Init+0x138>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6c:	4b37      	ldr	r3, [pc, #220]	; (8000e4c <MX_TIM1_Init+0x138>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d72:	4836      	ldr	r0, [pc, #216]	; (8000e4c <MX_TIM1_Init+0x138>)
 8000d74:	f004 f8ec 	bl	8004f50 <HAL_TIM_PWM_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d7e:	f000 f9f1 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d92:	4619      	mov	r1, r3
 8000d94:	482d      	ldr	r0, [pc, #180]	; (8000e4c <MX_TIM1_Init+0x138>)
 8000d96:	f005 fbd9 	bl	800654c <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000da0:	f000 f9e0 	bl	8001164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da4:	2360      	movs	r3, #96	; 0x60
 8000da6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 8000da8:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 8000dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dae:	2300      	movs	r3, #0
 8000db0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000db2:	2300      	movs	r3, #0
 8000db4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4820      	ldr	r0, [pc, #128]	; (8000e4c <MX_TIM1_Init+0x138>)
 8000dcc:	f004 fc2e 	bl	800562c <HAL_TIM_PWM_ConfigChannel>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000dd6:	f000 f9c5 	bl	8001164 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dde:	2204      	movs	r2, #4
 8000de0:	4619      	mov	r1, r3
 8000de2:	481a      	ldr	r0, [pc, #104]	; (8000e4c <MX_TIM1_Init+0x138>)
 8000de4:	f004 fc22 	bl	800562c <HAL_TIM_PWM_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000dee:	f000 f9b9 	bl	8001164 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 207;
 8000dfe:	23cf      	movs	r3, #207	; 0xcf
 8000e00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <MX_TIM1_Init+0x138>)
 8000e30:	f005 fc0e 	bl	8006650 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000e3a:	f000 f993 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e3e:	4803      	ldr	r0, [pc, #12]	; (8000e4c <MX_TIM1_Init+0x138>)
 8000e40:	f000 fa7a 	bl	8001338 <HAL_TIM_MspPostInit>

}
 8000e44:	bf00      	nop
 8000e46:	3760      	adds	r7, #96	; 0x60
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200001f0 	.word	0x200001f0
 8000e50:	40012c00 	.word	0x40012c00

08000e54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e72:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <MX_TIM2_Init+0x98>)
 8000e74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <MX_TIM2_Init+0x98>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_TIM2_Init+0x98>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 531;
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <MX_TIM2_Init+0x98>)
 8000e88:	f240 2213 	movw	r2, #531	; 0x213
 8000e8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_TIM2_Init+0x98>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <MX_TIM2_Init+0x98>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e9a:	4814      	ldr	r0, [pc, #80]	; (8000eec <MX_TIM2_Init+0x98>)
 8000e9c:	f003 ff34 	bl	8004d08 <HAL_TIM_Base_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ea6:	f000 f95d 	bl	8001164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480d      	ldr	r0, [pc, #52]	; (8000eec <MX_TIM2_Init+0x98>)
 8000eb8:	f004 fccc 	bl	8005854 <HAL_TIM_ConfigClockSource>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ec2:	f000 f94f 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <MX_TIM2_Init+0x98>)
 8000ed4:	f005 fb3a 	bl	800654c <HAL_TIMEx_MasterConfigSynchronization>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ede:	f000 f941 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	3720      	adds	r7, #32
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000023c 	.word	0x2000023c

08000ef0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <MX_USART2_UART_Init+0x90>)
 8000ef6:	4a23      	ldr	r2, [pc, #140]	; (8000f84 <MX_USART2_UART_Init+0x94>)
 8000ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <MX_USART2_UART_Init+0x90>)
 8000efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f08:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f38:	4811      	ldr	r0, [pc, #68]	; (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f3a:	f005 fc94 	bl	8006866 <HAL_UART_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f44:	f000 f90e 	bl	8001164 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	480d      	ldr	r0, [pc, #52]	; (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f4c:	f007 fc07 	bl	800875e <HAL_UARTEx_SetTxFifoThreshold>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f56:	f000 f905 	bl	8001164 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4808      	ldr	r0, [pc, #32]	; (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f5e:	f007 fc3c 	bl	80087da <HAL_UARTEx_SetRxFifoThreshold>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f68:	f000 f8fc 	bl	8001164 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f6e:	f007 fbbd 	bl	80086ec <HAL_UARTEx_DisableFifoMode>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f78:	f000 f8f4 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000288 	.word	0x20000288
 8000f84:	40004400 	.word	0x40004400

08000f88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_DMA_Init+0x50>)
 8000f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f92:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <MX_DMA_Init+0x50>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6493      	str	r3, [r2, #72]	; 0x48
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_DMA_Init+0x50>)
 8000f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_DMA_Init+0x50>)
 8000fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <MX_DMA_Init+0x50>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6493      	str	r3, [r2, #72]	; 0x48
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_DMA_Init+0x50>)
 8000fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	200b      	movs	r0, #11
 8000fc4:	f002 f99a 	bl	80032fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fc8:	200b      	movs	r0, #11
 8000fca:	f002 f9b1 	bl	8003330 <HAL_NVIC_EnableIRQ>

}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a2e      	ldr	r2, [pc, #184]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <MX_GPIO_Init+0xd4>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a28      	ldr	r2, [pc, #160]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001010:	f043 0320 	orr.w	r3, r3, #32
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0320 	and.w	r3, r3, #32
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	4a22      	ldr	r2, [pc, #136]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2101      	movs	r1, #1
 800103e:	481d      	ldr	r0, [pc, #116]	; (80010b4 <MX_GPIO_Init+0xd8>)
 8001040:	f002 fe38 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2120      	movs	r1, #32
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104c:	f002 fe32 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8001050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001054:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001056:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800105a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4619      	mov	r1, r3
 8001066:	4813      	ldr	r0, [pc, #76]	; (80010b4 <MX_GPIO_Init+0xd8>)
 8001068:	f002 fca2 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800106c:	2301      	movs	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4619      	mov	r1, r3
 8001082:	480c      	ldr	r0, [pc, #48]	; (80010b4 <MX_GPIO_Init+0xd8>)
 8001084:	f002 fc94 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8001088:	2320      	movs	r3, #32
 800108a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	4619      	mov	r1, r3
 800109e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a2:	f002 fc85 	bl	80039b0 <HAL_GPIO_Init>

}
 80010a6:	bf00      	nop
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000
 80010b4:	48000800 	.word	0x48000800

080010b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_UART_RxCpltCallback+0x20>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80010c6:	2201      	movs	r2, #1
 80010c8:	4904      	ldr	r1, [pc, #16]	; (80010dc <HAL_UART_RxCpltCallback+0x24>)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_UART_RxCpltCallback+0x28>)
 80010cc:	f005 fcb2 	bl	8006a34 <HAL_UART_Receive_IT>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000318 	.word	0x20000318
 80010dc:	2000031c 	.word	0x2000031c
 80010e0:	20000288 	.word	0x20000288

080010e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2101      	movs	r1, #1
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <HAL_GPIO_EXTI_Callback+0x2c>)
 80010f4:	f002 fdde 	bl	8003cb4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80010f8:	2001      	movs	r0, #1
 80010fa:	f000 fba7 	bl	800184c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2101      	movs	r1, #1
 8001102:	4803      	ldr	r0, [pc, #12]	; (8001110 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001104:	f002 fdd6 	bl	8003cb4 <HAL_GPIO_WritePin>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	48000800 	.word	0x48000800

08001114 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800111c:	4806      	ldr	r0, [pc, #24]	; (8001138 <HAL_ADC_ConvCpltCallback+0x24>)
 800111e:	f001 f865 	bl	80021ec <HAL_ADC_Stop_DMA>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <HAL_ADC_ConvCpltCallback+0x1a>
		printf("probleme avec DMA Stop\r\n");
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <HAL_ADC_ConvCpltCallback+0x28>)
 800112a:	f007 fc9f 	bl	8008a6c <puts>

}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000124 	.word	0x20000124
 800113c:	0800a1ec 	.word	0x0800a1ec

08001140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001152:	f000 fb5d 	bl	8001810 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40001000 	.word	0x40001000

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800116c:	e7fe      	b.n	800116c <Error_Handler+0x8>
	...

08001170 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_MspInit+0x44>)
 8001178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <HAL_MspInit+0x44>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6613      	str	r3, [r2, #96]	; 0x60
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_MspInit+0x44>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_MspInit+0x44>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_MspInit+0x44>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	6593      	str	r3, [r2, #88]	; 0x58
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_MspInit+0x44>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b09a      	sub	sp, #104	; 0x68
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	2244      	movs	r2, #68	; 0x44
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f007 fbb9 	bl	8008950 <memset>
  if(hadc->Instance==ADC1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011e6:	d15f      	bne.n	80012a8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4618      	mov	r0, r3
 80011fa:	f003 fb95 	bl	8004928 <HAL_RCCEx_PeriphCLKConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001204:	f7ff ffae 	bl	8001164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <HAL_ADC_MspInit+0xf8>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	4a28      	ldr	r2, [pc, #160]	; (80012b0 <HAL_ADC_MspInit+0xf8>)
 800120e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <HAL_ADC_MspInit+0xf8>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <HAL_ADC_MspInit+0xf8>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001224:	4a22      	ldr	r2, [pc, #136]	; (80012b0 <HAL_ADC_MspInit+0xf8>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_ADC_MspInit+0xf8>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001238:	2301      	movs	r3, #1
 800123a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123c:	2303      	movs	r3, #3
 800123e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124e:	f002 fbaf 	bl	80039b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_ADC_MspInit+0xfc>)
 8001254:	4a18      	ldr	r2, [pc, #96]	; (80012b8 <HAL_ADC_MspInit+0x100>)
 8001256:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <HAL_ADC_MspInit+0xfc>)
 800125a:	2205      	movs	r2, #5
 800125c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_ADC_MspInit+0xfc>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <HAL_ADC_MspInit+0xfc>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_ADC_MspInit+0xfc>)
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_ADC_MspInit+0xfc>)
 8001272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001276:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_ADC_MspInit+0xfc>)
 800127a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800127e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <HAL_ADC_MspInit+0xfc>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_ADC_MspInit+0xfc>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <HAL_ADC_MspInit+0xfc>)
 800128e:	f002 f85d 	bl	800334c <HAL_DMA_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001298:	f7ff ff64 	bl	8001164 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <HAL_ADC_MspInit+0xfc>)
 80012a0:	655a      	str	r2, [r3, #84]	; 0x54
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_ADC_MspInit+0xfc>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	3768      	adds	r7, #104	; 0x68
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000
 80012b4:	20000190 	.word	0x20000190
 80012b8:	40020008 	.word	0x40020008

080012bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <HAL_TIM_PWM_MspInit+0x38>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10b      	bne.n	80012e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d2:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80012d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d8:	6613      	str	r3, [r2, #96]	; 0x60
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40012c00 	.word	0x40012c00
 80012f8:	40021000 	.word	0x40021000

080012fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800130c:	d10b      	bne.n	8001326 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_TIM_Base_MspInit+0x38>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_TIM_Base_MspInit+0x38>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6593      	str	r3, [r2, #88]	; 0x58
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_TIM_Base_MspInit+0x38>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <HAL_TIM_MspPostInit+0x68>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d11d      	bne.n	8001396 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_TIM_MspPostInit+0x6c>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <HAL_TIM_MspPostInit+0x6c>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_TIM_MspPostInit+0x6c>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001372:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001376:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001384:	2306      	movs	r3, #6
 8001386:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001392:	f002 fb0d 	bl	80039b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001396:	bf00      	nop
 8001398:	3720      	adds	r7, #32
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40012c00 	.word	0x40012c00
 80013a4:	40021000 	.word	0x40021000

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b09a      	sub	sp, #104	; 0x68
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	2244      	movs	r2, #68	; 0x44
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f007 fac1 	bl	8008950 <memset>
  if(huart->Instance==USART2)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a23      	ldr	r2, [pc, #140]	; (8001460 <HAL_UART_MspInit+0xb8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d13e      	bne.n	8001456 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013d8:	2302      	movs	r3, #2
 80013da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 fa9f 	bl	8004928 <HAL_RCCEx_PeriphCLKConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013f0:	f7ff feb8 	bl	8001164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_UART_MspInit+0xbc>)
 80013f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f8:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <HAL_UART_MspInit+0xbc>)
 80013fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_UART_MspInit+0xbc>)
 8001402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_UART_MspInit+0xbc>)
 800140e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <HAL_UART_MspInit+0xbc>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_UART_MspInit+0xbc>)
 800141a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001424:	230c      	movs	r3, #12
 8001426:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001434:	2307      	movs	r3, #7
 8001436:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f002 fab5 	bl	80039b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2026      	movs	r0, #38	; 0x26
 800144c:	f001 ff56 	bl	80032fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001450:	2026      	movs	r0, #38	; 0x26
 8001452:	f001 ff6d 	bl	8003330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3768      	adds	r7, #104	; 0x68
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40004400 	.word	0x40004400
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <HAL_InitTick+0xcc>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	4a2c      	ldr	r2, [pc, #176]	; (8001534 <HAL_InitTick+0xcc>)
 8001484:	f043 0310 	orr.w	r3, r3, #16
 8001488:	6593      	str	r3, [r2, #88]	; 0x58
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <HAL_InitTick+0xcc>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001496:	f107 020c 	add.w	r2, r7, #12
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 f9c9 	bl	8004838 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014a6:	f003 f99b 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 80014aa:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ae:	4a22      	ldr	r2, [pc, #136]	; (8001538 <HAL_InitTick+0xd0>)
 80014b0:	fba2 2303 	umull	r2, r3, r2, r3
 80014b4:	0c9b      	lsrs	r3, r3, #18
 80014b6:	3b01      	subs	r3, #1
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_InitTick+0xd4>)
 80014bc:	4a20      	ldr	r2, [pc, #128]	; (8001540 <HAL_InitTick+0xd8>)
 80014be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	; (800153c <HAL_InitTick+0xd4>)
 80014c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014c8:	4a1c      	ldr	r2, [pc, #112]	; (800153c <HAL_InitTick+0xd4>)
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <HAL_InitTick+0xd4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_InitTick+0xd4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80014da:	4818      	ldr	r0, [pc, #96]	; (800153c <HAL_InitTick+0xd4>)
 80014dc:	f003 fc14 	bl	8004d08 <HAL_TIM_Base_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80014e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d11b      	bne.n	8001526 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014ee:	4813      	ldr	r0, [pc, #76]	; (800153c <HAL_InitTick+0xd4>)
 80014f0:	f003 fcc4 	bl	8004e7c <HAL_TIM_Base_Start_IT>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80014fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d111      	bne.n	8001526 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001502:	2036      	movs	r0, #54	; 0x36
 8001504:	f001 ff14 	bl	8003330 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b0f      	cmp	r3, #15
 800150c:	d808      	bhi.n	8001520 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800150e:	2200      	movs	r2, #0
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	2036      	movs	r0, #54	; 0x36
 8001514:	f001 fef2 	bl	80032fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_InitTick+0xdc>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e002      	b.n	8001526 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800152a:	4618      	mov	r0, r3
 800152c:	3730      	adds	r7, #48	; 0x30
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000
 8001538:	431bde83 	.word	0x431bde83
 800153c:	200003b4 	.word	0x200003b4
 8001540:	40001000 	.word	0x40001000
 8001544:	2000009c 	.word	0x2000009c

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler+0x4>

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <DMA1_Channel1_IRQHandler+0x10>)
 80015a6:	f002 f8b4 	bl	8003712 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000190 	.word	0x20000190

080015b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <USART2_IRQHandler+0x10>)
 80015ba:	f005 fa91 	bl	8006ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000288 	.word	0x20000288

080015c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <TIM6_DAC_IRQHandler+0x10>)
 80015ce:	f003 fead 	bl	800532c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200003b4 	.word	0x200003b4

080015dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
	return 1;
 80015e0:	2301      	movs	r3, #1
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_kill>:

int _kill(int pid, int sig)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015f6:	f007 f981 	bl	80088fc <__errno>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2216      	movs	r2, #22
 80015fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_exit>:

void _exit (int status)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ffe7 	bl	80015ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800161e:	e7fe      	b.n	800161e <_exit+0x12>

08001620 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	e00a      	b.n	8001648 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001632:	f3af 8000 	nop.w
 8001636:	4601      	mov	r1, r0
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	b2ca      	uxtb	r2, r1
 8001640:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3301      	adds	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	dbf0      	blt.n	8001632 <_read+0x12>
	}

return len;
 8001650:	687b      	ldr	r3, [r7, #4]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e009      	b.n	8001680 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	60ba      	str	r2, [r7, #8]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	dbf1      	blt.n	800166c <_write+0x12>
	}
	return len;
 8001688:	687b      	ldr	r3, [r7, #4]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <_close>:

int _close(int file)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
	return -1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ba:	605a      	str	r2, [r3, #4]
	return 0;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <_isatty>:

int _isatty(int file)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
	return 1;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	return 0;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <_sbrk+0x5c>)
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <_sbrk+0x60>)
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <_sbrk+0x64>)
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <_sbrk+0x68>)
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	429a      	cmp	r2, r3
 800172a:	d207      	bcs.n	800173c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800172c:	f007 f8e6 	bl	80088fc <__errno>
 8001730:	4603      	mov	r3, r0
 8001732:	220c      	movs	r2, #12
 8001734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	e009      	b.n	8001750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	4a05      	ldr	r2, [pc, #20]	; (8001760 <_sbrk+0x64>)
 800174c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174e:	68fb      	ldr	r3, [r7, #12]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20008000 	.word	0x20008000
 800175c:	00000400 	.word	0x00000400
 8001760:	20000400 	.word	0x20000400
 8001764:	20000418 	.word	0x20000418

08001768 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <SystemInit+0x20>)
 800176e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <SystemInit+0x20>)
 8001774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800178e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001790:	480d      	ldr	r0, [pc, #52]	; (80017c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001792:	490e      	ldr	r1, [pc, #56]	; (80017cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001794:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <LoopForever+0xe>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a8:	4c0b      	ldr	r4, [pc, #44]	; (80017d8 <LoopForever+0x16>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017b6:	f7ff ffd7 	bl	8001768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ba:	f007 f8a5 	bl	8008908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017be:	f7fe ff11 	bl	80005e4 <main>

080017c2 <LoopForever>:

LoopForever:
    b LoopForever
 80017c2:	e7fe      	b.n	80017c2 <LoopForever>
  ldr   r0, =_estack
 80017c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017cc:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80017d0:	0800a4a0 	.word	0x0800a4a0
  ldr r2, =_sbss
 80017d4:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80017d8:	20000418 	.word	0x20000418

080017dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC1_2_IRQHandler>

080017de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e8:	2003      	movs	r0, #3
 80017ea:	f001 fd7c 	bl	80032e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ee:	200f      	movs	r0, #15
 80017f0:	f7ff fe3a 	bl	8001468 <HAL_InitTick>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	e001      	b.n	8001804 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001800:	f7ff fcb6 	bl	8001170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001804:	79fb      	ldrb	r3, [r7, #7]

}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_IncTick+0x1c>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_IncTick+0x20>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4413      	add	r3, r2
 800181e:	4a03      	ldr	r2, [pc, #12]	; (800182c <HAL_IncTick+0x1c>)
 8001820:	6013      	str	r3, [r2, #0]
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000404 	.word	0x20000404
 8001830:	200000a0 	.word	0x200000a0

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <HAL_GetTick+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000404 	.word	0x20000404

0800184c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff ffee 	bl	8001834 <HAL_GetTick>
 8001858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001864:	d004      	beq.n	8001870 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_Delay+0x40>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4413      	add	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001870:	bf00      	nop
 8001872:	f7ff ffdf 	bl	8001834 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	429a      	cmp	r2, r3
 8001880:	d8f7      	bhi.n	8001872 <HAL_Delay+0x26>
  {
  }
}
 8001882:	bf00      	nop
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200000a0 	.word	0x200000a0

08001890 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	609a      	str	r2, [r3, #8]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	609a      	str	r2, [r3, #8]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3360      	adds	r3, #96	; 0x60
 800190a:	461a      	mov	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <LL_ADC_SetOffset+0x44>)
 800191a:	4013      	ands	r3, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	4313      	orrs	r3, r2
 8001928:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001930:	bf00      	nop
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	03fff000 	.word	0x03fff000

08001940 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3360      	adds	r3, #96	; 0x60
 800194e:	461a      	mov	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800196c:	b480      	push	{r7}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3360      	adds	r3, #96	; 0x60
 800197c:	461a      	mov	r2, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	431a      	orrs	r2, r3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001996:	bf00      	nop
 8001998:	371c      	adds	r7, #28
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b087      	sub	sp, #28
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3360      	adds	r3, #96	; 0x60
 80019b2:	461a      	mov	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80019cc:	bf00      	nop
 80019ce:	371c      	adds	r7, #28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3360      	adds	r3, #96	; 0x60
 80019e8:	461a      	mov	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a02:	bf00      	nop
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	615a      	str	r2, [r3, #20]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b087      	sub	sp, #28
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3330      	adds	r3, #48	; 0x30
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	4413      	add	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	211f      	movs	r1, #31
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	0e9b      	lsrs	r3, r3, #26
 8001a92:	f003 011f 	and.w	r1, r3, #31
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aa6:	bf00      	nop
 8001aa8:	371c      	adds	r7, #28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b087      	sub	sp, #28
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3314      	adds	r3, #20
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	0e5b      	lsrs	r3, r3, #25
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	4413      	add	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	0d1b      	lsrs	r3, r3, #20
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2107      	movs	r1, #7
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	0d1b      	lsrs	r3, r3, #20
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	431a      	orrs	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001afc:	bf00      	nop
 8001afe:	371c      	adds	r7, #28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d10a      	bne.n	8001b32 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001b30:	e00a      	b.n	8001b48 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	401a      	ands	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	407f0000 	.word	0x407f0000

08001b58 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 031f 	and.w	r3, r3, #31
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6093      	str	r3, [r2, #8]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bac:	d101      	bne.n	8001bb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bfc:	d101      	bne.n	8001c02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c24:	f043 0201 	orr.w	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c4c:	f043 0202 	orr.w	r2, r3, #2
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <LL_ADC_IsEnabled+0x18>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <LL_ADC_IsEnabled+0x1a>
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d101      	bne.n	8001c9e <LL_ADC_IsDisableOngoing+0x18>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <LL_ADC_IsDisableOngoing+0x1a>
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cc0:	f043 0204 	orr.w	r2, r3, #4
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ce4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce8:	f043 0210 	orr.w	r2, r3, #16
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d101      	bne.n	8001d14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d36:	f043 0220 	orr.w	r2, r3, #32
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d101      	bne.n	8001d62 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e177      	b.n	800207a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff fa0d 	bl	80011b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fef1 	bl	8001b98 <LL_ADC_IsDeepPowerDownEnabled>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d004      	beq.n	8001dc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fed7 	bl	8001b74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff0c 	bl	8001be8 <LL_ADC_IsInternalRegulatorEnabled>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d115      	bne.n	8001e02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fef0 	bl	8001bc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001de0:	4b9c      	ldr	r3, [pc, #624]	; (8002054 <HAL_ADC_Init+0x2e4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	099b      	lsrs	r3, r3, #6
 8001de6:	4a9c      	ldr	r2, [pc, #624]	; (8002058 <HAL_ADC_Init+0x2e8>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	099b      	lsrs	r3, r3, #6
 8001dee:	3301      	adds	r3, #1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001df4:	e002      	b.n	8001dfc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f9      	bne.n	8001df6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff feee 	bl	8001be8 <LL_ADC_IsInternalRegulatorEnabled>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10d      	bne.n	8001e2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	f043 0210 	orr.w	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff62 	bl	8001cfc <LL_ADC_REG_IsConversionOngoing>
 8001e38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 8110 	bne.w	8002068 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f040 810c 	bne.w	8002068 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e58:	f043 0202 	orr.w	r2, r3, #2
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fefb 	bl	8001c60 <LL_ADC_IsEnabled>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d111      	bne.n	8001e94 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e70:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e74:	f7ff fef4 	bl	8001c60 <LL_ADC_IsEnabled>
 8001e78:	4604      	mov	r4, r0
 8001e7a:	4878      	ldr	r0, [pc, #480]	; (800205c <HAL_ADC_Init+0x2ec>)
 8001e7c:	f7ff fef0 	bl	8001c60 <LL_ADC_IsEnabled>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4323      	orrs	r3, r4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d105      	bne.n	8001e94 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4874      	ldr	r0, [pc, #464]	; (8002060 <HAL_ADC_Init+0x2f0>)
 8001e90:	f7ff fcfe 	bl	8001890 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7f5b      	ldrb	r3, [r3, #29]
 8001e98:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e9e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ea4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001eaa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eb2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d106      	bne.n	8001ed0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	045b      	lsls	r3, r3, #17
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d009      	beq.n	8001eec <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	4b5c      	ldr	r3, [pc, #368]	; (8002064 <HAL_ADC_Init+0x2f4>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	69b9      	ldr	r1, [r7, #24]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff feee 	bl	8001cfc <LL_ADC_REG_IsConversionOngoing>
 8001f20:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff0f 	bl	8001d4a <LL_ADC_INJ_IsConversionOngoing>
 8001f2c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d16d      	bne.n	8002010 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d16a      	bne.n	8002010 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f3e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f46:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f56:	f023 0302 	bic.w	r3, r3, #2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	69b9      	ldr	r1, [r7, #24]
 8001f60:	430b      	orrs	r3, r1
 8001f62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d017      	beq.n	8001f9c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f7a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f84:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6911      	ldr	r1, [r2, #16]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	430b      	orrs	r3, r1
 8001f96:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001f9a:	e013      	b.n	8001fc4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001faa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fc0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d118      	bne.n	8002000 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fd8:	f023 0304 	bic.w	r3, r3, #4
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fe4:	4311      	orrs	r1, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fea:	4311      	orrs	r1, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	611a      	str	r2, [r3, #16]
 8001ffe:	e007      	b.n	8002010 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d10c      	bne.n	8002032 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f023 010f 	bic.w	r1, r3, #15
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	1e5a      	subs	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
 8002030:	e007      	b.n	8002042 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 020f 	bic.w	r2, r2, #15
 8002040:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	f043 0201 	orr.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	65da      	str	r2, [r3, #92]	; 0x5c
 8002052:	e011      	b.n	8002078 <HAL_ADC_Init+0x308>
 8002054:	20000098 	.word	0x20000098
 8002058:	053e2d63 	.word	0x053e2d63
 800205c:	50000100 	.word	0x50000100
 8002060:	50000300 	.word	0x50000300
 8002064:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	f043 0210 	orr.w	r2, r3, #16
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002078:	7ffb      	ldrb	r3, [r7, #31]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd90      	pop	{r4, r7, pc}
 8002082:	bf00      	nop

08002084 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002090:	4851      	ldr	r0, [pc, #324]	; (80021d8 <HAL_ADC_Start_DMA+0x154>)
 8002092:	f7ff fd61 	bl	8001b58 <LL_ADC_GetMultimode>
 8002096:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fe2d 	bl	8001cfc <LL_ADC_REG_IsConversionOngoing>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f040 808f 	bne.w	80021c8 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_Start_DMA+0x34>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e08a      	b.n	80021ce <HAL_ADC_Start_DMA+0x14a>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b05      	cmp	r3, #5
 80020ca:	d002      	beq.n	80020d2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b09      	cmp	r3, #9
 80020d0:	d173      	bne.n	80021ba <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 fdac 	bl	8002c30 <ADC_Enable>
 80020d8:	4603      	mov	r3, r0
 80020da:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d166      	bne.n	80021b0 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a38      	ldr	r2, [pc, #224]	; (80021dc <HAL_ADC_Start_DMA+0x158>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d002      	beq.n	8002106 <HAL_ADC_Start_DMA+0x82>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	e001      	b.n	800210a <HAL_ADC_Start_DMA+0x86>
 8002106:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	4293      	cmp	r3, r2
 8002110:	d002      	beq.n	8002118 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d006      	beq.n	800213e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002134:	f023 0206 	bic.w	r2, r3, #6
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	661a      	str	r2, [r3, #96]	; 0x60
 800213c:	e002      	b.n	8002144 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002148:	4a25      	ldr	r2, [pc, #148]	; (80021e0 <HAL_ADC_Start_DMA+0x15c>)
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	4a24      	ldr	r2, [pc, #144]	; (80021e4 <HAL_ADC_Start_DMA+0x160>)
 8002152:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	4a23      	ldr	r2, [pc, #140]	; (80021e8 <HAL_ADC_Start_DMA+0x164>)
 800215a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	221c      	movs	r2, #28
 8002162:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0210 	orr.w	r2, r2, #16
 800217a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3340      	adds	r3, #64	; 0x40
 8002196:	4619      	mov	r1, r3
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f001 f97e 	bl	800349c <HAL_DMA_Start_IT>
 80021a0:	4603      	mov	r3, r0
 80021a2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fd7f 	bl	8001cac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80021ae:	e00d      	b.n	80021cc <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80021b8:	e008      	b.n	80021cc <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80021c6:	e001      	b.n	80021cc <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021c8:	2302      	movs	r3, #2
 80021ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	50000300 	.word	0x50000300
 80021dc:	50000100 	.word	0x50000100
 80021e0:	08002db3 	.word	0x08002db3
 80021e4:	08002e8b 	.word	0x08002e8b
 80021e8:	08002ea7 	.word	0x08002ea7

080021ec <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_Stop_DMA+0x16>
 80021fe:	2302      	movs	r3, #2
 8002200:	e051      	b.n	80022a6 <HAL_ADC_Stop_DMA+0xba>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800220a:	2103      	movs	r1, #3
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 fc53 	bl	8002ab8 <ADC_ConversionStop>
 8002212:	4603      	mov	r3, r0
 8002214:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d13f      	bne.n	800229c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002230:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d10f      	bne.n	800225a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	4618      	mov	r0, r3
 8002240:	f001 f9a7 	bl	8003592 <HAL_DMA_Abort>
 8002244:	4603      	mov	r3, r0
 8002246:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002252:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0210 	bic.w	r2, r2, #16
 8002268:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fd3f 	bl	8002cf4 <ADC_Disable>
 8002276:	4603      	mov	r3, r0
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	e002      	b.n	8002282 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fd39 	bl	8002cf4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0b6      	sub	sp, #216	; 0xd8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x22>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e3c8      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x7b4>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fcf8 	bl	8001cfc <LL_ADC_REG_IsConversionOngoing>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 83ad 	bne.w	8002a6e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	f7ff fb9a 	bl	8001a5a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fce6 	bl	8001cfc <LL_ADC_REG_IsConversionOngoing>
 8002330:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fd06 	bl	8001d4a <LL_ADC_INJ_IsConversionOngoing>
 800233e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002342:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 81d9 	bne.w	80026fe <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800234c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002350:	2b00      	cmp	r3, #0
 8002352:	f040 81d4 	bne.w	80026fe <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800235e:	d10f      	bne.n	8002380 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2200      	movs	r2, #0
 800236a:	4619      	mov	r1, r3
 800236c:	f7ff fba1 	bl	8001ab2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fb48 	bl	8001a0e <LL_ADC_SetSamplingTimeCommonConfig>
 800237e:	e00e      	b.n	800239e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	461a      	mov	r2, r3
 800238e:	f7ff fb90 	bl	8001ab2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fb38 	bl	8001a0e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	08db      	lsrs	r3, r3, #3
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d022      	beq.n	8002406 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6919      	ldr	r1, [r3, #16]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023d0:	f7ff fa92 	bl	80018f8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6919      	ldr	r1, [r3, #16]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	461a      	mov	r2, r3
 80023e2:	f7ff fade 	bl	80019a2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6919      	ldr	r1, [r3, #16]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	7f1b      	ldrb	r3, [r3, #28]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d102      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x124>
 80023f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023fa:	e000      	b.n	80023fe <HAL_ADC_ConfigChannel+0x126>
 80023fc:	2300      	movs	r3, #0
 80023fe:	461a      	mov	r2, r3
 8002400:	f7ff faea 	bl	80019d8 <LL_ADC_SetOffsetSaturation>
 8002404:	e17b      	b.n	80026fe <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fa97 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x15a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fa8c 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	0e9b      	lsrs	r3, r3, #26
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	e01e      	b.n	8002470 <HAL_ADC_ConfigChannel+0x198>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fa81 	bl	8001940 <LL_ADC_GetOffsetChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002450:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002454:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002460:	2320      	movs	r3, #32
 8002462:	e004      	b.n	800246e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002464:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002468:	fab3 f383 	clz	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1b0>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	0e9b      	lsrs	r3, r3, #26
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	e018      	b.n	80024ba <HAL_ADC_ConfigChannel+0x1e2>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800249c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80024a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80024ac:	2320      	movs	r3, #32
 80024ae:	e004      	b.n	80024ba <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80024b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d106      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2200      	movs	r2, #0
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fa50 	bl	800196c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fa34 	bl	8001940 <LL_ADC_GetOffsetChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x220>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fa29 	bl	8001940 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	f003 021f 	and.w	r2, r3, #31
 80024f6:	e01e      	b.n	8002536 <HAL_ADC_ConfigChannel+0x25e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2101      	movs	r1, #1
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fa1e 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800251a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800251e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002526:	2320      	movs	r3, #32
 8002528:	e004      	b.n	8002534 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800252a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <HAL_ADC_ConfigChannel+0x276>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	0e9b      	lsrs	r3, r3, #26
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	e018      	b.n	8002580 <HAL_ADC_ConfigChannel+0x2a8>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002562:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800256a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002572:	2320      	movs	r3, #32
 8002574:	e004      	b.n	8002580 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002576:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002580:	429a      	cmp	r2, r3
 8002582:	d106      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2200      	movs	r2, #0
 800258a:	2101      	movs	r1, #1
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff f9ed 	bl	800196c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2102      	movs	r1, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff f9d1 	bl	8001940 <LL_ADC_GetOffsetChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <HAL_ADC_ConfigChannel+0x2e6>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2102      	movs	r1, #2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff f9c6 	bl	8001940 <LL_ADC_GetOffsetChannel>
 80025b4:	4603      	mov	r3, r0
 80025b6:	0e9b      	lsrs	r3, r3, #26
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	e01e      	b.n	80025fc <HAL_ADC_ConfigChannel+0x324>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2102      	movs	r1, #2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff f9bb 	bl	8001940 <LL_ADC_GetOffsetChannel>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80025ec:	2320      	movs	r3, #32
 80025ee:	e004      	b.n	80025fa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80025f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x33c>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	e016      	b.n	8002642 <HAL_ADC_ConfigChannel+0x36a>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002626:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800262c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002634:	2320      	movs	r3, #32
 8002636:	e004      	b.n	8002642 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002638:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002642:	429a      	cmp	r2, r3
 8002644:	d106      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2200      	movs	r2, #0
 800264c:	2102      	movs	r1, #2
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff f98c 	bl	800196c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2103      	movs	r1, #3
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff f970 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10a      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x3a8>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2103      	movs	r1, #3
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff f965 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	f003 021f 	and.w	r2, r3, #31
 800267e:	e017      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x3d8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2103      	movs	r1, #3
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff f95a 	bl	8001940 <LL_ADC_GetOffsetChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002698:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800269a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800269c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80026a2:	2320      	movs	r3, #32
 80026a4:	e003      	b.n	80026ae <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80026a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x3f0>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0e9b      	lsrs	r3, r3, #26
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	e011      	b.n	80026ec <HAL_ADC_ConfigChannel+0x414>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80026da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80026e0:	2320      	movs	r3, #32
 80026e2:	e003      	b.n	80026ec <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80026e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d106      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2200      	movs	r2, #0
 80026f6:	2103      	movs	r1, #3
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff f937 	bl	800196c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff faac 	bl	8001c60 <LL_ADC_IsEnabled>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 8140 	bne.w	8002990 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6819      	ldr	r1, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	461a      	mov	r2, r3
 800271e:	f7ff f9f3 	bl	8001b08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	4a8f      	ldr	r2, [pc, #572]	; (8002964 <HAL_ADC_ConfigChannel+0x68c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	f040 8131 	bne.w	8002990 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10b      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x47e>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	3301      	adds	r3, #1
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2b09      	cmp	r3, #9
 800274c:	bf94      	ite	ls
 800274e:	2301      	movls	r3, #1
 8002750:	2300      	movhi	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	e019      	b.n	800278a <HAL_ADC_ConfigChannel+0x4b2>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002764:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002766:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e003      	b.n	800277a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2b09      	cmp	r3, #9
 8002782:	bf94      	ite	ls
 8002784:	2301      	movls	r3, #1
 8002786:	2300      	movhi	r3, #0
 8002788:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800278a:	2b00      	cmp	r3, #0
 800278c:	d079      	beq.n	8002882 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002796:	2b00      	cmp	r3, #0
 8002798:	d107      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x4d2>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	0e9b      	lsrs	r3, r3, #26
 80027a0:	3301      	adds	r3, #1
 80027a2:	069b      	lsls	r3, r3, #26
 80027a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027a8:	e015      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x4fe>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80027bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80027c2:	2320      	movs	r3, #32
 80027c4:	e003      	b.n	80027ce <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80027c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c8:	fab3 f383 	clz	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	069b      	lsls	r3, r3, #26
 80027d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x51e>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	3301      	adds	r3, #1
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	e017      	b.n	8002826 <HAL_ADC_ConfigChannel+0x54e>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002806:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800280e:	2320      	movs	r3, #32
 8002810:	e003      	b.n	800281a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002814:	fab3 f383 	clz	r3, r3
 8002818:	b2db      	uxtb	r3, r3
 800281a:	3301      	adds	r3, #1
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2101      	movs	r1, #1
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	ea42 0103 	orr.w	r1, r2, r3
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10a      	bne.n	800284c <HAL_ADC_ConfigChannel+0x574>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	0e9b      	lsrs	r3, r3, #26
 800283c:	3301      	adds	r3, #1
 800283e:	f003 021f 	and.w	r2, r3, #31
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	051b      	lsls	r3, r3, #20
 800284a:	e018      	b.n	800287e <HAL_ADC_ConfigChannel+0x5a6>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800285a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800285e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002864:	2320      	movs	r3, #32
 8002866:	e003      	b.n	8002870 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	3301      	adds	r3, #1
 8002872:	f003 021f 	and.w	r2, r3, #31
 8002876:	4613      	mov	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4413      	add	r3, r2
 800287c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800287e:	430b      	orrs	r3, r1
 8002880:	e081      	b.n	8002986 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288a:	2b00      	cmp	r3, #0
 800288c:	d107      	bne.n	800289e <HAL_ADC_ConfigChannel+0x5c6>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	0e9b      	lsrs	r3, r3, #26
 8002894:	3301      	adds	r3, #1
 8002896:	069b      	lsls	r3, r3, #26
 8002898:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800289c:	e015      	b.n	80028ca <HAL_ADC_ConfigChannel+0x5f2>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80028b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80028b6:	2320      	movs	r3, #32
 80028b8:	e003      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80028ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028bc:	fab3 f383 	clz	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	069b      	lsls	r3, r3, #26
 80028c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x612>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	0e9b      	lsrs	r3, r3, #26
 80028dc:	3301      	adds	r3, #1
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	2101      	movs	r1, #1
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	e017      	b.n	800291a <HAL_ADC_ConfigChannel+0x642>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	61fb      	str	r3, [r7, #28]
  return result;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002902:	2320      	movs	r3, #32
 8002904:	e003      	b.n	800290e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	2101      	movs	r1, #1
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	ea42 0103 	orr.w	r1, r2, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10d      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x66e>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	0e9b      	lsrs	r3, r3, #26
 8002930:	3301      	adds	r3, #1
 8002932:	f003 021f 	and.w	r2, r3, #31
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	3b1e      	subs	r3, #30
 800293e:	051b      	lsls	r3, r3, #20
 8002940:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002944:	e01e      	b.n	8002984 <HAL_ADC_ConfigChannel+0x6ac>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	613b      	str	r3, [r7, #16]
  return result;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d104      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800295e:	2320      	movs	r3, #32
 8002960:	e006      	b.n	8002970 <HAL_ADC_ConfigChannel+0x698>
 8002962:	bf00      	nop
 8002964:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3301      	adds	r3, #1
 8002972:	f003 021f 	and.w	r2, r3, #31
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	3b1e      	subs	r3, #30
 800297e:	051b      	lsls	r3, r3, #20
 8002980:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002984:	430b      	orrs	r3, r1
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	6892      	ldr	r2, [r2, #8]
 800298a:	4619      	mov	r1, r3
 800298c:	f7ff f891 	bl	8001ab2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <HAL_ADC_ConfigChannel+0x7bc>)
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d071      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800299c:	483e      	ldr	r0, [pc, #248]	; (8002a98 <HAL_ADC_ConfigChannel+0x7c0>)
 800299e:	f7fe ff9d 	bl	80018dc <LL_ADC_GetCommonPathInternalCh>
 80029a2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a3c      	ldr	r2, [pc, #240]	; (8002a9c <HAL_ADC_ConfigChannel+0x7c4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d004      	beq.n	80029ba <HAL_ADC_ConfigChannel+0x6e2>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a3a      	ldr	r2, [pc, #232]	; (8002aa0 <HAL_ADC_ConfigChannel+0x7c8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d127      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d121      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029ce:	d157      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029d8:	4619      	mov	r1, r3
 80029da:	482f      	ldr	r0, [pc, #188]	; (8002a98 <HAL_ADC_ConfigChannel+0x7c0>)
 80029dc:	f7fe ff6b 	bl	80018b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <HAL_ADC_ConfigChannel+0x7cc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	4a30      	ldr	r2, [pc, #192]	; (8002aa8 <HAL_ADC_ConfigChannel+0x7d0>)
 80029e8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	4613      	mov	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029fa:	e002      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f9      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a08:	e03a      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a27      	ldr	r2, [pc, #156]	; (8002aac <HAL_ADC_ConfigChannel+0x7d4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d113      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x764>
 8002a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10d      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d02a      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a32:	4619      	mov	r1, r3
 8002a34:	4818      	ldr	r0, [pc, #96]	; (8002a98 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a36:	f7fe ff3e 	bl	80018b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a3a:	e021      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d11c      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d116      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a16      	ldr	r2, [pc, #88]	; (8002ab0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d011      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a64:	4619      	mov	r1, r3
 8002a66:	480c      	ldr	r0, [pc, #48]	; (8002a98 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a68:	f7fe ff25 	bl	80018b6 <LL_ADC_SetCommonPathInternalCh>
 8002a6c:	e008      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a72:	f043 0220 	orr.w	r2, r3, #32
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a88:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	37d8      	adds	r7, #216	; 0xd8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	80080000 	.word	0x80080000
 8002a98:	50000300 	.word	0x50000300
 8002a9c:	c3210000 	.word	0xc3210000
 8002aa0:	90c00010 	.word	0x90c00010
 8002aa4:	20000098 	.word	0x20000098
 8002aa8:	053e2d63 	.word	0x053e2d63
 8002aac:	c7520000 	.word	0xc7520000
 8002ab0:	50000100 	.word	0x50000100
 8002ab4:	cb840000 	.word	0xcb840000

08002ab8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f914 	bl	8001cfc <LL_ADC_REG_IsConversionOngoing>
 8002ad4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff f935 	bl	8001d4a <LL_ADC_INJ_IsConversionOngoing>
 8002ae0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d103      	bne.n	8002af0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8098 	beq.w	8002c20 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d02a      	beq.n	8002b54 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	7f5b      	ldrb	r3, [r3, #29]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d126      	bne.n	8002b54 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7f1b      	ldrb	r3, [r3, #28]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d122      	bne.n	8002b54 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b12:	e014      	b.n	8002b3e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	4a45      	ldr	r2, [pc, #276]	; (8002c2c <ADC_ConversionStop+0x174>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d90d      	bls.n	8002b38 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b20:	f043 0210 	orr.w	r2, r3, #16
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2c:	f043 0201 	orr.w	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e074      	b.n	8002c22 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b48:	2b40      	cmp	r3, #64	; 0x40
 8002b4a:	d1e3      	bne.n	8002b14 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2240      	movs	r2, #64	; 0x40
 8002b52:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d014      	beq.n	8002b84 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff f8cc 	bl	8001cfc <LL_ADC_REG_IsConversionOngoing>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00c      	beq.n	8002b84 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff f889 	bl	8001c86 <LL_ADC_IsDisableOngoing>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d104      	bne.n	8002b84 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff f8a8 	bl	8001cd4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d014      	beq.n	8002bb4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff f8db 	bl	8001d4a <LL_ADC_INJ_IsConversionOngoing>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00c      	beq.n	8002bb4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff f871 	bl	8001c86 <LL_ADC_IsDisableOngoing>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f8b7 	bl	8001d22 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d005      	beq.n	8002bc6 <ADC_ConversionStop+0x10e>
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d105      	bne.n	8002bcc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	617b      	str	r3, [r7, #20]
        break;
 8002bc4:	e005      	b.n	8002bd2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002bc6:	2308      	movs	r3, #8
 8002bc8:	617b      	str	r3, [r7, #20]
        break;
 8002bca:	e002      	b.n	8002bd2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002bcc:	2304      	movs	r3, #4
 8002bce:	617b      	str	r3, [r7, #20]
        break;
 8002bd0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002bd2:	f7fe fe2f 	bl	8001834 <HAL_GetTick>
 8002bd6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bd8:	e01b      	b.n	8002c12 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bda:	f7fe fe2b 	bl	8001834 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b05      	cmp	r3, #5
 8002be6:	d914      	bls.n	8002c12 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00d      	beq.n	8002c12 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	f043 0210 	orr.w	r2, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c06:	f043 0201 	orr.w	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e007      	b.n	8002c22 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1dc      	bne.n	8002bda <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	a33fffff 	.word	0xa33fffff

08002c30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff f80f 	bl	8001c60 <LL_ADC_IsEnabled>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d14d      	bne.n	8002ce4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	4b28      	ldr	r3, [pc, #160]	; (8002cf0 <ADC_Enable+0xc0>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00d      	beq.n	8002c72 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5a:	f043 0210 	orr.w	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c66:	f043 0201 	orr.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e039      	b.n	8002ce6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe ffca 	bl	8001c10 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c7c:	f7fe fdda 	bl	8001834 <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c82:	e028      	b.n	8002cd6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe ffe9 	bl	8001c60 <LL_ADC_IsEnabled>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d104      	bne.n	8002c9e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe ffb9 	bl	8001c10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c9e:	f7fe fdc9 	bl	8001834 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d914      	bls.n	8002cd6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d00d      	beq.n	8002cd6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	f043 0210 	orr.w	r2, r3, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e007      	b.n	8002ce6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d1cf      	bne.n	8002c84 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	8000003f 	.word	0x8000003f

08002cf4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe ffc0 	bl	8001c86 <LL_ADC_IsDisableOngoing>
 8002d06:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe ffa7 	bl	8001c60 <LL_ADC_IsEnabled>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d047      	beq.n	8002da8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d144      	bne.n	8002da8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 030d 	and.w	r3, r3, #13
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d10c      	bne.n	8002d46 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe ff81 	bl	8001c38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d3e:	f7fe fd79 	bl	8001834 <HAL_GetTick>
 8002d42:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d44:	e029      	b.n	8002d9a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	f043 0210 	orr.w	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d56:	f043 0201 	orr.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e023      	b.n	8002daa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d62:	f7fe fd67 	bl	8001834 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d914      	bls.n	8002d9a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00d      	beq.n	8002d9a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d82:	f043 0210 	orr.w	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8e:	f043 0201 	orr.w	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e007      	b.n	8002daa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1dc      	bne.n	8002d62 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d14b      	bne.n	8002e64 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d021      	beq.n	8002e2a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fe22 	bl	8001a34 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d032      	beq.n	8002e5c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d12b      	bne.n	8002e5c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d11f      	bne.n	8002e5c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e20:	f043 0201 	orr.w	r2, r3, #1
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e28:	e018      	b.n	8002e5c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d111      	bne.n	8002e5c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	f043 0201 	orr.w	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7fe f959 	bl	8001114 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e62:	e00e      	b.n	8002e82 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f7ff fa26 	bl	80022c2 <HAL_ADC_ErrorCallback>
}
 8002e76:	e004      	b.n	8002e82 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	4798      	blx	r3
}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f7ff fa08 	bl	80022ae <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec4:	f043 0204 	orr.w	r2, r3, #4
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f7ff f9f8 	bl	80022c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <LL_ADC_IsEnabled>:
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <LL_ADC_IsEnabled+0x18>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <LL_ADC_IsEnabled+0x1a>
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_ADC_StartCalibration>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002f12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	609a      	str	r2, [r3, #8]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <LL_ADC_IsCalibrationOnGoing>:
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f46:	d101      	bne.n	8002f4c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <LL_ADC_REG_IsConversionOngoing>:
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d101      	bne.n	8002f72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_ADCEx_Calibration_Start+0x1c>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e04d      	b.n	8003038 <HAL_ADCEx_Calibration_Start+0xb8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff fea5 	bl	8002cf4 <ADC_Disable>
 8002faa:	4603      	mov	r3, r0
 8002fac:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d136      	bne.n	8003022 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fbc:	f023 0302 	bic.w	r3, r3, #2
 8002fc0:	f043 0202 	orr.w	r2, r3, #2
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6839      	ldr	r1, [r7, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ff96 	bl	8002f00 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002fd4:	e014      	b.n	8003000 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4a18      	ldr	r2, [pc, #96]	; (8003040 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d90d      	bls.n	8003000 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe8:	f023 0312 	bic.w	r3, r3, #18
 8002fec:	f043 0210 	orr.w	r2, r3, #16
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e01b      	b.n	8003038 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff94 	bl	8002f32 <LL_ADC_IsCalibrationOnGoing>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1e2      	bne.n	8002fd6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003014:	f023 0303 	bic.w	r3, r3, #3
 8003018:	f043 0201 	orr.w	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003020:	e005      	b.n	800302e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	f043 0210 	orr.w	r2, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003036:	7bfb      	ldrb	r3, [r7, #15]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	0004de01 	.word	0x0004de01

08003044 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b0a1      	sub	sp, #132	; 0x84
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800305e:	2302      	movs	r3, #2
 8003060:	e08b      	b.n	800317a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800306a:	2300      	movs	r3, #0
 800306c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800306e:	2300      	movs	r3, #0
 8003070:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800307a:	d102      	bne.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800307c:	4b41      	ldr	r3, [pc, #260]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	e001      	b.n	8003086 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10b      	bne.n	80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e06a      	b.n	800317a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ff57 	bl	8002f5a <LL_ADC_REG_IsConversionOngoing>
 80030ac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ff51 	bl	8002f5a <LL_ADC_REG_IsConversionOngoing>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d14c      	bne.n	8003158 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80030be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d149      	bne.n	8003158 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030c4:	4b30      	ldr	r3, [pc, #192]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80030c6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d028      	beq.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030e2:	035b      	lsls	r3, r3, #13
 80030e4:	430b      	orrs	r3, r1
 80030e6:	431a      	orrs	r2, r3
 80030e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80030f0:	f7ff fef3 	bl	8002eda <LL_ADC_IsEnabled>
 80030f4:	4604      	mov	r4, r0
 80030f6:	4823      	ldr	r0, [pc, #140]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030f8:	f7ff feef 	bl	8002eda <LL_ADC_IsEnabled>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4323      	orrs	r3, r4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d133      	bne.n	800316c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800310c:	f023 030f 	bic.w	r3, r3, #15
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	6811      	ldr	r1, [r2, #0]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	6892      	ldr	r2, [r2, #8]
 8003118:	430a      	orrs	r2, r1
 800311a:	431a      	orrs	r2, r3
 800311c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800311e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003120:	e024      	b.n	800316c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800312a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800312c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800312e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003132:	f7ff fed2 	bl	8002eda <LL_ADC_IsEnabled>
 8003136:	4604      	mov	r4, r0
 8003138:	4812      	ldr	r0, [pc, #72]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800313a:	f7ff fece 	bl	8002eda <LL_ADC_IsEnabled>
 800313e:	4603      	mov	r3, r0
 8003140:	4323      	orrs	r3, r4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d112      	bne.n	800316c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800314e:	f023 030f 	bic.w	r3, r3, #15
 8003152:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003154:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003156:	e009      	b.n	800316c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800316a:	e000      	b.n	800316e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800316c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003176:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800317a:	4618      	mov	r0, r3
 800317c:	3784      	adds	r7, #132	; 0x84
 800317e:	46bd      	mov	sp, r7
 8003180:	bd90      	pop	{r4, r7, pc}
 8003182:	bf00      	nop
 8003184:	50000100 	.word	0x50000100
 8003188:	50000300 	.word	0x50000300

0800318c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800319c:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <__NVIC_SetPriorityGrouping+0x44>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031a8:	4013      	ands	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031be:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <__NVIC_SetPriorityGrouping+0x44>)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	60d3      	str	r3, [r2, #12]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <__NVIC_GetPriorityGrouping+0x18>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	0a1b      	lsrs	r3, r3, #8
 80031de:	f003 0307 	and.w	r3, r3, #7
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	db0b      	blt.n	800321a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	f003 021f 	and.w	r2, r3, #31
 8003208:	4907      	ldr	r1, [pc, #28]	; (8003228 <__NVIC_EnableIRQ+0x38>)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	2001      	movs	r0, #1
 8003212:	fa00 f202 	lsl.w	r2, r0, r2
 8003216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	e000e100 	.word	0xe000e100

0800322c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	6039      	str	r1, [r7, #0]
 8003236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323c:	2b00      	cmp	r3, #0
 800323e:	db0a      	blt.n	8003256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	b2da      	uxtb	r2, r3
 8003244:	490c      	ldr	r1, [pc, #48]	; (8003278 <__NVIC_SetPriority+0x4c>)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	0112      	lsls	r2, r2, #4
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	440b      	add	r3, r1
 8003250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003254:	e00a      	b.n	800326c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	4908      	ldr	r1, [pc, #32]	; (800327c <__NVIC_SetPriority+0x50>)
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	3b04      	subs	r3, #4
 8003264:	0112      	lsls	r2, r2, #4
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	440b      	add	r3, r1
 800326a:	761a      	strb	r2, [r3, #24]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000e100 	.word	0xe000e100
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003280:	b480      	push	{r7}
 8003282:	b089      	sub	sp, #36	; 0x24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f1c3 0307 	rsb	r3, r3, #7
 800329a:	2b04      	cmp	r3, #4
 800329c:	bf28      	it	cs
 800329e:	2304      	movcs	r3, #4
 80032a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	d902      	bls.n	80032b0 <NVIC_EncodePriority+0x30>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3b03      	subs	r3, #3
 80032ae:	e000      	b.n	80032b2 <NVIC_EncodePriority+0x32>
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	f04f 32ff 	mov.w	r2, #4294967295
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	401a      	ands	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c8:	f04f 31ff 	mov.w	r1, #4294967295
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	fa01 f303 	lsl.w	r3, r1, r3
 80032d2:	43d9      	mvns	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	4313      	orrs	r3, r2
         );
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3724      	adds	r7, #36	; 0x24
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff ff4c 	bl	800318c <__NVIC_SetPriorityGrouping>
}
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800330a:	f7ff ff63 	bl	80031d4 <__NVIC_GetPriorityGrouping>
 800330e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	6978      	ldr	r0, [r7, #20]
 8003316:	f7ff ffb3 	bl	8003280 <NVIC_EncodePriority>
 800331a:	4602      	mov	r2, r0
 800331c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff ff82 	bl	800322c <__NVIC_SetPriority>
}
 8003328:	bf00      	nop
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff56 	bl	80031f0 <__NVIC_EnableIRQ>
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e08d      	b.n	800347a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	4b47      	ldr	r3, [pc, #284]	; (8003484 <HAL_DMA_Init+0x138>)
 8003366:	429a      	cmp	r2, r3
 8003368:	d80f      	bhi.n	800338a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	4b45      	ldr	r3, [pc, #276]	; (8003488 <HAL_DMA_Init+0x13c>)
 8003372:	4413      	add	r3, r2
 8003374:	4a45      	ldr	r2, [pc, #276]	; (800348c <HAL_DMA_Init+0x140>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	009a      	lsls	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a42      	ldr	r2, [pc, #264]	; (8003490 <HAL_DMA_Init+0x144>)
 8003386:	641a      	str	r2, [r3, #64]	; 0x40
 8003388:	e00e      	b.n	80033a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	4b40      	ldr	r3, [pc, #256]	; (8003494 <HAL_DMA_Init+0x148>)
 8003392:	4413      	add	r3, r2
 8003394:	4a3d      	ldr	r2, [pc, #244]	; (800348c <HAL_DMA_Init+0x140>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	091b      	lsrs	r3, r3, #4
 800339c:	009a      	lsls	r2, r3, #2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a3c      	ldr	r2, [pc, #240]	; (8003498 <HAL_DMA_Init+0x14c>)
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80033be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fa76 	bl	80038ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003408:	d102      	bne.n	8003410 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003424:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d010      	beq.n	8003450 <HAL_DMA_Init+0x104>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b04      	cmp	r3, #4
 8003434:	d80c      	bhi.n	8003450 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fa96 	bl	8003968 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	e008      	b.n	8003462 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40020407 	.word	0x40020407
 8003488:	bffdfff8 	.word	0xbffdfff8
 800348c:	cccccccd 	.word	0xcccccccd
 8003490:	40020000 	.word	0x40020000
 8003494:	bffdfbf8 	.word	0xbffdfbf8
 8003498:	40020400 	.word	0x40020400

0800349c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_DMA_Start_IT+0x20>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e066      	b.n	800358a <HAL_DMA_Start_IT+0xee>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d155      	bne.n	800357c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f9bb 	bl	8003870 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 020e 	orr.w	r2, r2, #14
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e00f      	b.n	8003534 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0204 	bic.w	r2, r2, #4
 8003522:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 020a 	orr.w	r2, r2, #10
 8003532:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003550:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003568:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	e005      	b.n	8003588 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003584:	2302      	movs	r3, #2
 8003586:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003588:	7dfb      	ldrb	r3, [r7, #23]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d005      	beq.n	80035b6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2204      	movs	r2, #4
 80035ae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
 80035b4:	e037      	b.n	8003626 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 020e 	bic.w	r2, r2, #14
 80035c4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035d4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	f003 021f 	and.w	r2, r3, #31
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	2101      	movs	r1, #1
 80035f4:	fa01 f202 	lsl.w	r2, r1, r2
 80035f8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003602:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00c      	beq.n	8003626 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800361a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003624:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d00d      	beq.n	8003678 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2204      	movs	r2, #4
 8003660:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
 8003676:	e047      	b.n	8003708 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 020e 	bic.w	r2, r2, #14
 8003686:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ac:	f003 021f 	and.w	r2, r3, #31
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	2101      	movs	r1, #1
 80036b6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00c      	beq.n	80036e8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
    }
  }
  return status;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	2204      	movs	r2, #4
 8003734:	409a      	lsls	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d026      	beq.n	800378c <HAL_DMA_IRQHandler+0x7a>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d021      	beq.n	800378c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d107      	bne.n	8003766 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0204 	bic.w	r2, r2, #4
 8003764:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	f003 021f 	and.w	r2, r3, #31
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	2104      	movs	r1, #4
 8003774:	fa01 f202 	lsl.w	r2, r1, r2
 8003778:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	2b00      	cmp	r3, #0
 8003780:	d071      	beq.n	8003866 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800378a:	e06c      	b.n	8003866 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	2202      	movs	r2, #2
 8003796:	409a      	lsls	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d02e      	beq.n	80037fe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d029      	beq.n	80037fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10b      	bne.n	80037d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 020a 	bic.w	r2, r2, #10
 80037c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d4:	f003 021f 	and.w	r2, r3, #31
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	2102      	movs	r1, #2
 80037de:	fa01 f202 	lsl.w	r2, r1, r2
 80037e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d038      	beq.n	8003866 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80037fc:	e033      	b.n	8003866 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	2208      	movs	r2, #8
 8003808:	409a      	lsls	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d02a      	beq.n	8003868 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d025      	beq.n	8003868 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 020e 	bic.w	r2, r2, #14
 800382a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003830:	f003 021f 	and.w	r2, r3, #31
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	2101      	movs	r1, #1
 800383a:	fa01 f202 	lsl.w	r2, r1, r2
 800383e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385a:	2b00      	cmp	r3, #0
 800385c:	d004      	beq.n	8003868 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003866:	bf00      	nop
 8003868:	bf00      	nop
}
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003886:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	2b00      	cmp	r3, #0
 800388e:	d004      	beq.n	800389a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003898:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f003 021f 	and.w	r2, r3, #31
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2101      	movs	r1, #1
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b10      	cmp	r3, #16
 80038bc:	d108      	bne.n	80038d0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038ce:	e007      	b.n	80038e0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	60da      	str	r2, [r3, #12]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	4b16      	ldr	r3, [pc, #88]	; (8003954 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d802      	bhi.n	8003906 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003900:	4b15      	ldr	r3, [pc, #84]	; (8003958 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	e001      	b.n	800390a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003906:	4b15      	ldr	r3, [pc, #84]	; (800395c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003908:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	3b08      	subs	r3, #8
 8003916:	4a12      	ldr	r2, [pc, #72]	; (8003960 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	009a      	lsls	r2, r3, #2
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4413      	add	r3, r2
 800392c:	461a      	mov	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a0b      	ldr	r2, [pc, #44]	; (8003964 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003936:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 031f 	and.w	r3, r3, #31
 800393e:	2201      	movs	r2, #1
 8003940:	409a      	lsls	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40020407 	.word	0x40020407
 8003958:	40020800 	.word	0x40020800
 800395c:	40020820 	.word	0x40020820
 8003960:	cccccccd 	.word	0xcccccccd
 8003964:	40020880 	.word	0x40020880

08003968 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	461a      	mov	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a08      	ldr	r2, [pc, #32]	; (80039ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800398a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3b01      	subs	r3, #1
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	2201      	movs	r2, #1
 8003996:	409a      	lsls	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	1000823f 	.word	0x1000823f
 80039ac:	40020940 	.word	0x40020940

080039b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039be:	e15a      	b.n	8003c76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	2101      	movs	r1, #1
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	fa01 f303 	lsl.w	r3, r1, r3
 80039cc:	4013      	ands	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 814c 	beq.w	8003c70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d005      	beq.n	80039f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d130      	bne.n	8003a52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	2203      	movs	r2, #3
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4013      	ands	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a26:	2201      	movs	r2, #1
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	f003 0201 	and.w	r2, r3, #1
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d017      	beq.n	8003a8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	2203      	movs	r2, #3
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4013      	ands	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d123      	bne.n	8003ae2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	08da      	lsrs	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3208      	adds	r2, #8
 8003aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	220f      	movs	r2, #15
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4013      	ands	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	08da      	lsrs	r2, r3, #3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3208      	adds	r2, #8
 8003adc:	6939      	ldr	r1, [r7, #16]
 8003ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	2203      	movs	r2, #3
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 0203 	and.w	r2, r3, #3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80a6 	beq.w	8003c70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b24:	4b5b      	ldr	r3, [pc, #364]	; (8003c94 <HAL_GPIO_Init+0x2e4>)
 8003b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b28:	4a5a      	ldr	r2, [pc, #360]	; (8003c94 <HAL_GPIO_Init+0x2e4>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6613      	str	r3, [r2, #96]	; 0x60
 8003b30:	4b58      	ldr	r3, [pc, #352]	; (8003c94 <HAL_GPIO_Init+0x2e4>)
 8003b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b3c:	4a56      	ldr	r2, [pc, #344]	; (8003c98 <HAL_GPIO_Init+0x2e8>)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	089b      	lsrs	r3, r3, #2
 8003b42:	3302      	adds	r3, #2
 8003b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	220f      	movs	r2, #15
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b66:	d01f      	beq.n	8003ba8 <HAL_GPIO_Init+0x1f8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a4c      	ldr	r2, [pc, #304]	; (8003c9c <HAL_GPIO_Init+0x2ec>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d019      	beq.n	8003ba4 <HAL_GPIO_Init+0x1f4>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a4b      	ldr	r2, [pc, #300]	; (8003ca0 <HAL_GPIO_Init+0x2f0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d013      	beq.n	8003ba0 <HAL_GPIO_Init+0x1f0>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a4a      	ldr	r2, [pc, #296]	; (8003ca4 <HAL_GPIO_Init+0x2f4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00d      	beq.n	8003b9c <HAL_GPIO_Init+0x1ec>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a49      	ldr	r2, [pc, #292]	; (8003ca8 <HAL_GPIO_Init+0x2f8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d007      	beq.n	8003b98 <HAL_GPIO_Init+0x1e8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a48      	ldr	r2, [pc, #288]	; (8003cac <HAL_GPIO_Init+0x2fc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d101      	bne.n	8003b94 <HAL_GPIO_Init+0x1e4>
 8003b90:	2305      	movs	r3, #5
 8003b92:	e00a      	b.n	8003baa <HAL_GPIO_Init+0x1fa>
 8003b94:	2306      	movs	r3, #6
 8003b96:	e008      	b.n	8003baa <HAL_GPIO_Init+0x1fa>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	e006      	b.n	8003baa <HAL_GPIO_Init+0x1fa>
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e004      	b.n	8003baa <HAL_GPIO_Init+0x1fa>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e002      	b.n	8003baa <HAL_GPIO_Init+0x1fa>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <HAL_GPIO_Init+0x1fa>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	f002 0203 	and.w	r2, r2, #3
 8003bb0:	0092      	lsls	r2, r2, #2
 8003bb2:	4093      	lsls	r3, r2
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bba:	4937      	ldr	r1, [pc, #220]	; (8003c98 <HAL_GPIO_Init+0x2e8>)
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	089b      	lsrs	r3, r3, #2
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bc8:	4b39      	ldr	r3, [pc, #228]	; (8003cb0 <HAL_GPIO_Init+0x300>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bec:	4a30      	ldr	r2, [pc, #192]	; (8003cb0 <HAL_GPIO_Init+0x300>)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bf2:	4b2f      	ldr	r3, [pc, #188]	; (8003cb0 <HAL_GPIO_Init+0x300>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c16:	4a26      	ldr	r2, [pc, #152]	; (8003cb0 <HAL_GPIO_Init+0x300>)
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c1c:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <HAL_GPIO_Init+0x300>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	43db      	mvns	r3, r3
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c40:	4a1b      	ldr	r2, [pc, #108]	; (8003cb0 <HAL_GPIO_Init+0x300>)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c46:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <HAL_GPIO_Init+0x300>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4013      	ands	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c6a:	4a11      	ldr	r2, [pc, #68]	; (8003cb0 <HAL_GPIO_Init+0x300>)
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	3301      	adds	r3, #1
 8003c74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f47f ae9d 	bne.w	80039c0 <HAL_GPIO_Init+0x10>
  }
}
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40010000 	.word	0x40010000
 8003c9c:	48000400 	.word	0x48000400
 8003ca0:	48000800 	.word	0x48000800
 8003ca4:	48000c00 	.word	0x48000c00
 8003ca8:	48001000 	.word	0x48001000
 8003cac:	48001400 	.word	0x48001400
 8003cb0:	40010400 	.word	0x40010400

08003cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	807b      	strh	r3, [r7, #2]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cc4:	787b      	ldrb	r3, [r7, #1]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cca:	887a      	ldrh	r2, [r7, #2]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cd0:	e002      	b.n	8003cd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cd2:	887a      	ldrh	r2, [r7, #2]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cee:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cf0:	695a      	ldr	r2, [r3, #20]
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d006      	beq.n	8003d08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cfa:	4a05      	ldr	r2, [pc, #20]	; (8003d10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cfc:	88fb      	ldrh	r3, [r7, #6]
 8003cfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d00:	88fb      	ldrh	r3, [r7, #6]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fd f9ee 	bl	80010e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40010400 	.word	0x40010400

08003d14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d141      	bne.n	8003da6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d22:	4b4b      	ldr	r3, [pc, #300]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2e:	d131      	bne.n	8003d94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d30:	4b47      	ldr	r3, [pc, #284]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d36:	4a46      	ldr	r2, [pc, #280]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d40:	4b43      	ldr	r3, [pc, #268]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d48:	4a41      	ldr	r2, [pc, #260]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d50:	4b40      	ldr	r3, [pc, #256]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2232      	movs	r2, #50	; 0x32
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	4a3f      	ldr	r2, [pc, #252]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d60:	0c9b      	lsrs	r3, r3, #18
 8003d62:	3301      	adds	r3, #1
 8003d64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d66:	e002      	b.n	8003d6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d6e:	4b38      	ldr	r3, [pc, #224]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7a:	d102      	bne.n	8003d82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f2      	bne.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d82:	4b33      	ldr	r3, [pc, #204]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8e:	d158      	bne.n	8003e42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e057      	b.n	8003e44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d94:	4b2e      	ldr	r3, [pc, #184]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9a:	4a2d      	ldr	r2, [pc, #180]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003da4:	e04d      	b.n	8003e42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dac:	d141      	bne.n	8003e32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dae:	4b28      	ldr	r3, [pc, #160]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dba:	d131      	bne.n	8003e20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dbc:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dc2:	4a23      	ldr	r2, [pc, #140]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dcc:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dd4:	4a1e      	ldr	r2, [pc, #120]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2232      	movs	r2, #50	; 0x32
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	4a1c      	ldr	r2, [pc, #112]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003de8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dec:	0c9b      	lsrs	r3, r3, #18
 8003dee:	3301      	adds	r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df2:	e002      	b.n	8003dfa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dfa:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e06:	d102      	bne.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f2      	bne.n	8003df4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e0e:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1a:	d112      	bne.n	8003e42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e011      	b.n	8003e44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e26:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e30:	e007      	b.n	8003e42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e32:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e3a:	4a05      	ldr	r2, [pc, #20]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	40007000 	.word	0x40007000
 8003e54:	20000098 	.word	0x20000098
 8003e58:	431bde83 	.word	0x431bde83

08003e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e306      	b.n	800447c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d075      	beq.n	8003f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7a:	4b97      	ldr	r3, [pc, #604]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e84:	4b94      	ldr	r3, [pc, #592]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b0c      	cmp	r3, #12
 8003e92:	d102      	bne.n	8003e9a <HAL_RCC_OscConfig+0x3e>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d002      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x44>
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea0:	4b8d      	ldr	r3, [pc, #564]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d05b      	beq.n	8003f64 <HAL_RCC_OscConfig+0x108>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d157      	bne.n	8003f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e2e1      	b.n	800447c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec0:	d106      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x74>
 8003ec2:	4b85      	ldr	r3, [pc, #532]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a84      	ldr	r2, [pc, #528]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e01d      	b.n	8003f0c <HAL_RCC_OscConfig+0xb0>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x98>
 8003eda:	4b7f      	ldr	r3, [pc, #508]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a7e      	ldr	r2, [pc, #504]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b7c      	ldr	r3, [pc, #496]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a7b      	ldr	r2, [pc, #492]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e00b      	b.n	8003f0c <HAL_RCC_OscConfig+0xb0>
 8003ef4:	4b78      	ldr	r3, [pc, #480]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a77      	ldr	r2, [pc, #476]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b75      	ldr	r3, [pc, #468]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a74      	ldr	r2, [pc, #464]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d013      	beq.n	8003f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd fc8e 	bl	8001834 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f1c:	f7fd fc8a 	bl	8001834 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	; 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e2a6      	b.n	800447c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f2e:	4b6a      	ldr	r3, [pc, #424]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0xc0>
 8003f3a:	e014      	b.n	8003f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fd fc7a 	bl	8001834 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fd fc76 	bl	8001834 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e292      	b.n	800447c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f56:	4b60      	ldr	r3, [pc, #384]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0xe8>
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d075      	beq.n	800405e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f72:	4b59      	ldr	r3, [pc, #356]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f7c:	4b56      	ldr	r3, [pc, #344]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b0c      	cmp	r3, #12
 8003f8a:	d102      	bne.n	8003f92 <HAL_RCC_OscConfig+0x136>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d002      	beq.n	8003f98 <HAL_RCC_OscConfig+0x13c>
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d11f      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f98:	4b4f      	ldr	r3, [pc, #316]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x154>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e265      	b.n	800447c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb0:	4b49      	ldr	r3, [pc, #292]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	4946      	ldr	r1, [pc, #280]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fc4:	4b45      	ldr	r3, [pc, #276]	; (80040dc <HAL_RCC_OscConfig+0x280>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fd fa4d 	bl	8001468 <HAL_InitTick>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d043      	beq.n	800405c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e251      	b.n	800447c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d023      	beq.n	8004028 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe0:	4b3d      	ldr	r3, [pc, #244]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a3c      	ldr	r2, [pc, #240]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fec:	f7fd fc22 	bl	8001834 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff4:	f7fd fc1e 	bl	8001834 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e23a      	b.n	800447c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004006:	4b34      	ldr	r3, [pc, #208]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004012:	4b31      	ldr	r3, [pc, #196]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	061b      	lsls	r3, r3, #24
 8004020:	492d      	ldr	r1, [pc, #180]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8004022:	4313      	orrs	r3, r2
 8004024:	604b      	str	r3, [r1, #4]
 8004026:	e01a      	b.n	800405e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004028:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a2a      	ldr	r2, [pc, #168]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 800402e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fd fbfe 	bl	8001834 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800403c:	f7fd fbfa 	bl	8001834 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e216      	b.n	800447c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800404e:	4b22      	ldr	r3, [pc, #136]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x1e0>
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800405c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d041      	beq.n	80040ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d01c      	beq.n	80040ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004072:	4b19      	ldr	r3, [pc, #100]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8004074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004078:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004082:	f7fd fbd7 	bl	8001834 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800408a:	f7fd fbd3 	bl	8001834 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e1ef      	b.n	800447c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800409c:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 800409e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0ef      	beq.n	800408a <HAL_RCC_OscConfig+0x22e>
 80040aa:	e020      	b.n	80040ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 80040ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b2:	4a09      	ldr	r2, [pc, #36]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fd fbba 	bl	8001834 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040c2:	e00d      	b.n	80040e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c4:	f7fd fbb6 	bl	8001834 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d906      	bls.n	80040e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e1d2      	b.n	800447c <HAL_RCC_OscConfig+0x620>
 80040d6:	bf00      	nop
 80040d8:	40021000 	.word	0x40021000
 80040dc:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040e0:	4b8c      	ldr	r3, [pc, #560]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80040e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1ea      	bne.n	80040c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80a6 	beq.w	8004248 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040fc:	2300      	movs	r3, #0
 80040fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004100:	4b84      	ldr	r3, [pc, #528]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_RCC_OscConfig+0x2b4>
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <HAL_RCC_OscConfig+0x2b6>
 8004110:	2300      	movs	r3, #0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00d      	beq.n	8004132 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004116:	4b7f      	ldr	r3, [pc, #508]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411a:	4a7e      	ldr	r2, [pc, #504]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 800411c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004120:	6593      	str	r3, [r2, #88]	; 0x58
 8004122:	4b7c      	ldr	r3, [pc, #496]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800412e:	2301      	movs	r3, #1
 8004130:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004132:	4b79      	ldr	r3, [pc, #484]	; (8004318 <HAL_RCC_OscConfig+0x4bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d118      	bne.n	8004170 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800413e:	4b76      	ldr	r3, [pc, #472]	; (8004318 <HAL_RCC_OscConfig+0x4bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a75      	ldr	r2, [pc, #468]	; (8004318 <HAL_RCC_OscConfig+0x4bc>)
 8004144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414a:	f7fd fb73 	bl	8001834 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004152:	f7fd fb6f 	bl	8001834 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e18b      	b.n	800447c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004164:	4b6c      	ldr	r3, [pc, #432]	; (8004318 <HAL_RCC_OscConfig+0x4bc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d108      	bne.n	800418a <HAL_RCC_OscConfig+0x32e>
 8004178:	4b66      	ldr	r3, [pc, #408]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	4a65      	ldr	r2, [pc, #404]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004188:	e024      	b.n	80041d4 <HAL_RCC_OscConfig+0x378>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b05      	cmp	r3, #5
 8004190:	d110      	bne.n	80041b4 <HAL_RCC_OscConfig+0x358>
 8004192:	4b60      	ldr	r3, [pc, #384]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004198:	4a5e      	ldr	r2, [pc, #376]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 800419a:	f043 0304 	orr.w	r3, r3, #4
 800419e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041a2:	4b5c      	ldr	r3, [pc, #368]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80041a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a8:	4a5a      	ldr	r2, [pc, #360]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041b2:	e00f      	b.n	80041d4 <HAL_RCC_OscConfig+0x378>
 80041b4:	4b57      	ldr	r3, [pc, #348]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ba:	4a56      	ldr	r2, [pc, #344]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c4:	4b53      	ldr	r3, [pc, #332]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	4a52      	ldr	r2, [pc, #328]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80041cc:	f023 0304 	bic.w	r3, r3, #4
 80041d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d016      	beq.n	800420a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7fd fb2a 	bl	8001834 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e2:	e00a      	b.n	80041fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e4:	f7fd fb26 	bl	8001834 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e140      	b.n	800447c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041fa:	4b46      	ldr	r3, [pc, #280]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ed      	beq.n	80041e4 <HAL_RCC_OscConfig+0x388>
 8004208:	e015      	b.n	8004236 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420a:	f7fd fb13 	bl	8001834 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004210:	e00a      	b.n	8004228 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fd fb0f 	bl	8001834 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004220:	4293      	cmp	r3, r2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e129      	b.n	800447c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004228:	4b3a      	ldr	r3, [pc, #232]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1ed      	bne.n	8004212 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004236:	7ffb      	ldrb	r3, [r7, #31]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d105      	bne.n	8004248 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800423c:	4b35      	ldr	r3, [pc, #212]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	4a34      	ldr	r2, [pc, #208]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004246:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d03c      	beq.n	80042ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01c      	beq.n	8004296 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800425c:	4b2d      	ldr	r3, [pc, #180]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 800425e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004262:	4a2c      	ldr	r2, [pc, #176]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426c:	f7fd fae2 	bl	8001834 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004274:	f7fd fade 	bl	8001834 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e0fa      	b.n	800447c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004286:	4b23      	ldr	r3, [pc, #140]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0ef      	beq.n	8004274 <HAL_RCC_OscConfig+0x418>
 8004294:	e01b      	b.n	80042ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004296:	4b1f      	ldr	r3, [pc, #124]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004298:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800429c:	4a1d      	ldr	r2, [pc, #116]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 800429e:	f023 0301 	bic.w	r3, r3, #1
 80042a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a6:	f7fd fac5 	bl	8001834 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ae:	f7fd fac1 	bl	8001834 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e0dd      	b.n	800447c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042c0:	4b14      	ldr	r3, [pc, #80]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80042c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1ef      	bne.n	80042ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 80d1 	beq.w	800447a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 030c 	and.w	r3, r3, #12
 80042e0:	2b0c      	cmp	r3, #12
 80042e2:	f000 808b 	beq.w	80043fc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d15e      	bne.n	80043ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ee:	4b09      	ldr	r3, [pc, #36]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a08      	ldr	r2, [pc, #32]	; (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80042f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fd fa9b 	bl	8001834 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004300:	e00c      	b.n	800431c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004302:	f7fd fa97 	bl	8001834 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d905      	bls.n	800431c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e0b3      	b.n	800447c <HAL_RCC_OscConfig+0x620>
 8004314:	40021000 	.word	0x40021000
 8004318:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800431c:	4b59      	ldr	r3, [pc, #356]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1ec      	bne.n	8004302 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004328:	4b56      	ldr	r3, [pc, #344]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	4b56      	ldr	r3, [pc, #344]	; (8004488 <HAL_RCC_OscConfig+0x62c>)
 800432e:	4013      	ands	r3, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6a11      	ldr	r1, [r2, #32]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004338:	3a01      	subs	r2, #1
 800433a:	0112      	lsls	r2, r2, #4
 800433c:	4311      	orrs	r1, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004342:	0212      	lsls	r2, r2, #8
 8004344:	4311      	orrs	r1, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800434a:	0852      	lsrs	r2, r2, #1
 800434c:	3a01      	subs	r2, #1
 800434e:	0552      	lsls	r2, r2, #21
 8004350:	4311      	orrs	r1, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004356:	0852      	lsrs	r2, r2, #1
 8004358:	3a01      	subs	r2, #1
 800435a:	0652      	lsls	r2, r2, #25
 800435c:	4311      	orrs	r1, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004362:	06d2      	lsls	r2, r2, #27
 8004364:	430a      	orrs	r2, r1
 8004366:	4947      	ldr	r1, [pc, #284]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 8004368:	4313      	orrs	r3, r2
 800436a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800436c:	4b45      	ldr	r3, [pc, #276]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a44      	ldr	r2, [pc, #272]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 8004372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004376:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004378:	4b42      	ldr	r3, [pc, #264]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a41      	ldr	r2, [pc, #260]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 800437e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004382:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fd fa56 	bl	8001834 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438c:	f7fd fa52 	bl	8001834 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e06e      	b.n	800447c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439e:	4b39      	ldr	r3, [pc, #228]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x530>
 80043aa:	e066      	b.n	800447a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ac:	4b35      	ldr	r3, [pc, #212]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a34      	ldr	r2, [pc, #208]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 80043b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043b8:	4b32      	ldr	r3, [pc, #200]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4a31      	ldr	r2, [pc, #196]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043c4:	4b2f      	ldr	r3, [pc, #188]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4a2e      	ldr	r2, [pc, #184]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 80043ca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80043ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d4:	f7fd fa2e 	bl	8001834 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043dc:	f7fd fa2a 	bl	8001834 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e046      	b.n	800447c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ee:	4b25      	ldr	r3, [pc, #148]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0x580>
 80043fa:	e03e      	b.n	800447a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e039      	b.n	800447c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004408:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <HAL_RCC_OscConfig+0x628>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f003 0203 	and.w	r2, r3, #3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	429a      	cmp	r2, r3
 800441a:	d12c      	bne.n	8004476 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	3b01      	subs	r3, #1
 8004428:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d123      	bne.n	8004476 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800443a:	429a      	cmp	r2, r3
 800443c:	d11b      	bne.n	8004476 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800444a:	429a      	cmp	r2, r3
 800444c:	d113      	bne.n	8004476 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	3b01      	subs	r3, #1
 800445c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800445e:	429a      	cmp	r2, r3
 8004460:	d109      	bne.n	8004476 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446c:	085b      	lsrs	r3, r3, #1
 800446e:	3b01      	subs	r3, #1
 8004470:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d001      	beq.n	800447a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40021000 	.word	0x40021000
 8004488:	019f800c 	.word	0x019f800c

0800448c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e11e      	b.n	80046e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044a4:	4b91      	ldr	r3, [pc, #580]	; (80046ec <HAL_RCC_ClockConfig+0x260>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d910      	bls.n	80044d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b2:	4b8e      	ldr	r3, [pc, #568]	; (80046ec <HAL_RCC_ClockConfig+0x260>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 020f 	bic.w	r2, r3, #15
 80044ba:	498c      	ldr	r1, [pc, #560]	; (80046ec <HAL_RCC_ClockConfig+0x260>)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	4313      	orrs	r3, r2
 80044c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c2:	4b8a      	ldr	r3, [pc, #552]	; (80046ec <HAL_RCC_ClockConfig+0x260>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d001      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e106      	b.n	80046e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d073      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d129      	bne.n	800453c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e8:	4b81      	ldr	r3, [pc, #516]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0f4      	b.n	80046e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80044f8:	f000 f9d0 	bl	800489c <RCC_GetSysClockFreqFromPLLSource>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4a7c      	ldr	r2, [pc, #496]	; (80046f4 <HAL_RCC_ClockConfig+0x268>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d93f      	bls.n	8004586 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004506:	4b7a      	ldr	r3, [pc, #488]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800451a:	2b00      	cmp	r3, #0
 800451c:	d033      	beq.n	8004586 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004522:	2b00      	cmp	r3, #0
 8004524:	d12f      	bne.n	8004586 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004526:	4b72      	ldr	r3, [pc, #456]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800452e:	4a70      	ldr	r2, [pc, #448]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 8004530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004534:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	e024      	b.n	8004586 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d107      	bne.n	8004554 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004544:	4b6a      	ldr	r3, [pc, #424]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d109      	bne.n	8004564 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0c6      	b.n	80046e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004554:	4b66      	ldr	r3, [pc, #408]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0be      	b.n	80046e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004564:	f000 f8ce 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 8004568:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4a61      	ldr	r2, [pc, #388]	; (80046f4 <HAL_RCC_ClockConfig+0x268>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d909      	bls.n	8004586 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004572:	4b5f      	ldr	r3, [pc, #380]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800457a:	4a5d      	ldr	r2, [pc, #372]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 800457c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004580:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004586:	4b5a      	ldr	r3, [pc, #360]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f023 0203 	bic.w	r2, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4957      	ldr	r1, [pc, #348]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 8004594:	4313      	orrs	r3, r2
 8004596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004598:	f7fd f94c 	bl	8001834 <HAL_GetTick>
 800459c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459e:	e00a      	b.n	80045b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a0:	f7fd f948 	bl	8001834 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e095      	b.n	80046e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b6:	4b4e      	ldr	r3, [pc, #312]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 020c 	and.w	r2, r3, #12
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d1eb      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d023      	beq.n	800461c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e0:	4b43      	ldr	r3, [pc, #268]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4a42      	ldr	r2, [pc, #264]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 80045e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80045f8:	4b3d      	ldr	r3, [pc, #244]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004600:	4a3b      	ldr	r2, [pc, #236]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 8004602:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004606:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004608:	4b39      	ldr	r3, [pc, #228]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4936      	ldr	r1, [pc, #216]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
 800461a:	e008      	b.n	800462e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b80      	cmp	r3, #128	; 0x80
 8004620:	d105      	bne.n	800462e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004622:	4b33      	ldr	r3, [pc, #204]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	4a32      	ldr	r2, [pc, #200]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 8004628:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800462c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800462e:	4b2f      	ldr	r3, [pc, #188]	; (80046ec <HAL_RCC_ClockConfig+0x260>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d21d      	bcs.n	8004678 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463c:	4b2b      	ldr	r3, [pc, #172]	; (80046ec <HAL_RCC_ClockConfig+0x260>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 020f 	bic.w	r2, r3, #15
 8004644:	4929      	ldr	r1, [pc, #164]	; (80046ec <HAL_RCC_ClockConfig+0x260>)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	4313      	orrs	r3, r2
 800464a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800464c:	f7fd f8f2 	bl	8001834 <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	e00a      	b.n	800466a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004654:	f7fd f8ee 	bl	8001834 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e03b      	b.n	80046e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800466a:	4b20      	ldr	r3, [pc, #128]	; (80046ec <HAL_RCC_ClockConfig+0x260>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d1ed      	bne.n	8004654 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004684:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4917      	ldr	r1, [pc, #92]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046a2:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	490f      	ldr	r1, [pc, #60]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046b6:	f000 f825 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 80046ba:	4602      	mov	r2, r0
 80046bc:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <HAL_RCC_ClockConfig+0x264>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	490c      	ldr	r1, [pc, #48]	; (80046f8 <HAL_RCC_ClockConfig+0x26c>)
 80046c8:	5ccb      	ldrb	r3, [r1, r3]
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	fa22 f303 	lsr.w	r3, r2, r3
 80046d2:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <HAL_RCC_ClockConfig+0x270>)
 80046d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046d6:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <HAL_RCC_ClockConfig+0x274>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fc fec4 	bl	8001468 <HAL_InitTick>
 80046e0:	4603      	mov	r3, r0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40022000 	.word	0x40022000
 80046f0:	40021000 	.word	0x40021000
 80046f4:	04c4b400 	.word	0x04c4b400
 80046f8:	0800a204 	.word	0x0800a204
 80046fc:	20000098 	.word	0x20000098
 8004700:	2000009c 	.word	0x2000009c

08004704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800470a:	4b2c      	ldr	r3, [pc, #176]	; (80047bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 030c 	and.w	r3, r3, #12
 8004712:	2b04      	cmp	r3, #4
 8004714:	d102      	bne.n	800471c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004716:	4b2a      	ldr	r3, [pc, #168]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	e047      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800471c:	4b27      	ldr	r3, [pc, #156]	; (80047bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 030c 	and.w	r3, r3, #12
 8004724:	2b08      	cmp	r3, #8
 8004726:	d102      	bne.n	800472e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004728:	4b26      	ldr	r3, [pc, #152]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	e03e      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800472e:	4b23      	ldr	r3, [pc, #140]	; (80047bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
 8004736:	2b0c      	cmp	r3, #12
 8004738:	d136      	bne.n	80047a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800473a:	4b20      	ldr	r3, [pc, #128]	; (80047bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004744:	4b1d      	ldr	r3, [pc, #116]	; (80047bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	3301      	adds	r3, #1
 8004750:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b03      	cmp	r3, #3
 8004756:	d10c      	bne.n	8004772 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004758:	4a1a      	ldr	r2, [pc, #104]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	4a16      	ldr	r2, [pc, #88]	; (80047bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004762:	68d2      	ldr	r2, [r2, #12]
 8004764:	0a12      	lsrs	r2, r2, #8
 8004766:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	617b      	str	r3, [r7, #20]
      break;
 8004770:	e00c      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004772:	4a13      	ldr	r2, [pc, #76]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	fbb2 f3f3 	udiv	r3, r2, r3
 800477a:	4a10      	ldr	r2, [pc, #64]	; (80047bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800477c:	68d2      	ldr	r2, [r2, #12]
 800477e:	0a12      	lsrs	r2, r2, #8
 8004780:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004784:	fb02 f303 	mul.w	r3, r2, r3
 8004788:	617b      	str	r3, [r7, #20]
      break;
 800478a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800478c:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	0e5b      	lsrs	r3, r3, #25
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	3301      	adds	r3, #1
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e001      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047ac:	693b      	ldr	r3, [r7, #16]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000
 80047c0:	00f42400 	.word	0x00f42400
 80047c4:	016e3600 	.word	0x016e3600

080047c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047cc:	4b03      	ldr	r3, [pc, #12]	; (80047dc <HAL_RCC_GetHCLKFreq+0x14>)
 80047ce:	681b      	ldr	r3, [r3, #0]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000098 	.word	0x20000098

080047e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047e4:	f7ff fff0 	bl	80047c8 <HAL_RCC_GetHCLKFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	4904      	ldr	r1, [pc, #16]	; (8004808 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40021000 	.word	0x40021000
 8004808:	0800a214 	.word	0x0800a214

0800480c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004810:	f7ff ffda 	bl	80047c8 <HAL_RCC_GetHCLKFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b06      	ldr	r3, [pc, #24]	; (8004830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	0adb      	lsrs	r3, r3, #11
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4904      	ldr	r1, [pc, #16]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40021000 	.word	0x40021000
 8004834:	0800a214 	.word	0x0800a214

08004838 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	220f      	movs	r2, #15
 8004846:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004848:	4b12      	ldr	r3, [pc, #72]	; (8004894 <HAL_RCC_GetClockConfig+0x5c>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0203 	and.w	r2, r3, #3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004854:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <HAL_RCC_GetClockConfig+0x5c>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <HAL_RCC_GetClockConfig+0x5c>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800486c:	4b09      	ldr	r3, [pc, #36]	; (8004894 <HAL_RCC_GetClockConfig+0x5c>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	08db      	lsrs	r3, r3, #3
 8004872:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800487a:	4b07      	ldr	r3, [pc, #28]	; (8004898 <HAL_RCC_GetClockConfig+0x60>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 020f 	and.w	r2, r3, #15
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	601a      	str	r2, [r3, #0]
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40021000 	.word	0x40021000
 8004898:	40022000 	.word	0x40022000

0800489c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048a2:	4b1e      	ldr	r3, [pc, #120]	; (800491c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048ac:	4b1b      	ldr	r3, [pc, #108]	; (800491c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	3301      	adds	r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d10c      	bne.n	80048da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048c0:	4a17      	ldr	r2, [pc, #92]	; (8004920 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c8:	4a14      	ldr	r2, [pc, #80]	; (800491c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048ca:	68d2      	ldr	r2, [r2, #12]
 80048cc:	0a12      	lsrs	r2, r2, #8
 80048ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	617b      	str	r3, [r7, #20]
    break;
 80048d8:	e00c      	b.n	80048f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048da:	4a12      	ldr	r2, [pc, #72]	; (8004924 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e2:	4a0e      	ldr	r2, [pc, #56]	; (800491c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048e4:	68d2      	ldr	r2, [r2, #12]
 80048e6:	0a12      	lsrs	r2, r2, #8
 80048e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048ec:	fb02 f303 	mul.w	r3, r2, r3
 80048f0:	617b      	str	r3, [r7, #20]
    break;
 80048f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048f4:	4b09      	ldr	r3, [pc, #36]	; (800491c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	0e5b      	lsrs	r3, r3, #25
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	3301      	adds	r3, #1
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	fbb2 f3f3 	udiv	r3, r2, r3
 800490c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800490e:	687b      	ldr	r3, [r7, #4]
}
 8004910:	4618      	mov	r0, r3
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	40021000 	.word	0x40021000
 8004920:	016e3600 	.word	0x016e3600
 8004924:	00f42400 	.word	0x00f42400

08004928 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004930:	2300      	movs	r3, #0
 8004932:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004934:	2300      	movs	r3, #0
 8004936:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8098 	beq.w	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004946:	2300      	movs	r3, #0
 8004948:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800494a:	4b43      	ldr	r3, [pc, #268]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10d      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004956:	4b40      	ldr	r3, [pc, #256]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495a:	4a3f      	ldr	r2, [pc, #252]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004960:	6593      	str	r3, [r2, #88]	; 0x58
 8004962:	4b3d      	ldr	r3, [pc, #244]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496e:	2301      	movs	r3, #1
 8004970:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004972:	4b3a      	ldr	r3, [pc, #232]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a39      	ldr	r2, [pc, #228]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800497e:	f7fc ff59 	bl	8001834 <HAL_GetTick>
 8004982:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004984:	e009      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004986:	f7fc ff55 	bl	8001834 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d902      	bls.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	74fb      	strb	r3, [r7, #19]
        break;
 8004998:	e005      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800499a:	4b30      	ldr	r3, [pc, #192]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0ef      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80049a6:	7cfb      	ldrb	r3, [r7, #19]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d159      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049ac:	4b2a      	ldr	r3, [pc, #168]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01e      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d019      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049c8:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049d4:	4b20      	ldr	r3, [pc, #128]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049da:	4a1f      	ldr	r2, [pc, #124]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049e4:	4b1c      	ldr	r3, [pc, #112]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ea:	4a1b      	ldr	r2, [pc, #108]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049f4:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d016      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a06:	f7fc ff15 	bl	8001834 <HAL_GetTick>
 8004a0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0c:	e00b      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0e:	f7fc ff11 	bl	8001834 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d902      	bls.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	74fb      	strb	r3, [r7, #19]
            break;
 8004a24:	e006      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a26:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0ec      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a34:	7cfb      	ldrb	r3, [r7, #19]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10b      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a3a:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	4903      	ldr	r1, [pc, #12]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a50:	e008      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a52:	7cfb      	ldrb	r3, [r7, #19]
 8004a54:	74bb      	strb	r3, [r7, #18]
 8004a56:	e005      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a64:	7c7b      	ldrb	r3, [r7, #17]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d105      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a6a:	4ba6      	ldr	r3, [pc, #664]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6e:	4aa5      	ldr	r2, [pc, #660]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a82:	4ba0      	ldr	r3, [pc, #640]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a88:	f023 0203 	bic.w	r2, r3, #3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	499c      	ldr	r1, [pc, #624]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aa4:	4b97      	ldr	r3, [pc, #604]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f023 020c 	bic.w	r2, r3, #12
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	4994      	ldr	r1, [pc, #592]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ac6:	4b8f      	ldr	r3, [pc, #572]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	498b      	ldr	r1, [pc, #556]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ae8:	4b86      	ldr	r3, [pc, #536]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	4983      	ldr	r1, [pc, #524]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b0a:	4b7e      	ldr	r3, [pc, #504]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	497a      	ldr	r1, [pc, #488]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b2c:	4b75      	ldr	r3, [pc, #468]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	4972      	ldr	r1, [pc, #456]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b4e:	4b6d      	ldr	r3, [pc, #436]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	4969      	ldr	r1, [pc, #420]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b70:	4b64      	ldr	r3, [pc, #400]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	4961      	ldr	r1, [pc, #388]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b92:	4b5c      	ldr	r3, [pc, #368]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	4958      	ldr	r1, [pc, #352]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d015      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bb4:	4b53      	ldr	r3, [pc, #332]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	4950      	ldr	r1, [pc, #320]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd2:	d105      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd4:	4b4b      	ldr	r3, [pc, #300]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4a4a      	ldr	r2, [pc, #296]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bde:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d015      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bec:	4b45      	ldr	r3, [pc, #276]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	4942      	ldr	r1, [pc, #264]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c0a:	d105      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c0c:	4b3d      	ldr	r3, [pc, #244]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4a3c      	ldr	r2, [pc, #240]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c16:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d015      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c24:	4b37      	ldr	r3, [pc, #220]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	4934      	ldr	r1, [pc, #208]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c42:	d105      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c44:	4b2f      	ldr	r3, [pc, #188]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4a2e      	ldr	r2, [pc, #184]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d015      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c5c:	4b29      	ldr	r3, [pc, #164]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6a:	4926      	ldr	r1, [pc, #152]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c7a:	d105      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c7c:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4a20      	ldr	r2, [pc, #128]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d015      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c94:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	4918      	ldr	r1, [pc, #96]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cb2:	d105      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb4:	4b13      	ldr	r3, [pc, #76]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4a12      	ldr	r2, [pc, #72]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d015      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	490a      	ldr	r1, [pc, #40]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cea:	d105      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	4a04      	ldr	r2, [pc, #16]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cf8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40021000 	.word	0x40021000

08004d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e049      	b.n	8004dae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fc fae4 	bl	80012fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	f000 fea6 	bl	8005a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d001      	beq.n	8004dd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e042      	b.n	8004e56 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a21      	ldr	r2, [pc, #132]	; (8004e64 <HAL_TIM_Base_Start+0xac>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d018      	beq.n	8004e14 <HAL_TIM_Base_Start+0x5c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dea:	d013      	beq.n	8004e14 <HAL_TIM_Base_Start+0x5c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1d      	ldr	r2, [pc, #116]	; (8004e68 <HAL_TIM_Base_Start+0xb0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00e      	beq.n	8004e14 <HAL_TIM_Base_Start+0x5c>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1c      	ldr	r2, [pc, #112]	; (8004e6c <HAL_TIM_Base_Start+0xb4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d009      	beq.n	8004e14 <HAL_TIM_Base_Start+0x5c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1a      	ldr	r2, [pc, #104]	; (8004e70 <HAL_TIM_Base_Start+0xb8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <HAL_TIM_Base_Start+0x5c>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a19      	ldr	r2, [pc, #100]	; (8004e74 <HAL_TIM_Base_Start+0xbc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d115      	bne.n	8004e40 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	4b17      	ldr	r3, [pc, #92]	; (8004e78 <HAL_TIM_Base_Start+0xc0>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b06      	cmp	r3, #6
 8004e24:	d015      	beq.n	8004e52 <HAL_TIM_Base_Start+0x9a>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2c:	d011      	beq.n	8004e52 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0201 	orr.w	r2, r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3e:	e008      	b.n	8004e52 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0201 	orr.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	e000      	b.n	8004e54 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40012c00 	.word	0x40012c00
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800
 8004e70:	40013400 	.word	0x40013400
 8004e74:	40014000 	.word	0x40014000
 8004e78:	00010007 	.word	0x00010007

08004e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d001      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e04a      	b.n	8004f2a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a21      	ldr	r2, [pc, #132]	; (8004f38 <HAL_TIM_Base_Start_IT+0xbc>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d018      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebe:	d013      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1d      	ldr	r2, [pc, #116]	; (8004f3c <HAL_TIM_Base_Start_IT+0xc0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1c      	ldr	r2, [pc, #112]	; (8004f40 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1a      	ldr	r2, [pc, #104]	; (8004f44 <HAL_TIM_Base_Start_IT+0xc8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d115      	bne.n	8004f14 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	4b17      	ldr	r3, [pc, #92]	; (8004f4c <HAL_TIM_Base_Start_IT+0xd0>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b06      	cmp	r3, #6
 8004ef8:	d015      	beq.n	8004f26 <HAL_TIM_Base_Start_IT+0xaa>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f00:	d011      	beq.n	8004f26 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0201 	orr.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f12:	e008      	b.n	8004f26 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	e000      	b.n	8004f28 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800
 8004f44:	40013400 	.word	0x40013400
 8004f48:	40014000 	.word	0x40014000
 8004f4c:	00010007 	.word	0x00010007

08004f50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e049      	b.n	8004ff6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fc f9a0 	bl	80012bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	f000 fd82 	bl	8005a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d109      	bne.n	8005024 <HAL_TIM_PWM_Start+0x24>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	bf14      	ite	ne
 800501c:	2301      	movne	r3, #1
 800501e:	2300      	moveq	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	e03c      	b.n	800509e <HAL_TIM_PWM_Start+0x9e>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2b04      	cmp	r3, #4
 8005028:	d109      	bne.n	800503e <HAL_TIM_PWM_Start+0x3e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b01      	cmp	r3, #1
 8005034:	bf14      	ite	ne
 8005036:	2301      	movne	r3, #1
 8005038:	2300      	moveq	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	e02f      	b.n	800509e <HAL_TIM_PWM_Start+0x9e>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b08      	cmp	r3, #8
 8005042:	d109      	bne.n	8005058 <HAL_TIM_PWM_Start+0x58>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	bf14      	ite	ne
 8005050:	2301      	movne	r3, #1
 8005052:	2300      	moveq	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	e022      	b.n	800509e <HAL_TIM_PWM_Start+0x9e>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b0c      	cmp	r3, #12
 800505c:	d109      	bne.n	8005072 <HAL_TIM_PWM_Start+0x72>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b01      	cmp	r3, #1
 8005068:	bf14      	ite	ne
 800506a:	2301      	movne	r3, #1
 800506c:	2300      	moveq	r3, #0
 800506e:	b2db      	uxtb	r3, r3
 8005070:	e015      	b.n	800509e <HAL_TIM_PWM_Start+0x9e>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b10      	cmp	r3, #16
 8005076:	d109      	bne.n	800508c <HAL_TIM_PWM_Start+0x8c>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b01      	cmp	r3, #1
 8005082:	bf14      	ite	ne
 8005084:	2301      	movne	r3, #1
 8005086:	2300      	moveq	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	e008      	b.n	800509e <HAL_TIM_PWM_Start+0x9e>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e097      	b.n	80051d6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d104      	bne.n	80050b6 <HAL_TIM_PWM_Start+0xb6>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b4:	e023      	b.n	80050fe <HAL_TIM_PWM_Start+0xfe>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d104      	bne.n	80050c6 <HAL_TIM_PWM_Start+0xc6>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050c4:	e01b      	b.n	80050fe <HAL_TIM_PWM_Start+0xfe>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d104      	bne.n	80050d6 <HAL_TIM_PWM_Start+0xd6>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d4:	e013      	b.n	80050fe <HAL_TIM_PWM_Start+0xfe>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b0c      	cmp	r3, #12
 80050da:	d104      	bne.n	80050e6 <HAL_TIM_PWM_Start+0xe6>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050e4:	e00b      	b.n	80050fe <HAL_TIM_PWM_Start+0xfe>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b10      	cmp	r3, #16
 80050ea:	d104      	bne.n	80050f6 <HAL_TIM_PWM_Start+0xf6>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f4:	e003      	b.n	80050fe <HAL_TIM_PWM_Start+0xfe>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2202      	movs	r2, #2
 80050fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2201      	movs	r2, #1
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f001 f8e8 	bl	80062dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a33      	ldr	r2, [pc, #204]	; (80051e0 <HAL_TIM_PWM_Start+0x1e0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d013      	beq.n	800513e <HAL_TIM_PWM_Start+0x13e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a32      	ldr	r2, [pc, #200]	; (80051e4 <HAL_TIM_PWM_Start+0x1e4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00e      	beq.n	800513e <HAL_TIM_PWM_Start+0x13e>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a30      	ldr	r2, [pc, #192]	; (80051e8 <HAL_TIM_PWM_Start+0x1e8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d009      	beq.n	800513e <HAL_TIM_PWM_Start+0x13e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a2f      	ldr	r2, [pc, #188]	; (80051ec <HAL_TIM_PWM_Start+0x1ec>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d004      	beq.n	800513e <HAL_TIM_PWM_Start+0x13e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a2d      	ldr	r2, [pc, #180]	; (80051f0 <HAL_TIM_PWM_Start+0x1f0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d101      	bne.n	8005142 <HAL_TIM_PWM_Start+0x142>
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <HAL_TIM_PWM_Start+0x144>
 8005142:	2300      	movs	r3, #0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005156:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a20      	ldr	r2, [pc, #128]	; (80051e0 <HAL_TIM_PWM_Start+0x1e0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d018      	beq.n	8005194 <HAL_TIM_PWM_Start+0x194>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516a:	d013      	beq.n	8005194 <HAL_TIM_PWM_Start+0x194>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a20      	ldr	r2, [pc, #128]	; (80051f4 <HAL_TIM_PWM_Start+0x1f4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00e      	beq.n	8005194 <HAL_TIM_PWM_Start+0x194>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1f      	ldr	r2, [pc, #124]	; (80051f8 <HAL_TIM_PWM_Start+0x1f8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d009      	beq.n	8005194 <HAL_TIM_PWM_Start+0x194>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <HAL_TIM_PWM_Start+0x1e4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_TIM_PWM_Start+0x194>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <HAL_TIM_PWM_Start+0x1e8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d115      	bne.n	80051c0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	4b18      	ldr	r3, [pc, #96]	; (80051fc <HAL_TIM_PWM_Start+0x1fc>)
 800519c:	4013      	ands	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b06      	cmp	r3, #6
 80051a4:	d015      	beq.n	80051d2 <HAL_TIM_PWM_Start+0x1d2>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ac:	d011      	beq.n	80051d2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0201 	orr.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051be:	e008      	b.n	80051d2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	e000      	b.n	80051d4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40012c00 	.word	0x40012c00
 80051e4:	40013400 	.word	0x40013400
 80051e8:	40014000 	.word	0x40014000
 80051ec:	40014400 	.word	0x40014400
 80051f0:	40014800 	.word	0x40014800
 80051f4:	40000400 	.word	0x40000400
 80051f8:	40000800 	.word	0x40000800
 80051fc:	00010007 	.word	0x00010007

08005200 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2200      	movs	r2, #0
 8005210:	6839      	ldr	r1, [r7, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f001 f862 	bl	80062dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a3e      	ldr	r2, [pc, #248]	; (8005318 <HAL_TIM_PWM_Stop+0x118>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d013      	beq.n	800524a <HAL_TIM_PWM_Stop+0x4a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a3d      	ldr	r2, [pc, #244]	; (800531c <HAL_TIM_PWM_Stop+0x11c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00e      	beq.n	800524a <HAL_TIM_PWM_Stop+0x4a>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a3b      	ldr	r2, [pc, #236]	; (8005320 <HAL_TIM_PWM_Stop+0x120>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d009      	beq.n	800524a <HAL_TIM_PWM_Stop+0x4a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a3a      	ldr	r2, [pc, #232]	; (8005324 <HAL_TIM_PWM_Stop+0x124>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d004      	beq.n	800524a <HAL_TIM_PWM_Stop+0x4a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a38      	ldr	r2, [pc, #224]	; (8005328 <HAL_TIM_PWM_Stop+0x128>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d101      	bne.n	800524e <HAL_TIM_PWM_Stop+0x4e>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <HAL_TIM_PWM_Stop+0x50>
 800524e:	2300      	movs	r3, #0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d017      	beq.n	8005284 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6a1a      	ldr	r2, [r3, #32]
 800525a:	f241 1311 	movw	r3, #4369	; 0x1111
 800525e:	4013      	ands	r3, r2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10f      	bne.n	8005284 <HAL_TIM_PWM_Stop+0x84>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6a1a      	ldr	r2, [r3, #32]
 800526a:	f244 4344 	movw	r3, #17476	; 0x4444
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d107      	bne.n	8005284 <HAL_TIM_PWM_Stop+0x84>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005282:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6a1a      	ldr	r2, [r3, #32]
 800528a:	f241 1311 	movw	r3, #4369	; 0x1111
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10f      	bne.n	80052b4 <HAL_TIM_PWM_Stop+0xb4>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6a1a      	ldr	r2, [r3, #32]
 800529a:	f244 4344 	movw	r3, #17476	; 0x4444
 800529e:	4013      	ands	r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d107      	bne.n	80052b4 <HAL_TIM_PWM_Stop+0xb4>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0201 	bic.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d104      	bne.n	80052c4 <HAL_TIM_PWM_Stop+0xc4>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c2:	e023      	b.n	800530c <HAL_TIM_PWM_Stop+0x10c>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d104      	bne.n	80052d4 <HAL_TIM_PWM_Stop+0xd4>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d2:	e01b      	b.n	800530c <HAL_TIM_PWM_Stop+0x10c>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d104      	bne.n	80052e4 <HAL_TIM_PWM_Stop+0xe4>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e2:	e013      	b.n	800530c <HAL_TIM_PWM_Stop+0x10c>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b0c      	cmp	r3, #12
 80052e8:	d104      	bne.n	80052f4 <HAL_TIM_PWM_Stop+0xf4>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052f2:	e00b      	b.n	800530c <HAL_TIM_PWM_Stop+0x10c>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d104      	bne.n	8005304 <HAL_TIM_PWM_Stop+0x104>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005302:	e003      	b.n	800530c <HAL_TIM_PWM_Stop+0x10c>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40012c00 	.word	0x40012c00
 800531c:	40013400 	.word	0x40013400
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800

0800532c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b02      	cmp	r3, #2
 8005340:	d122      	bne.n	8005388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b02      	cmp	r3, #2
 800534e:	d11b      	bne.n	8005388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0202 	mvn.w	r2, #2
 8005358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fb74 	bl	8005a5c <HAL_TIM_IC_CaptureCallback>
 8005374:	e005      	b.n	8005382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fb66 	bl	8005a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fb77 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b04      	cmp	r3, #4
 8005394:	d122      	bne.n	80053dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d11b      	bne.n	80053dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0204 	mvn.w	r2, #4
 80053ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fb4a 	bl	8005a5c <HAL_TIM_IC_CaptureCallback>
 80053c8:	e005      	b.n	80053d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fb3c 	bl	8005a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fb4d 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d122      	bne.n	8005430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d11b      	bne.n	8005430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0208 	mvn.w	r2, #8
 8005400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2204      	movs	r2, #4
 8005406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fb20 	bl	8005a5c <HAL_TIM_IC_CaptureCallback>
 800541c:	e005      	b.n	800542a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fb12 	bl	8005a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fb23 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b10      	cmp	r3, #16
 800543c:	d122      	bne.n	8005484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b10      	cmp	r3, #16
 800544a:	d11b      	bne.n	8005484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0210 	mvn.w	r2, #16
 8005454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2208      	movs	r2, #8
 800545a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 faf6 	bl	8005a5c <HAL_TIM_IC_CaptureCallback>
 8005470:	e005      	b.n	800547e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fae8 	bl	8005a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 faf9 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b01      	cmp	r3, #1
 8005490:	d10e      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b01      	cmp	r3, #1
 800549e:	d107      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0201 	mvn.w	r2, #1
 80054a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fb fe48 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ba:	2b80      	cmp	r3, #128	; 0x80
 80054bc:	d10e      	bne.n	80054dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c8:	2b80      	cmp	r3, #128	; 0x80
 80054ca:	d107      	bne.n	80054dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 f964 	bl	80067a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ea:	d10e      	bne.n	800550a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f6:	2b80      	cmp	r3, #128	; 0x80
 80054f8:	d107      	bne.n	800550a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 f957 	bl	80067b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005514:	2b40      	cmp	r3, #64	; 0x40
 8005516:	d10e      	bne.n	8005536 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005522:	2b40      	cmp	r3, #64	; 0x40
 8005524:	d107      	bne.n	8005536 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800552e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 faa7 	bl	8005a84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b20      	cmp	r3, #32
 8005542:	d10e      	bne.n	8005562 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b20      	cmp	r3, #32
 8005550:	d107      	bne.n	8005562 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f06f 0220 	mvn.w	r2, #32
 800555a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f001 f917 	bl	8006790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800556c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005570:	d10f      	bne.n	8005592 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800557c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005580:	d107      	bne.n	8005592 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800558a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f001 f91d 	bl	80067cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800559c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055a0:	d10f      	bne.n	80055c2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055b0:	d107      	bne.n	80055c2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80055ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f001 f90f 	bl	80067e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055d0:	d10f      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055e0:	d107      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80055ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f001 f901 	bl	80067f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005600:	d10f      	bne.n	8005622 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800560c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005610:	d107      	bne.n	8005622 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800561a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f001 f8f3 	bl	8006808 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005622:	bf00      	nop
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005646:	2302      	movs	r3, #2
 8005648:	e0ff      	b.n	800584a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b14      	cmp	r3, #20
 8005656:	f200 80f0 	bhi.w	800583a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800565a:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	080056b5 	.word	0x080056b5
 8005664:	0800583b 	.word	0x0800583b
 8005668:	0800583b 	.word	0x0800583b
 800566c:	0800583b 	.word	0x0800583b
 8005670:	080056f5 	.word	0x080056f5
 8005674:	0800583b 	.word	0x0800583b
 8005678:	0800583b 	.word	0x0800583b
 800567c:	0800583b 	.word	0x0800583b
 8005680:	08005737 	.word	0x08005737
 8005684:	0800583b 	.word	0x0800583b
 8005688:	0800583b 	.word	0x0800583b
 800568c:	0800583b 	.word	0x0800583b
 8005690:	08005777 	.word	0x08005777
 8005694:	0800583b 	.word	0x0800583b
 8005698:	0800583b 	.word	0x0800583b
 800569c:	0800583b 	.word	0x0800583b
 80056a0:	080057b9 	.word	0x080057b9
 80056a4:	0800583b 	.word	0x0800583b
 80056a8:	0800583b 	.word	0x0800583b
 80056ac:	0800583b 	.word	0x0800583b
 80056b0:	080057f9 	.word	0x080057f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fa7c 	bl	8005bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0208 	orr.w	r2, r2, #8
 80056ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0204 	bic.w	r2, r2, #4
 80056de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6999      	ldr	r1, [r3, #24]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	619a      	str	r2, [r3, #24]
      break;
 80056f2:	e0a5      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 faec 	bl	8005cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800570e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6999      	ldr	r1, [r3, #24]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	021a      	lsls	r2, r3, #8
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	619a      	str	r2, [r3, #24]
      break;
 8005734:	e084      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fb55 	bl	8005dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0208 	orr.w	r2, r2, #8
 8005750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0204 	bic.w	r2, r2, #4
 8005760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69d9      	ldr	r1, [r3, #28]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	61da      	str	r2, [r3, #28]
      break;
 8005774:	e064      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fbbd 	bl	8005efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69da      	ldr	r2, [r3, #28]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69da      	ldr	r2, [r3, #28]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69d9      	ldr	r1, [r3, #28]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	021a      	lsls	r2, r3, #8
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	61da      	str	r2, [r3, #28]
      break;
 80057b6:	e043      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fc26 	bl	8006010 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0208 	orr.w	r2, r2, #8
 80057d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0204 	bic.w	r2, r2, #4
 80057e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80057f6:	e023      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fc6a 	bl	80060d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005812:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005822:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	021a      	lsls	r2, r3, #8
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005838:	e002      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
      break;
 800583e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005848:	7dfb      	ldrb	r3, [r7, #23]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop

08005854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_TIM_ConfigClockSource+0x1c>
 800586c:	2302      	movs	r3, #2
 800586e:	e0de      	b.n	8005a2e <HAL_TIM_ConfigClockSource+0x1da>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800588e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800589a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a63      	ldr	r2, [pc, #396]	; (8005a38 <HAL_TIM_ConfigClockSource+0x1e4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	f000 80a9 	beq.w	8005a02 <HAL_TIM_ConfigClockSource+0x1ae>
 80058b0:	4a61      	ldr	r2, [pc, #388]	; (8005a38 <HAL_TIM_ConfigClockSource+0x1e4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	f200 80ae 	bhi.w	8005a14 <HAL_TIM_ConfigClockSource+0x1c0>
 80058b8:	4a60      	ldr	r2, [pc, #384]	; (8005a3c <HAL_TIM_ConfigClockSource+0x1e8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	f000 80a1 	beq.w	8005a02 <HAL_TIM_ConfigClockSource+0x1ae>
 80058c0:	4a5e      	ldr	r2, [pc, #376]	; (8005a3c <HAL_TIM_ConfigClockSource+0x1e8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	f200 80a6 	bhi.w	8005a14 <HAL_TIM_ConfigClockSource+0x1c0>
 80058c8:	4a5d      	ldr	r2, [pc, #372]	; (8005a40 <HAL_TIM_ConfigClockSource+0x1ec>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	f000 8099 	beq.w	8005a02 <HAL_TIM_ConfigClockSource+0x1ae>
 80058d0:	4a5b      	ldr	r2, [pc, #364]	; (8005a40 <HAL_TIM_ConfigClockSource+0x1ec>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	f200 809e 	bhi.w	8005a14 <HAL_TIM_ConfigClockSource+0x1c0>
 80058d8:	4a5a      	ldr	r2, [pc, #360]	; (8005a44 <HAL_TIM_ConfigClockSource+0x1f0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	f000 8091 	beq.w	8005a02 <HAL_TIM_ConfigClockSource+0x1ae>
 80058e0:	4a58      	ldr	r2, [pc, #352]	; (8005a44 <HAL_TIM_ConfigClockSource+0x1f0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	f200 8096 	bhi.w	8005a14 <HAL_TIM_ConfigClockSource+0x1c0>
 80058e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80058ec:	f000 8089 	beq.w	8005a02 <HAL_TIM_ConfigClockSource+0x1ae>
 80058f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80058f4:	f200 808e 	bhi.w	8005a14 <HAL_TIM_ConfigClockSource+0x1c0>
 80058f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fc:	d03e      	beq.n	800597c <HAL_TIM_ConfigClockSource+0x128>
 80058fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005902:	f200 8087 	bhi.w	8005a14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590a:	f000 8086 	beq.w	8005a1a <HAL_TIM_ConfigClockSource+0x1c6>
 800590e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005912:	d87f      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005914:	2b70      	cmp	r3, #112	; 0x70
 8005916:	d01a      	beq.n	800594e <HAL_TIM_ConfigClockSource+0xfa>
 8005918:	2b70      	cmp	r3, #112	; 0x70
 800591a:	d87b      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x1c0>
 800591c:	2b60      	cmp	r3, #96	; 0x60
 800591e:	d050      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x16e>
 8005920:	2b60      	cmp	r3, #96	; 0x60
 8005922:	d877      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005924:	2b50      	cmp	r3, #80	; 0x50
 8005926:	d03c      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0x14e>
 8005928:	2b50      	cmp	r3, #80	; 0x50
 800592a:	d873      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x1c0>
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d058      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0x18e>
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d86f      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005934:	2b30      	cmp	r3, #48	; 0x30
 8005936:	d064      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x1ae>
 8005938:	2b30      	cmp	r3, #48	; 0x30
 800593a:	d86b      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x1c0>
 800593c:	2b20      	cmp	r3, #32
 800593e:	d060      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x1ae>
 8005940:	2b20      	cmp	r3, #32
 8005942:	d867      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x1c0>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d05c      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x1ae>
 8005948:	2b10      	cmp	r3, #16
 800594a:	d05a      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x1ae>
 800594c:	e062      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	6899      	ldr	r1, [r3, #8]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f000 fc9d 	bl	800629c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005970:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	609a      	str	r2, [r3, #8]
      break;
 800597a:	e04f      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	6899      	ldr	r1, [r3, #8]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f000 fc86 	bl	800629c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800599e:	609a      	str	r2, [r3, #8]
      break;
 80059a0:	e03c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6818      	ldr	r0, [r3, #0]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6859      	ldr	r1, [r3, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	461a      	mov	r2, r3
 80059b0:	f000 fbf8 	bl	80061a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2150      	movs	r1, #80	; 0x50
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fc51 	bl	8006262 <TIM_ITRx_SetConfig>
      break;
 80059c0:	e02c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6818      	ldr	r0, [r3, #0]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	6859      	ldr	r1, [r3, #4]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	461a      	mov	r2, r3
 80059d0:	f000 fc17 	bl	8006202 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2160      	movs	r1, #96	; 0x60
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fc41 	bl	8006262 <TIM_ITRx_SetConfig>
      break;
 80059e0:	e01c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6859      	ldr	r1, [r3, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	461a      	mov	r2, r3
 80059f0:	f000 fbd8 	bl	80061a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2140      	movs	r1, #64	; 0x40
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fc31 	bl	8006262 <TIM_ITRx_SetConfig>
      break;
 8005a00:	e00c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	f000 fc28 	bl	8006262 <TIM_ITRx_SetConfig>
      break;
 8005a12:	e003      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	73fb      	strb	r3, [r7, #15]
      break;
 8005a18:	e000      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005a1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	00100070 	.word	0x00100070
 8005a3c:	00100040 	.word	0x00100040
 8005a40:	00100030 	.word	0x00100030
 8005a44:	00100020 	.word	0x00100020

08005a48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a3c      	ldr	r2, [pc, #240]	; (8005b9c <TIM_Base_SetConfig+0x104>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00f      	beq.n	8005ad0 <TIM_Base_SetConfig+0x38>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab6:	d00b      	beq.n	8005ad0 <TIM_Base_SetConfig+0x38>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a39      	ldr	r2, [pc, #228]	; (8005ba0 <TIM_Base_SetConfig+0x108>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_Base_SetConfig+0x38>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a38      	ldr	r2, [pc, #224]	; (8005ba4 <TIM_Base_SetConfig+0x10c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_Base_SetConfig+0x38>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a37      	ldr	r2, [pc, #220]	; (8005ba8 <TIM_Base_SetConfig+0x110>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d108      	bne.n	8005ae2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2d      	ldr	r2, [pc, #180]	; (8005b9c <TIM_Base_SetConfig+0x104>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01b      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af0:	d017      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a2a      	ldr	r2, [pc, #168]	; (8005ba0 <TIM_Base_SetConfig+0x108>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a29      	ldr	r2, [pc, #164]	; (8005ba4 <TIM_Base_SetConfig+0x10c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00f      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a28      	ldr	r2, [pc, #160]	; (8005ba8 <TIM_Base_SetConfig+0x110>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00b      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a27      	ldr	r2, [pc, #156]	; (8005bac <TIM_Base_SetConfig+0x114>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d007      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a26      	ldr	r2, [pc, #152]	; (8005bb0 <TIM_Base_SetConfig+0x118>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d003      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a25      	ldr	r2, [pc, #148]	; (8005bb4 <TIM_Base_SetConfig+0x11c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d108      	bne.n	8005b34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a10      	ldr	r2, [pc, #64]	; (8005b9c <TIM_Base_SetConfig+0x104>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00f      	beq.n	8005b80 <TIM_Base_SetConfig+0xe8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a11      	ldr	r2, [pc, #68]	; (8005ba8 <TIM_Base_SetConfig+0x110>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00b      	beq.n	8005b80 <TIM_Base_SetConfig+0xe8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a10      	ldr	r2, [pc, #64]	; (8005bac <TIM_Base_SetConfig+0x114>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d007      	beq.n	8005b80 <TIM_Base_SetConfig+0xe8>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a0f      	ldr	r2, [pc, #60]	; (8005bb0 <TIM_Base_SetConfig+0x118>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_Base_SetConfig+0xe8>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a0e      	ldr	r2, [pc, #56]	; (8005bb4 <TIM_Base_SetConfig+0x11c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d103      	bne.n	8005b88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	615a      	str	r2, [r3, #20]
}
 8005b8e:	bf00      	nop
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40000400 	.word	0x40000400
 8005ba4:	40000800 	.word	0x40000800
 8005ba8:	40013400 	.word	0x40013400
 8005bac:	40014000 	.word	0x40014000
 8005bb0:	40014400 	.word	0x40014400
 8005bb4:	40014800 	.word	0x40014800

08005bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f023 0201 	bic.w	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f023 0302 	bic.w	r3, r3, #2
 8005c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a2c      	ldr	r2, [pc, #176]	; (8005cc4 <TIM_OC1_SetConfig+0x10c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00f      	beq.n	8005c38 <TIM_OC1_SetConfig+0x80>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a2b      	ldr	r2, [pc, #172]	; (8005cc8 <TIM_OC1_SetConfig+0x110>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <TIM_OC1_SetConfig+0x80>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a2a      	ldr	r2, [pc, #168]	; (8005ccc <TIM_OC1_SetConfig+0x114>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d007      	beq.n	8005c38 <TIM_OC1_SetConfig+0x80>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a29      	ldr	r2, [pc, #164]	; (8005cd0 <TIM_OC1_SetConfig+0x118>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_OC1_SetConfig+0x80>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a28      	ldr	r2, [pc, #160]	; (8005cd4 <TIM_OC1_SetConfig+0x11c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d10c      	bne.n	8005c52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f023 0308 	bic.w	r3, r3, #8
 8005c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f023 0304 	bic.w	r3, r3, #4
 8005c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1b      	ldr	r2, [pc, #108]	; (8005cc4 <TIM_OC1_SetConfig+0x10c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00f      	beq.n	8005c7a <TIM_OC1_SetConfig+0xc2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <TIM_OC1_SetConfig+0x110>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00b      	beq.n	8005c7a <TIM_OC1_SetConfig+0xc2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a19      	ldr	r2, [pc, #100]	; (8005ccc <TIM_OC1_SetConfig+0x114>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d007      	beq.n	8005c7a <TIM_OC1_SetConfig+0xc2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a18      	ldr	r2, [pc, #96]	; (8005cd0 <TIM_OC1_SetConfig+0x118>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d003      	beq.n	8005c7a <TIM_OC1_SetConfig+0xc2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a17      	ldr	r2, [pc, #92]	; (8005cd4 <TIM_OC1_SetConfig+0x11c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d111      	bne.n	8005c9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	621a      	str	r2, [r3, #32]
}
 8005cb8:	bf00      	nop
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	40012c00 	.word	0x40012c00
 8005cc8:	40013400 	.word	0x40013400
 8005ccc:	40014000 	.word	0x40014000
 8005cd0:	40014400 	.word	0x40014400
 8005cd4:	40014800 	.word	0x40014800

08005cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f023 0210 	bic.w	r2, r3, #16
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0320 	bic.w	r3, r3, #32
 8005d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a28      	ldr	r2, [pc, #160]	; (8005dd8 <TIM_OC2_SetConfig+0x100>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_OC2_SetConfig+0x6c>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a27      	ldr	r2, [pc, #156]	; (8005ddc <TIM_OC2_SetConfig+0x104>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d10d      	bne.n	8005d60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a1d      	ldr	r2, [pc, #116]	; (8005dd8 <TIM_OC2_SetConfig+0x100>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00f      	beq.n	8005d88 <TIM_OC2_SetConfig+0xb0>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a1c      	ldr	r2, [pc, #112]	; (8005ddc <TIM_OC2_SetConfig+0x104>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00b      	beq.n	8005d88 <TIM_OC2_SetConfig+0xb0>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a1b      	ldr	r2, [pc, #108]	; (8005de0 <TIM_OC2_SetConfig+0x108>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d007      	beq.n	8005d88 <TIM_OC2_SetConfig+0xb0>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a1a      	ldr	r2, [pc, #104]	; (8005de4 <TIM_OC2_SetConfig+0x10c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_OC2_SetConfig+0xb0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a19      	ldr	r2, [pc, #100]	; (8005de8 <TIM_OC2_SetConfig+0x110>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d113      	bne.n	8005db0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	621a      	str	r2, [r3, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40012c00 	.word	0x40012c00
 8005ddc:	40013400 	.word	0x40013400
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40014400 	.word	0x40014400
 8005de8:	40014800 	.word	0x40014800

08005dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a27      	ldr	r2, [pc, #156]	; (8005ee8 <TIM_OC3_SetConfig+0xfc>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d003      	beq.n	8005e56 <TIM_OC3_SetConfig+0x6a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a26      	ldr	r2, [pc, #152]	; (8005eec <TIM_OC3_SetConfig+0x100>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d10d      	bne.n	8005e72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a1c      	ldr	r2, [pc, #112]	; (8005ee8 <TIM_OC3_SetConfig+0xfc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00f      	beq.n	8005e9a <TIM_OC3_SetConfig+0xae>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a1b      	ldr	r2, [pc, #108]	; (8005eec <TIM_OC3_SetConfig+0x100>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <TIM_OC3_SetConfig+0xae>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a1a      	ldr	r2, [pc, #104]	; (8005ef0 <TIM_OC3_SetConfig+0x104>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <TIM_OC3_SetConfig+0xae>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a19      	ldr	r2, [pc, #100]	; (8005ef4 <TIM_OC3_SetConfig+0x108>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_OC3_SetConfig+0xae>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a18      	ldr	r2, [pc, #96]	; (8005ef8 <TIM_OC3_SetConfig+0x10c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d113      	bne.n	8005ec2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	621a      	str	r2, [r3, #32]
}
 8005edc:	bf00      	nop
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40013400 	.word	0x40013400
 8005ef0:	40014000 	.word	0x40014000
 8005ef4:	40014400 	.word	0x40014400
 8005ef8:	40014800 	.word	0x40014800

08005efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	031b      	lsls	r3, r3, #12
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a28      	ldr	r2, [pc, #160]	; (8005ffc <TIM_OC4_SetConfig+0x100>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d003      	beq.n	8005f68 <TIM_OC4_SetConfig+0x6c>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a27      	ldr	r2, [pc, #156]	; (8006000 <TIM_OC4_SetConfig+0x104>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d10d      	bne.n	8005f84 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	031b      	lsls	r3, r3, #12
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a1d      	ldr	r2, [pc, #116]	; (8005ffc <TIM_OC4_SetConfig+0x100>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00f      	beq.n	8005fac <TIM_OC4_SetConfig+0xb0>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a1c      	ldr	r2, [pc, #112]	; (8006000 <TIM_OC4_SetConfig+0x104>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00b      	beq.n	8005fac <TIM_OC4_SetConfig+0xb0>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a1b      	ldr	r2, [pc, #108]	; (8006004 <TIM_OC4_SetConfig+0x108>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d007      	beq.n	8005fac <TIM_OC4_SetConfig+0xb0>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a1a      	ldr	r2, [pc, #104]	; (8006008 <TIM_OC4_SetConfig+0x10c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d003      	beq.n	8005fac <TIM_OC4_SetConfig+0xb0>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a19      	ldr	r2, [pc, #100]	; (800600c <TIM_OC4_SetConfig+0x110>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d113      	bne.n	8005fd4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fb2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	019b      	lsls	r3, r3, #6
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	019b      	lsls	r3, r3, #6
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	621a      	str	r2, [r3, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40012c00 	.word	0x40012c00
 8006000:	40013400 	.word	0x40013400
 8006004:	40014000 	.word	0x40014000
 8006008:	40014400 	.word	0x40014400
 800600c:	40014800 	.word	0x40014800

08006010 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800603e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006054:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	041b      	lsls	r3, r3, #16
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a17      	ldr	r2, [pc, #92]	; (80060c4 <TIM_OC5_SetConfig+0xb4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00f      	beq.n	800608a <TIM_OC5_SetConfig+0x7a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a16      	ldr	r2, [pc, #88]	; (80060c8 <TIM_OC5_SetConfig+0xb8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00b      	beq.n	800608a <TIM_OC5_SetConfig+0x7a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a15      	ldr	r2, [pc, #84]	; (80060cc <TIM_OC5_SetConfig+0xbc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d007      	beq.n	800608a <TIM_OC5_SetConfig+0x7a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a14      	ldr	r2, [pc, #80]	; (80060d0 <TIM_OC5_SetConfig+0xc0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d003      	beq.n	800608a <TIM_OC5_SetConfig+0x7a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a13      	ldr	r2, [pc, #76]	; (80060d4 <TIM_OC5_SetConfig+0xc4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d109      	bne.n	800609e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006090:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	621a      	str	r2, [r3, #32]
}
 80060b8:	bf00      	nop
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	40012c00 	.word	0x40012c00
 80060c8:	40013400 	.word	0x40013400
 80060cc:	40014000 	.word	0x40014000
 80060d0:	40014400 	.word	0x40014400
 80060d4:	40014800 	.word	0x40014800

080060d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	021b      	lsls	r3, r3, #8
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4313      	orrs	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800611e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	051b      	lsls	r3, r3, #20
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a18      	ldr	r2, [pc, #96]	; (8006190 <TIM_OC6_SetConfig+0xb8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00f      	beq.n	8006154 <TIM_OC6_SetConfig+0x7c>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a17      	ldr	r2, [pc, #92]	; (8006194 <TIM_OC6_SetConfig+0xbc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00b      	beq.n	8006154 <TIM_OC6_SetConfig+0x7c>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a16      	ldr	r2, [pc, #88]	; (8006198 <TIM_OC6_SetConfig+0xc0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d007      	beq.n	8006154 <TIM_OC6_SetConfig+0x7c>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a15      	ldr	r2, [pc, #84]	; (800619c <TIM_OC6_SetConfig+0xc4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d003      	beq.n	8006154 <TIM_OC6_SetConfig+0x7c>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a14      	ldr	r2, [pc, #80]	; (80061a0 <TIM_OC6_SetConfig+0xc8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d109      	bne.n	8006168 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800615a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	029b      	lsls	r3, r3, #10
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40012c00 	.word	0x40012c00
 8006194:	40013400 	.word	0x40013400
 8006198:	40014000 	.word	0x40014000
 800619c:	40014400 	.word	0x40014400
 80061a0:	40014800 	.word	0x40014800

080061a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	f023 0201 	bic.w	r2, r3, #1
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f023 030a 	bic.w	r3, r3, #10
 80061e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	621a      	str	r2, [r3, #32]
}
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006202:	b480      	push	{r7}
 8006204:	b087      	sub	sp, #28
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	f023 0210 	bic.w	r2, r3, #16
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800622c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	031b      	lsls	r3, r3, #12
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800623e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4313      	orrs	r3, r2
 8006248:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	621a      	str	r2, [r3, #32]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	f043 0307 	orr.w	r3, r3, #7
 8006288:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	609a      	str	r2, [r3, #8]
}
 8006290:	bf00      	nop
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	021a      	lsls	r2, r3, #8
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	431a      	orrs	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	609a      	str	r2, [r3, #8]
}
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	2201      	movs	r2, #1
 80062f0:	fa02 f303 	lsl.w	r3, r2, r3
 80062f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a1a      	ldr	r2, [r3, #32]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	43db      	mvns	r3, r3
 80062fe:	401a      	ands	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a1a      	ldr	r2, [r3, #32]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	fa01 f303 	lsl.w	r3, r1, r3
 8006314:	431a      	orrs	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d109      	bne.n	800634c <HAL_TIMEx_PWMN_Start+0x24>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b01      	cmp	r3, #1
 8006342:	bf14      	ite	ne
 8006344:	2301      	movne	r3, #1
 8006346:	2300      	moveq	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	e022      	b.n	8006392 <HAL_TIMEx_PWMN_Start+0x6a>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b04      	cmp	r3, #4
 8006350:	d109      	bne.n	8006366 <HAL_TIMEx_PWMN_Start+0x3e>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b01      	cmp	r3, #1
 800635c:	bf14      	ite	ne
 800635e:	2301      	movne	r3, #1
 8006360:	2300      	moveq	r3, #0
 8006362:	b2db      	uxtb	r3, r3
 8006364:	e015      	b.n	8006392 <HAL_TIMEx_PWMN_Start+0x6a>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b08      	cmp	r3, #8
 800636a:	d109      	bne.n	8006380 <HAL_TIMEx_PWMN_Start+0x58>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b01      	cmp	r3, #1
 8006376:	bf14      	ite	ne
 8006378:	2301      	movne	r3, #1
 800637a:	2300      	moveq	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	e008      	b.n	8006392 <HAL_TIMEx_PWMN_Start+0x6a>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b01      	cmp	r3, #1
 800638a:	bf14      	ite	ne
 800638c:	2301      	movne	r3, #1
 800638e:	2300      	moveq	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e069      	b.n	800646e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d104      	bne.n	80063aa <HAL_TIMEx_PWMN_Start+0x82>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a8:	e013      	b.n	80063d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d104      	bne.n	80063ba <HAL_TIMEx_PWMN_Start+0x92>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063b8:	e00b      	b.n	80063d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d104      	bne.n	80063ca <HAL_TIMEx_PWMN_Start+0xa2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063c8:	e003      	b.n	80063d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2202      	movs	r2, #2
 80063ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2204      	movs	r2, #4
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fa1e 	bl	800681c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a20      	ldr	r2, [pc, #128]	; (8006478 <HAL_TIMEx_PWMN_Start+0x150>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d018      	beq.n	800642c <HAL_TIMEx_PWMN_Start+0x104>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006402:	d013      	beq.n	800642c <HAL_TIMEx_PWMN_Start+0x104>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1c      	ldr	r2, [pc, #112]	; (800647c <HAL_TIMEx_PWMN_Start+0x154>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00e      	beq.n	800642c <HAL_TIMEx_PWMN_Start+0x104>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1b      	ldr	r2, [pc, #108]	; (8006480 <HAL_TIMEx_PWMN_Start+0x158>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d009      	beq.n	800642c <HAL_TIMEx_PWMN_Start+0x104>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a19      	ldr	r2, [pc, #100]	; (8006484 <HAL_TIMEx_PWMN_Start+0x15c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d004      	beq.n	800642c <HAL_TIMEx_PWMN_Start+0x104>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a18      	ldr	r2, [pc, #96]	; (8006488 <HAL_TIMEx_PWMN_Start+0x160>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d115      	bne.n	8006458 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	4b16      	ldr	r3, [pc, #88]	; (800648c <HAL_TIMEx_PWMN_Start+0x164>)
 8006434:	4013      	ands	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b06      	cmp	r3, #6
 800643c:	d015      	beq.n	800646a <HAL_TIMEx_PWMN_Start+0x142>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006444:	d011      	beq.n	800646a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 0201 	orr.w	r2, r2, #1
 8006454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006456:	e008      	b.n	800646a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	e000      	b.n	800646c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	40012c00 	.word	0x40012c00
 800647c:	40000400 	.word	0x40000400
 8006480:	40000800 	.word	0x40000800
 8006484:	40013400 	.word	0x40013400
 8006488:	40014000 	.word	0x40014000
 800648c:	00010007 	.word	0x00010007

08006490 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2200      	movs	r2, #0
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 f9ba 	bl	800681c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6a1a      	ldr	r2, [r3, #32]
 80064ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80064b2:	4013      	ands	r3, r2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10f      	bne.n	80064d8 <HAL_TIMEx_PWMN_Stop+0x48>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6a1a      	ldr	r2, [r3, #32]
 80064be:	f244 4344 	movw	r3, #17476	; 0x4444
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d107      	bne.n	80064d8 <HAL_TIMEx_PWMN_Stop+0x48>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6a1a      	ldr	r2, [r3, #32]
 80064de:	f241 1311 	movw	r3, #4369	; 0x1111
 80064e2:	4013      	ands	r3, r2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10f      	bne.n	8006508 <HAL_TIMEx_PWMN_Stop+0x78>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6a1a      	ldr	r2, [r3, #32]
 80064ee:	f244 4344 	movw	r3, #17476	; 0x4444
 80064f2:	4013      	ands	r3, r2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d107      	bne.n	8006508 <HAL_TIMEx_PWMN_Stop+0x78>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0201 	bic.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d104      	bne.n	8006518 <HAL_TIMEx_PWMN_Stop+0x88>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006516:	e013      	b.n	8006540 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2b04      	cmp	r3, #4
 800651c:	d104      	bne.n	8006528 <HAL_TIMEx_PWMN_Stop+0x98>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006526:	e00b      	b.n	8006540 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2b08      	cmp	r3, #8
 800652c:	d104      	bne.n	8006538 <HAL_TIMEx_PWMN_Stop+0xa8>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006536:	e003      	b.n	8006540 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006560:	2302      	movs	r3, #2
 8006562:	e065      	b.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a2c      	ldr	r2, [pc, #176]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d004      	beq.n	8006598 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a2b      	ldr	r2, [pc, #172]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d108      	bne.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800659e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80065b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1b      	ldr	r2, [pc, #108]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d018      	beq.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065da:	d013      	beq.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a18      	ldr	r2, [pc, #96]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00e      	beq.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a17      	ldr	r2, [pc, #92]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d009      	beq.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a12      	ldr	r2, [pc, #72]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d004      	beq.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a13      	ldr	r2, [pc, #76]	; (800664c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d10c      	bne.n	800661e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800660a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	4313      	orrs	r3, r2
 8006614:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	40012c00 	.word	0x40012c00
 8006640:	40013400 	.word	0x40013400
 8006644:	40000400 	.word	0x40000400
 8006648:	40000800 	.word	0x40000800
 800664c:	40014000 	.word	0x40014000

08006650 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006664:	2b01      	cmp	r3, #1
 8006666:	d101      	bne.n	800666c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006668:	2302      	movs	r3, #2
 800666a:	e087      	b.n	800677c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	041b      	lsls	r3, r3, #16
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a27      	ldr	r2, [pc, #156]	; (8006788 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d004      	beq.n	80066fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a25      	ldr	r2, [pc, #148]	; (800678c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d106      	bne.n	8006708 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	4313      	orrs	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a1e      	ldr	r2, [pc, #120]	; (8006788 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d004      	beq.n	800671c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a1d      	ldr	r2, [pc, #116]	; (800678c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d126      	bne.n	800676a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006726:	051b      	lsls	r3, r3, #20
 8006728:	4313      	orrs	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a0e      	ldr	r2, [pc, #56]	; (8006788 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d004      	beq.n	800675c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a0d      	ldr	r2, [pc, #52]	; (800678c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d106      	bne.n	800676a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	40012c00 	.word	0x40012c00
 800678c:	40013400 	.word	0x40013400

08006790 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	2204      	movs	r2, #4
 8006830:	fa02 f303 	lsl.w	r3, r2, r3
 8006834:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a1a      	ldr	r2, [r3, #32]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	43db      	mvns	r3, r3
 800683e:	401a      	ands	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a1a      	ldr	r2, [r3, #32]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f003 031f 	and.w	r3, r3, #31
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	fa01 f303 	lsl.w	r3, r1, r3
 8006854:	431a      	orrs	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	621a      	str	r2, [r3, #32]
}
 800685a:	bf00      	nop
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b082      	sub	sp, #8
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e042      	b.n	80068fe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7fa fd8c 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2224      	movs	r2, #36	; 0x24
 8006894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0201 	bic.w	r2, r2, #1
 80068a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fc51 	bl	8007150 <UART_SetConfig>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d101      	bne.n	80068b8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e022      	b.n	80068fe <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 ff11 	bl	80076e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f042 0201 	orr.w	r2, r2, #1
 80068f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 ff98 	bl	800782c <UART_CheckIdleState>
 80068fc:	4603      	mov	r3, r0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b08a      	sub	sp, #40	; 0x28
 800690a:	af02      	add	r7, sp, #8
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	603b      	str	r3, [r7, #0]
 8006912:	4613      	mov	r3, r2
 8006914:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800691c:	2b20      	cmp	r3, #32
 800691e:	f040 8083 	bne.w	8006a28 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_UART_Transmit+0x28>
 8006928:	88fb      	ldrh	r3, [r7, #6]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e07b      	b.n	8006a2a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006938:	2b01      	cmp	r3, #1
 800693a:	d101      	bne.n	8006940 <HAL_UART_Transmit+0x3a>
 800693c:	2302      	movs	r3, #2
 800693e:	e074      	b.n	8006a2a <HAL_UART_Transmit+0x124>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2221      	movs	r2, #33	; 0x21
 8006954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006958:	f7fa ff6c 	bl	8001834 <HAL_GetTick>
 800695c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	88fa      	ldrh	r2, [r7, #6]
 8006962:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	88fa      	ldrh	r2, [r7, #6]
 800696a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006976:	d108      	bne.n	800698a <HAL_UART_Transmit+0x84>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006980:	2300      	movs	r3, #0
 8006982:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	61bb      	str	r3, [r7, #24]
 8006988:	e003      	b.n	8006992 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800698e:	2300      	movs	r3, #0
 8006990:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800699a:	e02c      	b.n	80069f6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2200      	movs	r2, #0
 80069a4:	2180      	movs	r1, #128	; 0x80
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 ff8b 	bl	80078c2 <UART_WaitOnFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e039      	b.n	8006a2a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10b      	bne.n	80069d4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	3302      	adds	r3, #2
 80069d0:	61bb      	str	r3, [r7, #24]
 80069d2:	e007      	b.n	80069e4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	781a      	ldrb	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	3301      	adds	r3, #1
 80069e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	3b01      	subs	r3, #1
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1cc      	bne.n	800699c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2140      	movs	r1, #64	; 0x40
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 ff58 	bl	80078c2 <UART_WaitOnFlagUntilTimeout>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e006      	b.n	8006a2a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	e000      	b.n	8006a2a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006a28:	2302      	movs	r3, #2
  }
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3720      	adds	r7, #32
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08a      	sub	sp, #40	; 0x28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d142      	bne.n	8006ad2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <HAL_UART_Receive_IT+0x24>
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e03b      	b.n	8006ad4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_UART_Receive_IT+0x36>
 8006a66:	2302      	movs	r3, #2
 8006a68:	e034      	b.n	8006ad4 <HAL_UART_Receive_IT+0xa0>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a17      	ldr	r2, [pc, #92]	; (8006adc <HAL_UART_Receive_IT+0xa8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d01f      	beq.n	8006ac2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d018      	beq.n	8006ac2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	623b      	str	r3, [r7, #32]
 8006ab0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	69f9      	ldr	r1, [r7, #28]
 8006ab4:	6a3a      	ldr	r2, [r7, #32]
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	61bb      	str	r3, [r7, #24]
   return(result);
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e6      	bne.n	8006a90 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ac2:	88fb      	ldrh	r3, [r7, #6]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 ffc3 	bl	8007a54 <UART_Start_Receive_IT>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	e000      	b.n	8006ad4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006ad2:	2302      	movs	r3, #2
  }
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3728      	adds	r7, #40	; 0x28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	40008000 	.word	0x40008000

08006ae0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b0ba      	sub	sp, #232	; 0xe8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b0e:	4013      	ands	r3, r2
 8006b10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d11b      	bne.n	8006b54 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d015      	beq.n	8006b54 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b2c:	f003 0320 	and.w	r3, r3, #32
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d105      	bne.n	8006b40 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d009      	beq.n	8006b54 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 82d6 	beq.w	80070f6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	4798      	blx	r3
      }
      return;
 8006b52:	e2d0      	b.n	80070f6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 811f 	beq.w	8006d9c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b62:	4b8b      	ldr	r3, [pc, #556]	; (8006d90 <HAL_UART_IRQHandler+0x2b0>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b6e:	4b89      	ldr	r3, [pc, #548]	; (8006d94 <HAL_UART_IRQHandler+0x2b4>)
 8006b70:	4013      	ands	r3, r2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 8112 	beq.w	8006d9c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d011      	beq.n	8006ba8 <HAL_UART_IRQHandler+0xc8>
 8006b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00b      	beq.n	8006ba8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2201      	movs	r2, #1
 8006b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b9e:	f043 0201 	orr.w	r2, r3, #1
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d011      	beq.n	8006bd8 <HAL_UART_IRQHandler+0xf8>
 8006bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bce:	f043 0204 	orr.w	r2, r3, #4
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d011      	beq.n	8006c08 <HAL_UART_IRQHandler+0x128>
 8006be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00b      	beq.n	8006c08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2204      	movs	r2, #4
 8006bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bfe:	f043 0202 	orr.w	r2, r3, #2
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d017      	beq.n	8006c44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d105      	bne.n	8006c2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006c20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c24:	4b5a      	ldr	r3, [pc, #360]	; (8006d90 <HAL_UART_IRQHandler+0x2b0>)
 8006c26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00b      	beq.n	8006c44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2208      	movs	r2, #8
 8006c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c3a:	f043 0208 	orr.w	r2, r3, #8
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d012      	beq.n	8006c76 <HAL_UART_IRQHandler+0x196>
 8006c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00c      	beq.n	8006c76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c6c:	f043 0220 	orr.w	r2, r3, #32
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 823c 	beq.w	80070fa <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d013      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d105      	bne.n	8006ca6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cca:	2b40      	cmp	r3, #64	; 0x40
 8006ccc:	d005      	beq.n	8006cda <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d04f      	beq.n	8006d7a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 ffe4 	bl	8007ca8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cea:	2b40      	cmp	r3, #64	; 0x40
 8006cec:	d141      	bne.n	8006d72 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3308      	adds	r3, #8
 8006d16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1d9      	bne.n	8006cee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d013      	beq.n	8006d6a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d46:	4a14      	ldr	r2, [pc, #80]	; (8006d98 <HAL_UART_IRQHandler+0x2b8>)
 8006d48:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fc fc78 	bl	8003644 <HAL_DMA_Abort_IT>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d017      	beq.n	8006d8a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006d64:	4610      	mov	r0, r2
 8006d66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d68:	e00f      	b.n	8006d8a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f9da 	bl	8007124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d70:	e00b      	b.n	8006d8a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f9d6 	bl	8007124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d78:	e007      	b.n	8006d8a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f9d2 	bl	8007124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006d88:	e1b7      	b.n	80070fa <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d8a:	bf00      	nop
    return;
 8006d8c:	e1b5      	b.n	80070fa <HAL_UART_IRQHandler+0x61a>
 8006d8e:	bf00      	nop
 8006d90:	10000001 	.word	0x10000001
 8006d94:	04000120 	.word	0x04000120
 8006d98:	08007d75 	.word	0x08007d75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	f040 814a 	bne.w	800703a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006daa:	f003 0310 	and.w	r3, r3, #16
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 8143 	beq.w	800703a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db8:	f003 0310 	and.w	r3, r3, #16
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 813c 	beq.w	800703a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2210      	movs	r2, #16
 8006dc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd4:	2b40      	cmp	r3, #64	; 0x40
 8006dd6:	f040 80b5 	bne.w	8006f44 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006de6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 8187 	beq.w	80070fe <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	f080 817f 	bcs.w	80070fe <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 8086 	bne.w	8006f28 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1da      	bne.n	8006e1c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3308      	adds	r3, #8
 8006e86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e1      	bne.n	8006e66 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ec6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ec8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ecc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1e3      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ef8:	f023 0310 	bic.w	r3, r3, #16
 8006efc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e4      	bne.n	8006ee8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fc fb35 	bl	8003592 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f8fb 	bl	8007138 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f42:	e0dc      	b.n	80070fe <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 80ce 	beq.w	8007102 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006f66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 80c9 	beq.w	8007102 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f92:	647b      	str	r3, [r7, #68]	; 0x44
 8006f94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f9a:	e841 2300 	strex	r3, r2, [r1]
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1e4      	bne.n	8006f70 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3308      	adds	r3, #8
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	623b      	str	r3, [r7, #32]
   return(result);
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fbc:	f023 0301 	bic.w	r3, r3, #1
 8006fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3308      	adds	r3, #8
 8006fca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006fce:	633a      	str	r2, [r7, #48]	; 0x30
 8006fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e1      	bne.n	8006fa6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	60fb      	str	r3, [r7, #12]
   return(result);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0310 	bic.w	r3, r3, #16
 800700a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007018:	61fb      	str	r3, [r7, #28]
 800701a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701c:	69b9      	ldr	r1, [r7, #24]
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	e841 2300 	strex	r3, r2, [r1]
 8007024:	617b      	str	r3, [r7, #20]
   return(result);
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1e4      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800702c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007030:	4619      	mov	r1, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f880 	bl	8007138 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007038:	e063      	b.n	8007102 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800703a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800703e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00e      	beq.n	8007064 <HAL_UART_IRQHandler+0x584>
 8007046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800704a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d008      	beq.n	8007064 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800705a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fb27 	bl	80086b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007062:	e051      	b.n	8007108 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706c:	2b00      	cmp	r3, #0
 800706e:	d014      	beq.n	800709a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007078:	2b00      	cmp	r3, #0
 800707a:	d105      	bne.n	8007088 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800707c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d008      	beq.n	800709a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800708c:	2b00      	cmp	r3, #0
 800708e:	d03a      	beq.n	8007106 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	4798      	blx	r3
    }
    return;
 8007098:	e035      	b.n	8007106 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800709a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d009      	beq.n	80070ba <HAL_UART_IRQHandler+0x5da>
 80070a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fe74 	bl	8007da0 <UART_EndTransmit_IT>
    return;
 80070b8:	e026      	b.n	8007108 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80070ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d009      	beq.n	80070da <HAL_UART_IRQHandler+0x5fa>
 80070c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f001 fb00 	bl	80086d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070d8:	e016      	b.n	8007108 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80070da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d010      	beq.n	8007108 <HAL_UART_IRQHandler+0x628>
 80070e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	da0c      	bge.n	8007108 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f001 fae8 	bl	80086c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070f4:	e008      	b.n	8007108 <HAL_UART_IRQHandler+0x628>
      return;
 80070f6:	bf00      	nop
 80070f8:	e006      	b.n	8007108 <HAL_UART_IRQHandler+0x628>
    return;
 80070fa:	bf00      	nop
 80070fc:	e004      	b.n	8007108 <HAL_UART_IRQHandler+0x628>
      return;
 80070fe:	bf00      	nop
 8007100:	e002      	b.n	8007108 <HAL_UART_IRQHandler+0x628>
      return;
 8007102:	bf00      	nop
 8007104:	e000      	b.n	8007108 <HAL_UART_IRQHandler+0x628>
    return;
 8007106:	bf00      	nop
  }
}
 8007108:	37e8      	adds	r7, #232	; 0xe8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop

08007110 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007154:	b08c      	sub	sp, #48	; 0x30
 8007156:	af00      	add	r7, sp, #0
 8007158:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	431a      	orrs	r2, r3
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	431a      	orrs	r2, r3
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	4313      	orrs	r3, r2
 8007176:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	4bab      	ldr	r3, [pc, #684]	; (800742c <UART_SetConfig+0x2dc>)
 8007180:	4013      	ands	r3, r2
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	6812      	ldr	r2, [r2, #0]
 8007186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007188:	430b      	orrs	r3, r1
 800718a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4aa0      	ldr	r2, [pc, #640]	; (8007430 <UART_SetConfig+0x2e0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d004      	beq.n	80071bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071b8:	4313      	orrs	r3, r2
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80071c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	6812      	ldr	r2, [r2, #0]
 80071ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071d0:	430b      	orrs	r3, r1
 80071d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	f023 010f 	bic.w	r1, r3, #15
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a91      	ldr	r2, [pc, #580]	; (8007434 <UART_SetConfig+0x2e4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d125      	bne.n	8007240 <UART_SetConfig+0xf0>
 80071f4:	4b90      	ldr	r3, [pc, #576]	; (8007438 <UART_SetConfig+0x2e8>)
 80071f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fa:	f003 0303 	and.w	r3, r3, #3
 80071fe:	2b03      	cmp	r3, #3
 8007200:	d81a      	bhi.n	8007238 <UART_SetConfig+0xe8>
 8007202:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <UART_SetConfig+0xb8>)
 8007204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007208:	08007219 	.word	0x08007219
 800720c:	08007229 	.word	0x08007229
 8007210:	08007221 	.word	0x08007221
 8007214:	08007231 	.word	0x08007231
 8007218:	2301      	movs	r3, #1
 800721a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800721e:	e0d6      	b.n	80073ce <UART_SetConfig+0x27e>
 8007220:	2302      	movs	r3, #2
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007226:	e0d2      	b.n	80073ce <UART_SetConfig+0x27e>
 8007228:	2304      	movs	r3, #4
 800722a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800722e:	e0ce      	b.n	80073ce <UART_SetConfig+0x27e>
 8007230:	2308      	movs	r3, #8
 8007232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007236:	e0ca      	b.n	80073ce <UART_SetConfig+0x27e>
 8007238:	2310      	movs	r3, #16
 800723a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800723e:	e0c6      	b.n	80073ce <UART_SetConfig+0x27e>
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a7d      	ldr	r2, [pc, #500]	; (800743c <UART_SetConfig+0x2ec>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d138      	bne.n	80072bc <UART_SetConfig+0x16c>
 800724a:	4b7b      	ldr	r3, [pc, #492]	; (8007438 <UART_SetConfig+0x2e8>)
 800724c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007250:	f003 030c 	and.w	r3, r3, #12
 8007254:	2b0c      	cmp	r3, #12
 8007256:	d82d      	bhi.n	80072b4 <UART_SetConfig+0x164>
 8007258:	a201      	add	r2, pc, #4	; (adr r2, 8007260 <UART_SetConfig+0x110>)
 800725a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725e:	bf00      	nop
 8007260:	08007295 	.word	0x08007295
 8007264:	080072b5 	.word	0x080072b5
 8007268:	080072b5 	.word	0x080072b5
 800726c:	080072b5 	.word	0x080072b5
 8007270:	080072a5 	.word	0x080072a5
 8007274:	080072b5 	.word	0x080072b5
 8007278:	080072b5 	.word	0x080072b5
 800727c:	080072b5 	.word	0x080072b5
 8007280:	0800729d 	.word	0x0800729d
 8007284:	080072b5 	.word	0x080072b5
 8007288:	080072b5 	.word	0x080072b5
 800728c:	080072b5 	.word	0x080072b5
 8007290:	080072ad 	.word	0x080072ad
 8007294:	2300      	movs	r3, #0
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800729a:	e098      	b.n	80073ce <UART_SetConfig+0x27e>
 800729c:	2302      	movs	r3, #2
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072a2:	e094      	b.n	80073ce <UART_SetConfig+0x27e>
 80072a4:	2304      	movs	r3, #4
 80072a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072aa:	e090      	b.n	80073ce <UART_SetConfig+0x27e>
 80072ac:	2308      	movs	r3, #8
 80072ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072b2:	e08c      	b.n	80073ce <UART_SetConfig+0x27e>
 80072b4:	2310      	movs	r3, #16
 80072b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ba:	e088      	b.n	80073ce <UART_SetConfig+0x27e>
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a5f      	ldr	r2, [pc, #380]	; (8007440 <UART_SetConfig+0x2f0>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d125      	bne.n	8007312 <UART_SetConfig+0x1c2>
 80072c6:	4b5c      	ldr	r3, [pc, #368]	; (8007438 <UART_SetConfig+0x2e8>)
 80072c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072d0:	2b30      	cmp	r3, #48	; 0x30
 80072d2:	d016      	beq.n	8007302 <UART_SetConfig+0x1b2>
 80072d4:	2b30      	cmp	r3, #48	; 0x30
 80072d6:	d818      	bhi.n	800730a <UART_SetConfig+0x1ba>
 80072d8:	2b20      	cmp	r3, #32
 80072da:	d00a      	beq.n	80072f2 <UART_SetConfig+0x1a2>
 80072dc:	2b20      	cmp	r3, #32
 80072de:	d814      	bhi.n	800730a <UART_SetConfig+0x1ba>
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <UART_SetConfig+0x19a>
 80072e4:	2b10      	cmp	r3, #16
 80072e6:	d008      	beq.n	80072fa <UART_SetConfig+0x1aa>
 80072e8:	e00f      	b.n	800730a <UART_SetConfig+0x1ba>
 80072ea:	2300      	movs	r3, #0
 80072ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072f0:	e06d      	b.n	80073ce <UART_SetConfig+0x27e>
 80072f2:	2302      	movs	r3, #2
 80072f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072f8:	e069      	b.n	80073ce <UART_SetConfig+0x27e>
 80072fa:	2304      	movs	r3, #4
 80072fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007300:	e065      	b.n	80073ce <UART_SetConfig+0x27e>
 8007302:	2308      	movs	r3, #8
 8007304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007308:	e061      	b.n	80073ce <UART_SetConfig+0x27e>
 800730a:	2310      	movs	r3, #16
 800730c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007310:	e05d      	b.n	80073ce <UART_SetConfig+0x27e>
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a4b      	ldr	r2, [pc, #300]	; (8007444 <UART_SetConfig+0x2f4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d125      	bne.n	8007368 <UART_SetConfig+0x218>
 800731c:	4b46      	ldr	r3, [pc, #280]	; (8007438 <UART_SetConfig+0x2e8>)
 800731e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007322:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007326:	2bc0      	cmp	r3, #192	; 0xc0
 8007328:	d016      	beq.n	8007358 <UART_SetConfig+0x208>
 800732a:	2bc0      	cmp	r3, #192	; 0xc0
 800732c:	d818      	bhi.n	8007360 <UART_SetConfig+0x210>
 800732e:	2b80      	cmp	r3, #128	; 0x80
 8007330:	d00a      	beq.n	8007348 <UART_SetConfig+0x1f8>
 8007332:	2b80      	cmp	r3, #128	; 0x80
 8007334:	d814      	bhi.n	8007360 <UART_SetConfig+0x210>
 8007336:	2b00      	cmp	r3, #0
 8007338:	d002      	beq.n	8007340 <UART_SetConfig+0x1f0>
 800733a:	2b40      	cmp	r3, #64	; 0x40
 800733c:	d008      	beq.n	8007350 <UART_SetConfig+0x200>
 800733e:	e00f      	b.n	8007360 <UART_SetConfig+0x210>
 8007340:	2300      	movs	r3, #0
 8007342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007346:	e042      	b.n	80073ce <UART_SetConfig+0x27e>
 8007348:	2302      	movs	r3, #2
 800734a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800734e:	e03e      	b.n	80073ce <UART_SetConfig+0x27e>
 8007350:	2304      	movs	r3, #4
 8007352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007356:	e03a      	b.n	80073ce <UART_SetConfig+0x27e>
 8007358:	2308      	movs	r3, #8
 800735a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800735e:	e036      	b.n	80073ce <UART_SetConfig+0x27e>
 8007360:	2310      	movs	r3, #16
 8007362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007366:	e032      	b.n	80073ce <UART_SetConfig+0x27e>
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a30      	ldr	r2, [pc, #192]	; (8007430 <UART_SetConfig+0x2e0>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d12a      	bne.n	80073c8 <UART_SetConfig+0x278>
 8007372:	4b31      	ldr	r3, [pc, #196]	; (8007438 <UART_SetConfig+0x2e8>)
 8007374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007378:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800737c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007380:	d01a      	beq.n	80073b8 <UART_SetConfig+0x268>
 8007382:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007386:	d81b      	bhi.n	80073c0 <UART_SetConfig+0x270>
 8007388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800738c:	d00c      	beq.n	80073a8 <UART_SetConfig+0x258>
 800738e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007392:	d815      	bhi.n	80073c0 <UART_SetConfig+0x270>
 8007394:	2b00      	cmp	r3, #0
 8007396:	d003      	beq.n	80073a0 <UART_SetConfig+0x250>
 8007398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800739c:	d008      	beq.n	80073b0 <UART_SetConfig+0x260>
 800739e:	e00f      	b.n	80073c0 <UART_SetConfig+0x270>
 80073a0:	2300      	movs	r3, #0
 80073a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a6:	e012      	b.n	80073ce <UART_SetConfig+0x27e>
 80073a8:	2302      	movs	r3, #2
 80073aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ae:	e00e      	b.n	80073ce <UART_SetConfig+0x27e>
 80073b0:	2304      	movs	r3, #4
 80073b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b6:	e00a      	b.n	80073ce <UART_SetConfig+0x27e>
 80073b8:	2308      	movs	r3, #8
 80073ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073be:	e006      	b.n	80073ce <UART_SetConfig+0x27e>
 80073c0:	2310      	movs	r3, #16
 80073c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073c6:	e002      	b.n	80073ce <UART_SetConfig+0x27e>
 80073c8:	2310      	movs	r3, #16
 80073ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a17      	ldr	r2, [pc, #92]	; (8007430 <UART_SetConfig+0x2e0>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	f040 80a8 	bne.w	800752a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073de:	2b08      	cmp	r3, #8
 80073e0:	d834      	bhi.n	800744c <UART_SetConfig+0x2fc>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <UART_SetConfig+0x298>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	0800740d 	.word	0x0800740d
 80073ec:	0800744d 	.word	0x0800744d
 80073f0:	08007415 	.word	0x08007415
 80073f4:	0800744d 	.word	0x0800744d
 80073f8:	0800741b 	.word	0x0800741b
 80073fc:	0800744d 	.word	0x0800744d
 8007400:	0800744d 	.word	0x0800744d
 8007404:	0800744d 	.word	0x0800744d
 8007408:	08007423 	.word	0x08007423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800740c:	f7fd f9e8 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 8007410:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007412:	e021      	b.n	8007458 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007414:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <UART_SetConfig+0x2f8>)
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007418:	e01e      	b.n	8007458 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800741a:	f7fd f973 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 800741e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007420:	e01a      	b.n	8007458 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007428:	e016      	b.n	8007458 <UART_SetConfig+0x308>
 800742a:	bf00      	nop
 800742c:	cfff69f3 	.word	0xcfff69f3
 8007430:	40008000 	.word	0x40008000
 8007434:	40013800 	.word	0x40013800
 8007438:	40021000 	.word	0x40021000
 800743c:	40004400 	.word	0x40004400
 8007440:	40004800 	.word	0x40004800
 8007444:	40004c00 	.word	0x40004c00
 8007448:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007456:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 812a 	beq.w	80076b4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	4a9e      	ldr	r2, [pc, #632]	; (80076e0 <UART_SetConfig+0x590>)
 8007466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800746a:	461a      	mov	r2, r3
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007472:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	4613      	mov	r3, r2
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	4413      	add	r3, r2
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	429a      	cmp	r2, r3
 8007482:	d305      	bcc.n	8007490 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	429a      	cmp	r2, r3
 800748e:	d903      	bls.n	8007498 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007496:	e10d      	b.n	80076b4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	2200      	movs	r2, #0
 800749c:	60bb      	str	r3, [r7, #8]
 800749e:	60fa      	str	r2, [r7, #12]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	4a8e      	ldr	r2, [pc, #568]	; (80076e0 <UART_SetConfig+0x590>)
 80074a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2200      	movs	r2, #0
 80074ae:	603b      	str	r3, [r7, #0]
 80074b0:	607a      	str	r2, [r7, #4]
 80074b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074ba:	f7f8 ff11 	bl	80002e0 <__aeabi_uldivmod>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4610      	mov	r0, r2
 80074c4:	4619      	mov	r1, r3
 80074c6:	f04f 0200 	mov.w	r2, #0
 80074ca:	f04f 0300 	mov.w	r3, #0
 80074ce:	020b      	lsls	r3, r1, #8
 80074d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074d4:	0202      	lsls	r2, r0, #8
 80074d6:	6979      	ldr	r1, [r7, #20]
 80074d8:	6849      	ldr	r1, [r1, #4]
 80074da:	0849      	lsrs	r1, r1, #1
 80074dc:	2000      	movs	r0, #0
 80074de:	460c      	mov	r4, r1
 80074e0:	4605      	mov	r5, r0
 80074e2:	eb12 0804 	adds.w	r8, r2, r4
 80074e6:	eb43 0905 	adc.w	r9, r3, r5
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	469a      	mov	sl, r3
 80074f2:	4693      	mov	fp, r2
 80074f4:	4652      	mov	r2, sl
 80074f6:	465b      	mov	r3, fp
 80074f8:	4640      	mov	r0, r8
 80074fa:	4649      	mov	r1, r9
 80074fc:	f7f8 fef0 	bl	80002e0 <__aeabi_uldivmod>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4613      	mov	r3, r2
 8007506:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800750e:	d308      	bcc.n	8007522 <UART_SetConfig+0x3d2>
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007516:	d204      	bcs.n	8007522 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6a3a      	ldr	r2, [r7, #32]
 800751e:	60da      	str	r2, [r3, #12]
 8007520:	e0c8      	b.n	80076b4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007528:	e0c4      	b.n	80076b4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007532:	d167      	bne.n	8007604 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007534:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007538:	2b08      	cmp	r3, #8
 800753a:	d828      	bhi.n	800758e <UART_SetConfig+0x43e>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <UART_SetConfig+0x3f4>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	08007569 	.word	0x08007569
 8007548:	08007571 	.word	0x08007571
 800754c:	08007579 	.word	0x08007579
 8007550:	0800758f 	.word	0x0800758f
 8007554:	0800757f 	.word	0x0800757f
 8007558:	0800758f 	.word	0x0800758f
 800755c:	0800758f 	.word	0x0800758f
 8007560:	0800758f 	.word	0x0800758f
 8007564:	08007587 	.word	0x08007587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007568:	f7fd f93a 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 800756c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800756e:	e014      	b.n	800759a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007570:	f7fd f94c 	bl	800480c <HAL_RCC_GetPCLK2Freq>
 8007574:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007576:	e010      	b.n	800759a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007578:	4b5a      	ldr	r3, [pc, #360]	; (80076e4 <UART_SetConfig+0x594>)
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800757c:	e00d      	b.n	800759a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800757e:	f7fd f8c1 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 8007582:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007584:	e009      	b.n	800759a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800758a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800758c:	e005      	b.n	800759a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007598:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 8089 	beq.w	80076b4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	4a4e      	ldr	r2, [pc, #312]	; (80076e0 <UART_SetConfig+0x590>)
 80075a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075ac:	461a      	mov	r2, r3
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80075b4:	005a      	lsls	r2, r3, #1
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	085b      	lsrs	r3, r3, #1
 80075bc:	441a      	add	r2, r3
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	2b0f      	cmp	r3, #15
 80075cc:	d916      	bls.n	80075fc <UART_SetConfig+0x4ac>
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d4:	d212      	bcs.n	80075fc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	f023 030f 	bic.w	r3, r3, #15
 80075de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	085b      	lsrs	r3, r3, #1
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	8bfb      	ldrh	r3, [r7, #30]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	8bfa      	ldrh	r2, [r7, #30]
 80075f8:	60da      	str	r2, [r3, #12]
 80075fa:	e05b      	b.n	80076b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007602:	e057      	b.n	80076b4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007604:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007608:	2b08      	cmp	r3, #8
 800760a:	d828      	bhi.n	800765e <UART_SetConfig+0x50e>
 800760c:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <UART_SetConfig+0x4c4>)
 800760e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007612:	bf00      	nop
 8007614:	08007639 	.word	0x08007639
 8007618:	08007641 	.word	0x08007641
 800761c:	08007649 	.word	0x08007649
 8007620:	0800765f 	.word	0x0800765f
 8007624:	0800764f 	.word	0x0800764f
 8007628:	0800765f 	.word	0x0800765f
 800762c:	0800765f 	.word	0x0800765f
 8007630:	0800765f 	.word	0x0800765f
 8007634:	08007657 	.word	0x08007657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007638:	f7fd f8d2 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 800763c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800763e:	e014      	b.n	800766a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007640:	f7fd f8e4 	bl	800480c <HAL_RCC_GetPCLK2Freq>
 8007644:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007646:	e010      	b.n	800766a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007648:	4b26      	ldr	r3, [pc, #152]	; (80076e4 <UART_SetConfig+0x594>)
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800764c:	e00d      	b.n	800766a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800764e:	f7fd f859 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 8007652:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007654:	e009      	b.n	800766a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800765a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800765c:	e005      	b.n	800766a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800765e:	2300      	movs	r3, #0
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007668:	bf00      	nop
    }

    if (pclk != 0U)
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	2b00      	cmp	r3, #0
 800766e:	d021      	beq.n	80076b4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	4a1a      	ldr	r2, [pc, #104]	; (80076e0 <UART_SetConfig+0x590>)
 8007676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800767a:	461a      	mov	r2, r3
 800767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	085b      	lsrs	r3, r3, #1
 8007688:	441a      	add	r2, r3
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007692:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	2b0f      	cmp	r3, #15
 8007698:	d909      	bls.n	80076ae <UART_SetConfig+0x55e>
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a0:	d205      	bcs.n	80076ae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60da      	str	r2, [r3, #12]
 80076ac:	e002      	b.n	80076b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2201      	movs	r2, #1
 80076c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2200      	movs	r2, #0
 80076c8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2200      	movs	r2, #0
 80076ce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80076d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3730      	adds	r7, #48	; 0x30
 80076d8:	46bd      	mov	sp, r7
 80076da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076de:	bf00      	nop
 80076e0:	0800a21c 	.word	0x0800a21c
 80076e4:	00f42400 	.word	0x00f42400

080076e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00a      	beq.n	8007712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00a      	beq.n	8007756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	f003 0310 	and.w	r3, r3, #16
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00a      	beq.n	800779a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d01a      	beq.n	80077fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077e6:	d10a      	bne.n	80077fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	605a      	str	r2, [r3, #4]
  }
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af02      	add	r7, sp, #8
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800783c:	f7f9 fffa 	bl	8001834 <HAL_GetTick>
 8007840:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b08      	cmp	r3, #8
 800784e:	d10e      	bne.n	800786e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f82f 	bl	80078c2 <UART_WaitOnFlagUntilTimeout>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e025      	b.n	80078ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	2b04      	cmp	r3, #4
 800787a:	d10e      	bne.n	800789a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800787c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f819 	bl	80078c2 <UART_WaitOnFlagUntilTimeout>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e00f      	b.n	80078ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b09c      	sub	sp, #112	; 0x70
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	603b      	str	r3, [r7, #0]
 80078ce:	4613      	mov	r3, r2
 80078d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d2:	e0a9      	b.n	8007a28 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078da:	f000 80a5 	beq.w	8007a28 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078de:	f7f9 ffa9 	bl	8001834 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d302      	bcc.n	80078f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80078ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d140      	bne.n	8007976 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007904:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007908:	667b      	str	r3, [r7, #100]	; 0x64
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007912:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007914:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007918:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e6      	bne.n	80078f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3308      	adds	r3, #8
 800792c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007938:	f023 0301 	bic.w	r3, r3, #1
 800793c:	663b      	str	r3, [r7, #96]	; 0x60
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3308      	adds	r3, #8
 8007944:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007946:	64ba      	str	r2, [r7, #72]	; 0x48
 8007948:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800794c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800794e:	e841 2300 	strex	r3, r2, [r1]
 8007952:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1e5      	bne.n	8007926 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2220      	movs	r2, #32
 800795e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2220      	movs	r2, #32
 8007966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e069      	b.n	8007a4a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0304 	and.w	r3, r3, #4
 8007980:	2b00      	cmp	r3, #0
 8007982:	d051      	beq.n	8007a28 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800798e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007992:	d149      	bne.n	8007a28 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800799c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
 80079be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e6      	bne.n	800799e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3308      	adds	r3, #8
 80079d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	e853 3f00 	ldrex	r3, [r3]
 80079de:	613b      	str	r3, [r7, #16]
   return(result);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f023 0301 	bic.w	r3, r3, #1
 80079e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3308      	adds	r3, #8
 80079ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079f0:	623a      	str	r2, [r7, #32]
 80079f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	69f9      	ldr	r1, [r7, #28]
 80079f6:	6a3a      	ldr	r2, [r7, #32]
 80079f8:	e841 2300 	strex	r3, r2, [r1]
 80079fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e5      	bne.n	80079d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e010      	b.n	8007a4a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	69da      	ldr	r2, [r3, #28]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	4013      	ands	r3, r2
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	bf0c      	ite	eq
 8007a38:	2301      	moveq	r3, #1
 8007a3a:	2300      	movne	r3, #0
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	461a      	mov	r2, r3
 8007a40:	79fb      	ldrb	r3, [r7, #7]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	f43f af46 	beq.w	80078d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3770      	adds	r7, #112	; 0x70
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
	...

08007a54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b0a3      	sub	sp, #140	; 0x8c
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	88fa      	ldrh	r2, [r7, #6]
 8007a6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	88fa      	ldrh	r2, [r7, #6]
 8007a74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a86:	d10e      	bne.n	8007aa6 <UART_Start_Receive_IT+0x52>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d105      	bne.n	8007a9c <UART_Start_Receive_IT+0x48>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a9a:	e02d      	b.n	8007af8 <UART_Start_Receive_IT+0xa4>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	22ff      	movs	r2, #255	; 0xff
 8007aa0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007aa4:	e028      	b.n	8007af8 <UART_Start_Receive_IT+0xa4>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10d      	bne.n	8007aca <UART_Start_Receive_IT+0x76>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d104      	bne.n	8007ac0 <UART_Start_Receive_IT+0x6c>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	22ff      	movs	r2, #255	; 0xff
 8007aba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007abe:	e01b      	b.n	8007af8 <UART_Start_Receive_IT+0xa4>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	227f      	movs	r2, #127	; 0x7f
 8007ac4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ac8:	e016      	b.n	8007af8 <UART_Start_Receive_IT+0xa4>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ad2:	d10d      	bne.n	8007af0 <UART_Start_Receive_IT+0x9c>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d104      	bne.n	8007ae6 <UART_Start_Receive_IT+0x92>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	227f      	movs	r2, #127	; 0x7f
 8007ae0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ae4:	e008      	b.n	8007af8 <UART_Start_Receive_IT+0xa4>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	223f      	movs	r2, #63	; 0x3f
 8007aea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007aee:	e003      	b.n	8007af8 <UART_Start_Receive_IT+0xa4>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2222      	movs	r2, #34	; 0x22
 8007b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b12:	e853 3f00 	ldrex	r3, [r3]
 8007b16:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b1a:	f043 0301 	orr.w	r3, r3, #1
 8007b1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3308      	adds	r3, #8
 8007b28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007b2c:	673a      	str	r2, [r7, #112]	; 0x70
 8007b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007b32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007b34:	e841 2300 	strex	r3, r2, [r1]
 8007b38:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e3      	bne.n	8007b08 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b48:	d153      	bne.n	8007bf2 <UART_Start_Receive_IT+0x19e>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007b50:	88fa      	ldrh	r2, [r7, #6]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d34d      	bcc.n	8007bf2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b5e:	d107      	bne.n	8007b70 <UART_Start_Receive_IT+0x11c>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d103      	bne.n	8007b70 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4a4b      	ldr	r2, [pc, #300]	; (8007c98 <UART_Start_Receive_IT+0x244>)
 8007b6c:	671a      	str	r2, [r3, #112]	; 0x70
 8007b6e:	e002      	b.n	8007b76 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4a4a      	ldr	r2, [pc, #296]	; (8007c9c <UART_Start_Receive_IT+0x248>)
 8007b74:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d01a      	beq.n	8007bbc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8e:	e853 3f00 	ldrex	r3, [r3]
 8007b92:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007baa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e4      	bne.n	8007b86 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3308      	adds	r3, #8
 8007bda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007bdc:	64ba      	str	r2, [r7, #72]	; 0x48
 8007bde:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e5      	bne.n	8007bbc <UART_Start_Receive_IT+0x168>
 8007bf0:	e04a      	b.n	8007c88 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bfa:	d107      	bne.n	8007c0c <UART_Start_Receive_IT+0x1b8>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d103      	bne.n	8007c0c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	4a26      	ldr	r2, [pc, #152]	; (8007ca0 <UART_Start_Receive_IT+0x24c>)
 8007c08:	671a      	str	r2, [r3, #112]	; 0x70
 8007c0a:	e002      	b.n	8007c12 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4a25      	ldr	r2, [pc, #148]	; (8007ca4 <UART_Start_Receive_IT+0x250>)
 8007c10:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d019      	beq.n	8007c56 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007c36:	677b      	str	r3, [r7, #116]	; 0x74
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c40:	637b      	str	r3, [r7, #52]	; 0x34
 8007c42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c48:	e841 2300 	strex	r3, r2, [r1]
 8007c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e6      	bne.n	8007c22 <UART_Start_Receive_IT+0x1ce>
 8007c54:	e018      	b.n	8007c88 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	613b      	str	r3, [r7, #16]
   return(result);
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f043 0320 	orr.w	r3, r3, #32
 8007c6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	461a      	mov	r2, r3
 8007c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c74:	623b      	str	r3, [r7, #32]
 8007c76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	69f9      	ldr	r1, [r7, #28]
 8007c7a:	6a3a      	ldr	r2, [r7, #32]
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e6      	bne.n	8007c56 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	378c      	adds	r7, #140	; 0x8c
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	080083b1 	.word	0x080083b1
 8007c9c:	080080b9 	.word	0x080080b9
 8007ca0:	08007f57 	.word	0x08007f57
 8007ca4:	08007df7 	.word	0x08007df7

08007ca8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b095      	sub	sp, #84	; 0x54
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cce:	643b      	str	r3, [r7, #64]	; 0x40
 8007cd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cd6:	e841 2300 	strex	r3, r2, [r1]
 8007cda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1e6      	bne.n	8007cb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cf8:	f023 0301 	bic.w	r3, r3, #1
 8007cfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3308      	adds	r3, #8
 8007d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e3      	bne.n	8007ce2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d118      	bne.n	8007d54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f023 0310 	bic.w	r3, r3, #16
 8007d36:	647b      	str	r3, [r7, #68]	; 0x44
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d40:	61bb      	str	r3, [r7, #24]
 8007d42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6979      	ldr	r1, [r7, #20]
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e6      	bne.n	8007d22 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2220      	movs	r2, #32
 8007d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007d68:	bf00      	nop
 8007d6a:	3754      	adds	r7, #84	; 0x54
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff f9c6 	bl	8007124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dbc:	61fb      	str	r3, [r7, #28]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	61bb      	str	r3, [r7, #24]
 8007dc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	6979      	ldr	r1, [r7, #20]
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e6      	bne.n	8007da8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff f991 	bl	8007110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dee:	bf00      	nop
 8007df0:	3720      	adds	r7, #32
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b096      	sub	sp, #88	; 0x58
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e0e:	2b22      	cmp	r3, #34	; 0x22
 8007e10:	f040 8095 	bne.w	8007f3e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e1e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007e22:	b2d9      	uxtb	r1, r3
 8007e24:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2e:	400a      	ands	r2, r1
 8007e30:	b2d2      	uxtb	r2, r2
 8007e32:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d178      	bne.n	8007f4e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e70:	653b      	str	r3, [r7, #80]	; 0x50
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e6      	bne.n	8007e5c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3308      	adds	r3, #8
 8007e94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	f023 0301 	bic.w	r3, r3, #1
 8007ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007eae:	633a      	str	r2, [r7, #48]	; 0x30
 8007eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e5      	bne.n	8007e8e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d12e      	bne.n	8007f36 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0310 	bic.w	r3, r3, #16
 8007ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007efc:	61fb      	str	r3, [r7, #28]
 8007efe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f00:	69b9      	ldr	r1, [r7, #24]
 8007f02:	69fa      	ldr	r2, [r7, #28]
 8007f04:	e841 2300 	strex	r3, r2, [r1]
 8007f08:	617b      	str	r3, [r7, #20]
   return(result);
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1e6      	bne.n	8007ede <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f003 0310 	and.w	r3, r3, #16
 8007f1a:	2b10      	cmp	r3, #16
 8007f1c:	d103      	bne.n	8007f26 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2210      	movs	r2, #16
 8007f24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff f902 	bl	8007138 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f34:	e00b      	b.n	8007f4e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7f9 f8be 	bl	80010b8 <HAL_UART_RxCpltCallback>
}
 8007f3c:	e007      	b.n	8007f4e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	699a      	ldr	r2, [r3, #24]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f042 0208 	orr.w	r2, r2, #8
 8007f4c:	619a      	str	r2, [r3, #24]
}
 8007f4e:	bf00      	nop
 8007f50:	3758      	adds	r7, #88	; 0x58
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b096      	sub	sp, #88	; 0x58
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f6e:	2b22      	cmp	r3, #34	; 0x22
 8007f70:	f040 8095 	bne.w	800809e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f82:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f84:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007f88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f92:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f98:	1c9a      	adds	r2, r3, #2
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d178      	bne.n	80080ae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fda:	643b      	str	r3, [r7, #64]	; 0x40
 8007fdc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e6      	bne.n	8007fbc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3308      	adds	r3, #8
 8007ff4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	e853 3f00 	ldrex	r3, [r3]
 8007ffc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	f023 0301 	bic.w	r3, r3, #1
 8008004:	64bb      	str	r3, [r7, #72]	; 0x48
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3308      	adds	r3, #8
 800800c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800800e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008010:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e5      	bne.n	8007fee <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2220      	movs	r2, #32
 8008026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008034:	2b01      	cmp	r3, #1
 8008036:	d12e      	bne.n	8008096 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	e853 3f00 	ldrex	r3, [r3]
 800804a:	60bb      	str	r3, [r7, #8]
   return(result);
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	f023 0310 	bic.w	r3, r3, #16
 8008052:	647b      	str	r3, [r7, #68]	; 0x44
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	461a      	mov	r2, r3
 800805a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800805c:	61bb      	str	r3, [r7, #24]
 800805e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008060:	6979      	ldr	r1, [r7, #20]
 8008062:	69ba      	ldr	r2, [r7, #24]
 8008064:	e841 2300 	strex	r3, r2, [r1]
 8008068:	613b      	str	r3, [r7, #16]
   return(result);
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1e6      	bne.n	800803e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	f003 0310 	and.w	r3, r3, #16
 800807a:	2b10      	cmp	r3, #16
 800807c:	d103      	bne.n	8008086 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2210      	movs	r2, #16
 8008084:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7ff f852 	bl	8007138 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008094:	e00b      	b.n	80080ae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7f9 f80e 	bl	80010b8 <HAL_UART_RxCpltCallback>
}
 800809c:	e007      	b.n	80080ae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	699a      	ldr	r2, [r3, #24]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f042 0208 	orr.w	r2, r2, #8
 80080ac:	619a      	str	r2, [r3, #24]
}
 80080ae:	bf00      	nop
 80080b0:	3758      	adds	r7, #88	; 0x58
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
	...

080080b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b0a6      	sub	sp, #152	; 0x98
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080c6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ee:	2b22      	cmp	r3, #34	; 0x22
 80080f0:	f040 814f 	bne.w	8008392 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080fa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080fe:	e0f6      	b.n	80082ee <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800810a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800810e:	b2d9      	uxtb	r1, r3
 8008110:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008114:	b2da      	uxtb	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811a:	400a      	ands	r2, r1
 800811c:	b2d2      	uxtb	r2, r2
 800811e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008124:	1c5a      	adds	r2, r3, #1
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008130:	b29b      	uxth	r3, r3
 8008132:	3b01      	subs	r3, #1
 8008134:	b29a      	uxth	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008146:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800814a:	f003 0307 	and.w	r3, r3, #7
 800814e:	2b00      	cmp	r3, #0
 8008150:	d053      	beq.n	80081fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008152:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d011      	beq.n	8008182 <UART_RxISR_8BIT_FIFOEN+0xca>
 800815e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00b      	beq.n	8008182 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2201      	movs	r2, #1
 8008170:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008178:	f043 0201 	orr.w	r2, r3, #1
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008182:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b00      	cmp	r3, #0
 800818c:	d011      	beq.n	80081b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800818e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00b      	beq.n	80081b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2202      	movs	r2, #2
 80081a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081a8:	f043 0204 	orr.w	r2, r3, #4
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80081b6:	f003 0304 	and.w	r3, r3, #4
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d011      	beq.n	80081e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80081be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00b      	beq.n	80081e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2204      	movs	r2, #4
 80081d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081d8:	f043 0202 	orr.w	r2, r3, #2
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d006      	beq.n	80081fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7fe ff99 	bl	8007124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008200:	b29b      	uxth	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d173      	bne.n	80082ee <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800820e:	e853 3f00 	ldrex	r3, [r3]
 8008212:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008214:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800821a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008228:	66bb      	str	r3, [r7, #104]	; 0x68
 800822a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800822e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008230:	e841 2300 	strex	r3, r2, [r1]
 8008234:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1e4      	bne.n	8008206 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3308      	adds	r3, #8
 8008242:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008246:	e853 3f00 	ldrex	r3, [r3]
 800824a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800824c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800824e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008252:	f023 0301 	bic.w	r3, r3, #1
 8008256:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3308      	adds	r3, #8
 800825e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008260:	657a      	str	r2, [r7, #84]	; 0x54
 8008262:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008264:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008266:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008268:	e841 2300 	strex	r3, r2, [r1]
 800826c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800826e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1e3      	bne.n	800823c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2220      	movs	r2, #32
 8008278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008286:	2b01      	cmp	r3, #1
 8008288:	d12e      	bne.n	80082e8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	f023 0310 	bic.w	r3, r3, #16
 80082a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082ae:	643b      	str	r3, [r7, #64]	; 0x40
 80082b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082b6:	e841 2300 	strex	r3, r2, [r1]
 80082ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1e6      	bne.n	8008290 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	f003 0310 	and.w	r3, r3, #16
 80082cc:	2b10      	cmp	r3, #16
 80082ce:	d103      	bne.n	80082d8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2210      	movs	r2, #16
 80082d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7fe ff29 	bl	8007138 <HAL_UARTEx_RxEventCallback>
 80082e6:	e002      	b.n	80082ee <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7f8 fee5 	bl	80010b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d006      	beq.n	8008304 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80082f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80082fa:	f003 0320 	and.w	r3, r3, #32
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f47f aefe 	bne.w	8008100 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800830a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800830e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008312:	2b00      	cmp	r3, #0
 8008314:	d045      	beq.n	80083a2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800831c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008320:	429a      	cmp	r2, r3
 8008322:	d23e      	bcs.n	80083a2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3308      	adds	r3, #8
 800832a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	e853 3f00 	ldrex	r3, [r3]
 8008332:	61fb      	str	r3, [r7, #28]
   return(result);
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800833a:	673b      	str	r3, [r7, #112]	; 0x70
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3308      	adds	r3, #8
 8008342:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008344:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800834a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800834c:	e841 2300 	strex	r3, r2, [r1]
 8008350:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e5      	bne.n	8008324 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a14      	ldr	r2, [pc, #80]	; (80083ac <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800835c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	e853 3f00 	ldrex	r3, [r3]
 800836a:	60bb      	str	r3, [r7, #8]
   return(result);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f043 0320 	orr.w	r3, r3, #32
 8008372:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	461a      	mov	r2, r3
 800837a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800837c:	61bb      	str	r3, [r7, #24]
 800837e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008380:	6979      	ldr	r1, [r7, #20]
 8008382:	69ba      	ldr	r2, [r7, #24]
 8008384:	e841 2300 	strex	r3, r2, [r1]
 8008388:	613b      	str	r3, [r7, #16]
   return(result);
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1e6      	bne.n	800835e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008390:	e007      	b.n	80083a2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	699a      	ldr	r2, [r3, #24]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f042 0208 	orr.w	r2, r2, #8
 80083a0:	619a      	str	r2, [r3, #24]
}
 80083a2:	bf00      	nop
 80083a4:	3798      	adds	r7, #152	; 0x98
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	08007df7 	.word	0x08007df7

080083b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b0a8      	sub	sp, #160	; 0xa0
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80083be:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e6:	2b22      	cmp	r3, #34	; 0x22
 80083e8:	f040 8153 	bne.w	8008692 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80083f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80083f6:	e0fa      	b.n	80085ee <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008406:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800840a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800840e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008412:	4013      	ands	r3, r2
 8008414:	b29a      	uxth	r2, r3
 8008416:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800841a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008420:	1c9a      	adds	r2, r3, #2
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800842c:	b29b      	uxth	r3, r3
 800842e:	3b01      	subs	r3, #1
 8008430:	b29a      	uxth	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008442:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	2b00      	cmp	r3, #0
 800844c:	d053      	beq.n	80084f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800844e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d011      	beq.n	800847e <UART_RxISR_16BIT_FIFOEN+0xce>
 800845a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800845e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00b      	beq.n	800847e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2201      	movs	r2, #1
 800846c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008474:	f043 0201 	orr.w	r2, r3, #1
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800847e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d011      	beq.n	80084ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800848a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00b      	beq.n	80084ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2202      	movs	r2, #2
 800849c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084a4:	f043 0204 	orr.w	r2, r3, #4
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084b2:	f003 0304 	and.w	r3, r3, #4
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d011      	beq.n	80084de <UART_RxISR_16BIT_FIFOEN+0x12e>
 80084ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00b      	beq.n	80084de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2204      	movs	r2, #4
 80084cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084d4:	f043 0202 	orr.w	r2, r3, #2
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d006      	beq.n	80084f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7fe fe1b 	bl	8007124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d175      	bne.n	80085ee <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008512:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008516:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008524:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008526:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008528:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800852a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800852c:	e841 2300 	strex	r3, r2, [r1]
 8008530:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1e4      	bne.n	8008502 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3308      	adds	r3, #8
 800853e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008542:	e853 3f00 	ldrex	r3, [r3]
 8008546:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800854a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800854e:	f023 0301 	bic.w	r3, r3, #1
 8008552:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3308      	adds	r3, #8
 800855c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008560:	65ba      	str	r2, [r7, #88]	; 0x58
 8008562:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008564:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008566:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008568:	e841 2300 	strex	r3, r2, [r1]
 800856c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800856e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1e1      	bne.n	8008538 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2220      	movs	r2, #32
 8008578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008586:	2b01      	cmp	r3, #1
 8008588:	d12e      	bne.n	80085e8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800859e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a0:	f023 0310 	bic.w	r3, r3, #16
 80085a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085ae:	647b      	str	r3, [r7, #68]	; 0x44
 80085b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085b6:	e841 2300 	strex	r3, r2, [r1]
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1e6      	bne.n	8008590 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69db      	ldr	r3, [r3, #28]
 80085c8:	f003 0310 	and.w	r3, r3, #16
 80085cc:	2b10      	cmp	r3, #16
 80085ce:	d103      	bne.n	80085d8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2210      	movs	r2, #16
 80085d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7fe fda9 	bl	8007138 <HAL_UARTEx_RxEventCallback>
 80085e6:	e002      	b.n	80085ee <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7f8 fd65 	bl	80010b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d006      	beq.n	8008604 <UART_RxISR_16BIT_FIFOEN+0x254>
 80085f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085fa:	f003 0320 	and.w	r3, r3, #32
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f47f aefa 	bne.w	80083f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800860a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800860e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008612:	2b00      	cmp	r3, #0
 8008614:	d045      	beq.n	80086a2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800861c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008620:	429a      	cmp	r2, r3
 8008622:	d23e      	bcs.n	80086a2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3308      	adds	r3, #8
 800862a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	e853 3f00 	ldrex	r3, [r3]
 8008632:	623b      	str	r3, [r7, #32]
   return(result);
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800863a:	677b      	str	r3, [r7, #116]	; 0x74
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3308      	adds	r3, #8
 8008642:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008644:	633a      	str	r2, [r7, #48]	; 0x30
 8008646:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800864a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e5      	bne.n	8008624 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a14      	ldr	r2, [pc, #80]	; (80086ac <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800865c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	60fb      	str	r3, [r7, #12]
   return(result);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f043 0320 	orr.w	r3, r3, #32
 8008672:	673b      	str	r3, [r7, #112]	; 0x70
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800867c:	61fb      	str	r3, [r7, #28]
 800867e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	69b9      	ldr	r1, [r7, #24]
 8008682:	69fa      	ldr	r2, [r7, #28]
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	617b      	str	r3, [r7, #20]
   return(result);
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e6      	bne.n	800865e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008690:	e007      	b.n	80086a2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	699a      	ldr	r2, [r3, #24]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f042 0208 	orr.w	r2, r2, #8
 80086a0:	619a      	str	r2, [r3, #24]
}
 80086a2:	bf00      	nop
 80086a4:	37a0      	adds	r7, #160	; 0xa0
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	08007f57 	.word	0x08007f57

080086b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d101      	bne.n	8008702 <HAL_UARTEx_DisableFifoMode+0x16>
 80086fe:	2302      	movs	r3, #2
 8008700:	e027      	b.n	8008752 <HAL_UARTEx_DisableFifoMode+0x66>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2224      	movs	r2, #36	; 0x24
 800870e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0201 	bic.w	r2, r2, #1
 8008728:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008730:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2220      	movs	r2, #32
 8008744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800876e:	2b01      	cmp	r3, #1
 8008770:	d101      	bne.n	8008776 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008772:	2302      	movs	r3, #2
 8008774:	e02d      	b.n	80087d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2224      	movs	r2, #36	; 0x24
 8008782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 0201 	bic.w	r2, r2, #1
 800879c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f850 	bl	8008858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2220      	movs	r2, #32
 80087c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b084      	sub	sp, #16
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d101      	bne.n	80087f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80087ee:	2302      	movs	r3, #2
 80087f0:	e02d      	b.n	800884e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2224      	movs	r2, #36	; 0x24
 80087fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 0201 	bic.w	r2, r2, #1
 8008818:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f812 	bl	8008858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2220      	movs	r2, #32
 8008840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
	...

08008858 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008864:	2b00      	cmp	r3, #0
 8008866:	d108      	bne.n	800887a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008878:	e031      	b.n	80088de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800887a:	2308      	movs	r3, #8
 800887c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800887e:	2308      	movs	r3, #8
 8008880:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	0e5b      	lsrs	r3, r3, #25
 800888a:	b2db      	uxtb	r3, r3
 800888c:	f003 0307 	and.w	r3, r3, #7
 8008890:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	0f5b      	lsrs	r3, r3, #29
 800889a:	b2db      	uxtb	r3, r3
 800889c:	f003 0307 	and.w	r3, r3, #7
 80088a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	7b3a      	ldrb	r2, [r7, #12]
 80088a6:	4911      	ldr	r1, [pc, #68]	; (80088ec <UARTEx_SetNbDataToProcess+0x94>)
 80088a8:	5c8a      	ldrb	r2, [r1, r2]
 80088aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80088ae:	7b3a      	ldrb	r2, [r7, #12]
 80088b0:	490f      	ldr	r1, [pc, #60]	; (80088f0 <UARTEx_SetNbDataToProcess+0x98>)
 80088b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088c0:	7bfb      	ldrb	r3, [r7, #15]
 80088c2:	7b7a      	ldrb	r2, [r7, #13]
 80088c4:	4909      	ldr	r1, [pc, #36]	; (80088ec <UARTEx_SetNbDataToProcess+0x94>)
 80088c6:	5c8a      	ldrb	r2, [r1, r2]
 80088c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80088cc:	7b7a      	ldrb	r2, [r7, #13]
 80088ce:	4908      	ldr	r1, [pc, #32]	; (80088f0 <UARTEx_SetNbDataToProcess+0x98>)
 80088d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80088de:	bf00      	nop
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	0800a234 	.word	0x0800a234
 80088f0:	0800a23c 	.word	0x0800a23c

080088f4 <atoi>:
 80088f4:	220a      	movs	r2, #10
 80088f6:	2100      	movs	r1, #0
 80088f8:	f000 b9d2 	b.w	8008ca0 <strtol>

080088fc <__errno>:
 80088fc:	4b01      	ldr	r3, [pc, #4]	; (8008904 <__errno+0x8>)
 80088fe:	6818      	ldr	r0, [r3, #0]
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	200000a4 	.word	0x200000a4

08008908 <__libc_init_array>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	4d0d      	ldr	r5, [pc, #52]	; (8008940 <__libc_init_array+0x38>)
 800890c:	4c0d      	ldr	r4, [pc, #52]	; (8008944 <__libc_init_array+0x3c>)
 800890e:	1b64      	subs	r4, r4, r5
 8008910:	10a4      	asrs	r4, r4, #2
 8008912:	2600      	movs	r6, #0
 8008914:	42a6      	cmp	r6, r4
 8008916:	d109      	bne.n	800892c <__libc_init_array+0x24>
 8008918:	4d0b      	ldr	r5, [pc, #44]	; (8008948 <__libc_init_array+0x40>)
 800891a:	4c0c      	ldr	r4, [pc, #48]	; (800894c <__libc_init_array+0x44>)
 800891c:	f001 fb80 	bl	800a020 <_init>
 8008920:	1b64      	subs	r4, r4, r5
 8008922:	10a4      	asrs	r4, r4, #2
 8008924:	2600      	movs	r6, #0
 8008926:	42a6      	cmp	r6, r4
 8008928:	d105      	bne.n	8008936 <__libc_init_array+0x2e>
 800892a:	bd70      	pop	{r4, r5, r6, pc}
 800892c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008930:	4798      	blx	r3
 8008932:	3601      	adds	r6, #1
 8008934:	e7ee      	b.n	8008914 <__libc_init_array+0xc>
 8008936:	f855 3b04 	ldr.w	r3, [r5], #4
 800893a:	4798      	blx	r3
 800893c:	3601      	adds	r6, #1
 800893e:	e7f2      	b.n	8008926 <__libc_init_array+0x1e>
 8008940:	0800a498 	.word	0x0800a498
 8008944:	0800a498 	.word	0x0800a498
 8008948:	0800a498 	.word	0x0800a498
 800894c:	0800a49c 	.word	0x0800a49c

08008950 <memset>:
 8008950:	4402      	add	r2, r0
 8008952:	4603      	mov	r3, r0
 8008954:	4293      	cmp	r3, r2
 8008956:	d100      	bne.n	800895a <memset+0xa>
 8008958:	4770      	bx	lr
 800895a:	f803 1b01 	strb.w	r1, [r3], #1
 800895e:	e7f9      	b.n	8008954 <memset+0x4>

08008960 <iprintf>:
 8008960:	b40f      	push	{r0, r1, r2, r3}
 8008962:	4b0a      	ldr	r3, [pc, #40]	; (800898c <iprintf+0x2c>)
 8008964:	b513      	push	{r0, r1, r4, lr}
 8008966:	681c      	ldr	r4, [r3, #0]
 8008968:	b124      	cbz	r4, 8008974 <iprintf+0x14>
 800896a:	69a3      	ldr	r3, [r4, #24]
 800896c:	b913      	cbnz	r3, 8008974 <iprintf+0x14>
 800896e:	4620      	mov	r0, r4
 8008970:	f000 fb98 	bl	80090a4 <__sinit>
 8008974:	ab05      	add	r3, sp, #20
 8008976:	9a04      	ldr	r2, [sp, #16]
 8008978:	68a1      	ldr	r1, [r4, #8]
 800897a:	9301      	str	r3, [sp, #4]
 800897c:	4620      	mov	r0, r4
 800897e:	f000 ff17 	bl	80097b0 <_vfiprintf_r>
 8008982:	b002      	add	sp, #8
 8008984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008988:	b004      	add	sp, #16
 800898a:	4770      	bx	lr
 800898c:	200000a4 	.word	0x200000a4

08008990 <_puts_r>:
 8008990:	b570      	push	{r4, r5, r6, lr}
 8008992:	460e      	mov	r6, r1
 8008994:	4605      	mov	r5, r0
 8008996:	b118      	cbz	r0, 80089a0 <_puts_r+0x10>
 8008998:	6983      	ldr	r3, [r0, #24]
 800899a:	b90b      	cbnz	r3, 80089a0 <_puts_r+0x10>
 800899c:	f000 fb82 	bl	80090a4 <__sinit>
 80089a0:	69ab      	ldr	r3, [r5, #24]
 80089a2:	68ac      	ldr	r4, [r5, #8]
 80089a4:	b913      	cbnz	r3, 80089ac <_puts_r+0x1c>
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 fb7c 	bl	80090a4 <__sinit>
 80089ac:	4b2c      	ldr	r3, [pc, #176]	; (8008a60 <_puts_r+0xd0>)
 80089ae:	429c      	cmp	r4, r3
 80089b0:	d120      	bne.n	80089f4 <_puts_r+0x64>
 80089b2:	686c      	ldr	r4, [r5, #4]
 80089b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089b6:	07db      	lsls	r3, r3, #31
 80089b8:	d405      	bmi.n	80089c6 <_puts_r+0x36>
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	0598      	lsls	r0, r3, #22
 80089be:	d402      	bmi.n	80089c6 <_puts_r+0x36>
 80089c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089c2:	f000 fc1f 	bl	8009204 <__retarget_lock_acquire_recursive>
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	0719      	lsls	r1, r3, #28
 80089ca:	d51d      	bpl.n	8008a08 <_puts_r+0x78>
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	b1db      	cbz	r3, 8008a08 <_puts_r+0x78>
 80089d0:	3e01      	subs	r6, #1
 80089d2:	68a3      	ldr	r3, [r4, #8]
 80089d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80089d8:	3b01      	subs	r3, #1
 80089da:	60a3      	str	r3, [r4, #8]
 80089dc:	bb39      	cbnz	r1, 8008a2e <_puts_r+0x9e>
 80089de:	2b00      	cmp	r3, #0
 80089e0:	da38      	bge.n	8008a54 <_puts_r+0xc4>
 80089e2:	4622      	mov	r2, r4
 80089e4:	210a      	movs	r1, #10
 80089e6:	4628      	mov	r0, r5
 80089e8:	f000 f964 	bl	8008cb4 <__swbuf_r>
 80089ec:	3001      	adds	r0, #1
 80089ee:	d011      	beq.n	8008a14 <_puts_r+0x84>
 80089f0:	250a      	movs	r5, #10
 80089f2:	e011      	b.n	8008a18 <_puts_r+0x88>
 80089f4:	4b1b      	ldr	r3, [pc, #108]	; (8008a64 <_puts_r+0xd4>)
 80089f6:	429c      	cmp	r4, r3
 80089f8:	d101      	bne.n	80089fe <_puts_r+0x6e>
 80089fa:	68ac      	ldr	r4, [r5, #8]
 80089fc:	e7da      	b.n	80089b4 <_puts_r+0x24>
 80089fe:	4b1a      	ldr	r3, [pc, #104]	; (8008a68 <_puts_r+0xd8>)
 8008a00:	429c      	cmp	r4, r3
 8008a02:	bf08      	it	eq
 8008a04:	68ec      	ldreq	r4, [r5, #12]
 8008a06:	e7d5      	b.n	80089b4 <_puts_r+0x24>
 8008a08:	4621      	mov	r1, r4
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	f000 f9a4 	bl	8008d58 <__swsetup_r>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d0dd      	beq.n	80089d0 <_puts_r+0x40>
 8008a14:	f04f 35ff 	mov.w	r5, #4294967295
 8008a18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a1a:	07da      	lsls	r2, r3, #31
 8008a1c:	d405      	bmi.n	8008a2a <_puts_r+0x9a>
 8008a1e:	89a3      	ldrh	r3, [r4, #12]
 8008a20:	059b      	lsls	r3, r3, #22
 8008a22:	d402      	bmi.n	8008a2a <_puts_r+0x9a>
 8008a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a26:	f000 fbee 	bl	8009206 <__retarget_lock_release_recursive>
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	bd70      	pop	{r4, r5, r6, pc}
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	da04      	bge.n	8008a3c <_puts_r+0xac>
 8008a32:	69a2      	ldr	r2, [r4, #24]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	dc06      	bgt.n	8008a46 <_puts_r+0xb6>
 8008a38:	290a      	cmp	r1, #10
 8008a3a:	d004      	beq.n	8008a46 <_puts_r+0xb6>
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	1c5a      	adds	r2, r3, #1
 8008a40:	6022      	str	r2, [r4, #0]
 8008a42:	7019      	strb	r1, [r3, #0]
 8008a44:	e7c5      	b.n	80089d2 <_puts_r+0x42>
 8008a46:	4622      	mov	r2, r4
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f000 f933 	bl	8008cb4 <__swbuf_r>
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d1bf      	bne.n	80089d2 <_puts_r+0x42>
 8008a52:	e7df      	b.n	8008a14 <_puts_r+0x84>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	250a      	movs	r5, #10
 8008a58:	1c5a      	adds	r2, r3, #1
 8008a5a:	6022      	str	r2, [r4, #0]
 8008a5c:	701d      	strb	r5, [r3, #0]
 8008a5e:	e7db      	b.n	8008a18 <_puts_r+0x88>
 8008a60:	0800a41c 	.word	0x0800a41c
 8008a64:	0800a43c 	.word	0x0800a43c
 8008a68:	0800a3fc 	.word	0x0800a3fc

08008a6c <puts>:
 8008a6c:	4b02      	ldr	r3, [pc, #8]	; (8008a78 <puts+0xc>)
 8008a6e:	4601      	mov	r1, r0
 8008a70:	6818      	ldr	r0, [r3, #0]
 8008a72:	f7ff bf8d 	b.w	8008990 <_puts_r>
 8008a76:	bf00      	nop
 8008a78:	200000a4 	.word	0x200000a4

08008a7c <sniprintf>:
 8008a7c:	b40c      	push	{r2, r3}
 8008a7e:	b530      	push	{r4, r5, lr}
 8008a80:	4b17      	ldr	r3, [pc, #92]	; (8008ae0 <sniprintf+0x64>)
 8008a82:	1e0c      	subs	r4, r1, #0
 8008a84:	681d      	ldr	r5, [r3, #0]
 8008a86:	b09d      	sub	sp, #116	; 0x74
 8008a88:	da08      	bge.n	8008a9c <sniprintf+0x20>
 8008a8a:	238b      	movs	r3, #139	; 0x8b
 8008a8c:	602b      	str	r3, [r5, #0]
 8008a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a92:	b01d      	add	sp, #116	; 0x74
 8008a94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a98:	b002      	add	sp, #8
 8008a9a:	4770      	bx	lr
 8008a9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008aa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008aa4:	bf14      	ite	ne
 8008aa6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008aaa:	4623      	moveq	r3, r4
 8008aac:	9304      	str	r3, [sp, #16]
 8008aae:	9307      	str	r3, [sp, #28]
 8008ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ab4:	9002      	str	r0, [sp, #8]
 8008ab6:	9006      	str	r0, [sp, #24]
 8008ab8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008abc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008abe:	ab21      	add	r3, sp, #132	; 0x84
 8008ac0:	a902      	add	r1, sp, #8
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	9301      	str	r3, [sp, #4]
 8008ac6:	f000 fd49 	bl	800955c <_svfiprintf_r>
 8008aca:	1c43      	adds	r3, r0, #1
 8008acc:	bfbc      	itt	lt
 8008ace:	238b      	movlt	r3, #139	; 0x8b
 8008ad0:	602b      	strlt	r3, [r5, #0]
 8008ad2:	2c00      	cmp	r4, #0
 8008ad4:	d0dd      	beq.n	8008a92 <sniprintf+0x16>
 8008ad6:	9b02      	ldr	r3, [sp, #8]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	701a      	strb	r2, [r3, #0]
 8008adc:	e7d9      	b.n	8008a92 <sniprintf+0x16>
 8008ade:	bf00      	nop
 8008ae0:	200000a4 	.word	0x200000a4

08008ae4 <strtok>:
 8008ae4:	4b16      	ldr	r3, [pc, #88]	; (8008b40 <strtok+0x5c>)
 8008ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ae8:	681e      	ldr	r6, [r3, #0]
 8008aea:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8008aec:	4605      	mov	r5, r0
 8008aee:	b9fc      	cbnz	r4, 8008b30 <strtok+0x4c>
 8008af0:	2050      	movs	r0, #80	; 0x50
 8008af2:	9101      	str	r1, [sp, #4]
 8008af4:	f000 fbee 	bl	80092d4 <malloc>
 8008af8:	9901      	ldr	r1, [sp, #4]
 8008afa:	65b0      	str	r0, [r6, #88]	; 0x58
 8008afc:	4602      	mov	r2, r0
 8008afe:	b920      	cbnz	r0, 8008b0a <strtok+0x26>
 8008b00:	4b10      	ldr	r3, [pc, #64]	; (8008b44 <strtok+0x60>)
 8008b02:	4811      	ldr	r0, [pc, #68]	; (8008b48 <strtok+0x64>)
 8008b04:	2157      	movs	r1, #87	; 0x57
 8008b06:	f000 f995 	bl	8008e34 <__assert_func>
 8008b0a:	e9c0 4400 	strd	r4, r4, [r0]
 8008b0e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008b12:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008b16:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008b1a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008b1e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008b22:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008b26:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008b2a:	6184      	str	r4, [r0, #24]
 8008b2c:	7704      	strb	r4, [r0, #28]
 8008b2e:	6244      	str	r4, [r0, #36]	; 0x24
 8008b30:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008b32:	2301      	movs	r3, #1
 8008b34:	4628      	mov	r0, r5
 8008b36:	b002      	add	sp, #8
 8008b38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b3c:	f000 b806 	b.w	8008b4c <__strtok_r>
 8008b40:	200000a4 	.word	0x200000a4
 8008b44:	0800a248 	.word	0x0800a248
 8008b48:	0800a25f 	.word	0x0800a25f

08008b4c <__strtok_r>:
 8008b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b4e:	b908      	cbnz	r0, 8008b54 <__strtok_r+0x8>
 8008b50:	6810      	ldr	r0, [r2, #0]
 8008b52:	b188      	cbz	r0, 8008b78 <__strtok_r+0x2c>
 8008b54:	4604      	mov	r4, r0
 8008b56:	4620      	mov	r0, r4
 8008b58:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008b5c:	460f      	mov	r7, r1
 8008b5e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008b62:	b91e      	cbnz	r6, 8008b6c <__strtok_r+0x20>
 8008b64:	b965      	cbnz	r5, 8008b80 <__strtok_r+0x34>
 8008b66:	6015      	str	r5, [r2, #0]
 8008b68:	4628      	mov	r0, r5
 8008b6a:	e005      	b.n	8008b78 <__strtok_r+0x2c>
 8008b6c:	42b5      	cmp	r5, r6
 8008b6e:	d1f6      	bne.n	8008b5e <__strtok_r+0x12>
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1f0      	bne.n	8008b56 <__strtok_r+0xa>
 8008b74:	6014      	str	r4, [r2, #0]
 8008b76:	7003      	strb	r3, [r0, #0]
 8008b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b7a:	461c      	mov	r4, r3
 8008b7c:	e00c      	b.n	8008b98 <__strtok_r+0x4c>
 8008b7e:	b915      	cbnz	r5, 8008b86 <__strtok_r+0x3a>
 8008b80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b84:	460e      	mov	r6, r1
 8008b86:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008b8a:	42ab      	cmp	r3, r5
 8008b8c:	d1f7      	bne.n	8008b7e <__strtok_r+0x32>
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d0f3      	beq.n	8008b7a <__strtok_r+0x2e>
 8008b92:	2300      	movs	r3, #0
 8008b94:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008b98:	6014      	str	r4, [r2, #0]
 8008b9a:	e7ed      	b.n	8008b78 <__strtok_r+0x2c>

08008b9c <_strtol_l.constprop.0>:
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba2:	d001      	beq.n	8008ba8 <_strtol_l.constprop.0+0xc>
 8008ba4:	2b24      	cmp	r3, #36	; 0x24
 8008ba6:	d906      	bls.n	8008bb6 <_strtol_l.constprop.0+0x1a>
 8008ba8:	f7ff fea8 	bl	80088fc <__errno>
 8008bac:	2316      	movs	r3, #22
 8008bae:	6003      	str	r3, [r0, #0]
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008c9c <_strtol_l.constprop.0+0x100>
 8008bba:	460d      	mov	r5, r1
 8008bbc:	462e      	mov	r6, r5
 8008bbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bc2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008bc6:	f017 0708 	ands.w	r7, r7, #8
 8008bca:	d1f7      	bne.n	8008bbc <_strtol_l.constprop.0+0x20>
 8008bcc:	2c2d      	cmp	r4, #45	; 0x2d
 8008bce:	d132      	bne.n	8008c36 <_strtol_l.constprop.0+0x9a>
 8008bd0:	782c      	ldrb	r4, [r5, #0]
 8008bd2:	2701      	movs	r7, #1
 8008bd4:	1cb5      	adds	r5, r6, #2
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d05b      	beq.n	8008c92 <_strtol_l.constprop.0+0xf6>
 8008bda:	2b10      	cmp	r3, #16
 8008bdc:	d109      	bne.n	8008bf2 <_strtol_l.constprop.0+0x56>
 8008bde:	2c30      	cmp	r4, #48	; 0x30
 8008be0:	d107      	bne.n	8008bf2 <_strtol_l.constprop.0+0x56>
 8008be2:	782c      	ldrb	r4, [r5, #0]
 8008be4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008be8:	2c58      	cmp	r4, #88	; 0x58
 8008bea:	d14d      	bne.n	8008c88 <_strtol_l.constprop.0+0xec>
 8008bec:	786c      	ldrb	r4, [r5, #1]
 8008bee:	2310      	movs	r3, #16
 8008bf0:	3502      	adds	r5, #2
 8008bf2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008bf6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bfa:	f04f 0c00 	mov.w	ip, #0
 8008bfe:	fbb8 f9f3 	udiv	r9, r8, r3
 8008c02:	4666      	mov	r6, ip
 8008c04:	fb03 8a19 	mls	sl, r3, r9, r8
 8008c08:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008c0c:	f1be 0f09 	cmp.w	lr, #9
 8008c10:	d816      	bhi.n	8008c40 <_strtol_l.constprop.0+0xa4>
 8008c12:	4674      	mov	r4, lr
 8008c14:	42a3      	cmp	r3, r4
 8008c16:	dd24      	ble.n	8008c62 <_strtol_l.constprop.0+0xc6>
 8008c18:	f1bc 0f00 	cmp.w	ip, #0
 8008c1c:	db1e      	blt.n	8008c5c <_strtol_l.constprop.0+0xc0>
 8008c1e:	45b1      	cmp	r9, r6
 8008c20:	d31c      	bcc.n	8008c5c <_strtol_l.constprop.0+0xc0>
 8008c22:	d101      	bne.n	8008c28 <_strtol_l.constprop.0+0x8c>
 8008c24:	45a2      	cmp	sl, r4
 8008c26:	db19      	blt.n	8008c5c <_strtol_l.constprop.0+0xc0>
 8008c28:	fb06 4603 	mla	r6, r6, r3, r4
 8008c2c:	f04f 0c01 	mov.w	ip, #1
 8008c30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c34:	e7e8      	b.n	8008c08 <_strtol_l.constprop.0+0x6c>
 8008c36:	2c2b      	cmp	r4, #43	; 0x2b
 8008c38:	bf04      	itt	eq
 8008c3a:	782c      	ldrbeq	r4, [r5, #0]
 8008c3c:	1cb5      	addeq	r5, r6, #2
 8008c3e:	e7ca      	b.n	8008bd6 <_strtol_l.constprop.0+0x3a>
 8008c40:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008c44:	f1be 0f19 	cmp.w	lr, #25
 8008c48:	d801      	bhi.n	8008c4e <_strtol_l.constprop.0+0xb2>
 8008c4a:	3c37      	subs	r4, #55	; 0x37
 8008c4c:	e7e2      	b.n	8008c14 <_strtol_l.constprop.0+0x78>
 8008c4e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008c52:	f1be 0f19 	cmp.w	lr, #25
 8008c56:	d804      	bhi.n	8008c62 <_strtol_l.constprop.0+0xc6>
 8008c58:	3c57      	subs	r4, #87	; 0x57
 8008c5a:	e7db      	b.n	8008c14 <_strtol_l.constprop.0+0x78>
 8008c5c:	f04f 3cff 	mov.w	ip, #4294967295
 8008c60:	e7e6      	b.n	8008c30 <_strtol_l.constprop.0+0x94>
 8008c62:	f1bc 0f00 	cmp.w	ip, #0
 8008c66:	da05      	bge.n	8008c74 <_strtol_l.constprop.0+0xd8>
 8008c68:	2322      	movs	r3, #34	; 0x22
 8008c6a:	6003      	str	r3, [r0, #0]
 8008c6c:	4646      	mov	r6, r8
 8008c6e:	b942      	cbnz	r2, 8008c82 <_strtol_l.constprop.0+0xe6>
 8008c70:	4630      	mov	r0, r6
 8008c72:	e79e      	b.n	8008bb2 <_strtol_l.constprop.0+0x16>
 8008c74:	b107      	cbz	r7, 8008c78 <_strtol_l.constprop.0+0xdc>
 8008c76:	4276      	negs	r6, r6
 8008c78:	2a00      	cmp	r2, #0
 8008c7a:	d0f9      	beq.n	8008c70 <_strtol_l.constprop.0+0xd4>
 8008c7c:	f1bc 0f00 	cmp.w	ip, #0
 8008c80:	d000      	beq.n	8008c84 <_strtol_l.constprop.0+0xe8>
 8008c82:	1e69      	subs	r1, r5, #1
 8008c84:	6011      	str	r1, [r2, #0]
 8008c86:	e7f3      	b.n	8008c70 <_strtol_l.constprop.0+0xd4>
 8008c88:	2430      	movs	r4, #48	; 0x30
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1b1      	bne.n	8008bf2 <_strtol_l.constprop.0+0x56>
 8008c8e:	2308      	movs	r3, #8
 8008c90:	e7af      	b.n	8008bf2 <_strtol_l.constprop.0+0x56>
 8008c92:	2c30      	cmp	r4, #48	; 0x30
 8008c94:	d0a5      	beq.n	8008be2 <_strtol_l.constprop.0+0x46>
 8008c96:	230a      	movs	r3, #10
 8008c98:	e7ab      	b.n	8008bf2 <_strtol_l.constprop.0+0x56>
 8008c9a:	bf00      	nop
 8008c9c:	0800a2f9 	.word	0x0800a2f9

08008ca0 <strtol>:
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	460a      	mov	r2, r1
 8008ca4:	4601      	mov	r1, r0
 8008ca6:	4802      	ldr	r0, [pc, #8]	; (8008cb0 <strtol+0x10>)
 8008ca8:	6800      	ldr	r0, [r0, #0]
 8008caa:	f7ff bf77 	b.w	8008b9c <_strtol_l.constprop.0>
 8008cae:	bf00      	nop
 8008cb0:	200000a4 	.word	0x200000a4

08008cb4 <__swbuf_r>:
 8008cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb6:	460e      	mov	r6, r1
 8008cb8:	4614      	mov	r4, r2
 8008cba:	4605      	mov	r5, r0
 8008cbc:	b118      	cbz	r0, 8008cc6 <__swbuf_r+0x12>
 8008cbe:	6983      	ldr	r3, [r0, #24]
 8008cc0:	b90b      	cbnz	r3, 8008cc6 <__swbuf_r+0x12>
 8008cc2:	f000 f9ef 	bl	80090a4 <__sinit>
 8008cc6:	4b21      	ldr	r3, [pc, #132]	; (8008d4c <__swbuf_r+0x98>)
 8008cc8:	429c      	cmp	r4, r3
 8008cca:	d12b      	bne.n	8008d24 <__swbuf_r+0x70>
 8008ccc:	686c      	ldr	r4, [r5, #4]
 8008cce:	69a3      	ldr	r3, [r4, #24]
 8008cd0:	60a3      	str	r3, [r4, #8]
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	071a      	lsls	r2, r3, #28
 8008cd6:	d52f      	bpl.n	8008d38 <__swbuf_r+0x84>
 8008cd8:	6923      	ldr	r3, [r4, #16]
 8008cda:	b36b      	cbz	r3, 8008d38 <__swbuf_r+0x84>
 8008cdc:	6923      	ldr	r3, [r4, #16]
 8008cde:	6820      	ldr	r0, [r4, #0]
 8008ce0:	1ac0      	subs	r0, r0, r3
 8008ce2:	6963      	ldr	r3, [r4, #20]
 8008ce4:	b2f6      	uxtb	r6, r6
 8008ce6:	4283      	cmp	r3, r0
 8008ce8:	4637      	mov	r7, r6
 8008cea:	dc04      	bgt.n	8008cf6 <__swbuf_r+0x42>
 8008cec:	4621      	mov	r1, r4
 8008cee:	4628      	mov	r0, r5
 8008cf0:	f000 f944 	bl	8008f7c <_fflush_r>
 8008cf4:	bb30      	cbnz	r0, 8008d44 <__swbuf_r+0x90>
 8008cf6:	68a3      	ldr	r3, [r4, #8]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	60a3      	str	r3, [r4, #8]
 8008cfc:	6823      	ldr	r3, [r4, #0]
 8008cfe:	1c5a      	adds	r2, r3, #1
 8008d00:	6022      	str	r2, [r4, #0]
 8008d02:	701e      	strb	r6, [r3, #0]
 8008d04:	6963      	ldr	r3, [r4, #20]
 8008d06:	3001      	adds	r0, #1
 8008d08:	4283      	cmp	r3, r0
 8008d0a:	d004      	beq.n	8008d16 <__swbuf_r+0x62>
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	07db      	lsls	r3, r3, #31
 8008d10:	d506      	bpl.n	8008d20 <__swbuf_r+0x6c>
 8008d12:	2e0a      	cmp	r6, #10
 8008d14:	d104      	bne.n	8008d20 <__swbuf_r+0x6c>
 8008d16:	4621      	mov	r1, r4
 8008d18:	4628      	mov	r0, r5
 8008d1a:	f000 f92f 	bl	8008f7c <_fflush_r>
 8008d1e:	b988      	cbnz	r0, 8008d44 <__swbuf_r+0x90>
 8008d20:	4638      	mov	r0, r7
 8008d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d24:	4b0a      	ldr	r3, [pc, #40]	; (8008d50 <__swbuf_r+0x9c>)
 8008d26:	429c      	cmp	r4, r3
 8008d28:	d101      	bne.n	8008d2e <__swbuf_r+0x7a>
 8008d2a:	68ac      	ldr	r4, [r5, #8]
 8008d2c:	e7cf      	b.n	8008cce <__swbuf_r+0x1a>
 8008d2e:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <__swbuf_r+0xa0>)
 8008d30:	429c      	cmp	r4, r3
 8008d32:	bf08      	it	eq
 8008d34:	68ec      	ldreq	r4, [r5, #12]
 8008d36:	e7ca      	b.n	8008cce <__swbuf_r+0x1a>
 8008d38:	4621      	mov	r1, r4
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	f000 f80c 	bl	8008d58 <__swsetup_r>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d0cb      	beq.n	8008cdc <__swbuf_r+0x28>
 8008d44:	f04f 37ff 	mov.w	r7, #4294967295
 8008d48:	e7ea      	b.n	8008d20 <__swbuf_r+0x6c>
 8008d4a:	bf00      	nop
 8008d4c:	0800a41c 	.word	0x0800a41c
 8008d50:	0800a43c 	.word	0x0800a43c
 8008d54:	0800a3fc 	.word	0x0800a3fc

08008d58 <__swsetup_r>:
 8008d58:	4b32      	ldr	r3, [pc, #200]	; (8008e24 <__swsetup_r+0xcc>)
 8008d5a:	b570      	push	{r4, r5, r6, lr}
 8008d5c:	681d      	ldr	r5, [r3, #0]
 8008d5e:	4606      	mov	r6, r0
 8008d60:	460c      	mov	r4, r1
 8008d62:	b125      	cbz	r5, 8008d6e <__swsetup_r+0x16>
 8008d64:	69ab      	ldr	r3, [r5, #24]
 8008d66:	b913      	cbnz	r3, 8008d6e <__swsetup_r+0x16>
 8008d68:	4628      	mov	r0, r5
 8008d6a:	f000 f99b 	bl	80090a4 <__sinit>
 8008d6e:	4b2e      	ldr	r3, [pc, #184]	; (8008e28 <__swsetup_r+0xd0>)
 8008d70:	429c      	cmp	r4, r3
 8008d72:	d10f      	bne.n	8008d94 <__swsetup_r+0x3c>
 8008d74:	686c      	ldr	r4, [r5, #4]
 8008d76:	89a3      	ldrh	r3, [r4, #12]
 8008d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d7c:	0719      	lsls	r1, r3, #28
 8008d7e:	d42c      	bmi.n	8008dda <__swsetup_r+0x82>
 8008d80:	06dd      	lsls	r5, r3, #27
 8008d82:	d411      	bmi.n	8008da8 <__swsetup_r+0x50>
 8008d84:	2309      	movs	r3, #9
 8008d86:	6033      	str	r3, [r6, #0]
 8008d88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d8c:	81a3      	strh	r3, [r4, #12]
 8008d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d92:	e03e      	b.n	8008e12 <__swsetup_r+0xba>
 8008d94:	4b25      	ldr	r3, [pc, #148]	; (8008e2c <__swsetup_r+0xd4>)
 8008d96:	429c      	cmp	r4, r3
 8008d98:	d101      	bne.n	8008d9e <__swsetup_r+0x46>
 8008d9a:	68ac      	ldr	r4, [r5, #8]
 8008d9c:	e7eb      	b.n	8008d76 <__swsetup_r+0x1e>
 8008d9e:	4b24      	ldr	r3, [pc, #144]	; (8008e30 <__swsetup_r+0xd8>)
 8008da0:	429c      	cmp	r4, r3
 8008da2:	bf08      	it	eq
 8008da4:	68ec      	ldreq	r4, [r5, #12]
 8008da6:	e7e6      	b.n	8008d76 <__swsetup_r+0x1e>
 8008da8:	0758      	lsls	r0, r3, #29
 8008daa:	d512      	bpl.n	8008dd2 <__swsetup_r+0x7a>
 8008dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dae:	b141      	cbz	r1, 8008dc2 <__swsetup_r+0x6a>
 8008db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008db4:	4299      	cmp	r1, r3
 8008db6:	d002      	beq.n	8008dbe <__swsetup_r+0x66>
 8008db8:	4630      	mov	r0, r6
 8008dba:	f000 fa93 	bl	80092e4 <_free_r>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	6363      	str	r3, [r4, #52]	; 0x34
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008dc8:	81a3      	strh	r3, [r4, #12]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	6063      	str	r3, [r4, #4]
 8008dce:	6923      	ldr	r3, [r4, #16]
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	f043 0308 	orr.w	r3, r3, #8
 8008dd8:	81a3      	strh	r3, [r4, #12]
 8008dda:	6923      	ldr	r3, [r4, #16]
 8008ddc:	b94b      	cbnz	r3, 8008df2 <__swsetup_r+0x9a>
 8008dde:	89a3      	ldrh	r3, [r4, #12]
 8008de0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008de8:	d003      	beq.n	8008df2 <__swsetup_r+0x9a>
 8008dea:	4621      	mov	r1, r4
 8008dec:	4630      	mov	r0, r6
 8008dee:	f000 fa31 	bl	8009254 <__smakebuf_r>
 8008df2:	89a0      	ldrh	r0, [r4, #12]
 8008df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008df8:	f010 0301 	ands.w	r3, r0, #1
 8008dfc:	d00a      	beq.n	8008e14 <__swsetup_r+0xbc>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60a3      	str	r3, [r4, #8]
 8008e02:	6963      	ldr	r3, [r4, #20]
 8008e04:	425b      	negs	r3, r3
 8008e06:	61a3      	str	r3, [r4, #24]
 8008e08:	6923      	ldr	r3, [r4, #16]
 8008e0a:	b943      	cbnz	r3, 8008e1e <__swsetup_r+0xc6>
 8008e0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e10:	d1ba      	bne.n	8008d88 <__swsetup_r+0x30>
 8008e12:	bd70      	pop	{r4, r5, r6, pc}
 8008e14:	0781      	lsls	r1, r0, #30
 8008e16:	bf58      	it	pl
 8008e18:	6963      	ldrpl	r3, [r4, #20]
 8008e1a:	60a3      	str	r3, [r4, #8]
 8008e1c:	e7f4      	b.n	8008e08 <__swsetup_r+0xb0>
 8008e1e:	2000      	movs	r0, #0
 8008e20:	e7f7      	b.n	8008e12 <__swsetup_r+0xba>
 8008e22:	bf00      	nop
 8008e24:	200000a4 	.word	0x200000a4
 8008e28:	0800a41c 	.word	0x0800a41c
 8008e2c:	0800a43c 	.word	0x0800a43c
 8008e30:	0800a3fc 	.word	0x0800a3fc

08008e34 <__assert_func>:
 8008e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e36:	4614      	mov	r4, r2
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <__assert_func+0x2c>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4605      	mov	r5, r0
 8008e40:	68d8      	ldr	r0, [r3, #12]
 8008e42:	b14c      	cbz	r4, 8008e58 <__assert_func+0x24>
 8008e44:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <__assert_func+0x30>)
 8008e46:	9100      	str	r1, [sp, #0]
 8008e48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e4c:	4906      	ldr	r1, [pc, #24]	; (8008e68 <__assert_func+0x34>)
 8008e4e:	462b      	mov	r3, r5
 8008e50:	f000 f9a6 	bl	80091a0 <fiprintf>
 8008e54:	f000 ffd6 	bl	8009e04 <abort>
 8008e58:	4b04      	ldr	r3, [pc, #16]	; (8008e6c <__assert_func+0x38>)
 8008e5a:	461c      	mov	r4, r3
 8008e5c:	e7f3      	b.n	8008e46 <__assert_func+0x12>
 8008e5e:	bf00      	nop
 8008e60:	200000a4 	.word	0x200000a4
 8008e64:	0800a2bc 	.word	0x0800a2bc
 8008e68:	0800a2c9 	.word	0x0800a2c9
 8008e6c:	0800a2f7 	.word	0x0800a2f7

08008e70 <__sflush_r>:
 8008e70:	898a      	ldrh	r2, [r1, #12]
 8008e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e76:	4605      	mov	r5, r0
 8008e78:	0710      	lsls	r0, r2, #28
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	d458      	bmi.n	8008f30 <__sflush_r+0xc0>
 8008e7e:	684b      	ldr	r3, [r1, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	dc05      	bgt.n	8008e90 <__sflush_r+0x20>
 8008e84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	dc02      	bgt.n	8008e90 <__sflush_r+0x20>
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e92:	2e00      	cmp	r6, #0
 8008e94:	d0f9      	beq.n	8008e8a <__sflush_r+0x1a>
 8008e96:	2300      	movs	r3, #0
 8008e98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e9c:	682f      	ldr	r7, [r5, #0]
 8008e9e:	602b      	str	r3, [r5, #0]
 8008ea0:	d032      	beq.n	8008f08 <__sflush_r+0x98>
 8008ea2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	075a      	lsls	r2, r3, #29
 8008ea8:	d505      	bpl.n	8008eb6 <__sflush_r+0x46>
 8008eaa:	6863      	ldr	r3, [r4, #4]
 8008eac:	1ac0      	subs	r0, r0, r3
 8008eae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008eb0:	b10b      	cbz	r3, 8008eb6 <__sflush_r+0x46>
 8008eb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008eb4:	1ac0      	subs	r0, r0, r3
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	4602      	mov	r2, r0
 8008eba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ebc:	6a21      	ldr	r1, [r4, #32]
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	47b0      	blx	r6
 8008ec2:	1c43      	adds	r3, r0, #1
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	d106      	bne.n	8008ed6 <__sflush_r+0x66>
 8008ec8:	6829      	ldr	r1, [r5, #0]
 8008eca:	291d      	cmp	r1, #29
 8008ecc:	d82c      	bhi.n	8008f28 <__sflush_r+0xb8>
 8008ece:	4a2a      	ldr	r2, [pc, #168]	; (8008f78 <__sflush_r+0x108>)
 8008ed0:	40ca      	lsrs	r2, r1
 8008ed2:	07d6      	lsls	r6, r2, #31
 8008ed4:	d528      	bpl.n	8008f28 <__sflush_r+0xb8>
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	6062      	str	r2, [r4, #4]
 8008eda:	04d9      	lsls	r1, r3, #19
 8008edc:	6922      	ldr	r2, [r4, #16]
 8008ede:	6022      	str	r2, [r4, #0]
 8008ee0:	d504      	bpl.n	8008eec <__sflush_r+0x7c>
 8008ee2:	1c42      	adds	r2, r0, #1
 8008ee4:	d101      	bne.n	8008eea <__sflush_r+0x7a>
 8008ee6:	682b      	ldr	r3, [r5, #0]
 8008ee8:	b903      	cbnz	r3, 8008eec <__sflush_r+0x7c>
 8008eea:	6560      	str	r0, [r4, #84]	; 0x54
 8008eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eee:	602f      	str	r7, [r5, #0]
 8008ef0:	2900      	cmp	r1, #0
 8008ef2:	d0ca      	beq.n	8008e8a <__sflush_r+0x1a>
 8008ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ef8:	4299      	cmp	r1, r3
 8008efa:	d002      	beq.n	8008f02 <__sflush_r+0x92>
 8008efc:	4628      	mov	r0, r5
 8008efe:	f000 f9f1 	bl	80092e4 <_free_r>
 8008f02:	2000      	movs	r0, #0
 8008f04:	6360      	str	r0, [r4, #52]	; 0x34
 8008f06:	e7c1      	b.n	8008e8c <__sflush_r+0x1c>
 8008f08:	6a21      	ldr	r1, [r4, #32]
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	47b0      	blx	r6
 8008f10:	1c41      	adds	r1, r0, #1
 8008f12:	d1c7      	bne.n	8008ea4 <__sflush_r+0x34>
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0c4      	beq.n	8008ea4 <__sflush_r+0x34>
 8008f1a:	2b1d      	cmp	r3, #29
 8008f1c:	d001      	beq.n	8008f22 <__sflush_r+0xb2>
 8008f1e:	2b16      	cmp	r3, #22
 8008f20:	d101      	bne.n	8008f26 <__sflush_r+0xb6>
 8008f22:	602f      	str	r7, [r5, #0]
 8008f24:	e7b1      	b.n	8008e8a <__sflush_r+0x1a>
 8008f26:	89a3      	ldrh	r3, [r4, #12]
 8008f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f2c:	81a3      	strh	r3, [r4, #12]
 8008f2e:	e7ad      	b.n	8008e8c <__sflush_r+0x1c>
 8008f30:	690f      	ldr	r7, [r1, #16]
 8008f32:	2f00      	cmp	r7, #0
 8008f34:	d0a9      	beq.n	8008e8a <__sflush_r+0x1a>
 8008f36:	0793      	lsls	r3, r2, #30
 8008f38:	680e      	ldr	r6, [r1, #0]
 8008f3a:	bf08      	it	eq
 8008f3c:	694b      	ldreq	r3, [r1, #20]
 8008f3e:	600f      	str	r7, [r1, #0]
 8008f40:	bf18      	it	ne
 8008f42:	2300      	movne	r3, #0
 8008f44:	eba6 0807 	sub.w	r8, r6, r7
 8008f48:	608b      	str	r3, [r1, #8]
 8008f4a:	f1b8 0f00 	cmp.w	r8, #0
 8008f4e:	dd9c      	ble.n	8008e8a <__sflush_r+0x1a>
 8008f50:	6a21      	ldr	r1, [r4, #32]
 8008f52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f54:	4643      	mov	r3, r8
 8008f56:	463a      	mov	r2, r7
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b0      	blx	r6
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	dc06      	bgt.n	8008f6e <__sflush_r+0xfe>
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f66:	81a3      	strh	r3, [r4, #12]
 8008f68:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6c:	e78e      	b.n	8008e8c <__sflush_r+0x1c>
 8008f6e:	4407      	add	r7, r0
 8008f70:	eba8 0800 	sub.w	r8, r8, r0
 8008f74:	e7e9      	b.n	8008f4a <__sflush_r+0xda>
 8008f76:	bf00      	nop
 8008f78:	20400001 	.word	0x20400001

08008f7c <_fflush_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	690b      	ldr	r3, [r1, #16]
 8008f80:	4605      	mov	r5, r0
 8008f82:	460c      	mov	r4, r1
 8008f84:	b913      	cbnz	r3, 8008f8c <_fflush_r+0x10>
 8008f86:	2500      	movs	r5, #0
 8008f88:	4628      	mov	r0, r5
 8008f8a:	bd38      	pop	{r3, r4, r5, pc}
 8008f8c:	b118      	cbz	r0, 8008f96 <_fflush_r+0x1a>
 8008f8e:	6983      	ldr	r3, [r0, #24]
 8008f90:	b90b      	cbnz	r3, 8008f96 <_fflush_r+0x1a>
 8008f92:	f000 f887 	bl	80090a4 <__sinit>
 8008f96:	4b14      	ldr	r3, [pc, #80]	; (8008fe8 <_fflush_r+0x6c>)
 8008f98:	429c      	cmp	r4, r3
 8008f9a:	d11b      	bne.n	8008fd4 <_fflush_r+0x58>
 8008f9c:	686c      	ldr	r4, [r5, #4]
 8008f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d0ef      	beq.n	8008f86 <_fflush_r+0xa>
 8008fa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fa8:	07d0      	lsls	r0, r2, #31
 8008faa:	d404      	bmi.n	8008fb6 <_fflush_r+0x3a>
 8008fac:	0599      	lsls	r1, r3, #22
 8008fae:	d402      	bmi.n	8008fb6 <_fflush_r+0x3a>
 8008fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fb2:	f000 f927 	bl	8009204 <__retarget_lock_acquire_recursive>
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	4621      	mov	r1, r4
 8008fba:	f7ff ff59 	bl	8008e70 <__sflush_r>
 8008fbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fc0:	07da      	lsls	r2, r3, #31
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	d4e0      	bmi.n	8008f88 <_fflush_r+0xc>
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	059b      	lsls	r3, r3, #22
 8008fca:	d4dd      	bmi.n	8008f88 <_fflush_r+0xc>
 8008fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fce:	f000 f91a 	bl	8009206 <__retarget_lock_release_recursive>
 8008fd2:	e7d9      	b.n	8008f88 <_fflush_r+0xc>
 8008fd4:	4b05      	ldr	r3, [pc, #20]	; (8008fec <_fflush_r+0x70>)
 8008fd6:	429c      	cmp	r4, r3
 8008fd8:	d101      	bne.n	8008fde <_fflush_r+0x62>
 8008fda:	68ac      	ldr	r4, [r5, #8]
 8008fdc:	e7df      	b.n	8008f9e <_fflush_r+0x22>
 8008fde:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <_fflush_r+0x74>)
 8008fe0:	429c      	cmp	r4, r3
 8008fe2:	bf08      	it	eq
 8008fe4:	68ec      	ldreq	r4, [r5, #12]
 8008fe6:	e7da      	b.n	8008f9e <_fflush_r+0x22>
 8008fe8:	0800a41c 	.word	0x0800a41c
 8008fec:	0800a43c 	.word	0x0800a43c
 8008ff0:	0800a3fc 	.word	0x0800a3fc

08008ff4 <std>:
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	b510      	push	{r4, lr}
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	e9c0 3300 	strd	r3, r3, [r0]
 8008ffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009002:	6083      	str	r3, [r0, #8]
 8009004:	8181      	strh	r1, [r0, #12]
 8009006:	6643      	str	r3, [r0, #100]	; 0x64
 8009008:	81c2      	strh	r2, [r0, #14]
 800900a:	6183      	str	r3, [r0, #24]
 800900c:	4619      	mov	r1, r3
 800900e:	2208      	movs	r2, #8
 8009010:	305c      	adds	r0, #92	; 0x5c
 8009012:	f7ff fc9d 	bl	8008950 <memset>
 8009016:	4b05      	ldr	r3, [pc, #20]	; (800902c <std+0x38>)
 8009018:	6263      	str	r3, [r4, #36]	; 0x24
 800901a:	4b05      	ldr	r3, [pc, #20]	; (8009030 <std+0x3c>)
 800901c:	62a3      	str	r3, [r4, #40]	; 0x28
 800901e:	4b05      	ldr	r3, [pc, #20]	; (8009034 <std+0x40>)
 8009020:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009022:	4b05      	ldr	r3, [pc, #20]	; (8009038 <std+0x44>)
 8009024:	6224      	str	r4, [r4, #32]
 8009026:	6323      	str	r3, [r4, #48]	; 0x30
 8009028:	bd10      	pop	{r4, pc}
 800902a:	bf00      	nop
 800902c:	08009d59 	.word	0x08009d59
 8009030:	08009d7b 	.word	0x08009d7b
 8009034:	08009db3 	.word	0x08009db3
 8009038:	08009dd7 	.word	0x08009dd7

0800903c <_cleanup_r>:
 800903c:	4901      	ldr	r1, [pc, #4]	; (8009044 <_cleanup_r+0x8>)
 800903e:	f000 b8c1 	b.w	80091c4 <_fwalk_reent>
 8009042:	bf00      	nop
 8009044:	08008f7d 	.word	0x08008f7d

08009048 <__sfmoreglue>:
 8009048:	b570      	push	{r4, r5, r6, lr}
 800904a:	2268      	movs	r2, #104	; 0x68
 800904c:	1e4d      	subs	r5, r1, #1
 800904e:	4355      	muls	r5, r2
 8009050:	460e      	mov	r6, r1
 8009052:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009056:	f000 f9b1 	bl	80093bc <_malloc_r>
 800905a:	4604      	mov	r4, r0
 800905c:	b140      	cbz	r0, 8009070 <__sfmoreglue+0x28>
 800905e:	2100      	movs	r1, #0
 8009060:	e9c0 1600 	strd	r1, r6, [r0]
 8009064:	300c      	adds	r0, #12
 8009066:	60a0      	str	r0, [r4, #8]
 8009068:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800906c:	f7ff fc70 	bl	8008950 <memset>
 8009070:	4620      	mov	r0, r4
 8009072:	bd70      	pop	{r4, r5, r6, pc}

08009074 <__sfp_lock_acquire>:
 8009074:	4801      	ldr	r0, [pc, #4]	; (800907c <__sfp_lock_acquire+0x8>)
 8009076:	f000 b8c5 	b.w	8009204 <__retarget_lock_acquire_recursive>
 800907a:	bf00      	nop
 800907c:	20000409 	.word	0x20000409

08009080 <__sfp_lock_release>:
 8009080:	4801      	ldr	r0, [pc, #4]	; (8009088 <__sfp_lock_release+0x8>)
 8009082:	f000 b8c0 	b.w	8009206 <__retarget_lock_release_recursive>
 8009086:	bf00      	nop
 8009088:	20000409 	.word	0x20000409

0800908c <__sinit_lock_acquire>:
 800908c:	4801      	ldr	r0, [pc, #4]	; (8009094 <__sinit_lock_acquire+0x8>)
 800908e:	f000 b8b9 	b.w	8009204 <__retarget_lock_acquire_recursive>
 8009092:	bf00      	nop
 8009094:	2000040a 	.word	0x2000040a

08009098 <__sinit_lock_release>:
 8009098:	4801      	ldr	r0, [pc, #4]	; (80090a0 <__sinit_lock_release+0x8>)
 800909a:	f000 b8b4 	b.w	8009206 <__retarget_lock_release_recursive>
 800909e:	bf00      	nop
 80090a0:	2000040a 	.word	0x2000040a

080090a4 <__sinit>:
 80090a4:	b510      	push	{r4, lr}
 80090a6:	4604      	mov	r4, r0
 80090a8:	f7ff fff0 	bl	800908c <__sinit_lock_acquire>
 80090ac:	69a3      	ldr	r3, [r4, #24]
 80090ae:	b11b      	cbz	r3, 80090b8 <__sinit+0x14>
 80090b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090b4:	f7ff bff0 	b.w	8009098 <__sinit_lock_release>
 80090b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090bc:	6523      	str	r3, [r4, #80]	; 0x50
 80090be:	4b13      	ldr	r3, [pc, #76]	; (800910c <__sinit+0x68>)
 80090c0:	4a13      	ldr	r2, [pc, #76]	; (8009110 <__sinit+0x6c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80090c6:	42a3      	cmp	r3, r4
 80090c8:	bf04      	itt	eq
 80090ca:	2301      	moveq	r3, #1
 80090cc:	61a3      	streq	r3, [r4, #24]
 80090ce:	4620      	mov	r0, r4
 80090d0:	f000 f820 	bl	8009114 <__sfp>
 80090d4:	6060      	str	r0, [r4, #4]
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 f81c 	bl	8009114 <__sfp>
 80090dc:	60a0      	str	r0, [r4, #8]
 80090de:	4620      	mov	r0, r4
 80090e0:	f000 f818 	bl	8009114 <__sfp>
 80090e4:	2200      	movs	r2, #0
 80090e6:	60e0      	str	r0, [r4, #12]
 80090e8:	2104      	movs	r1, #4
 80090ea:	6860      	ldr	r0, [r4, #4]
 80090ec:	f7ff ff82 	bl	8008ff4 <std>
 80090f0:	68a0      	ldr	r0, [r4, #8]
 80090f2:	2201      	movs	r2, #1
 80090f4:	2109      	movs	r1, #9
 80090f6:	f7ff ff7d 	bl	8008ff4 <std>
 80090fa:	68e0      	ldr	r0, [r4, #12]
 80090fc:	2202      	movs	r2, #2
 80090fe:	2112      	movs	r1, #18
 8009100:	f7ff ff78 	bl	8008ff4 <std>
 8009104:	2301      	movs	r3, #1
 8009106:	61a3      	str	r3, [r4, #24]
 8009108:	e7d2      	b.n	80090b0 <__sinit+0xc>
 800910a:	bf00      	nop
 800910c:	0800a244 	.word	0x0800a244
 8009110:	0800903d 	.word	0x0800903d

08009114 <__sfp>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	4607      	mov	r7, r0
 8009118:	f7ff ffac 	bl	8009074 <__sfp_lock_acquire>
 800911c:	4b1e      	ldr	r3, [pc, #120]	; (8009198 <__sfp+0x84>)
 800911e:	681e      	ldr	r6, [r3, #0]
 8009120:	69b3      	ldr	r3, [r6, #24]
 8009122:	b913      	cbnz	r3, 800912a <__sfp+0x16>
 8009124:	4630      	mov	r0, r6
 8009126:	f7ff ffbd 	bl	80090a4 <__sinit>
 800912a:	3648      	adds	r6, #72	; 0x48
 800912c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009130:	3b01      	subs	r3, #1
 8009132:	d503      	bpl.n	800913c <__sfp+0x28>
 8009134:	6833      	ldr	r3, [r6, #0]
 8009136:	b30b      	cbz	r3, 800917c <__sfp+0x68>
 8009138:	6836      	ldr	r6, [r6, #0]
 800913a:	e7f7      	b.n	800912c <__sfp+0x18>
 800913c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009140:	b9d5      	cbnz	r5, 8009178 <__sfp+0x64>
 8009142:	4b16      	ldr	r3, [pc, #88]	; (800919c <__sfp+0x88>)
 8009144:	60e3      	str	r3, [r4, #12]
 8009146:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800914a:	6665      	str	r5, [r4, #100]	; 0x64
 800914c:	f000 f859 	bl	8009202 <__retarget_lock_init_recursive>
 8009150:	f7ff ff96 	bl	8009080 <__sfp_lock_release>
 8009154:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009158:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800915c:	6025      	str	r5, [r4, #0]
 800915e:	61a5      	str	r5, [r4, #24]
 8009160:	2208      	movs	r2, #8
 8009162:	4629      	mov	r1, r5
 8009164:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009168:	f7ff fbf2 	bl	8008950 <memset>
 800916c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009170:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009174:	4620      	mov	r0, r4
 8009176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009178:	3468      	adds	r4, #104	; 0x68
 800917a:	e7d9      	b.n	8009130 <__sfp+0x1c>
 800917c:	2104      	movs	r1, #4
 800917e:	4638      	mov	r0, r7
 8009180:	f7ff ff62 	bl	8009048 <__sfmoreglue>
 8009184:	4604      	mov	r4, r0
 8009186:	6030      	str	r0, [r6, #0]
 8009188:	2800      	cmp	r0, #0
 800918a:	d1d5      	bne.n	8009138 <__sfp+0x24>
 800918c:	f7ff ff78 	bl	8009080 <__sfp_lock_release>
 8009190:	230c      	movs	r3, #12
 8009192:	603b      	str	r3, [r7, #0]
 8009194:	e7ee      	b.n	8009174 <__sfp+0x60>
 8009196:	bf00      	nop
 8009198:	0800a244 	.word	0x0800a244
 800919c:	ffff0001 	.word	0xffff0001

080091a0 <fiprintf>:
 80091a0:	b40e      	push	{r1, r2, r3}
 80091a2:	b503      	push	{r0, r1, lr}
 80091a4:	4601      	mov	r1, r0
 80091a6:	ab03      	add	r3, sp, #12
 80091a8:	4805      	ldr	r0, [pc, #20]	; (80091c0 <fiprintf+0x20>)
 80091aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ae:	6800      	ldr	r0, [r0, #0]
 80091b0:	9301      	str	r3, [sp, #4]
 80091b2:	f000 fafd 	bl	80097b0 <_vfiprintf_r>
 80091b6:	b002      	add	sp, #8
 80091b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091bc:	b003      	add	sp, #12
 80091be:	4770      	bx	lr
 80091c0:	200000a4 	.word	0x200000a4

080091c4 <_fwalk_reent>:
 80091c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c8:	4606      	mov	r6, r0
 80091ca:	4688      	mov	r8, r1
 80091cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091d0:	2700      	movs	r7, #0
 80091d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091d6:	f1b9 0901 	subs.w	r9, r9, #1
 80091da:	d505      	bpl.n	80091e8 <_fwalk_reent+0x24>
 80091dc:	6824      	ldr	r4, [r4, #0]
 80091de:	2c00      	cmp	r4, #0
 80091e0:	d1f7      	bne.n	80091d2 <_fwalk_reent+0xe>
 80091e2:	4638      	mov	r0, r7
 80091e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e8:	89ab      	ldrh	r3, [r5, #12]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d907      	bls.n	80091fe <_fwalk_reent+0x3a>
 80091ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091f2:	3301      	adds	r3, #1
 80091f4:	d003      	beq.n	80091fe <_fwalk_reent+0x3a>
 80091f6:	4629      	mov	r1, r5
 80091f8:	4630      	mov	r0, r6
 80091fa:	47c0      	blx	r8
 80091fc:	4307      	orrs	r7, r0
 80091fe:	3568      	adds	r5, #104	; 0x68
 8009200:	e7e9      	b.n	80091d6 <_fwalk_reent+0x12>

08009202 <__retarget_lock_init_recursive>:
 8009202:	4770      	bx	lr

08009204 <__retarget_lock_acquire_recursive>:
 8009204:	4770      	bx	lr

08009206 <__retarget_lock_release_recursive>:
 8009206:	4770      	bx	lr

08009208 <__swhatbuf_r>:
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	460e      	mov	r6, r1
 800920c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009210:	2900      	cmp	r1, #0
 8009212:	b096      	sub	sp, #88	; 0x58
 8009214:	4614      	mov	r4, r2
 8009216:	461d      	mov	r5, r3
 8009218:	da08      	bge.n	800922c <__swhatbuf_r+0x24>
 800921a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	602a      	str	r2, [r5, #0]
 8009222:	061a      	lsls	r2, r3, #24
 8009224:	d410      	bmi.n	8009248 <__swhatbuf_r+0x40>
 8009226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800922a:	e00e      	b.n	800924a <__swhatbuf_r+0x42>
 800922c:	466a      	mov	r2, sp
 800922e:	f000 fe01 	bl	8009e34 <_fstat_r>
 8009232:	2800      	cmp	r0, #0
 8009234:	dbf1      	blt.n	800921a <__swhatbuf_r+0x12>
 8009236:	9a01      	ldr	r2, [sp, #4]
 8009238:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800923c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009240:	425a      	negs	r2, r3
 8009242:	415a      	adcs	r2, r3
 8009244:	602a      	str	r2, [r5, #0]
 8009246:	e7ee      	b.n	8009226 <__swhatbuf_r+0x1e>
 8009248:	2340      	movs	r3, #64	; 0x40
 800924a:	2000      	movs	r0, #0
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	b016      	add	sp, #88	; 0x58
 8009250:	bd70      	pop	{r4, r5, r6, pc}
	...

08009254 <__smakebuf_r>:
 8009254:	898b      	ldrh	r3, [r1, #12]
 8009256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009258:	079d      	lsls	r5, r3, #30
 800925a:	4606      	mov	r6, r0
 800925c:	460c      	mov	r4, r1
 800925e:	d507      	bpl.n	8009270 <__smakebuf_r+0x1c>
 8009260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	6123      	str	r3, [r4, #16]
 8009268:	2301      	movs	r3, #1
 800926a:	6163      	str	r3, [r4, #20]
 800926c:	b002      	add	sp, #8
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	ab01      	add	r3, sp, #4
 8009272:	466a      	mov	r2, sp
 8009274:	f7ff ffc8 	bl	8009208 <__swhatbuf_r>
 8009278:	9900      	ldr	r1, [sp, #0]
 800927a:	4605      	mov	r5, r0
 800927c:	4630      	mov	r0, r6
 800927e:	f000 f89d 	bl	80093bc <_malloc_r>
 8009282:	b948      	cbnz	r0, 8009298 <__smakebuf_r+0x44>
 8009284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009288:	059a      	lsls	r2, r3, #22
 800928a:	d4ef      	bmi.n	800926c <__smakebuf_r+0x18>
 800928c:	f023 0303 	bic.w	r3, r3, #3
 8009290:	f043 0302 	orr.w	r3, r3, #2
 8009294:	81a3      	strh	r3, [r4, #12]
 8009296:	e7e3      	b.n	8009260 <__smakebuf_r+0xc>
 8009298:	4b0d      	ldr	r3, [pc, #52]	; (80092d0 <__smakebuf_r+0x7c>)
 800929a:	62b3      	str	r3, [r6, #40]	; 0x28
 800929c:	89a3      	ldrh	r3, [r4, #12]
 800929e:	6020      	str	r0, [r4, #0]
 80092a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a4:	81a3      	strh	r3, [r4, #12]
 80092a6:	9b00      	ldr	r3, [sp, #0]
 80092a8:	6163      	str	r3, [r4, #20]
 80092aa:	9b01      	ldr	r3, [sp, #4]
 80092ac:	6120      	str	r0, [r4, #16]
 80092ae:	b15b      	cbz	r3, 80092c8 <__smakebuf_r+0x74>
 80092b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b4:	4630      	mov	r0, r6
 80092b6:	f000 fdcf 	bl	8009e58 <_isatty_r>
 80092ba:	b128      	cbz	r0, 80092c8 <__smakebuf_r+0x74>
 80092bc:	89a3      	ldrh	r3, [r4, #12]
 80092be:	f023 0303 	bic.w	r3, r3, #3
 80092c2:	f043 0301 	orr.w	r3, r3, #1
 80092c6:	81a3      	strh	r3, [r4, #12]
 80092c8:	89a0      	ldrh	r0, [r4, #12]
 80092ca:	4305      	orrs	r5, r0
 80092cc:	81a5      	strh	r5, [r4, #12]
 80092ce:	e7cd      	b.n	800926c <__smakebuf_r+0x18>
 80092d0:	0800903d 	.word	0x0800903d

080092d4 <malloc>:
 80092d4:	4b02      	ldr	r3, [pc, #8]	; (80092e0 <malloc+0xc>)
 80092d6:	4601      	mov	r1, r0
 80092d8:	6818      	ldr	r0, [r3, #0]
 80092da:	f000 b86f 	b.w	80093bc <_malloc_r>
 80092de:	bf00      	nop
 80092e0:	200000a4 	.word	0x200000a4

080092e4 <_free_r>:
 80092e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092e6:	2900      	cmp	r1, #0
 80092e8:	d044      	beq.n	8009374 <_free_r+0x90>
 80092ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092ee:	9001      	str	r0, [sp, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f1a1 0404 	sub.w	r4, r1, #4
 80092f6:	bfb8      	it	lt
 80092f8:	18e4      	addlt	r4, r4, r3
 80092fa:	f000 fdf7 	bl	8009eec <__malloc_lock>
 80092fe:	4a1e      	ldr	r2, [pc, #120]	; (8009378 <_free_r+0x94>)
 8009300:	9801      	ldr	r0, [sp, #4]
 8009302:	6813      	ldr	r3, [r2, #0]
 8009304:	b933      	cbnz	r3, 8009314 <_free_r+0x30>
 8009306:	6063      	str	r3, [r4, #4]
 8009308:	6014      	str	r4, [r2, #0]
 800930a:	b003      	add	sp, #12
 800930c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009310:	f000 bdf2 	b.w	8009ef8 <__malloc_unlock>
 8009314:	42a3      	cmp	r3, r4
 8009316:	d908      	bls.n	800932a <_free_r+0x46>
 8009318:	6825      	ldr	r5, [r4, #0]
 800931a:	1961      	adds	r1, r4, r5
 800931c:	428b      	cmp	r3, r1
 800931e:	bf01      	itttt	eq
 8009320:	6819      	ldreq	r1, [r3, #0]
 8009322:	685b      	ldreq	r3, [r3, #4]
 8009324:	1949      	addeq	r1, r1, r5
 8009326:	6021      	streq	r1, [r4, #0]
 8009328:	e7ed      	b.n	8009306 <_free_r+0x22>
 800932a:	461a      	mov	r2, r3
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	b10b      	cbz	r3, 8009334 <_free_r+0x50>
 8009330:	42a3      	cmp	r3, r4
 8009332:	d9fa      	bls.n	800932a <_free_r+0x46>
 8009334:	6811      	ldr	r1, [r2, #0]
 8009336:	1855      	adds	r5, r2, r1
 8009338:	42a5      	cmp	r5, r4
 800933a:	d10b      	bne.n	8009354 <_free_r+0x70>
 800933c:	6824      	ldr	r4, [r4, #0]
 800933e:	4421      	add	r1, r4
 8009340:	1854      	adds	r4, r2, r1
 8009342:	42a3      	cmp	r3, r4
 8009344:	6011      	str	r1, [r2, #0]
 8009346:	d1e0      	bne.n	800930a <_free_r+0x26>
 8009348:	681c      	ldr	r4, [r3, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	6053      	str	r3, [r2, #4]
 800934e:	4421      	add	r1, r4
 8009350:	6011      	str	r1, [r2, #0]
 8009352:	e7da      	b.n	800930a <_free_r+0x26>
 8009354:	d902      	bls.n	800935c <_free_r+0x78>
 8009356:	230c      	movs	r3, #12
 8009358:	6003      	str	r3, [r0, #0]
 800935a:	e7d6      	b.n	800930a <_free_r+0x26>
 800935c:	6825      	ldr	r5, [r4, #0]
 800935e:	1961      	adds	r1, r4, r5
 8009360:	428b      	cmp	r3, r1
 8009362:	bf04      	itt	eq
 8009364:	6819      	ldreq	r1, [r3, #0]
 8009366:	685b      	ldreq	r3, [r3, #4]
 8009368:	6063      	str	r3, [r4, #4]
 800936a:	bf04      	itt	eq
 800936c:	1949      	addeq	r1, r1, r5
 800936e:	6021      	streq	r1, [r4, #0]
 8009370:	6054      	str	r4, [r2, #4]
 8009372:	e7ca      	b.n	800930a <_free_r+0x26>
 8009374:	b003      	add	sp, #12
 8009376:	bd30      	pop	{r4, r5, pc}
 8009378:	2000040c 	.word	0x2000040c

0800937c <sbrk_aligned>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	4e0e      	ldr	r6, [pc, #56]	; (80093b8 <sbrk_aligned+0x3c>)
 8009380:	460c      	mov	r4, r1
 8009382:	6831      	ldr	r1, [r6, #0]
 8009384:	4605      	mov	r5, r0
 8009386:	b911      	cbnz	r1, 800938e <sbrk_aligned+0x12>
 8009388:	f000 fcd6 	bl	8009d38 <_sbrk_r>
 800938c:	6030      	str	r0, [r6, #0]
 800938e:	4621      	mov	r1, r4
 8009390:	4628      	mov	r0, r5
 8009392:	f000 fcd1 	bl	8009d38 <_sbrk_r>
 8009396:	1c43      	adds	r3, r0, #1
 8009398:	d00a      	beq.n	80093b0 <sbrk_aligned+0x34>
 800939a:	1cc4      	adds	r4, r0, #3
 800939c:	f024 0403 	bic.w	r4, r4, #3
 80093a0:	42a0      	cmp	r0, r4
 80093a2:	d007      	beq.n	80093b4 <sbrk_aligned+0x38>
 80093a4:	1a21      	subs	r1, r4, r0
 80093a6:	4628      	mov	r0, r5
 80093a8:	f000 fcc6 	bl	8009d38 <_sbrk_r>
 80093ac:	3001      	adds	r0, #1
 80093ae:	d101      	bne.n	80093b4 <sbrk_aligned+0x38>
 80093b0:	f04f 34ff 	mov.w	r4, #4294967295
 80093b4:	4620      	mov	r0, r4
 80093b6:	bd70      	pop	{r4, r5, r6, pc}
 80093b8:	20000410 	.word	0x20000410

080093bc <_malloc_r>:
 80093bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c0:	1ccd      	adds	r5, r1, #3
 80093c2:	f025 0503 	bic.w	r5, r5, #3
 80093c6:	3508      	adds	r5, #8
 80093c8:	2d0c      	cmp	r5, #12
 80093ca:	bf38      	it	cc
 80093cc:	250c      	movcc	r5, #12
 80093ce:	2d00      	cmp	r5, #0
 80093d0:	4607      	mov	r7, r0
 80093d2:	db01      	blt.n	80093d8 <_malloc_r+0x1c>
 80093d4:	42a9      	cmp	r1, r5
 80093d6:	d905      	bls.n	80093e4 <_malloc_r+0x28>
 80093d8:	230c      	movs	r3, #12
 80093da:	603b      	str	r3, [r7, #0]
 80093dc:	2600      	movs	r6, #0
 80093de:	4630      	mov	r0, r6
 80093e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e4:	4e2e      	ldr	r6, [pc, #184]	; (80094a0 <_malloc_r+0xe4>)
 80093e6:	f000 fd81 	bl	8009eec <__malloc_lock>
 80093ea:	6833      	ldr	r3, [r6, #0]
 80093ec:	461c      	mov	r4, r3
 80093ee:	bb34      	cbnz	r4, 800943e <_malloc_r+0x82>
 80093f0:	4629      	mov	r1, r5
 80093f2:	4638      	mov	r0, r7
 80093f4:	f7ff ffc2 	bl	800937c <sbrk_aligned>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	4604      	mov	r4, r0
 80093fc:	d14d      	bne.n	800949a <_malloc_r+0xde>
 80093fe:	6834      	ldr	r4, [r6, #0]
 8009400:	4626      	mov	r6, r4
 8009402:	2e00      	cmp	r6, #0
 8009404:	d140      	bne.n	8009488 <_malloc_r+0xcc>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	4631      	mov	r1, r6
 800940a:	4638      	mov	r0, r7
 800940c:	eb04 0803 	add.w	r8, r4, r3
 8009410:	f000 fc92 	bl	8009d38 <_sbrk_r>
 8009414:	4580      	cmp	r8, r0
 8009416:	d13a      	bne.n	800948e <_malloc_r+0xd2>
 8009418:	6821      	ldr	r1, [r4, #0]
 800941a:	3503      	adds	r5, #3
 800941c:	1a6d      	subs	r5, r5, r1
 800941e:	f025 0503 	bic.w	r5, r5, #3
 8009422:	3508      	adds	r5, #8
 8009424:	2d0c      	cmp	r5, #12
 8009426:	bf38      	it	cc
 8009428:	250c      	movcc	r5, #12
 800942a:	4629      	mov	r1, r5
 800942c:	4638      	mov	r0, r7
 800942e:	f7ff ffa5 	bl	800937c <sbrk_aligned>
 8009432:	3001      	adds	r0, #1
 8009434:	d02b      	beq.n	800948e <_malloc_r+0xd2>
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	442b      	add	r3, r5
 800943a:	6023      	str	r3, [r4, #0]
 800943c:	e00e      	b.n	800945c <_malloc_r+0xa0>
 800943e:	6822      	ldr	r2, [r4, #0]
 8009440:	1b52      	subs	r2, r2, r5
 8009442:	d41e      	bmi.n	8009482 <_malloc_r+0xc6>
 8009444:	2a0b      	cmp	r2, #11
 8009446:	d916      	bls.n	8009476 <_malloc_r+0xba>
 8009448:	1961      	adds	r1, r4, r5
 800944a:	42a3      	cmp	r3, r4
 800944c:	6025      	str	r5, [r4, #0]
 800944e:	bf18      	it	ne
 8009450:	6059      	strne	r1, [r3, #4]
 8009452:	6863      	ldr	r3, [r4, #4]
 8009454:	bf08      	it	eq
 8009456:	6031      	streq	r1, [r6, #0]
 8009458:	5162      	str	r2, [r4, r5]
 800945a:	604b      	str	r3, [r1, #4]
 800945c:	4638      	mov	r0, r7
 800945e:	f104 060b 	add.w	r6, r4, #11
 8009462:	f000 fd49 	bl	8009ef8 <__malloc_unlock>
 8009466:	f026 0607 	bic.w	r6, r6, #7
 800946a:	1d23      	adds	r3, r4, #4
 800946c:	1af2      	subs	r2, r6, r3
 800946e:	d0b6      	beq.n	80093de <_malloc_r+0x22>
 8009470:	1b9b      	subs	r3, r3, r6
 8009472:	50a3      	str	r3, [r4, r2]
 8009474:	e7b3      	b.n	80093de <_malloc_r+0x22>
 8009476:	6862      	ldr	r2, [r4, #4]
 8009478:	42a3      	cmp	r3, r4
 800947a:	bf0c      	ite	eq
 800947c:	6032      	streq	r2, [r6, #0]
 800947e:	605a      	strne	r2, [r3, #4]
 8009480:	e7ec      	b.n	800945c <_malloc_r+0xa0>
 8009482:	4623      	mov	r3, r4
 8009484:	6864      	ldr	r4, [r4, #4]
 8009486:	e7b2      	b.n	80093ee <_malloc_r+0x32>
 8009488:	4634      	mov	r4, r6
 800948a:	6876      	ldr	r6, [r6, #4]
 800948c:	e7b9      	b.n	8009402 <_malloc_r+0x46>
 800948e:	230c      	movs	r3, #12
 8009490:	603b      	str	r3, [r7, #0]
 8009492:	4638      	mov	r0, r7
 8009494:	f000 fd30 	bl	8009ef8 <__malloc_unlock>
 8009498:	e7a1      	b.n	80093de <_malloc_r+0x22>
 800949a:	6025      	str	r5, [r4, #0]
 800949c:	e7de      	b.n	800945c <_malloc_r+0xa0>
 800949e:	bf00      	nop
 80094a0:	2000040c 	.word	0x2000040c

080094a4 <__ssputs_r>:
 80094a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a8:	688e      	ldr	r6, [r1, #8]
 80094aa:	429e      	cmp	r6, r3
 80094ac:	4682      	mov	sl, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	4690      	mov	r8, r2
 80094b2:	461f      	mov	r7, r3
 80094b4:	d838      	bhi.n	8009528 <__ssputs_r+0x84>
 80094b6:	898a      	ldrh	r2, [r1, #12]
 80094b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094bc:	d032      	beq.n	8009524 <__ssputs_r+0x80>
 80094be:	6825      	ldr	r5, [r4, #0]
 80094c0:	6909      	ldr	r1, [r1, #16]
 80094c2:	eba5 0901 	sub.w	r9, r5, r1
 80094c6:	6965      	ldr	r5, [r4, #20]
 80094c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094d0:	3301      	adds	r3, #1
 80094d2:	444b      	add	r3, r9
 80094d4:	106d      	asrs	r5, r5, #1
 80094d6:	429d      	cmp	r5, r3
 80094d8:	bf38      	it	cc
 80094da:	461d      	movcc	r5, r3
 80094dc:	0553      	lsls	r3, r2, #21
 80094de:	d531      	bpl.n	8009544 <__ssputs_r+0xa0>
 80094e0:	4629      	mov	r1, r5
 80094e2:	f7ff ff6b 	bl	80093bc <_malloc_r>
 80094e6:	4606      	mov	r6, r0
 80094e8:	b950      	cbnz	r0, 8009500 <__ssputs_r+0x5c>
 80094ea:	230c      	movs	r3, #12
 80094ec:	f8ca 3000 	str.w	r3, [sl]
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f6:	81a3      	strh	r3, [r4, #12]
 80094f8:	f04f 30ff 	mov.w	r0, #4294967295
 80094fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009500:	6921      	ldr	r1, [r4, #16]
 8009502:	464a      	mov	r2, r9
 8009504:	f000 fcca 	bl	8009e9c <memcpy>
 8009508:	89a3      	ldrh	r3, [r4, #12]
 800950a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800950e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009512:	81a3      	strh	r3, [r4, #12]
 8009514:	6126      	str	r6, [r4, #16]
 8009516:	6165      	str	r5, [r4, #20]
 8009518:	444e      	add	r6, r9
 800951a:	eba5 0509 	sub.w	r5, r5, r9
 800951e:	6026      	str	r6, [r4, #0]
 8009520:	60a5      	str	r5, [r4, #8]
 8009522:	463e      	mov	r6, r7
 8009524:	42be      	cmp	r6, r7
 8009526:	d900      	bls.n	800952a <__ssputs_r+0x86>
 8009528:	463e      	mov	r6, r7
 800952a:	6820      	ldr	r0, [r4, #0]
 800952c:	4632      	mov	r2, r6
 800952e:	4641      	mov	r1, r8
 8009530:	f000 fcc2 	bl	8009eb8 <memmove>
 8009534:	68a3      	ldr	r3, [r4, #8]
 8009536:	1b9b      	subs	r3, r3, r6
 8009538:	60a3      	str	r3, [r4, #8]
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	4433      	add	r3, r6
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	2000      	movs	r0, #0
 8009542:	e7db      	b.n	80094fc <__ssputs_r+0x58>
 8009544:	462a      	mov	r2, r5
 8009546:	f000 fcdd 	bl	8009f04 <_realloc_r>
 800954a:	4606      	mov	r6, r0
 800954c:	2800      	cmp	r0, #0
 800954e:	d1e1      	bne.n	8009514 <__ssputs_r+0x70>
 8009550:	6921      	ldr	r1, [r4, #16]
 8009552:	4650      	mov	r0, sl
 8009554:	f7ff fec6 	bl	80092e4 <_free_r>
 8009558:	e7c7      	b.n	80094ea <__ssputs_r+0x46>
	...

0800955c <_svfiprintf_r>:
 800955c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009560:	4698      	mov	r8, r3
 8009562:	898b      	ldrh	r3, [r1, #12]
 8009564:	061b      	lsls	r3, r3, #24
 8009566:	b09d      	sub	sp, #116	; 0x74
 8009568:	4607      	mov	r7, r0
 800956a:	460d      	mov	r5, r1
 800956c:	4614      	mov	r4, r2
 800956e:	d50e      	bpl.n	800958e <_svfiprintf_r+0x32>
 8009570:	690b      	ldr	r3, [r1, #16]
 8009572:	b963      	cbnz	r3, 800958e <_svfiprintf_r+0x32>
 8009574:	2140      	movs	r1, #64	; 0x40
 8009576:	f7ff ff21 	bl	80093bc <_malloc_r>
 800957a:	6028      	str	r0, [r5, #0]
 800957c:	6128      	str	r0, [r5, #16]
 800957e:	b920      	cbnz	r0, 800958a <_svfiprintf_r+0x2e>
 8009580:	230c      	movs	r3, #12
 8009582:	603b      	str	r3, [r7, #0]
 8009584:	f04f 30ff 	mov.w	r0, #4294967295
 8009588:	e0d1      	b.n	800972e <_svfiprintf_r+0x1d2>
 800958a:	2340      	movs	r3, #64	; 0x40
 800958c:	616b      	str	r3, [r5, #20]
 800958e:	2300      	movs	r3, #0
 8009590:	9309      	str	r3, [sp, #36]	; 0x24
 8009592:	2320      	movs	r3, #32
 8009594:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009598:	f8cd 800c 	str.w	r8, [sp, #12]
 800959c:	2330      	movs	r3, #48	; 0x30
 800959e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009748 <_svfiprintf_r+0x1ec>
 80095a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095a6:	f04f 0901 	mov.w	r9, #1
 80095aa:	4623      	mov	r3, r4
 80095ac:	469a      	mov	sl, r3
 80095ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095b2:	b10a      	cbz	r2, 80095b8 <_svfiprintf_r+0x5c>
 80095b4:	2a25      	cmp	r2, #37	; 0x25
 80095b6:	d1f9      	bne.n	80095ac <_svfiprintf_r+0x50>
 80095b8:	ebba 0b04 	subs.w	fp, sl, r4
 80095bc:	d00b      	beq.n	80095d6 <_svfiprintf_r+0x7a>
 80095be:	465b      	mov	r3, fp
 80095c0:	4622      	mov	r2, r4
 80095c2:	4629      	mov	r1, r5
 80095c4:	4638      	mov	r0, r7
 80095c6:	f7ff ff6d 	bl	80094a4 <__ssputs_r>
 80095ca:	3001      	adds	r0, #1
 80095cc:	f000 80aa 	beq.w	8009724 <_svfiprintf_r+0x1c8>
 80095d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095d2:	445a      	add	r2, fp
 80095d4:	9209      	str	r2, [sp, #36]	; 0x24
 80095d6:	f89a 3000 	ldrb.w	r3, [sl]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 80a2 	beq.w	8009724 <_svfiprintf_r+0x1c8>
 80095e0:	2300      	movs	r3, #0
 80095e2:	f04f 32ff 	mov.w	r2, #4294967295
 80095e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ea:	f10a 0a01 	add.w	sl, sl, #1
 80095ee:	9304      	str	r3, [sp, #16]
 80095f0:	9307      	str	r3, [sp, #28]
 80095f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095f6:	931a      	str	r3, [sp, #104]	; 0x68
 80095f8:	4654      	mov	r4, sl
 80095fa:	2205      	movs	r2, #5
 80095fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009600:	4851      	ldr	r0, [pc, #324]	; (8009748 <_svfiprintf_r+0x1ec>)
 8009602:	f7f6 fe1d 	bl	8000240 <memchr>
 8009606:	9a04      	ldr	r2, [sp, #16]
 8009608:	b9d8      	cbnz	r0, 8009642 <_svfiprintf_r+0xe6>
 800960a:	06d0      	lsls	r0, r2, #27
 800960c:	bf44      	itt	mi
 800960e:	2320      	movmi	r3, #32
 8009610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009614:	0711      	lsls	r1, r2, #28
 8009616:	bf44      	itt	mi
 8009618:	232b      	movmi	r3, #43	; 0x2b
 800961a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800961e:	f89a 3000 	ldrb.w	r3, [sl]
 8009622:	2b2a      	cmp	r3, #42	; 0x2a
 8009624:	d015      	beq.n	8009652 <_svfiprintf_r+0xf6>
 8009626:	9a07      	ldr	r2, [sp, #28]
 8009628:	4654      	mov	r4, sl
 800962a:	2000      	movs	r0, #0
 800962c:	f04f 0c0a 	mov.w	ip, #10
 8009630:	4621      	mov	r1, r4
 8009632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009636:	3b30      	subs	r3, #48	; 0x30
 8009638:	2b09      	cmp	r3, #9
 800963a:	d94e      	bls.n	80096da <_svfiprintf_r+0x17e>
 800963c:	b1b0      	cbz	r0, 800966c <_svfiprintf_r+0x110>
 800963e:	9207      	str	r2, [sp, #28]
 8009640:	e014      	b.n	800966c <_svfiprintf_r+0x110>
 8009642:	eba0 0308 	sub.w	r3, r0, r8
 8009646:	fa09 f303 	lsl.w	r3, r9, r3
 800964a:	4313      	orrs	r3, r2
 800964c:	9304      	str	r3, [sp, #16]
 800964e:	46a2      	mov	sl, r4
 8009650:	e7d2      	b.n	80095f8 <_svfiprintf_r+0x9c>
 8009652:	9b03      	ldr	r3, [sp, #12]
 8009654:	1d19      	adds	r1, r3, #4
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	9103      	str	r1, [sp, #12]
 800965a:	2b00      	cmp	r3, #0
 800965c:	bfbb      	ittet	lt
 800965e:	425b      	neglt	r3, r3
 8009660:	f042 0202 	orrlt.w	r2, r2, #2
 8009664:	9307      	strge	r3, [sp, #28]
 8009666:	9307      	strlt	r3, [sp, #28]
 8009668:	bfb8      	it	lt
 800966a:	9204      	strlt	r2, [sp, #16]
 800966c:	7823      	ldrb	r3, [r4, #0]
 800966e:	2b2e      	cmp	r3, #46	; 0x2e
 8009670:	d10c      	bne.n	800968c <_svfiprintf_r+0x130>
 8009672:	7863      	ldrb	r3, [r4, #1]
 8009674:	2b2a      	cmp	r3, #42	; 0x2a
 8009676:	d135      	bne.n	80096e4 <_svfiprintf_r+0x188>
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	1d1a      	adds	r2, r3, #4
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	9203      	str	r2, [sp, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	bfb8      	it	lt
 8009684:	f04f 33ff 	movlt.w	r3, #4294967295
 8009688:	3402      	adds	r4, #2
 800968a:	9305      	str	r3, [sp, #20]
 800968c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009758 <_svfiprintf_r+0x1fc>
 8009690:	7821      	ldrb	r1, [r4, #0]
 8009692:	2203      	movs	r2, #3
 8009694:	4650      	mov	r0, sl
 8009696:	f7f6 fdd3 	bl	8000240 <memchr>
 800969a:	b140      	cbz	r0, 80096ae <_svfiprintf_r+0x152>
 800969c:	2340      	movs	r3, #64	; 0x40
 800969e:	eba0 000a 	sub.w	r0, r0, sl
 80096a2:	fa03 f000 	lsl.w	r0, r3, r0
 80096a6:	9b04      	ldr	r3, [sp, #16]
 80096a8:	4303      	orrs	r3, r0
 80096aa:	3401      	adds	r4, #1
 80096ac:	9304      	str	r3, [sp, #16]
 80096ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b2:	4826      	ldr	r0, [pc, #152]	; (800974c <_svfiprintf_r+0x1f0>)
 80096b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096b8:	2206      	movs	r2, #6
 80096ba:	f7f6 fdc1 	bl	8000240 <memchr>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d038      	beq.n	8009734 <_svfiprintf_r+0x1d8>
 80096c2:	4b23      	ldr	r3, [pc, #140]	; (8009750 <_svfiprintf_r+0x1f4>)
 80096c4:	bb1b      	cbnz	r3, 800970e <_svfiprintf_r+0x1b2>
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	3307      	adds	r3, #7
 80096ca:	f023 0307 	bic.w	r3, r3, #7
 80096ce:	3308      	adds	r3, #8
 80096d0:	9303      	str	r3, [sp, #12]
 80096d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d4:	4433      	add	r3, r6
 80096d6:	9309      	str	r3, [sp, #36]	; 0x24
 80096d8:	e767      	b.n	80095aa <_svfiprintf_r+0x4e>
 80096da:	fb0c 3202 	mla	r2, ip, r2, r3
 80096de:	460c      	mov	r4, r1
 80096e0:	2001      	movs	r0, #1
 80096e2:	e7a5      	b.n	8009630 <_svfiprintf_r+0xd4>
 80096e4:	2300      	movs	r3, #0
 80096e6:	3401      	adds	r4, #1
 80096e8:	9305      	str	r3, [sp, #20]
 80096ea:	4619      	mov	r1, r3
 80096ec:	f04f 0c0a 	mov.w	ip, #10
 80096f0:	4620      	mov	r0, r4
 80096f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096f6:	3a30      	subs	r2, #48	; 0x30
 80096f8:	2a09      	cmp	r2, #9
 80096fa:	d903      	bls.n	8009704 <_svfiprintf_r+0x1a8>
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d0c5      	beq.n	800968c <_svfiprintf_r+0x130>
 8009700:	9105      	str	r1, [sp, #20]
 8009702:	e7c3      	b.n	800968c <_svfiprintf_r+0x130>
 8009704:	fb0c 2101 	mla	r1, ip, r1, r2
 8009708:	4604      	mov	r4, r0
 800970a:	2301      	movs	r3, #1
 800970c:	e7f0      	b.n	80096f0 <_svfiprintf_r+0x194>
 800970e:	ab03      	add	r3, sp, #12
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	462a      	mov	r2, r5
 8009714:	4b0f      	ldr	r3, [pc, #60]	; (8009754 <_svfiprintf_r+0x1f8>)
 8009716:	a904      	add	r1, sp, #16
 8009718:	4638      	mov	r0, r7
 800971a:	f3af 8000 	nop.w
 800971e:	1c42      	adds	r2, r0, #1
 8009720:	4606      	mov	r6, r0
 8009722:	d1d6      	bne.n	80096d2 <_svfiprintf_r+0x176>
 8009724:	89ab      	ldrh	r3, [r5, #12]
 8009726:	065b      	lsls	r3, r3, #25
 8009728:	f53f af2c 	bmi.w	8009584 <_svfiprintf_r+0x28>
 800972c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800972e:	b01d      	add	sp, #116	; 0x74
 8009730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009734:	ab03      	add	r3, sp, #12
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	462a      	mov	r2, r5
 800973a:	4b06      	ldr	r3, [pc, #24]	; (8009754 <_svfiprintf_r+0x1f8>)
 800973c:	a904      	add	r1, sp, #16
 800973e:	4638      	mov	r0, r7
 8009740:	f000 f9d4 	bl	8009aec <_printf_i>
 8009744:	e7eb      	b.n	800971e <_svfiprintf_r+0x1c2>
 8009746:	bf00      	nop
 8009748:	0800a45c 	.word	0x0800a45c
 800974c:	0800a466 	.word	0x0800a466
 8009750:	00000000 	.word	0x00000000
 8009754:	080094a5 	.word	0x080094a5
 8009758:	0800a462 	.word	0x0800a462

0800975c <__sfputc_r>:
 800975c:	6893      	ldr	r3, [r2, #8]
 800975e:	3b01      	subs	r3, #1
 8009760:	2b00      	cmp	r3, #0
 8009762:	b410      	push	{r4}
 8009764:	6093      	str	r3, [r2, #8]
 8009766:	da08      	bge.n	800977a <__sfputc_r+0x1e>
 8009768:	6994      	ldr	r4, [r2, #24]
 800976a:	42a3      	cmp	r3, r4
 800976c:	db01      	blt.n	8009772 <__sfputc_r+0x16>
 800976e:	290a      	cmp	r1, #10
 8009770:	d103      	bne.n	800977a <__sfputc_r+0x1e>
 8009772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009776:	f7ff ba9d 	b.w	8008cb4 <__swbuf_r>
 800977a:	6813      	ldr	r3, [r2, #0]
 800977c:	1c58      	adds	r0, r3, #1
 800977e:	6010      	str	r0, [r2, #0]
 8009780:	7019      	strb	r1, [r3, #0]
 8009782:	4608      	mov	r0, r1
 8009784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009788:	4770      	bx	lr

0800978a <__sfputs_r>:
 800978a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978c:	4606      	mov	r6, r0
 800978e:	460f      	mov	r7, r1
 8009790:	4614      	mov	r4, r2
 8009792:	18d5      	adds	r5, r2, r3
 8009794:	42ac      	cmp	r4, r5
 8009796:	d101      	bne.n	800979c <__sfputs_r+0x12>
 8009798:	2000      	movs	r0, #0
 800979a:	e007      	b.n	80097ac <__sfputs_r+0x22>
 800979c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a0:	463a      	mov	r2, r7
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7ff ffda 	bl	800975c <__sfputc_r>
 80097a8:	1c43      	adds	r3, r0, #1
 80097aa:	d1f3      	bne.n	8009794 <__sfputs_r+0xa>
 80097ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097b0 <_vfiprintf_r>:
 80097b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	460d      	mov	r5, r1
 80097b6:	b09d      	sub	sp, #116	; 0x74
 80097b8:	4614      	mov	r4, r2
 80097ba:	4698      	mov	r8, r3
 80097bc:	4606      	mov	r6, r0
 80097be:	b118      	cbz	r0, 80097c8 <_vfiprintf_r+0x18>
 80097c0:	6983      	ldr	r3, [r0, #24]
 80097c2:	b90b      	cbnz	r3, 80097c8 <_vfiprintf_r+0x18>
 80097c4:	f7ff fc6e 	bl	80090a4 <__sinit>
 80097c8:	4b89      	ldr	r3, [pc, #548]	; (80099f0 <_vfiprintf_r+0x240>)
 80097ca:	429d      	cmp	r5, r3
 80097cc:	d11b      	bne.n	8009806 <_vfiprintf_r+0x56>
 80097ce:	6875      	ldr	r5, [r6, #4]
 80097d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d2:	07d9      	lsls	r1, r3, #31
 80097d4:	d405      	bmi.n	80097e2 <_vfiprintf_r+0x32>
 80097d6:	89ab      	ldrh	r3, [r5, #12]
 80097d8:	059a      	lsls	r2, r3, #22
 80097da:	d402      	bmi.n	80097e2 <_vfiprintf_r+0x32>
 80097dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097de:	f7ff fd11 	bl	8009204 <__retarget_lock_acquire_recursive>
 80097e2:	89ab      	ldrh	r3, [r5, #12]
 80097e4:	071b      	lsls	r3, r3, #28
 80097e6:	d501      	bpl.n	80097ec <_vfiprintf_r+0x3c>
 80097e8:	692b      	ldr	r3, [r5, #16]
 80097ea:	b9eb      	cbnz	r3, 8009828 <_vfiprintf_r+0x78>
 80097ec:	4629      	mov	r1, r5
 80097ee:	4630      	mov	r0, r6
 80097f0:	f7ff fab2 	bl	8008d58 <__swsetup_r>
 80097f4:	b1c0      	cbz	r0, 8009828 <_vfiprintf_r+0x78>
 80097f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097f8:	07dc      	lsls	r4, r3, #31
 80097fa:	d50e      	bpl.n	800981a <_vfiprintf_r+0x6a>
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009800:	b01d      	add	sp, #116	; 0x74
 8009802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009806:	4b7b      	ldr	r3, [pc, #492]	; (80099f4 <_vfiprintf_r+0x244>)
 8009808:	429d      	cmp	r5, r3
 800980a:	d101      	bne.n	8009810 <_vfiprintf_r+0x60>
 800980c:	68b5      	ldr	r5, [r6, #8]
 800980e:	e7df      	b.n	80097d0 <_vfiprintf_r+0x20>
 8009810:	4b79      	ldr	r3, [pc, #484]	; (80099f8 <_vfiprintf_r+0x248>)
 8009812:	429d      	cmp	r5, r3
 8009814:	bf08      	it	eq
 8009816:	68f5      	ldreq	r5, [r6, #12]
 8009818:	e7da      	b.n	80097d0 <_vfiprintf_r+0x20>
 800981a:	89ab      	ldrh	r3, [r5, #12]
 800981c:	0598      	lsls	r0, r3, #22
 800981e:	d4ed      	bmi.n	80097fc <_vfiprintf_r+0x4c>
 8009820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009822:	f7ff fcf0 	bl	8009206 <__retarget_lock_release_recursive>
 8009826:	e7e9      	b.n	80097fc <_vfiprintf_r+0x4c>
 8009828:	2300      	movs	r3, #0
 800982a:	9309      	str	r3, [sp, #36]	; 0x24
 800982c:	2320      	movs	r3, #32
 800982e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009832:	f8cd 800c 	str.w	r8, [sp, #12]
 8009836:	2330      	movs	r3, #48	; 0x30
 8009838:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80099fc <_vfiprintf_r+0x24c>
 800983c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009840:	f04f 0901 	mov.w	r9, #1
 8009844:	4623      	mov	r3, r4
 8009846:	469a      	mov	sl, r3
 8009848:	f813 2b01 	ldrb.w	r2, [r3], #1
 800984c:	b10a      	cbz	r2, 8009852 <_vfiprintf_r+0xa2>
 800984e:	2a25      	cmp	r2, #37	; 0x25
 8009850:	d1f9      	bne.n	8009846 <_vfiprintf_r+0x96>
 8009852:	ebba 0b04 	subs.w	fp, sl, r4
 8009856:	d00b      	beq.n	8009870 <_vfiprintf_r+0xc0>
 8009858:	465b      	mov	r3, fp
 800985a:	4622      	mov	r2, r4
 800985c:	4629      	mov	r1, r5
 800985e:	4630      	mov	r0, r6
 8009860:	f7ff ff93 	bl	800978a <__sfputs_r>
 8009864:	3001      	adds	r0, #1
 8009866:	f000 80aa 	beq.w	80099be <_vfiprintf_r+0x20e>
 800986a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800986c:	445a      	add	r2, fp
 800986e:	9209      	str	r2, [sp, #36]	; 0x24
 8009870:	f89a 3000 	ldrb.w	r3, [sl]
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 80a2 	beq.w	80099be <_vfiprintf_r+0x20e>
 800987a:	2300      	movs	r3, #0
 800987c:	f04f 32ff 	mov.w	r2, #4294967295
 8009880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009884:	f10a 0a01 	add.w	sl, sl, #1
 8009888:	9304      	str	r3, [sp, #16]
 800988a:	9307      	str	r3, [sp, #28]
 800988c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009890:	931a      	str	r3, [sp, #104]	; 0x68
 8009892:	4654      	mov	r4, sl
 8009894:	2205      	movs	r2, #5
 8009896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800989a:	4858      	ldr	r0, [pc, #352]	; (80099fc <_vfiprintf_r+0x24c>)
 800989c:	f7f6 fcd0 	bl	8000240 <memchr>
 80098a0:	9a04      	ldr	r2, [sp, #16]
 80098a2:	b9d8      	cbnz	r0, 80098dc <_vfiprintf_r+0x12c>
 80098a4:	06d1      	lsls	r1, r2, #27
 80098a6:	bf44      	itt	mi
 80098a8:	2320      	movmi	r3, #32
 80098aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ae:	0713      	lsls	r3, r2, #28
 80098b0:	bf44      	itt	mi
 80098b2:	232b      	movmi	r3, #43	; 0x2b
 80098b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098b8:	f89a 3000 	ldrb.w	r3, [sl]
 80098bc:	2b2a      	cmp	r3, #42	; 0x2a
 80098be:	d015      	beq.n	80098ec <_vfiprintf_r+0x13c>
 80098c0:	9a07      	ldr	r2, [sp, #28]
 80098c2:	4654      	mov	r4, sl
 80098c4:	2000      	movs	r0, #0
 80098c6:	f04f 0c0a 	mov.w	ip, #10
 80098ca:	4621      	mov	r1, r4
 80098cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098d0:	3b30      	subs	r3, #48	; 0x30
 80098d2:	2b09      	cmp	r3, #9
 80098d4:	d94e      	bls.n	8009974 <_vfiprintf_r+0x1c4>
 80098d6:	b1b0      	cbz	r0, 8009906 <_vfiprintf_r+0x156>
 80098d8:	9207      	str	r2, [sp, #28]
 80098da:	e014      	b.n	8009906 <_vfiprintf_r+0x156>
 80098dc:	eba0 0308 	sub.w	r3, r0, r8
 80098e0:	fa09 f303 	lsl.w	r3, r9, r3
 80098e4:	4313      	orrs	r3, r2
 80098e6:	9304      	str	r3, [sp, #16]
 80098e8:	46a2      	mov	sl, r4
 80098ea:	e7d2      	b.n	8009892 <_vfiprintf_r+0xe2>
 80098ec:	9b03      	ldr	r3, [sp, #12]
 80098ee:	1d19      	adds	r1, r3, #4
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	9103      	str	r1, [sp, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	bfbb      	ittet	lt
 80098f8:	425b      	neglt	r3, r3
 80098fa:	f042 0202 	orrlt.w	r2, r2, #2
 80098fe:	9307      	strge	r3, [sp, #28]
 8009900:	9307      	strlt	r3, [sp, #28]
 8009902:	bfb8      	it	lt
 8009904:	9204      	strlt	r2, [sp, #16]
 8009906:	7823      	ldrb	r3, [r4, #0]
 8009908:	2b2e      	cmp	r3, #46	; 0x2e
 800990a:	d10c      	bne.n	8009926 <_vfiprintf_r+0x176>
 800990c:	7863      	ldrb	r3, [r4, #1]
 800990e:	2b2a      	cmp	r3, #42	; 0x2a
 8009910:	d135      	bne.n	800997e <_vfiprintf_r+0x1ce>
 8009912:	9b03      	ldr	r3, [sp, #12]
 8009914:	1d1a      	adds	r2, r3, #4
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	9203      	str	r2, [sp, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	bfb8      	it	lt
 800991e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009922:	3402      	adds	r4, #2
 8009924:	9305      	str	r3, [sp, #20]
 8009926:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a0c <_vfiprintf_r+0x25c>
 800992a:	7821      	ldrb	r1, [r4, #0]
 800992c:	2203      	movs	r2, #3
 800992e:	4650      	mov	r0, sl
 8009930:	f7f6 fc86 	bl	8000240 <memchr>
 8009934:	b140      	cbz	r0, 8009948 <_vfiprintf_r+0x198>
 8009936:	2340      	movs	r3, #64	; 0x40
 8009938:	eba0 000a 	sub.w	r0, r0, sl
 800993c:	fa03 f000 	lsl.w	r0, r3, r0
 8009940:	9b04      	ldr	r3, [sp, #16]
 8009942:	4303      	orrs	r3, r0
 8009944:	3401      	adds	r4, #1
 8009946:	9304      	str	r3, [sp, #16]
 8009948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800994c:	482c      	ldr	r0, [pc, #176]	; (8009a00 <_vfiprintf_r+0x250>)
 800994e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009952:	2206      	movs	r2, #6
 8009954:	f7f6 fc74 	bl	8000240 <memchr>
 8009958:	2800      	cmp	r0, #0
 800995a:	d03f      	beq.n	80099dc <_vfiprintf_r+0x22c>
 800995c:	4b29      	ldr	r3, [pc, #164]	; (8009a04 <_vfiprintf_r+0x254>)
 800995e:	bb1b      	cbnz	r3, 80099a8 <_vfiprintf_r+0x1f8>
 8009960:	9b03      	ldr	r3, [sp, #12]
 8009962:	3307      	adds	r3, #7
 8009964:	f023 0307 	bic.w	r3, r3, #7
 8009968:	3308      	adds	r3, #8
 800996a:	9303      	str	r3, [sp, #12]
 800996c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800996e:	443b      	add	r3, r7
 8009970:	9309      	str	r3, [sp, #36]	; 0x24
 8009972:	e767      	b.n	8009844 <_vfiprintf_r+0x94>
 8009974:	fb0c 3202 	mla	r2, ip, r2, r3
 8009978:	460c      	mov	r4, r1
 800997a:	2001      	movs	r0, #1
 800997c:	e7a5      	b.n	80098ca <_vfiprintf_r+0x11a>
 800997e:	2300      	movs	r3, #0
 8009980:	3401      	adds	r4, #1
 8009982:	9305      	str	r3, [sp, #20]
 8009984:	4619      	mov	r1, r3
 8009986:	f04f 0c0a 	mov.w	ip, #10
 800998a:	4620      	mov	r0, r4
 800998c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009990:	3a30      	subs	r2, #48	; 0x30
 8009992:	2a09      	cmp	r2, #9
 8009994:	d903      	bls.n	800999e <_vfiprintf_r+0x1ee>
 8009996:	2b00      	cmp	r3, #0
 8009998:	d0c5      	beq.n	8009926 <_vfiprintf_r+0x176>
 800999a:	9105      	str	r1, [sp, #20]
 800999c:	e7c3      	b.n	8009926 <_vfiprintf_r+0x176>
 800999e:	fb0c 2101 	mla	r1, ip, r1, r2
 80099a2:	4604      	mov	r4, r0
 80099a4:	2301      	movs	r3, #1
 80099a6:	e7f0      	b.n	800998a <_vfiprintf_r+0x1da>
 80099a8:	ab03      	add	r3, sp, #12
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	462a      	mov	r2, r5
 80099ae:	4b16      	ldr	r3, [pc, #88]	; (8009a08 <_vfiprintf_r+0x258>)
 80099b0:	a904      	add	r1, sp, #16
 80099b2:	4630      	mov	r0, r6
 80099b4:	f3af 8000 	nop.w
 80099b8:	4607      	mov	r7, r0
 80099ba:	1c78      	adds	r0, r7, #1
 80099bc:	d1d6      	bne.n	800996c <_vfiprintf_r+0x1bc>
 80099be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099c0:	07d9      	lsls	r1, r3, #31
 80099c2:	d405      	bmi.n	80099d0 <_vfiprintf_r+0x220>
 80099c4:	89ab      	ldrh	r3, [r5, #12]
 80099c6:	059a      	lsls	r2, r3, #22
 80099c8:	d402      	bmi.n	80099d0 <_vfiprintf_r+0x220>
 80099ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099cc:	f7ff fc1b 	bl	8009206 <__retarget_lock_release_recursive>
 80099d0:	89ab      	ldrh	r3, [r5, #12]
 80099d2:	065b      	lsls	r3, r3, #25
 80099d4:	f53f af12 	bmi.w	80097fc <_vfiprintf_r+0x4c>
 80099d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099da:	e711      	b.n	8009800 <_vfiprintf_r+0x50>
 80099dc:	ab03      	add	r3, sp, #12
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	462a      	mov	r2, r5
 80099e2:	4b09      	ldr	r3, [pc, #36]	; (8009a08 <_vfiprintf_r+0x258>)
 80099e4:	a904      	add	r1, sp, #16
 80099e6:	4630      	mov	r0, r6
 80099e8:	f000 f880 	bl	8009aec <_printf_i>
 80099ec:	e7e4      	b.n	80099b8 <_vfiprintf_r+0x208>
 80099ee:	bf00      	nop
 80099f0:	0800a41c 	.word	0x0800a41c
 80099f4:	0800a43c 	.word	0x0800a43c
 80099f8:	0800a3fc 	.word	0x0800a3fc
 80099fc:	0800a45c 	.word	0x0800a45c
 8009a00:	0800a466 	.word	0x0800a466
 8009a04:	00000000 	.word	0x00000000
 8009a08:	0800978b 	.word	0x0800978b
 8009a0c:	0800a462 	.word	0x0800a462

08009a10 <_printf_common>:
 8009a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a14:	4616      	mov	r6, r2
 8009a16:	4699      	mov	r9, r3
 8009a18:	688a      	ldr	r2, [r1, #8]
 8009a1a:	690b      	ldr	r3, [r1, #16]
 8009a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a20:	4293      	cmp	r3, r2
 8009a22:	bfb8      	it	lt
 8009a24:	4613      	movlt	r3, r2
 8009a26:	6033      	str	r3, [r6, #0]
 8009a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	b10a      	cbz	r2, 8009a36 <_printf_common+0x26>
 8009a32:	3301      	adds	r3, #1
 8009a34:	6033      	str	r3, [r6, #0]
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	0699      	lsls	r1, r3, #26
 8009a3a:	bf42      	ittt	mi
 8009a3c:	6833      	ldrmi	r3, [r6, #0]
 8009a3e:	3302      	addmi	r3, #2
 8009a40:	6033      	strmi	r3, [r6, #0]
 8009a42:	6825      	ldr	r5, [r4, #0]
 8009a44:	f015 0506 	ands.w	r5, r5, #6
 8009a48:	d106      	bne.n	8009a58 <_printf_common+0x48>
 8009a4a:	f104 0a19 	add.w	sl, r4, #25
 8009a4e:	68e3      	ldr	r3, [r4, #12]
 8009a50:	6832      	ldr	r2, [r6, #0]
 8009a52:	1a9b      	subs	r3, r3, r2
 8009a54:	42ab      	cmp	r3, r5
 8009a56:	dc26      	bgt.n	8009aa6 <_printf_common+0x96>
 8009a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a5c:	1e13      	subs	r3, r2, #0
 8009a5e:	6822      	ldr	r2, [r4, #0]
 8009a60:	bf18      	it	ne
 8009a62:	2301      	movne	r3, #1
 8009a64:	0692      	lsls	r2, r2, #26
 8009a66:	d42b      	bmi.n	8009ac0 <_printf_common+0xb0>
 8009a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	4638      	mov	r0, r7
 8009a70:	47c0      	blx	r8
 8009a72:	3001      	adds	r0, #1
 8009a74:	d01e      	beq.n	8009ab4 <_printf_common+0xa4>
 8009a76:	6823      	ldr	r3, [r4, #0]
 8009a78:	68e5      	ldr	r5, [r4, #12]
 8009a7a:	6832      	ldr	r2, [r6, #0]
 8009a7c:	f003 0306 	and.w	r3, r3, #6
 8009a80:	2b04      	cmp	r3, #4
 8009a82:	bf08      	it	eq
 8009a84:	1aad      	subeq	r5, r5, r2
 8009a86:	68a3      	ldr	r3, [r4, #8]
 8009a88:	6922      	ldr	r2, [r4, #16]
 8009a8a:	bf0c      	ite	eq
 8009a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a90:	2500      	movne	r5, #0
 8009a92:	4293      	cmp	r3, r2
 8009a94:	bfc4      	itt	gt
 8009a96:	1a9b      	subgt	r3, r3, r2
 8009a98:	18ed      	addgt	r5, r5, r3
 8009a9a:	2600      	movs	r6, #0
 8009a9c:	341a      	adds	r4, #26
 8009a9e:	42b5      	cmp	r5, r6
 8009aa0:	d11a      	bne.n	8009ad8 <_printf_common+0xc8>
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	e008      	b.n	8009ab8 <_printf_common+0xa8>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	4652      	mov	r2, sl
 8009aaa:	4649      	mov	r1, r9
 8009aac:	4638      	mov	r0, r7
 8009aae:	47c0      	blx	r8
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	d103      	bne.n	8009abc <_printf_common+0xac>
 8009ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009abc:	3501      	adds	r5, #1
 8009abe:	e7c6      	b.n	8009a4e <_printf_common+0x3e>
 8009ac0:	18e1      	adds	r1, r4, r3
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	2030      	movs	r0, #48	; 0x30
 8009ac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aca:	4422      	add	r2, r4
 8009acc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ad4:	3302      	adds	r3, #2
 8009ad6:	e7c7      	b.n	8009a68 <_printf_common+0x58>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	4622      	mov	r2, r4
 8009adc:	4649      	mov	r1, r9
 8009ade:	4638      	mov	r0, r7
 8009ae0:	47c0      	blx	r8
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	d0e6      	beq.n	8009ab4 <_printf_common+0xa4>
 8009ae6:	3601      	adds	r6, #1
 8009ae8:	e7d9      	b.n	8009a9e <_printf_common+0x8e>
	...

08009aec <_printf_i>:
 8009aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009af0:	7e0f      	ldrb	r7, [r1, #24]
 8009af2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009af4:	2f78      	cmp	r7, #120	; 0x78
 8009af6:	4691      	mov	r9, r2
 8009af8:	4680      	mov	r8, r0
 8009afa:	460c      	mov	r4, r1
 8009afc:	469a      	mov	sl, r3
 8009afe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b02:	d807      	bhi.n	8009b14 <_printf_i+0x28>
 8009b04:	2f62      	cmp	r7, #98	; 0x62
 8009b06:	d80a      	bhi.n	8009b1e <_printf_i+0x32>
 8009b08:	2f00      	cmp	r7, #0
 8009b0a:	f000 80d8 	beq.w	8009cbe <_printf_i+0x1d2>
 8009b0e:	2f58      	cmp	r7, #88	; 0x58
 8009b10:	f000 80a3 	beq.w	8009c5a <_printf_i+0x16e>
 8009b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b1c:	e03a      	b.n	8009b94 <_printf_i+0xa8>
 8009b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b22:	2b15      	cmp	r3, #21
 8009b24:	d8f6      	bhi.n	8009b14 <_printf_i+0x28>
 8009b26:	a101      	add	r1, pc, #4	; (adr r1, 8009b2c <_printf_i+0x40>)
 8009b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b2c:	08009b85 	.word	0x08009b85
 8009b30:	08009b99 	.word	0x08009b99
 8009b34:	08009b15 	.word	0x08009b15
 8009b38:	08009b15 	.word	0x08009b15
 8009b3c:	08009b15 	.word	0x08009b15
 8009b40:	08009b15 	.word	0x08009b15
 8009b44:	08009b99 	.word	0x08009b99
 8009b48:	08009b15 	.word	0x08009b15
 8009b4c:	08009b15 	.word	0x08009b15
 8009b50:	08009b15 	.word	0x08009b15
 8009b54:	08009b15 	.word	0x08009b15
 8009b58:	08009ca5 	.word	0x08009ca5
 8009b5c:	08009bc9 	.word	0x08009bc9
 8009b60:	08009c87 	.word	0x08009c87
 8009b64:	08009b15 	.word	0x08009b15
 8009b68:	08009b15 	.word	0x08009b15
 8009b6c:	08009cc7 	.word	0x08009cc7
 8009b70:	08009b15 	.word	0x08009b15
 8009b74:	08009bc9 	.word	0x08009bc9
 8009b78:	08009b15 	.word	0x08009b15
 8009b7c:	08009b15 	.word	0x08009b15
 8009b80:	08009c8f 	.word	0x08009c8f
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	1d1a      	adds	r2, r3, #4
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	602a      	str	r2, [r5, #0]
 8009b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b94:	2301      	movs	r3, #1
 8009b96:	e0a3      	b.n	8009ce0 <_printf_i+0x1f4>
 8009b98:	6820      	ldr	r0, [r4, #0]
 8009b9a:	6829      	ldr	r1, [r5, #0]
 8009b9c:	0606      	lsls	r6, r0, #24
 8009b9e:	f101 0304 	add.w	r3, r1, #4
 8009ba2:	d50a      	bpl.n	8009bba <_printf_i+0xce>
 8009ba4:	680e      	ldr	r6, [r1, #0]
 8009ba6:	602b      	str	r3, [r5, #0]
 8009ba8:	2e00      	cmp	r6, #0
 8009baa:	da03      	bge.n	8009bb4 <_printf_i+0xc8>
 8009bac:	232d      	movs	r3, #45	; 0x2d
 8009bae:	4276      	negs	r6, r6
 8009bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb4:	485e      	ldr	r0, [pc, #376]	; (8009d30 <_printf_i+0x244>)
 8009bb6:	230a      	movs	r3, #10
 8009bb8:	e019      	b.n	8009bee <_printf_i+0x102>
 8009bba:	680e      	ldr	r6, [r1, #0]
 8009bbc:	602b      	str	r3, [r5, #0]
 8009bbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009bc2:	bf18      	it	ne
 8009bc4:	b236      	sxthne	r6, r6
 8009bc6:	e7ef      	b.n	8009ba8 <_printf_i+0xbc>
 8009bc8:	682b      	ldr	r3, [r5, #0]
 8009bca:	6820      	ldr	r0, [r4, #0]
 8009bcc:	1d19      	adds	r1, r3, #4
 8009bce:	6029      	str	r1, [r5, #0]
 8009bd0:	0601      	lsls	r1, r0, #24
 8009bd2:	d501      	bpl.n	8009bd8 <_printf_i+0xec>
 8009bd4:	681e      	ldr	r6, [r3, #0]
 8009bd6:	e002      	b.n	8009bde <_printf_i+0xf2>
 8009bd8:	0646      	lsls	r6, r0, #25
 8009bda:	d5fb      	bpl.n	8009bd4 <_printf_i+0xe8>
 8009bdc:	881e      	ldrh	r6, [r3, #0]
 8009bde:	4854      	ldr	r0, [pc, #336]	; (8009d30 <_printf_i+0x244>)
 8009be0:	2f6f      	cmp	r7, #111	; 0x6f
 8009be2:	bf0c      	ite	eq
 8009be4:	2308      	moveq	r3, #8
 8009be6:	230a      	movne	r3, #10
 8009be8:	2100      	movs	r1, #0
 8009bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bee:	6865      	ldr	r5, [r4, #4]
 8009bf0:	60a5      	str	r5, [r4, #8]
 8009bf2:	2d00      	cmp	r5, #0
 8009bf4:	bfa2      	ittt	ge
 8009bf6:	6821      	ldrge	r1, [r4, #0]
 8009bf8:	f021 0104 	bicge.w	r1, r1, #4
 8009bfc:	6021      	strge	r1, [r4, #0]
 8009bfe:	b90e      	cbnz	r6, 8009c04 <_printf_i+0x118>
 8009c00:	2d00      	cmp	r5, #0
 8009c02:	d04d      	beq.n	8009ca0 <_printf_i+0x1b4>
 8009c04:	4615      	mov	r5, r2
 8009c06:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c0a:	fb03 6711 	mls	r7, r3, r1, r6
 8009c0e:	5dc7      	ldrb	r7, [r0, r7]
 8009c10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c14:	4637      	mov	r7, r6
 8009c16:	42bb      	cmp	r3, r7
 8009c18:	460e      	mov	r6, r1
 8009c1a:	d9f4      	bls.n	8009c06 <_printf_i+0x11a>
 8009c1c:	2b08      	cmp	r3, #8
 8009c1e:	d10b      	bne.n	8009c38 <_printf_i+0x14c>
 8009c20:	6823      	ldr	r3, [r4, #0]
 8009c22:	07de      	lsls	r6, r3, #31
 8009c24:	d508      	bpl.n	8009c38 <_printf_i+0x14c>
 8009c26:	6923      	ldr	r3, [r4, #16]
 8009c28:	6861      	ldr	r1, [r4, #4]
 8009c2a:	4299      	cmp	r1, r3
 8009c2c:	bfde      	ittt	le
 8009c2e:	2330      	movle	r3, #48	; 0x30
 8009c30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c38:	1b52      	subs	r2, r2, r5
 8009c3a:	6122      	str	r2, [r4, #16]
 8009c3c:	f8cd a000 	str.w	sl, [sp]
 8009c40:	464b      	mov	r3, r9
 8009c42:	aa03      	add	r2, sp, #12
 8009c44:	4621      	mov	r1, r4
 8009c46:	4640      	mov	r0, r8
 8009c48:	f7ff fee2 	bl	8009a10 <_printf_common>
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	d14c      	bne.n	8009cea <_printf_i+0x1fe>
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295
 8009c54:	b004      	add	sp, #16
 8009c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c5a:	4835      	ldr	r0, [pc, #212]	; (8009d30 <_printf_i+0x244>)
 8009c5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c60:	6829      	ldr	r1, [r5, #0]
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c68:	6029      	str	r1, [r5, #0]
 8009c6a:	061d      	lsls	r5, r3, #24
 8009c6c:	d514      	bpl.n	8009c98 <_printf_i+0x1ac>
 8009c6e:	07df      	lsls	r7, r3, #31
 8009c70:	bf44      	itt	mi
 8009c72:	f043 0320 	orrmi.w	r3, r3, #32
 8009c76:	6023      	strmi	r3, [r4, #0]
 8009c78:	b91e      	cbnz	r6, 8009c82 <_printf_i+0x196>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	f023 0320 	bic.w	r3, r3, #32
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	2310      	movs	r3, #16
 8009c84:	e7b0      	b.n	8009be8 <_printf_i+0xfc>
 8009c86:	6823      	ldr	r3, [r4, #0]
 8009c88:	f043 0320 	orr.w	r3, r3, #32
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	2378      	movs	r3, #120	; 0x78
 8009c90:	4828      	ldr	r0, [pc, #160]	; (8009d34 <_printf_i+0x248>)
 8009c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c96:	e7e3      	b.n	8009c60 <_printf_i+0x174>
 8009c98:	0659      	lsls	r1, r3, #25
 8009c9a:	bf48      	it	mi
 8009c9c:	b2b6      	uxthmi	r6, r6
 8009c9e:	e7e6      	b.n	8009c6e <_printf_i+0x182>
 8009ca0:	4615      	mov	r5, r2
 8009ca2:	e7bb      	b.n	8009c1c <_printf_i+0x130>
 8009ca4:	682b      	ldr	r3, [r5, #0]
 8009ca6:	6826      	ldr	r6, [r4, #0]
 8009ca8:	6961      	ldr	r1, [r4, #20]
 8009caa:	1d18      	adds	r0, r3, #4
 8009cac:	6028      	str	r0, [r5, #0]
 8009cae:	0635      	lsls	r5, r6, #24
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	d501      	bpl.n	8009cb8 <_printf_i+0x1cc>
 8009cb4:	6019      	str	r1, [r3, #0]
 8009cb6:	e002      	b.n	8009cbe <_printf_i+0x1d2>
 8009cb8:	0670      	lsls	r0, r6, #25
 8009cba:	d5fb      	bpl.n	8009cb4 <_printf_i+0x1c8>
 8009cbc:	8019      	strh	r1, [r3, #0]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	6123      	str	r3, [r4, #16]
 8009cc2:	4615      	mov	r5, r2
 8009cc4:	e7ba      	b.n	8009c3c <_printf_i+0x150>
 8009cc6:	682b      	ldr	r3, [r5, #0]
 8009cc8:	1d1a      	adds	r2, r3, #4
 8009cca:	602a      	str	r2, [r5, #0]
 8009ccc:	681d      	ldr	r5, [r3, #0]
 8009cce:	6862      	ldr	r2, [r4, #4]
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f7f6 fab4 	bl	8000240 <memchr>
 8009cd8:	b108      	cbz	r0, 8009cde <_printf_i+0x1f2>
 8009cda:	1b40      	subs	r0, r0, r5
 8009cdc:	6060      	str	r0, [r4, #4]
 8009cde:	6863      	ldr	r3, [r4, #4]
 8009ce0:	6123      	str	r3, [r4, #16]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ce8:	e7a8      	b.n	8009c3c <_printf_i+0x150>
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	462a      	mov	r2, r5
 8009cee:	4649      	mov	r1, r9
 8009cf0:	4640      	mov	r0, r8
 8009cf2:	47d0      	blx	sl
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	d0ab      	beq.n	8009c50 <_printf_i+0x164>
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	079b      	lsls	r3, r3, #30
 8009cfc:	d413      	bmi.n	8009d26 <_printf_i+0x23a>
 8009cfe:	68e0      	ldr	r0, [r4, #12]
 8009d00:	9b03      	ldr	r3, [sp, #12]
 8009d02:	4298      	cmp	r0, r3
 8009d04:	bfb8      	it	lt
 8009d06:	4618      	movlt	r0, r3
 8009d08:	e7a4      	b.n	8009c54 <_printf_i+0x168>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	4649      	mov	r1, r9
 8009d10:	4640      	mov	r0, r8
 8009d12:	47d0      	blx	sl
 8009d14:	3001      	adds	r0, #1
 8009d16:	d09b      	beq.n	8009c50 <_printf_i+0x164>
 8009d18:	3501      	adds	r5, #1
 8009d1a:	68e3      	ldr	r3, [r4, #12]
 8009d1c:	9903      	ldr	r1, [sp, #12]
 8009d1e:	1a5b      	subs	r3, r3, r1
 8009d20:	42ab      	cmp	r3, r5
 8009d22:	dcf2      	bgt.n	8009d0a <_printf_i+0x21e>
 8009d24:	e7eb      	b.n	8009cfe <_printf_i+0x212>
 8009d26:	2500      	movs	r5, #0
 8009d28:	f104 0619 	add.w	r6, r4, #25
 8009d2c:	e7f5      	b.n	8009d1a <_printf_i+0x22e>
 8009d2e:	bf00      	nop
 8009d30:	0800a46d 	.word	0x0800a46d
 8009d34:	0800a47e 	.word	0x0800a47e

08009d38 <_sbrk_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	4d06      	ldr	r5, [pc, #24]	; (8009d54 <_sbrk_r+0x1c>)
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4604      	mov	r4, r0
 8009d40:	4608      	mov	r0, r1
 8009d42:	602b      	str	r3, [r5, #0]
 8009d44:	f7f7 fcda 	bl	80016fc <_sbrk>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d102      	bne.n	8009d52 <_sbrk_r+0x1a>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	b103      	cbz	r3, 8009d52 <_sbrk_r+0x1a>
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	bd38      	pop	{r3, r4, r5, pc}
 8009d54:	20000414 	.word	0x20000414

08009d58 <__sread>:
 8009d58:	b510      	push	{r4, lr}
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d60:	f000 f900 	bl	8009f64 <_read_r>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	bfab      	itete	ge
 8009d68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d6a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d6c:	181b      	addge	r3, r3, r0
 8009d6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d72:	bfac      	ite	ge
 8009d74:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d76:	81a3      	strhlt	r3, [r4, #12]
 8009d78:	bd10      	pop	{r4, pc}

08009d7a <__swrite>:
 8009d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7e:	461f      	mov	r7, r3
 8009d80:	898b      	ldrh	r3, [r1, #12]
 8009d82:	05db      	lsls	r3, r3, #23
 8009d84:	4605      	mov	r5, r0
 8009d86:	460c      	mov	r4, r1
 8009d88:	4616      	mov	r6, r2
 8009d8a:	d505      	bpl.n	8009d98 <__swrite+0x1e>
 8009d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d90:	2302      	movs	r3, #2
 8009d92:	2200      	movs	r2, #0
 8009d94:	f000 f870 	bl	8009e78 <_lseek_r>
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	4632      	mov	r2, r6
 8009da6:	463b      	mov	r3, r7
 8009da8:	4628      	mov	r0, r5
 8009daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dae:	f000 b817 	b.w	8009de0 <_write_r>

08009db2 <__sseek>:
 8009db2:	b510      	push	{r4, lr}
 8009db4:	460c      	mov	r4, r1
 8009db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dba:	f000 f85d 	bl	8009e78 <_lseek_r>
 8009dbe:	1c43      	adds	r3, r0, #1
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	bf15      	itete	ne
 8009dc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009dce:	81a3      	strheq	r3, [r4, #12]
 8009dd0:	bf18      	it	ne
 8009dd2:	81a3      	strhne	r3, [r4, #12]
 8009dd4:	bd10      	pop	{r4, pc}

08009dd6 <__sclose>:
 8009dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dda:	f000 b81b 	b.w	8009e14 <_close_r>
	...

08009de0 <_write_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	4d07      	ldr	r5, [pc, #28]	; (8009e00 <_write_r+0x20>)
 8009de4:	4604      	mov	r4, r0
 8009de6:	4608      	mov	r0, r1
 8009de8:	4611      	mov	r1, r2
 8009dea:	2200      	movs	r2, #0
 8009dec:	602a      	str	r2, [r5, #0]
 8009dee:	461a      	mov	r2, r3
 8009df0:	f7f7 fc33 	bl	800165a <_write>
 8009df4:	1c43      	adds	r3, r0, #1
 8009df6:	d102      	bne.n	8009dfe <_write_r+0x1e>
 8009df8:	682b      	ldr	r3, [r5, #0]
 8009dfa:	b103      	cbz	r3, 8009dfe <_write_r+0x1e>
 8009dfc:	6023      	str	r3, [r4, #0]
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	20000414 	.word	0x20000414

08009e04 <abort>:
 8009e04:	b508      	push	{r3, lr}
 8009e06:	2006      	movs	r0, #6
 8009e08:	f000 f8e6 	bl	8009fd8 <raise>
 8009e0c:	2001      	movs	r0, #1
 8009e0e:	f7f7 fbfd 	bl	800160c <_exit>
	...

08009e14 <_close_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4d06      	ldr	r5, [pc, #24]	; (8009e30 <_close_r+0x1c>)
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	602b      	str	r3, [r5, #0]
 8009e20:	f7f7 fc37 	bl	8001692 <_close>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_close_r+0x1a>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_close_r+0x1a>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	20000414 	.word	0x20000414

08009e34 <_fstat_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4d07      	ldr	r5, [pc, #28]	; (8009e54 <_fstat_r+0x20>)
 8009e38:	2300      	movs	r3, #0
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	4608      	mov	r0, r1
 8009e3e:	4611      	mov	r1, r2
 8009e40:	602b      	str	r3, [r5, #0]
 8009e42:	f7f7 fc32 	bl	80016aa <_fstat>
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	d102      	bne.n	8009e50 <_fstat_r+0x1c>
 8009e4a:	682b      	ldr	r3, [r5, #0]
 8009e4c:	b103      	cbz	r3, 8009e50 <_fstat_r+0x1c>
 8009e4e:	6023      	str	r3, [r4, #0]
 8009e50:	bd38      	pop	{r3, r4, r5, pc}
 8009e52:	bf00      	nop
 8009e54:	20000414 	.word	0x20000414

08009e58 <_isatty_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d06      	ldr	r5, [pc, #24]	; (8009e74 <_isatty_r+0x1c>)
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4604      	mov	r4, r0
 8009e60:	4608      	mov	r0, r1
 8009e62:	602b      	str	r3, [r5, #0]
 8009e64:	f7f7 fc31 	bl	80016ca <_isatty>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d102      	bne.n	8009e72 <_isatty_r+0x1a>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	b103      	cbz	r3, 8009e72 <_isatty_r+0x1a>
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	20000414 	.word	0x20000414

08009e78 <_lseek_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4d07      	ldr	r5, [pc, #28]	; (8009e98 <_lseek_r+0x20>)
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	4608      	mov	r0, r1
 8009e80:	4611      	mov	r1, r2
 8009e82:	2200      	movs	r2, #0
 8009e84:	602a      	str	r2, [r5, #0]
 8009e86:	461a      	mov	r2, r3
 8009e88:	f7f7 fc2a 	bl	80016e0 <_lseek>
 8009e8c:	1c43      	adds	r3, r0, #1
 8009e8e:	d102      	bne.n	8009e96 <_lseek_r+0x1e>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	b103      	cbz	r3, 8009e96 <_lseek_r+0x1e>
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	20000414 	.word	0x20000414

08009e9c <memcpy>:
 8009e9c:	440a      	add	r2, r1
 8009e9e:	4291      	cmp	r1, r2
 8009ea0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ea4:	d100      	bne.n	8009ea8 <memcpy+0xc>
 8009ea6:	4770      	bx	lr
 8009ea8:	b510      	push	{r4, lr}
 8009eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009eb2:	4291      	cmp	r1, r2
 8009eb4:	d1f9      	bne.n	8009eaa <memcpy+0xe>
 8009eb6:	bd10      	pop	{r4, pc}

08009eb8 <memmove>:
 8009eb8:	4288      	cmp	r0, r1
 8009eba:	b510      	push	{r4, lr}
 8009ebc:	eb01 0402 	add.w	r4, r1, r2
 8009ec0:	d902      	bls.n	8009ec8 <memmove+0x10>
 8009ec2:	4284      	cmp	r4, r0
 8009ec4:	4623      	mov	r3, r4
 8009ec6:	d807      	bhi.n	8009ed8 <memmove+0x20>
 8009ec8:	1e43      	subs	r3, r0, #1
 8009eca:	42a1      	cmp	r1, r4
 8009ecc:	d008      	beq.n	8009ee0 <memmove+0x28>
 8009ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ed6:	e7f8      	b.n	8009eca <memmove+0x12>
 8009ed8:	4402      	add	r2, r0
 8009eda:	4601      	mov	r1, r0
 8009edc:	428a      	cmp	r2, r1
 8009ede:	d100      	bne.n	8009ee2 <memmove+0x2a>
 8009ee0:	bd10      	pop	{r4, pc}
 8009ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eea:	e7f7      	b.n	8009edc <memmove+0x24>

08009eec <__malloc_lock>:
 8009eec:	4801      	ldr	r0, [pc, #4]	; (8009ef4 <__malloc_lock+0x8>)
 8009eee:	f7ff b989 	b.w	8009204 <__retarget_lock_acquire_recursive>
 8009ef2:	bf00      	nop
 8009ef4:	20000408 	.word	0x20000408

08009ef8 <__malloc_unlock>:
 8009ef8:	4801      	ldr	r0, [pc, #4]	; (8009f00 <__malloc_unlock+0x8>)
 8009efa:	f7ff b984 	b.w	8009206 <__retarget_lock_release_recursive>
 8009efe:	bf00      	nop
 8009f00:	20000408 	.word	0x20000408

08009f04 <_realloc_r>:
 8009f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f08:	4680      	mov	r8, r0
 8009f0a:	4614      	mov	r4, r2
 8009f0c:	460e      	mov	r6, r1
 8009f0e:	b921      	cbnz	r1, 8009f1a <_realloc_r+0x16>
 8009f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f14:	4611      	mov	r1, r2
 8009f16:	f7ff ba51 	b.w	80093bc <_malloc_r>
 8009f1a:	b92a      	cbnz	r2, 8009f28 <_realloc_r+0x24>
 8009f1c:	f7ff f9e2 	bl	80092e4 <_free_r>
 8009f20:	4625      	mov	r5, r4
 8009f22:	4628      	mov	r0, r5
 8009f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f28:	f000 f872 	bl	800a010 <_malloc_usable_size_r>
 8009f2c:	4284      	cmp	r4, r0
 8009f2e:	4607      	mov	r7, r0
 8009f30:	d802      	bhi.n	8009f38 <_realloc_r+0x34>
 8009f32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f36:	d812      	bhi.n	8009f5e <_realloc_r+0x5a>
 8009f38:	4621      	mov	r1, r4
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	f7ff fa3e 	bl	80093bc <_malloc_r>
 8009f40:	4605      	mov	r5, r0
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d0ed      	beq.n	8009f22 <_realloc_r+0x1e>
 8009f46:	42bc      	cmp	r4, r7
 8009f48:	4622      	mov	r2, r4
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	bf28      	it	cs
 8009f4e:	463a      	movcs	r2, r7
 8009f50:	f7ff ffa4 	bl	8009e9c <memcpy>
 8009f54:	4631      	mov	r1, r6
 8009f56:	4640      	mov	r0, r8
 8009f58:	f7ff f9c4 	bl	80092e4 <_free_r>
 8009f5c:	e7e1      	b.n	8009f22 <_realloc_r+0x1e>
 8009f5e:	4635      	mov	r5, r6
 8009f60:	e7df      	b.n	8009f22 <_realloc_r+0x1e>
	...

08009f64 <_read_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4d07      	ldr	r5, [pc, #28]	; (8009f84 <_read_r+0x20>)
 8009f68:	4604      	mov	r4, r0
 8009f6a:	4608      	mov	r0, r1
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	2200      	movs	r2, #0
 8009f70:	602a      	str	r2, [r5, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	f7f7 fb54 	bl	8001620 <_read>
 8009f78:	1c43      	adds	r3, r0, #1
 8009f7a:	d102      	bne.n	8009f82 <_read_r+0x1e>
 8009f7c:	682b      	ldr	r3, [r5, #0]
 8009f7e:	b103      	cbz	r3, 8009f82 <_read_r+0x1e>
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
 8009f84:	20000414 	.word	0x20000414

08009f88 <_raise_r>:
 8009f88:	291f      	cmp	r1, #31
 8009f8a:	b538      	push	{r3, r4, r5, lr}
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	460d      	mov	r5, r1
 8009f90:	d904      	bls.n	8009f9c <_raise_r+0x14>
 8009f92:	2316      	movs	r3, #22
 8009f94:	6003      	str	r3, [r0, #0]
 8009f96:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
 8009f9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f9e:	b112      	cbz	r2, 8009fa6 <_raise_r+0x1e>
 8009fa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fa4:	b94b      	cbnz	r3, 8009fba <_raise_r+0x32>
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f000 f830 	bl	800a00c <_getpid_r>
 8009fac:	462a      	mov	r2, r5
 8009fae:	4601      	mov	r1, r0
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fb6:	f000 b817 	b.w	8009fe8 <_kill_r>
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d00a      	beq.n	8009fd4 <_raise_r+0x4c>
 8009fbe:	1c59      	adds	r1, r3, #1
 8009fc0:	d103      	bne.n	8009fca <_raise_r+0x42>
 8009fc2:	2316      	movs	r3, #22
 8009fc4:	6003      	str	r3, [r0, #0]
 8009fc6:	2001      	movs	r0, #1
 8009fc8:	e7e7      	b.n	8009f9a <_raise_r+0x12>
 8009fca:	2400      	movs	r4, #0
 8009fcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	4798      	blx	r3
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	e7e0      	b.n	8009f9a <_raise_r+0x12>

08009fd8 <raise>:
 8009fd8:	4b02      	ldr	r3, [pc, #8]	; (8009fe4 <raise+0xc>)
 8009fda:	4601      	mov	r1, r0
 8009fdc:	6818      	ldr	r0, [r3, #0]
 8009fde:	f7ff bfd3 	b.w	8009f88 <_raise_r>
 8009fe2:	bf00      	nop
 8009fe4:	200000a4 	.word	0x200000a4

08009fe8 <_kill_r>:
 8009fe8:	b538      	push	{r3, r4, r5, lr}
 8009fea:	4d07      	ldr	r5, [pc, #28]	; (800a008 <_kill_r+0x20>)
 8009fec:	2300      	movs	r3, #0
 8009fee:	4604      	mov	r4, r0
 8009ff0:	4608      	mov	r0, r1
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	602b      	str	r3, [r5, #0]
 8009ff6:	f7f7 faf9 	bl	80015ec <_kill>
 8009ffa:	1c43      	adds	r3, r0, #1
 8009ffc:	d102      	bne.n	800a004 <_kill_r+0x1c>
 8009ffe:	682b      	ldr	r3, [r5, #0]
 800a000:	b103      	cbz	r3, 800a004 <_kill_r+0x1c>
 800a002:	6023      	str	r3, [r4, #0]
 800a004:	bd38      	pop	{r3, r4, r5, pc}
 800a006:	bf00      	nop
 800a008:	20000414 	.word	0x20000414

0800a00c <_getpid_r>:
 800a00c:	f7f7 bae6 	b.w	80015dc <_getpid>

0800a010 <_malloc_usable_size_r>:
 800a010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a014:	1f18      	subs	r0, r3, #4
 800a016:	2b00      	cmp	r3, #0
 800a018:	bfbc      	itt	lt
 800a01a:	580b      	ldrlt	r3, [r1, r0]
 800a01c:	18c0      	addlt	r0, r0, r3
 800a01e:	4770      	bx	lr

0800a020 <_init>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	bf00      	nop
 800a024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a026:	bc08      	pop	{r3}
 800a028:	469e      	mov	lr, r3
 800a02a:	4770      	bx	lr

0800a02c <_fini>:
 800a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02e:	bf00      	nop
 800a030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a032:	bc08      	pop	{r3}
 800a034:	469e      	mov	lr, r3
 800a036:	4770      	bx	lr
