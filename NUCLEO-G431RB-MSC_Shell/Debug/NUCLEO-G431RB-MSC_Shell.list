
NUCLEO-G431RB-MSC_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006df8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08006fd8  08006fd8  00016fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800728c  0800728c  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  0800728c  0800728c  0001728c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007294  08007294  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007294  08007294  00017294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007298  08007298  00017298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0800729c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000108  080073a4  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080073a4  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014860  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281f  00000000  00000000  00034998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  000371b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  000382d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f0ad  00000000  00000000  000392f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136fc  00000000  00000000  0005839d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7839  00000000  00000000  0006ba99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001332d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000544c  00000000  00000000  00133324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000108 	.word	0x20000108
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006fc0 	.word	0x08006fc0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000010c 	.word	0x2000010c
 800021c:	08006fc0 	.word	0x08006fc0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09e      	sub	sp, #120	; 0x78
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fd52 	bl	800109a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f903 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fa39 	bl	8000a70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f9eb 	bl	80009d8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000602:	f000 f949 	bl	8000898 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2224      	movs	r2, #36	; 0x24
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f005 fa11 	bl	8005a34 <memset>
  memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000616:	2240      	movs	r2, #64	; 0x40
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f005 fa0a 	bl	8005a34 <memset>
 8000620:	4b6a      	ldr	r3, [pc, #424]	; (80007cc <main+0x1e8>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
  memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
  memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000626:	2240      	movs	r2, #64	; 0x40
 8000628:	2100      	movs	r1, #0
 800062a:	4869      	ldr	r0, [pc, #420]	; (80007d0 <main+0x1ec>)
 800062c:	f005 fa02 	bl	8005a34 <memset>

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000630:	2201      	movs	r2, #1
 8000632:	4966      	ldr	r1, [pc, #408]	; (80007cc <main+0x1e8>)
 8000634:	4867      	ldr	r0, [pc, #412]	; (80007d4 <main+0x1f0>)
 8000636:	f003 fa6f 	bl	8003b18 <HAL_UART_Receive_IT>
  HAL_Delay(10);
 800063a:	200a      	movs	r0, #10
 800063c:	f000 fd64 	bl	8001108 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	2266      	movs	r2, #102	; 0x66
 8000646:	4964      	ldr	r1, [pc, #400]	; (80007d8 <main+0x1f4>)
 8000648:	4862      	ldr	r0, [pc, #392]	; (80007d4 <main+0x1f0>)
 800064a:	f003 f9cf 	bl	80039ec <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	2218      	movs	r2, #24
 8000654:	4961      	ldr	r1, [pc, #388]	; (80007dc <main+0x1f8>)
 8000656:	485f      	ldr	r0, [pc, #380]	; (80007d4 <main+0x1f0>)
 8000658:	f003 f9c8 	bl	80039ec <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // uartRxReceived is set to 1 when a new character is received on uart 1
	  	  if(uartRxReceived){
 800065c:	4b60      	ldr	r3, [pc, #384]	; (80007e0 <main+0x1fc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d058      	beq.n	8000716 <main+0x132>
	  		  switch(uartRxBuffer[0]){
 8000664:	4b59      	ldr	r3, [pc, #356]	; (80007cc <main+0x1e8>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b0d      	cmp	r3, #13
 800066a:	d002      	beq.n	8000672 <main+0x8e>
 800066c:	2b7f      	cmp	r3, #127	; 0x7f
 800066e:	d02f      	beq.n	80006d0 <main+0xec>
 8000670:	e03e      	b.n	80006f0 <main+0x10c>
	  		  // Nouvelle ligne, instruction à traiter
	  		  case ASCII_CR:
	  			  HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	2203      	movs	r2, #3
 8000678:	495a      	ldr	r1, [pc, #360]	; (80007e4 <main+0x200>)
 800067a:	4856      	ldr	r0, [pc, #344]	; (80007d4 <main+0x1f0>)
 800067c:	f003 f9b6 	bl	80039ec <HAL_UART_Transmit>
	  			  cmdBuffer[idx_cmd] = '\0';
 8000680:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000686:	4413      	add	r3, r2
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
	  			  argc = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	673b      	str	r3, [r7, #112]	; 0x70
	  			  token = strtok(cmdBuffer, " ");
 8000690:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000694:	4954      	ldr	r1, [pc, #336]	; (80007e8 <main+0x204>)
 8000696:	4618      	mov	r0, r3
 8000698:	f005 f9f4 	bl	8005a84 <strtok>
 800069c:	4603      	mov	r3, r0
 800069e:	66fb      	str	r3, [r7, #108]	; 0x6c
	  			  while(token!=NULL){
 80006a0:	e00e      	b.n	80006c0 <main+0xdc>
	  				  argv[argc++] = token;
 80006a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006a4:	1c5a      	adds	r2, r3, #1
 80006a6:	673a      	str	r2, [r7, #112]	; 0x70
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	3378      	adds	r3, #120	; 0x78
 80006ac:	443b      	add	r3, r7
 80006ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80006b0:	f843 2c74 	str.w	r2, [r3, #-116]
	  				  token = strtok(NULL, " ");
 80006b4:	494c      	ldr	r1, [pc, #304]	; (80007e8 <main+0x204>)
 80006b6:	2000      	movs	r0, #0
 80006b8:	f005 f9e4 	bl	8005a84 <strtok>
 80006bc:	4603      	mov	r3, r0
 80006be:	66fb      	str	r3, [r7, #108]	; 0x6c
	  			  while(token!=NULL){
 80006c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1ed      	bne.n	80006a2 <main+0xbe>
	  			  }

	  			  idx_cmd = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	677b      	str	r3, [r7, #116]	; 0x74
	  			  newCmdReady = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	66bb      	str	r3, [r7, #104]	; 0x68
	  			  break;
 80006ce:	e01f      	b.n	8000710 <main+0x12c>
	  		  // Suppression du dernier caractère
	  		  case ASCII_DEL:
	  			  cmdBuffer[idx_cmd--] = '\0';
 80006d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006d2:	1e5a      	subs	r2, r3, #1
 80006d4:	677a      	str	r2, [r7, #116]	; 0x74
 80006d6:	3378      	adds	r3, #120	; 0x78
 80006d8:	443b      	add	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	f803 2c50 	strb.w	r2, [r3, #-80]
	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	2201      	movs	r2, #1
 80006e6:	4939      	ldr	r1, [pc, #228]	; (80007cc <main+0x1e8>)
 80006e8:	483a      	ldr	r0, [pc, #232]	; (80007d4 <main+0x1f0>)
 80006ea:	f003 f97f 	bl	80039ec <HAL_UART_Transmit>
	  			  break;
 80006ee:	e00f      	b.n	8000710 <main+0x12c>
	  	      // Nouveau caractère
	  		  default:
	  			  cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80006f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	677a      	str	r2, [r7, #116]	; 0x74
 80006f6:	4a35      	ldr	r2, [pc, #212]	; (80007cc <main+0x1e8>)
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	3378      	adds	r3, #120	; 0x78
 80006fc:	443b      	add	r3, r7
 80006fe:	f803 2c50 	strb.w	r2, [r3, #-80]
	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	2201      	movs	r2, #1
 8000708:	4930      	ldr	r1, [pc, #192]	; (80007cc <main+0x1e8>)
 800070a:	4832      	ldr	r0, [pc, #200]	; (80007d4 <main+0x1f0>)
 800070c:	f003 f96e 	bl	80039ec <HAL_UART_Transmit>
	  		  }
	  		  uartRxReceived = 0;
 8000710:	4b33      	ldr	r3, [pc, #204]	; (80007e0 <main+0x1fc>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if(newCmdReady){
 8000716:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000718:	2b00      	cmp	r3, #0
 800071a:	d09f      	beq.n	800065c <main+0x78>
	  		  if(strcmp(argv[0],"set")==0){
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4933      	ldr	r1, [pc, #204]	; (80007ec <main+0x208>)
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fd7d 	bl	8000220 <strcmp>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d12d      	bne.n	8000788 <main+0x1a4>
	  			  if(strcmp(argv[1],"PA5")==0){
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	4930      	ldr	r1, [pc, #192]	; (80007f0 <main+0x20c>)
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd75 	bl	8000220 <strcmp>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d11d      	bne.n	8000778 <main+0x194>
	  				  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4618      	mov	r0, r3
 8000740:	f005 f94a 	bl	80059d8 <atoi>
 8000744:	4603      	mov	r3, r0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	2120      	movs	r1, #32
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f001 f81e 	bl	8001790 <HAL_GPIO_WritePin>
	  				  sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	4618      	mov	r0, r3
 8000758:	f005 f93e 	bl	80059d8 <atoi>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	4924      	ldr	r1, [pc, #144]	; (80007f4 <main+0x210>)
 8000762:	481b      	ldr	r0, [pc, #108]	; (80007d0 <main+0x1ec>)
 8000764:	f005 f96e 	bl	8005a44 <siprintf>
	  				  HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
 800076c:	2220      	movs	r2, #32
 800076e:	4918      	ldr	r1, [pc, #96]	; (80007d0 <main+0x1ec>)
 8000770:	4818      	ldr	r0, [pc, #96]	; (80007d4 <main+0x1f0>)
 8000772:	f003 f93b 	bl	80039ec <HAL_UART_Transmit>
 8000776:	e01e      	b.n	80007b6 <main+0x1d2>
	  			  }
	  			  else{
	  				  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	2214      	movs	r2, #20
 800077e:	491e      	ldr	r1, [pc, #120]	; (80007f8 <main+0x214>)
 8000780:	4814      	ldr	r0, [pc, #80]	; (80007d4 <main+0x1f0>)
 8000782:	f003 f933 	bl	80039ec <HAL_UART_Transmit>
 8000786:	e016      	b.n	80007b6 <main+0x1d2>
	  			  }
	  		  }
	  		  else if(strcmp(argv[0],"get")==0)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	491c      	ldr	r1, [pc, #112]	; (80007fc <main+0x218>)
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fd47 	bl	8000220 <strcmp>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d107      	bne.n	80007a8 <main+0x1c4>
	  		  {
	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000798:	f04f 33ff 	mov.w	r3, #4294967295
 800079c:	2214      	movs	r2, #20
 800079e:	4916      	ldr	r1, [pc, #88]	; (80007f8 <main+0x214>)
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <main+0x1f0>)
 80007a2:	f003 f923 	bl	80039ec <HAL_UART_Transmit>
 80007a6:	e006      	b.n	80007b6 <main+0x1d2>
	  		  }
	  		  else{
	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	2214      	movs	r2, #20
 80007ae:	4912      	ldr	r1, [pc, #72]	; (80007f8 <main+0x214>)
 80007b0:	4808      	ldr	r0, [pc, #32]	; (80007d4 <main+0x1f0>)
 80007b2:	f003 f91b 	bl	80039ec <HAL_UART_Transmit>
	  		  }
	  			  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	2218      	movs	r2, #24
 80007bc:	4907      	ldr	r1, [pc, #28]	; (80007dc <main+0x1f8>)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <main+0x1f0>)
 80007c0:	f003 f914 	bl	80039ec <HAL_UART_Transmit>
	  			  newCmdReady = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	66bb      	str	r3, [r7, #104]	; 0x68
	  	  if(uartRxReceived){
 80007c8:	e748      	b.n	800065c <main+0x78>
 80007ca:	bf00      	nop
 80007cc:	20000204 	.word	0x20000204
 80007d0:	20000208 	.word	0x20000208
 80007d4:	20000170 	.word	0x20000170
 80007d8:	20000018 	.word	0x20000018
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000200 	.word	0x20000200
 80007e4:	20000080 	.word	0x20000080
 80007e8:	08006fd8 	.word	0x08006fd8
 80007ec:	08006fdc 	.word	0x08006fdc
 80007f0:	08006fe0 	.word	0x08006fe0
 80007f4:	08006fe4 	.word	0x08006fe4
 80007f8:	20000084 	.word	0x20000084
 80007fc:	08007000 	.word	0x08007000

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0318 	add.w	r3, r7, #24
 800080a:	2238      	movs	r2, #56	; 0x38
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f005 f910 	bl	8005a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000822:	2000      	movs	r0, #0
 8000824:	f000 ffcc 	bl	80017c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000828:	2302      	movs	r3, #2
 800082a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000832:	2340      	movs	r3, #64	; 0x40
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800083a:	2302      	movs	r3, #2
 800083c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800083e:	2304      	movs	r3, #4
 8000840:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000842:	2355      	movs	r3, #85	; 0x55
 8000844:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000846:	2302      	movs	r3, #2
 8000848:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800084a:	2302      	movs	r3, #2
 800084c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800084e:	2302      	movs	r3, #2
 8000850:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0318 	add.w	r3, r7, #24
 8000856:	4618      	mov	r0, r3
 8000858:	f001 f856 	bl	8001908 <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000862:	f000 f987 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000866:	230f      	movs	r3, #15
 8000868:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2303      	movs	r3, #3
 800086c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2104      	movs	r1, #4
 800087e:	4618      	mov	r0, r3
 8000880:	f001 fb5a 	bl	8001f38 <HAL_RCC_ClockConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800088a:	f000 f973 	bl	8000b74 <Error_Handler>
  }
}
 800088e:	bf00      	nop
 8000890:	3750      	adds	r7, #80	; 0x50
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b098      	sub	sp, #96	; 0x60
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
 80008ba:	615a      	str	r2, [r3, #20]
 80008bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2234      	movs	r2, #52	; 0x34
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f005 f8b5 	bl	8005a34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008ca:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <MX_TIM1_Init+0x138>)
 80008cc:	4a41      	ldr	r2, [pc, #260]	; (80009d4 <MX_TIM1_Init+0x13c>)
 80008ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008d0:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <MX_TIM1_Init+0x138>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <MX_TIM1_Init+0x138>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008dc:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <MX_TIM1_Init+0x138>)
 80008de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e4:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <MX_TIM1_Init+0x138>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ea:	4b39      	ldr	r3, [pc, #228]	; (80009d0 <MX_TIM1_Init+0x138>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <MX_TIM1_Init+0x138>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008f6:	4836      	ldr	r0, [pc, #216]	; (80009d0 <MX_TIM1_Init+0x138>)
 80008f8:	f002 f828 	bl	800294c <HAL_TIM_PWM_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000902:	f000 f937 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000912:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000916:	4619      	mov	r1, r3
 8000918:	482d      	ldr	r0, [pc, #180]	; (80009d0 <MX_TIM1_Init+0x138>)
 800091a:	f002 feaf 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000924:	f000 f926 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000928:	2360      	movs	r3, #96	; 0x60
 800092a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000934:	2300      	movs	r3, #0
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000940:	2300      	movs	r3, #0
 8000942:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000944:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000948:	2200      	movs	r2, #0
 800094a:	4619      	mov	r1, r3
 800094c:	4820      	ldr	r0, [pc, #128]	; (80009d0 <MX_TIM1_Init+0x138>)
 800094e:	f002 f9d3 	bl	8002cf8 <HAL_TIM_PWM_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000958:	f000 f90c 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800095c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000960:	2204      	movs	r2, #4
 8000962:	4619      	mov	r1, r3
 8000964:	481a      	ldr	r0, [pc, #104]	; (80009d0 <MX_TIM1_Init+0x138>)
 8000966:	f002 f9c7 	bl	8002cf8 <HAL_TIM_PWM_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000970:	f000 f900 	bl	8000b74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800099a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	4807      	ldr	r0, [pc, #28]	; (80009d0 <MX_TIM1_Init+0x138>)
 80009b2:	f002 fee5 	bl	8003780 <HAL_TIMEx_ConfigBreakDeadTime>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80009bc:	f000 f8da 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009c0:	4803      	ldr	r0, [pc, #12]	; (80009d0 <MX_TIM1_Init+0x138>)
 80009c2:	f000 f921 	bl	8000c08 <HAL_TIM_MspPostInit>

}
 80009c6:	bf00      	nop
 80009c8:	3760      	adds	r7, #96	; 0x60
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000124 	.word	0x20000124
 80009d4:	40012c00 	.word	0x40012c00

080009d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_USART2_UART_Init+0x90>)
 80009de:	4a23      	ldr	r2, [pc, #140]	; (8000a6c <MX_USART2_UART_Init+0x94>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_USART2_UART_Init+0x90>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_USART2_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_USART2_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_USART2_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_USART2_UART_Init+0x90>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_USART2_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_USART2_UART_Init+0x90>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_USART2_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_USART2_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_USART2_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_USART2_UART_Init+0x90>)
 8000a22:	f002 ff93 	bl	800394c <HAL_UART_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a2c:	f000 f8a2 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_USART2_UART_Init+0x90>)
 8000a34:	f004 ff05 	bl	8005842 <HAL_UARTEx_SetTxFifoThreshold>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a3e:	f000 f899 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <MX_USART2_UART_Init+0x90>)
 8000a46:	f004 ff3a 	bl	80058be <HAL_UARTEx_SetRxFifoThreshold>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a50:	f000 f890 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_USART2_UART_Init+0x90>)
 8000a56:	f004 febb 	bl	80057d0 <HAL_UARTEx_DisableFifoMode>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a60:	f000 f888 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000170 	.word	0x20000170
 8000a6c:	40004400 	.word	0x40004400

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <MX_GPIO_Init+0xac>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4a24      	ldr	r2, [pc, #144]	; (8000b1c <MX_GPIO_Init+0xac>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_GPIO_Init+0xac>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_GPIO_Init+0xac>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4a1e      	ldr	r2, [pc, #120]	; (8000b1c <MX_GPIO_Init+0xac>)
 8000aa4:	f043 0320 	orr.w	r3, r3, #32
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_GPIO_Init+0xac>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f003 0320 	and.w	r3, r3, #32
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_GPIO_Init+0xac>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <MX_GPIO_Init+0xac>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_GPIO_Init+0xac>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad6:	f000 fe5b 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ade:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4619      	mov	r1, r3
 8000af0:	480b      	ldr	r0, [pc, #44]	; (8000b20 <MX_GPIO_Init+0xb0>)
 8000af2:	f000 fccb 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000af6:	2320      	movs	r3, #32
 8000af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f000 fcbc 	bl	800148c <HAL_GPIO_Init>

}
 8000b14:	bf00      	nop
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000800 	.word	0x48000800

08000b24 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_UART_RxCpltCallback+0x20>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000b32:	2201      	movs	r2, #1
 8000b34:	4904      	ldr	r1, [pc, #16]	; (8000b48 <HAL_UART_RxCpltCallback+0x24>)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <HAL_UART_RxCpltCallback+0x28>)
 8000b38:	f002 ffee 	bl	8003b18 <HAL_UART_Receive_IT>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000200 	.word	0x20000200
 8000b48:	20000204 	.word	0x20000204
 8000b4c:	20000170 	.word	0x20000170

08000b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b62:	f000 fab3 	bl	80010cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40001000 	.word	0x40001000

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6613      	str	r3, [r2, #96]	; 0x60
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_MspInit+0x44>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <HAL_MspInit+0x44>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_MspInit+0x44>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_TIM_PWM_MspInit+0x38>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d10b      	bne.n	8000bf2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_TIM_PWM_MspInit+0x3c>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <HAL_TIM_PWM_MspInit+0x3c>)
 8000be0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000be4:	6613      	str	r3, [r2, #96]	; 0x60
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <HAL_TIM_PWM_MspInit+0x3c>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40012c00 	.word	0x40012c00
 8000c04:	40021000 	.word	0x40021000

08000c08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <HAL_TIM_MspPostInit+0x68>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d11d      	bne.n	8000c66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_TIM_MspPostInit+0x6c>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <HAL_TIM_MspPostInit+0x6c>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_TIM_MspPostInit+0x6c>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000c42:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000c46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c54:	2306      	movs	r3, #6
 8000c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c62:	f000 fc13 	bl	800148c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40012c00 	.word	0x40012c00
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b09a      	sub	sp, #104	; 0x68
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	2244      	movs	r2, #68	; 0x44
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 fecb 	bl	8005a34 <memset>
  if(huart->Instance==USART2)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a23      	ldr	r2, [pc, #140]	; (8000d30 <HAL_UART_MspInit+0xb8>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d13e      	bne.n	8000d26 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 fb8d 	bl	80023d4 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc0:	f7ff ff58 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <HAL_UART_MspInit+0xbc>)
 8000cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	; (8000d34 <HAL_UART_MspInit+0xbc>)
 8000cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cce:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_UART_MspInit+0xbc>)
 8000cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_UART_MspInit+0xbc>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <HAL_UART_MspInit+0xbc>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_UART_MspInit+0xbc>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d04:	2307      	movs	r3, #7
 8000d06:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d12:	f000 fbbb 	bl	800148c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2026      	movs	r0, #38	; 0x26
 8000d1c:	f000 face 	bl	80012bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d20:	2026      	movs	r0, #38	; 0x26
 8000d22:	f000 fae5 	bl	80012f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3768      	adds	r7, #104	; 0x68
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40004400 	.word	0x40004400
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	; 0x30
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <HAL_InitTick+0xcc>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d52:	4a2c      	ldr	r2, [pc, #176]	; (8000e04 <HAL_InitTick+0xcc>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <HAL_InitTick+0xcc>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d66:	f107 020c 	add.w	r2, r7, #12
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 fab7 	bl	80022e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d76:	f001 fa89 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8000d7a:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7e:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <HAL_InitTick+0xd0>)
 8000d80:	fba2 2303 	umull	r2, r3, r2, r3
 8000d84:	0c9b      	lsrs	r3, r3, #18
 8000d86:	3b01      	subs	r3, #1
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <HAL_InitTick+0xd4>)
 8000d8c:	4a20      	ldr	r2, [pc, #128]	; (8000e10 <HAL_InitTick+0xd8>)
 8000d8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_InitTick+0xd4>)
 8000d92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d96:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d98:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <HAL_InitTick+0xd4>)
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <HAL_InitTick+0xd4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_InitTick+0xd4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000daa:	4818      	ldr	r0, [pc, #96]	; (8000e0c <HAL_InitTick+0xd4>)
 8000dac:	f001 fd02 	bl	80027b4 <HAL_TIM_Base_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000db6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d11b      	bne.n	8000df6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dbe:	4813      	ldr	r0, [pc, #76]	; (8000e0c <HAL_InitTick+0xd4>)
 8000dc0:	f001 fd5a 	bl	8002878 <HAL_TIM_Base_Start_IT>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d111      	bne.n	8000df6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dd2:	2036      	movs	r0, #54	; 0x36
 8000dd4:	f000 fa8c 	bl	80012f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b0f      	cmp	r3, #15
 8000ddc:	d808      	bhi.n	8000df0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dde:	2200      	movs	r2, #0
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	2036      	movs	r0, #54	; 0x36
 8000de4:	f000 fa6a 	bl	80012bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_InitTick+0xdc>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e002      	b.n	8000df6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000df6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3730      	adds	r7, #48	; 0x30
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	431bde83 	.word	0x431bde83
 8000e0c:	20000248 	.word	0x20000248
 8000e10:	40001000 	.word	0x40001000
 8000e14:	2000009c 	.word	0x2000009c

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <NMI_Handler+0x4>

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <USART2_IRQHandler+0x10>)
 8000e76:	f002 fea5 	bl	8003bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000170 	.word	0x20000170

08000e84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <TIM6_DAC_IRQHandler+0x10>)
 8000e8a:	f001 fdb6 	bl	80029fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000248 	.word	0x20000248

08000e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
	return 1;
 8000e9c:	2301      	movs	r3, #1
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <_kill>:

int _kill(int pid, int sig)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000eb2:	f004 fd95 	bl	80059e0 <__errno>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2216      	movs	r2, #22
 8000eba:	601a      	str	r2, [r3, #0]
	return -1;
 8000ebc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_exit>:

void _exit (int status)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ffe7 	bl	8000ea8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eda:	e7fe      	b.n	8000eda <_exit+0x12>

08000edc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	e00a      	b.n	8000f04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eee:	f3af 8000 	nop.w
 8000ef2:	4601      	mov	r1, r0
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	60ba      	str	r2, [r7, #8]
 8000efa:	b2ca      	uxtb	r2, r1
 8000efc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbf0      	blt.n	8000eee <_read+0x12>
	}

return len;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	e009      	b.n	8000f3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	60ba      	str	r2, [r7, #8]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf1      	blt.n	8000f28 <_write+0x12>
	}
	return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_close>:

int _close(int file)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	return -1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f76:	605a      	str	r2, [r3, #4]
	return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_isatty>:

int _isatty(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f004 fcfa 	bl	80059e0 <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220c      	movs	r2, #12
 8000ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20008000 	.word	0x20008000
 8001018:	00000400 	.word	0x00000400
 800101c:	20000294 	.word	0x20000294
 8001020:	200002b0 	.word	0x200002b0

08001024 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800104a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <LoopForever+0x6>)
  ldr r1, =_edata
 800104e:	490e      	ldr	r1, [pc, #56]	; (8001088 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <LoopForever+0xe>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001064:	4c0b      	ldr	r4, [pc, #44]	; (8001094 <LoopForever+0x16>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001072:	f7ff ffd7 	bl	8001024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001076:	f004 fcb9 	bl	80059ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800107a:	f7ff fab3 	bl	80005e4 <main>

0800107e <LoopForever>:

LoopForever:
    b LoopForever
 800107e:	e7fe      	b.n	800107e <LoopForever>
  ldr   r0, =_estack
 8001080:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 800108c:	0800729c 	.word	0x0800729c
  ldr r2, =_sbss
 8001090:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001094:	200002ac 	.word	0x200002ac

08001098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC1_2_IRQHandler>

0800109a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f8fe 	bl	80012a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010aa:	200f      	movs	r0, #15
 80010ac:	f7ff fe44 	bl	8000d38 <HAL_InitTick>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	e001      	b.n	80010c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010bc:	f7ff fd60 	bl	8000b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c0:	79fb      	ldrb	r3, [r7, #7]

}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <HAL_IncTick+0x1c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_IncTick+0x20>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4413      	add	r3, r2
 80010da:	4a03      	ldr	r2, [pc, #12]	; (80010e8 <HAL_IncTick+0x1c>)
 80010dc:	6013      	str	r3, [r2, #0]
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	20000298 	.word	0x20000298
 80010ec:	200000a0 	.word	0x200000a0

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000298 	.word	0x20000298

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffee 	bl	80010f0 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001120:	d004      	beq.n	800112c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_Delay+0x40>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	4413      	add	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800112c:	bf00      	nop
 800112e:	f7ff ffdf 	bl	80010f0 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	429a      	cmp	r2, r3
 800113c:	d8f7      	bhi.n	800112e <HAL_Delay+0x26>
  {
  }
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200000a0 	.word	0x200000a0

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117e:	4a04      	ldr	r2, [pc, #16]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	60d3      	str	r3, [r2, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	; (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <__NVIC_SetPriority+0x50>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ff4c 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ca:	f7ff ff63 	bl	8001194 <__NVIC_GetPriorityGrouping>
 80012ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	68b9      	ldr	r1, [r7, #8]
 80012d4:	6978      	ldr	r0, [r7, #20]
 80012d6:	f7ff ffb3 	bl	8001240 <NVIC_EncodePriority>
 80012da:	4602      	mov	r2, r0
 80012dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff82 	bl	80011ec <__NVIC_SetPriority>
}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff56 	bl	80011b0 <__NVIC_EnableIRQ>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d005      	beq.n	8001330 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2204      	movs	r2, #4
 8001328:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e037      	b.n	80013a0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 020e 	bic.w	r2, r2, #14
 800133e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800134a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800134e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	2101      	movs	r1, #1
 800136e:	fa01 f202 	lsl.w	r2, r1, r2
 8001372:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800137c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00c      	beq.n	80013a0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001394:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800139e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b084      	sub	sp, #16
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d00d      	beq.n	80013f2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2204      	movs	r2, #4
 80013da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	e047      	b.n	8001482 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 020e 	bic.w	r2, r2, #14
 8001400:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001420:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f003 021f 	and.w	r2, r3, #31
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	2101      	movs	r1, #1
 8001430:	fa01 f202 	lsl.w	r2, r1, r2
 8001434:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800143e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00c      	beq.n	8001462 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001452:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001456:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001460:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	4798      	blx	r3
    }
  }
  return status;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800149a:	e15a      	b.n	8001752 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2101      	movs	r1, #1
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 814c 	beq.w	800174c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d005      	beq.n	80014cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d130      	bne.n	800152e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001502:	2201      	movs	r2, #1
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	f003 0201 	and.w	r2, r3, #1
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b03      	cmp	r3, #3
 8001538:	d017      	beq.n	800156a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	2203      	movs	r2, #3
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d123      	bne.n	80015be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	08da      	lsrs	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3208      	adds	r2, #8
 800157e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	220f      	movs	r2, #15
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	691a      	ldr	r2, [r3, #16]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3208      	adds	r2, #8
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2203      	movs	r2, #3
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0203 	and.w	r2, r3, #3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 80a6 	beq.w	800174c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001600:	4b5b      	ldr	r3, [pc, #364]	; (8001770 <HAL_GPIO_Init+0x2e4>)
 8001602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001604:	4a5a      	ldr	r2, [pc, #360]	; (8001770 <HAL_GPIO_Init+0x2e4>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6613      	str	r3, [r2, #96]	; 0x60
 800160c:	4b58      	ldr	r3, [pc, #352]	; (8001770 <HAL_GPIO_Init+0x2e4>)
 800160e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001618:	4a56      	ldr	r2, [pc, #344]	; (8001774 <HAL_GPIO_Init+0x2e8>)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	3302      	adds	r3, #2
 8001620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	220f      	movs	r2, #15
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001642:	d01f      	beq.n	8001684 <HAL_GPIO_Init+0x1f8>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a4c      	ldr	r2, [pc, #304]	; (8001778 <HAL_GPIO_Init+0x2ec>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d019      	beq.n	8001680 <HAL_GPIO_Init+0x1f4>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a4b      	ldr	r2, [pc, #300]	; (800177c <HAL_GPIO_Init+0x2f0>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d013      	beq.n	800167c <HAL_GPIO_Init+0x1f0>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a4a      	ldr	r2, [pc, #296]	; (8001780 <HAL_GPIO_Init+0x2f4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d00d      	beq.n	8001678 <HAL_GPIO_Init+0x1ec>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a49      	ldr	r2, [pc, #292]	; (8001784 <HAL_GPIO_Init+0x2f8>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d007      	beq.n	8001674 <HAL_GPIO_Init+0x1e8>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a48      	ldr	r2, [pc, #288]	; (8001788 <HAL_GPIO_Init+0x2fc>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d101      	bne.n	8001670 <HAL_GPIO_Init+0x1e4>
 800166c:	2305      	movs	r3, #5
 800166e:	e00a      	b.n	8001686 <HAL_GPIO_Init+0x1fa>
 8001670:	2306      	movs	r3, #6
 8001672:	e008      	b.n	8001686 <HAL_GPIO_Init+0x1fa>
 8001674:	2304      	movs	r3, #4
 8001676:	e006      	b.n	8001686 <HAL_GPIO_Init+0x1fa>
 8001678:	2303      	movs	r3, #3
 800167a:	e004      	b.n	8001686 <HAL_GPIO_Init+0x1fa>
 800167c:	2302      	movs	r3, #2
 800167e:	e002      	b.n	8001686 <HAL_GPIO_Init+0x1fa>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <HAL_GPIO_Init+0x1fa>
 8001684:	2300      	movs	r3, #0
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	f002 0203 	and.w	r2, r2, #3
 800168c:	0092      	lsls	r2, r2, #2
 800168e:	4093      	lsls	r3, r2
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001696:	4937      	ldr	r1, [pc, #220]	; (8001774 <HAL_GPIO_Init+0x2e8>)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a4:	4b39      	ldr	r3, [pc, #228]	; (800178c <HAL_GPIO_Init+0x300>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c8:	4a30      	ldr	r2, [pc, #192]	; (800178c <HAL_GPIO_Init+0x300>)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ce:	4b2f      	ldr	r3, [pc, #188]	; (800178c <HAL_GPIO_Init+0x300>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016f2:	4a26      	ldr	r2, [pc, #152]	; (800178c <HAL_GPIO_Init+0x300>)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_GPIO_Init+0x300>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800171c:	4a1b      	ldr	r2, [pc, #108]	; (800178c <HAL_GPIO_Init+0x300>)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001722:	4b1a      	ldr	r3, [pc, #104]	; (800178c <HAL_GPIO_Init+0x300>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	43db      	mvns	r3, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001746:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_GPIO_Init+0x300>)
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3301      	adds	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	fa22 f303 	lsr.w	r3, r2, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	f47f ae9d 	bne.w	800149c <HAL_GPIO_Init+0x10>
  }
}
 8001762:	bf00      	nop
 8001764:	bf00      	nop
 8001766:	371c      	adds	r7, #28
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	40021000 	.word	0x40021000
 8001774:	40010000 	.word	0x40010000
 8001778:	48000400 	.word	0x48000400
 800177c:	48000800 	.word	0x48000800
 8001780:	48000c00 	.word	0x48000c00
 8001784:	48001000 	.word	0x48001000
 8001788:	48001400 	.word	0x48001400
 800178c:	40010400 	.word	0x40010400

08001790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
 800179c:	4613      	mov	r3, r2
 800179e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a0:	787b      	ldrb	r3, [r7, #1]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d141      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ce:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017da:	d131      	bne.n	8001840 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017dc:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017e2:	4a46      	ldr	r2, [pc, #280]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ec:	4b43      	ldr	r3, [pc, #268]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017f4:	4a41      	ldr	r2, [pc, #260]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017fc:	4b40      	ldr	r3, [pc, #256]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2232      	movs	r2, #50	; 0x32
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	4a3f      	ldr	r2, [pc, #252]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	0c9b      	lsrs	r3, r3, #18
 800180e:	3301      	adds	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001812:	e002      	b.n	800181a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3b01      	subs	r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800181a:	4b38      	ldr	r3, [pc, #224]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001826:	d102      	bne.n	800182e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f2      	bne.n	8001814 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800182e:	4b33      	ldr	r3, [pc, #204]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800183a:	d158      	bne.n	80018ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e057      	b.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001840:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001846:	4a2d      	ldr	r2, [pc, #180]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800184c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001850:	e04d      	b.n	80018ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001858:	d141      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800185a:	4b28      	ldr	r3, [pc, #160]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001866:	d131      	bne.n	80018cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186e:	4a23      	ldr	r2, [pc, #140]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001874:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001878:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001880:	4a1e      	ldr	r2, [pc, #120]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001886:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2232      	movs	r2, #50	; 0x32
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001894:	fba2 2303 	umull	r2, r3, r2, r3
 8001898:	0c9b      	lsrs	r3, r3, #18
 800189a:	3301      	adds	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800189e:	e002      	b.n	80018a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b2:	d102      	bne.n	80018ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f2      	bne.n	80018a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c6:	d112      	bne.n	80018ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e011      	b.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018dc:	e007      	b.n	80018ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40007000 	.word	0x40007000
 8001900:	20000098 	.word	0x20000098
 8001904:	431bde83 	.word	0x431bde83

08001908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e306      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d075      	beq.n	8001a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001926:	4b97      	ldr	r3, [pc, #604]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001930:	4b94      	ldr	r3, [pc, #592]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d102      	bne.n	8001946 <HAL_RCC_OscConfig+0x3e>
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2b03      	cmp	r3, #3
 8001944:	d002      	beq.n	800194c <HAL_RCC_OscConfig+0x44>
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2b08      	cmp	r3, #8
 800194a:	d10b      	bne.n	8001964 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	4b8d      	ldr	r3, [pc, #564]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d05b      	beq.n	8001a10 <HAL_RCC_OscConfig+0x108>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d157      	bne.n	8001a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e2e1      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d106      	bne.n	800197c <HAL_RCC_OscConfig+0x74>
 800196e:	4b85      	ldr	r3, [pc, #532]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a84      	ldr	r2, [pc, #528]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e01d      	b.n	80019b8 <HAL_RCC_OscConfig+0xb0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x98>
 8001986:	4b7f      	ldr	r3, [pc, #508]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a7e      	ldr	r2, [pc, #504]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 800198c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b7c      	ldr	r3, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7b      	ldr	r2, [pc, #492]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0xb0>
 80019a0:	4b78      	ldr	r3, [pc, #480]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a77      	ldr	r2, [pc, #476]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 80019a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b75      	ldr	r3, [pc, #468]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a74      	ldr	r2, [pc, #464]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 80019b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff fb96 	bl	80010f0 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff fb92 	bl	80010f0 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e2a6      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019da:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0xc0>
 80019e6:	e014      	b.n	8001a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff fb82 	bl	80010f0 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff fb7e 	bl	80010f0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e292      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a02:	4b60      	ldr	r3, [pc, #384]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0xe8>
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d075      	beq.n	8001b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a1e:	4b59      	ldr	r3, [pc, #356]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a28:	4b56      	ldr	r3, [pc, #344]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2b0c      	cmp	r3, #12
 8001a36:	d102      	bne.n	8001a3e <HAL_RCC_OscConfig+0x136>
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d002      	beq.n	8001a44 <HAL_RCC_OscConfig+0x13c>
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d11f      	bne.n	8001a84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a44:	4b4f      	ldr	r3, [pc, #316]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_OscConfig+0x154>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e265      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b49      	ldr	r3, [pc, #292]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	061b      	lsls	r3, r3, #24
 8001a6a:	4946      	ldr	r1, [pc, #280]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a70:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <HAL_RCC_OscConfig+0x280>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff f95f 	bl	8000d38 <HAL_InitTick>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d043      	beq.n	8001b08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e251      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d023      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8c:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a3c      	ldr	r2, [pc, #240]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff fb2a 	bl	80010f0 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fb26 	bl	80010f0 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e23a      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab2:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abe:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	061b      	lsls	r3, r3, #24
 8001acc:	492d      	ldr	r1, [pc, #180]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
 8001ad2:	e01a      	b.n	8001b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a2a      	ldr	r2, [pc, #168]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fb06 	bl	80010f0 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fb02 	bl	80010f0 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e216      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1e0>
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d041      	beq.n	8001b9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01c      	beq.n	8001b58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b24:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fadf 	bl	80010f0 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b36:	f7ff fadb 	bl	80010f0 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e1ef      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0ef      	beq.n	8001b36 <HAL_RCC_OscConfig+0x22e>
 8001b56:	e020      	b.n	8001b9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5e:	4a09      	ldr	r2, [pc, #36]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7ff fac2 	bl	80010f0 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b6e:	e00d      	b.n	8001b8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b70:	f7ff fabe 	bl	80010f0 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d906      	bls.n	8001b8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1d2      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b8c:	4b8c      	ldr	r3, [pc, #560]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ea      	bne.n	8001b70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80a6 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001bac:	4b84      	ldr	r3, [pc, #528]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_OscConfig+0x2b4>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_RCC_OscConfig+0x2b6>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00d      	beq.n	8001bde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	4b7f      	ldr	r3, [pc, #508]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	4a7e      	ldr	r2, [pc, #504]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bce:	4b7c      	ldr	r3, [pc, #496]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bde:	4b79      	ldr	r3, [pc, #484]	; (8001dc4 <HAL_RCC_OscConfig+0x4bc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d118      	bne.n	8001c1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bea:	4b76      	ldr	r3, [pc, #472]	; (8001dc4 <HAL_RCC_OscConfig+0x4bc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a75      	ldr	r2, [pc, #468]	; (8001dc4 <HAL_RCC_OscConfig+0x4bc>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf6:	f7ff fa7b 	bl	80010f0 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfe:	f7ff fa77 	bl	80010f0 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e18b      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c10:	4b6c      	ldr	r3, [pc, #432]	; (8001dc4 <HAL_RCC_OscConfig+0x4bc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d108      	bne.n	8001c36 <HAL_RCC_OscConfig+0x32e>
 8001c24:	4b66      	ldr	r3, [pc, #408]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2a:	4a65      	ldr	r2, [pc, #404]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c34:	e024      	b.n	8001c80 <HAL_RCC_OscConfig+0x378>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b05      	cmp	r3, #5
 8001c3c:	d110      	bne.n	8001c60 <HAL_RCC_OscConfig+0x358>
 8001c3e:	4b60      	ldr	r3, [pc, #384]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	4a5e      	ldr	r2, [pc, #376]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c4e:	4b5c      	ldr	r3, [pc, #368]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c54:	4a5a      	ldr	r2, [pc, #360]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c5e:	e00f      	b.n	8001c80 <HAL_RCC_OscConfig+0x378>
 8001c60:	4b57      	ldr	r3, [pc, #348]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c66:	4a56      	ldr	r2, [pc, #344]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c76:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c78:	f023 0304 	bic.w	r3, r3, #4
 8001c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d016      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c88:	f7ff fa32 	bl	80010f0 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c90:	f7ff fa2e 	bl	80010f0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e140      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca6:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0ed      	beq.n	8001c90 <HAL_RCC_OscConfig+0x388>
 8001cb4:	e015      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fa1b 	bl	80010f0 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7ff fa17 	bl	80010f0 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e129      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd4:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ed      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ce2:	7ffb      	ldrb	r3, [r7, #31]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce8:	4b35      	ldr	r3, [pc, #212]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	4a34      	ldr	r2, [pc, #208]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d03c      	beq.n	8001d7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01c      	beq.n	8001d42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d0e:	4a2c      	ldr	r2, [pc, #176]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d18:	f7ff f9ea 	bl	80010f0 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d20:	f7ff f9e6 	bl	80010f0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0fa      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d32:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ef      	beq.n	8001d20 <HAL_RCC_OscConfig+0x418>
 8001d40:	e01b      	b.n	8001d7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d42:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d48:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d52:	f7ff f9cd 	bl	80010f0 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d5a:	f7ff f9c9 	bl	80010f0 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e0dd      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1ef      	bne.n	8001d5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80d1 	beq.w	8001f26 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b0c      	cmp	r3, #12
 8001d8e:	f000 808b 	beq.w	8001ea8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d15e      	bne.n	8001e58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff f9a3 	bl	80010f0 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dac:	e00c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7ff f99f 	bl	80010f0 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d905      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e0b3      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc8:	4b59      	ldr	r3, [pc, #356]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ec      	bne.n	8001dae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd4:	4b56      	ldr	r3, [pc, #344]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	4b56      	ldr	r3, [pc, #344]	; (8001f34 <HAL_RCC_OscConfig+0x62c>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6a11      	ldr	r1, [r2, #32]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001de4:	3a01      	subs	r2, #1
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	4311      	orrs	r1, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001dee:	0212      	lsls	r2, r2, #8
 8001df0:	4311      	orrs	r1, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001df6:	0852      	lsrs	r2, r2, #1
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	0552      	lsls	r2, r2, #21
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e02:	0852      	lsrs	r2, r2, #1
 8001e04:	3a01      	subs	r2, #1
 8001e06:	0652      	lsls	r2, r2, #25
 8001e08:	4311      	orrs	r1, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e0e:	06d2      	lsls	r2, r2, #27
 8001e10:	430a      	orrs	r2, r1
 8001e12:	4947      	ldr	r1, [pc, #284]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b45      	ldr	r3, [pc, #276]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a44      	ldr	r2, [pc, #272]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a41      	ldr	r2, [pc, #260]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff f95e 	bl	80010f0 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff f95a 	bl	80010f0 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e06e      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4a:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x530>
 8001e56:	e066      	b.n	8001f26 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e58:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a34      	ldr	r2, [pc, #208]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e62:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e64:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4a31      	ldr	r2, [pc, #196]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001e6a:	f023 0303 	bic.w	r3, r3, #3
 8001e6e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e70:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a2e      	ldr	r2, [pc, #184]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001e76:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7ff f936 	bl	80010f0 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff f932 	bl	80010f0 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e046      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x580>
 8001ea6:	e03e      	b.n	8001f26 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e039      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_RCC_OscConfig+0x628>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0203 	and.w	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d12c      	bne.n	8001f22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d123      	bne.n	8001f22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d11b      	bne.n	8001f22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d113      	bne.n	8001f22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	3b01      	subs	r3, #1
 8001f08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d109      	bne.n	8001f22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f18:	085b      	lsrs	r3, r3, #1
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3720      	adds	r7, #32
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	019f800c 	.word	0x019f800c

08001f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e11e      	b.n	800218e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f50:	4b91      	ldr	r3, [pc, #580]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d910      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b8e      	ldr	r3, [pc, #568]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 020f 	bic.w	r2, r3, #15
 8001f66:	498c      	ldr	r1, [pc, #560]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b8a      	ldr	r3, [pc, #552]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e106      	b.n	800218e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d073      	beq.n	8002074 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d129      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f94:	4b81      	ldr	r3, [pc, #516]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0f4      	b.n	800218e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fa4:	f000 f9d0 	bl	8002348 <RCC_GetSysClockFreqFromPLLSource>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4a7c      	ldr	r2, [pc, #496]	; (80021a0 <HAL_RCC_ClockConfig+0x268>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d93f      	bls.n	8002032 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fb2:	4b7a      	ldr	r3, [pc, #488]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d033      	beq.n	8002032 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d12f      	bne.n	8002032 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fd2:	4b72      	ldr	r3, [pc, #456]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fda:	4a70      	ldr	r2, [pc, #448]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 8001fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	e024      	b.n	8002032 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff0:	4b6a      	ldr	r3, [pc, #424]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d109      	bne.n	8002010 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0c6      	b.n	800218e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002000:	4b66      	ldr	r3, [pc, #408]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0be      	b.n	800218e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002010:	f000 f8ce 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 8002014:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4a61      	ldr	r2, [pc, #388]	; (80021a0 <HAL_RCC_ClockConfig+0x268>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d909      	bls.n	8002032 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800201e:	4b5f      	ldr	r3, [pc, #380]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002026:	4a5d      	ldr	r2, [pc, #372]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 8002028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002032:	4b5a      	ldr	r3, [pc, #360]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f023 0203 	bic.w	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4957      	ldr	r1, [pc, #348]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 8002040:	4313      	orrs	r3, r2
 8002042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002044:	f7ff f854 	bl	80010f0 <HAL_GetTick>
 8002048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	e00a      	b.n	8002062 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800204c:	f7ff f850 	bl	80010f0 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e095      	b.n	800218e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	4b4e      	ldr	r3, [pc, #312]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 020c 	and.w	r2, r3, #12
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	429a      	cmp	r2, r3
 8002072:	d1eb      	bne.n	800204c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d023      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800208c:	4b43      	ldr	r3, [pc, #268]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4a42      	ldr	r2, [pc, #264]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 8002092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002096:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020a4:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020ac:	4a3b      	ldr	r2, [pc, #236]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 80020ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b4:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4936      	ldr	r1, [pc, #216]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]
 80020c6:	e008      	b.n	80020da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2b80      	cmp	r3, #128	; 0x80
 80020cc:	d105      	bne.n	80020da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020ce:	4b33      	ldr	r3, [pc, #204]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	4a32      	ldr	r2, [pc, #200]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 80020d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020da:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d21d      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e8:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f023 020f 	bic.w	r2, r3, #15
 80020f0:	4929      	ldr	r1, [pc, #164]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020f8:	f7fe fffa 	bl	80010f0 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f7fe fff6 	bl	80010f0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e03b      	b.n	800218e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d1ed      	bne.n	8002100 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4917      	ldr	r1, [pc, #92]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	490f      	ldr	r1, [pc, #60]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002162:	f000 f825 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_RCC_ClockConfig+0x264>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	490c      	ldr	r1, [pc, #48]	; (80021a4 <HAL_RCC_ClockConfig+0x26c>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <HAL_RCC_ClockConfig+0x270>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_RCC_ClockConfig+0x274>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fdd6 	bl	8000d38 <HAL_InitTick>
 800218c:	4603      	mov	r3, r0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40022000 	.word	0x40022000
 800219c:	40021000 	.word	0x40021000
 80021a0:	04c4b400 	.word	0x04c4b400
 80021a4:	08007004 	.word	0x08007004
 80021a8:	20000098 	.word	0x20000098
 80021ac:	2000009c 	.word	0x2000009c

080021b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021b6:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d102      	bne.n	80021c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021c2:	4b2a      	ldr	r3, [pc, #168]	; (800226c <HAL_RCC_GetSysClockFreq+0xbc>)
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	e047      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d102      	bne.n	80021da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021d4:	4b26      	ldr	r3, [pc, #152]	; (8002270 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	e03e      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80021da:	4b23      	ldr	r3, [pc, #140]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d136      	bne.n	8002254 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3301      	adds	r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d10c      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002204:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	4a16      	ldr	r2, [pc, #88]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	68d2      	ldr	r2, [r2, #12]
 8002210:	0a12      	lsrs	r2, r2, #8
 8002212:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	617b      	str	r3, [r7, #20]
      break;
 800221c:	e00c      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002228:	68d2      	ldr	r2, [r2, #12]
 800222a:	0a12      	lsrs	r2, r2, #8
 800222c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]
      break;
 8002236:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb8>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	0e5b      	lsrs	r3, r3, #25
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	3301      	adds	r3, #1
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	e001      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002258:	693b      	ldr	r3, [r7, #16]
}
 800225a:	4618      	mov	r0, r3
 800225c:	371c      	adds	r7, #28
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
 800226c:	00f42400 	.word	0x00f42400
 8002270:	016e3600 	.word	0x016e3600

08002274 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_RCC_GetHCLKFreq+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000098 	.word	0x20000098

0800228c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002290:	f7ff fff0 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4904      	ldr	r1, [pc, #16]	; (80022b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08007014 	.word	0x08007014

080022b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022bc:	f7ff ffda 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	0adb      	lsrs	r3, r3, #11
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	4904      	ldr	r1, [pc, #16]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ce:	5ccb      	ldrb	r3, [r1, r3]
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d8:	4618      	mov	r0, r3
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08007014 	.word	0x08007014

080022e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	220f      	movs	r2, #15
 80022f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_RCC_GetClockConfig+0x5c>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 0203 	and.w	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002300:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <HAL_RCC_GetClockConfig+0x5c>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <HAL_RCC_GetClockConfig+0x5c>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_RCC_GetClockConfig+0x5c>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	08db      	lsrs	r3, r3, #3
 800231e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002326:	4b07      	ldr	r3, [pc, #28]	; (8002344 <HAL_RCC_GetClockConfig+0x60>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 020f 	and.w	r2, r3, #15
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	601a      	str	r2, [r3, #0]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	40022000 	.word	0x40022000

08002348 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800234e:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3301      	adds	r3, #1
 8002364:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d10c      	bne.n	8002386 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800236c:	4a17      	ldr	r2, [pc, #92]	; (80023cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	fbb2 f3f3 	udiv	r3, r2, r3
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002376:	68d2      	ldr	r2, [r2, #12]
 8002378:	0a12      	lsrs	r2, r2, #8
 800237a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	617b      	str	r3, [r7, #20]
    break;
 8002384:	e00c      	b.n	80023a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	fbb2 f3f3 	udiv	r3, r2, r3
 800238e:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002390:	68d2      	ldr	r2, [r2, #12]
 8002392:	0a12      	lsrs	r2, r2, #8
 8002394:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	617b      	str	r3, [r7, #20]
    break;
 800239e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	0e5b      	lsrs	r3, r3, #25
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	3301      	adds	r3, #1
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80023ba:	687b      	ldr	r3, [r7, #4]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	371c      	adds	r7, #28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	40021000 	.word	0x40021000
 80023cc:	016e3600 	.word	0x016e3600
 80023d0:	00f42400 	.word	0x00f42400

080023d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023dc:	2300      	movs	r3, #0
 80023de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023e0:	2300      	movs	r3, #0
 80023e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 8098 	beq.w	8002522 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f6:	4b43      	ldr	r3, [pc, #268]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10d      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	4b40      	ldr	r3, [pc, #256]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	4a3f      	ldr	r2, [pc, #252]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240c:	6593      	str	r3, [r2, #88]	; 0x58
 800240e:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241a:	2301      	movs	r3, #1
 800241c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800241e:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a39      	ldr	r2, [pc, #228]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800242a:	f7fe fe61 	bl	80010f0 <HAL_GetTick>
 800242e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002430:	e009      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7fe fe5d 	bl	80010f0 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d902      	bls.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	74fb      	strb	r3, [r7, #19]
        break;
 8002444:	e005      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002446:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0ef      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d159      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002458:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002462:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d01e      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	429a      	cmp	r2, r3
 8002472:	d019      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002474:	4b23      	ldr	r3, [pc, #140]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800247e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002480:	4b20      	ldr	r3, [pc, #128]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002486:	4a1f      	ldr	r2, [pc, #124]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002496:	4a1b      	ldr	r2, [pc, #108]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024a0:	4a18      	ldr	r2, [pc, #96]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d016      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe fe1d 	bl	80010f0 <HAL_GetTick>
 80024b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b8:	e00b      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ba:	f7fe fe19 	bl	80010f0 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d902      	bls.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	74fb      	strb	r3, [r7, #19]
            break;
 80024d0:	e006      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ec      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10b      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	4903      	ldr	r1, [pc, #12]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024fc:	e008      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024fe:	7cfb      	ldrb	r3, [r7, #19]
 8002500:	74bb      	strb	r3, [r7, #18]
 8002502:	e005      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002504:	40021000 	.word	0x40021000
 8002508:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800250c:	7cfb      	ldrb	r3, [r7, #19]
 800250e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002510:	7c7b      	ldrb	r3, [r7, #17]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d105      	bne.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002516:	4ba6      	ldr	r3, [pc, #664]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	4aa5      	ldr	r2, [pc, #660]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002520:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800252e:	4ba0      	ldr	r3, [pc, #640]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002534:	f023 0203 	bic.w	r2, r3, #3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	499c      	ldr	r1, [pc, #624]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253e:	4313      	orrs	r3, r2
 8002540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002550:	4b97      	ldr	r3, [pc, #604]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f023 020c 	bic.w	r2, r3, #12
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4994      	ldr	r1, [pc, #592]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002572:	4b8f      	ldr	r3, [pc, #572]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002578:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	498b      	ldr	r1, [pc, #556]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002594:	4b86      	ldr	r3, [pc, #536]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	4983      	ldr	r1, [pc, #524]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b6:	4b7e      	ldr	r3, [pc, #504]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	497a      	ldr	r1, [pc, #488]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00a      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d8:	4b75      	ldr	r3, [pc, #468]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	4972      	ldr	r1, [pc, #456]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fa:	4b6d      	ldr	r3, [pc, #436]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002600:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	4969      	ldr	r1, [pc, #420]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00a      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261c:	4b64      	ldr	r3, [pc, #400]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4961      	ldr	r1, [pc, #388]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800263e:	4b5c      	ldr	r3, [pc, #368]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002644:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	4958      	ldr	r1, [pc, #352]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265c:	2b00      	cmp	r3, #0
 800265e:	d015      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002660:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	4950      	ldr	r1, [pc, #320]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800267e:	d105      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002680:	4b4b      	ldr	r3, [pc, #300]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4a4a      	ldr	r2, [pc, #296]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800268a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002694:	2b00      	cmp	r3, #0
 8002696:	d015      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002698:	4b45      	ldr	r3, [pc, #276]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	4942      	ldr	r1, [pc, #264]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b6:	d105      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b8:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4a3c      	ldr	r2, [pc, #240]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026c2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d015      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026d0:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4934      	ldr	r1, [pc, #208]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ee:	d105      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026f0:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4a2e      	ldr	r2, [pc, #184]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d015      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002716:	4926      	ldr	r1, [pc, #152]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002722:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002726:	d105      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a20      	ldr	r2, [pc, #128]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002732:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d015      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	4918      	ldr	r1, [pc, #96]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800275e:	d105      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800276a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d015      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002778:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	490a      	ldr	r1, [pc, #40]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002796:	d105      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80027a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000

080027b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e049      	b.n	800285a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f841 	bl	8002862 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3304      	adds	r3, #4
 80027f0:	4619      	mov	r1, r3
 80027f2:	4610      	mov	r0, r2
 80027f4:	f000 fbbc 	bl	8002f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b01      	cmp	r3, #1
 800288a:	d001      	beq.n	8002890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e04a      	b.n	8002926 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a21      	ldr	r2, [pc, #132]	; (8002934 <HAL_TIM_Base_Start_IT+0xbc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d018      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x6c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ba:	d013      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x6c>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <HAL_TIM_Base_Start_IT+0xc0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00e      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x6c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a1c      	ldr	r2, [pc, #112]	; (800293c <HAL_TIM_Base_Start_IT+0xc4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d009      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x6c>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <HAL_TIM_Base_Start_IT+0xc8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d004      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x6c>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a19      	ldr	r2, [pc, #100]	; (8002944 <HAL_TIM_Base_Start_IT+0xcc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d115      	bne.n	8002910 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	4b17      	ldr	r3, [pc, #92]	; (8002948 <HAL_TIM_Base_Start_IT+0xd0>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b06      	cmp	r3, #6
 80028f4:	d015      	beq.n	8002922 <HAL_TIM_Base_Start_IT+0xaa>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fc:	d011      	beq.n	8002922 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0201 	orr.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290e:	e008      	b.n	8002922 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e000      	b.n	8002924 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002922:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800
 8002940:	40013400 	.word	0x40013400
 8002944:	40014000 	.word	0x40014000
 8002948:	00010007 	.word	0x00010007

0800294c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e049      	b.n	80029f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe f928 	bl	8000bc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3304      	adds	r3, #4
 8002988:	4619      	mov	r1, r3
 800298a:	4610      	mov	r0, r2
 800298c:	f000 faf0 	bl	8002f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d122      	bne.n	8002a56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d11b      	bne.n	8002a56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f06f 0202 	mvn.w	r2, #2
 8002a26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fa79 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
 8002a42:	e005      	b.n	8002a50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fa6b 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fa7c 	bl	8002f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d122      	bne.n	8002aaa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d11b      	bne.n	8002aaa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f06f 0204 	mvn.w	r2, #4
 8002a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fa4f 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
 8002a96:	e005      	b.n	8002aa4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fa41 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fa52 	bl	8002f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d122      	bne.n	8002afe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d11b      	bne.n	8002afe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f06f 0208 	mvn.w	r2, #8
 8002ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fa25 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
 8002aea:	e005      	b.n	8002af8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fa17 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa28 	bl	8002f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	d122      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d11b      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0210 	mvn.w	r2, #16
 8002b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2208      	movs	r2, #8
 8002b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f9fb 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
 8002b3e:	e005      	b.n	8002b4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f9ed 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f9fe 	bl	8002f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d10e      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d107      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0201 	mvn.w	r2, #1
 8002b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7fd ffe9 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	2b80      	cmp	r3, #128	; 0x80
 8002b8a:	d10e      	bne.n	8002baa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b96:	2b80      	cmp	r3, #128	; 0x80
 8002b98:	d107      	bne.n	8002baa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fe95 	bl	80038d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb8:	d10e      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc4:	2b80      	cmp	r3, #128	; 0x80
 8002bc6:	d107      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fe88 	bl	80038e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be2:	2b40      	cmp	r3, #64	; 0x40
 8002be4:	d10e      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf0:	2b40      	cmp	r3, #64	; 0x40
 8002bf2:	d107      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f9ac 	bl	8002f5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	d10e      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d107      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0220 	mvn.w	r2, #32
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fe48 	bl	80038c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c3e:	d10f      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c4e:	d107      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fe4e 	bl	80038fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c6e:	d10f      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c7e:	d107      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fe40 	bl	8003910 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c9e:	d10f      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cae:	d107      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fe32 	bl	8003924 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cce:	d10f      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cde:	d107      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fe24 	bl	8003938 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e0ff      	b.n	8002f16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b14      	cmp	r3, #20
 8002d22:	f200 80f0 	bhi.w	8002f06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002d26:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002d81 	.word	0x08002d81
 8002d30:	08002f07 	.word	0x08002f07
 8002d34:	08002f07 	.word	0x08002f07
 8002d38:	08002f07 	.word	0x08002f07
 8002d3c:	08002dc1 	.word	0x08002dc1
 8002d40:	08002f07 	.word	0x08002f07
 8002d44:	08002f07 	.word	0x08002f07
 8002d48:	08002f07 	.word	0x08002f07
 8002d4c:	08002e03 	.word	0x08002e03
 8002d50:	08002f07 	.word	0x08002f07
 8002d54:	08002f07 	.word	0x08002f07
 8002d58:	08002f07 	.word	0x08002f07
 8002d5c:	08002e43 	.word	0x08002e43
 8002d60:	08002f07 	.word	0x08002f07
 8002d64:	08002f07 	.word	0x08002f07
 8002d68:	08002f07 	.word	0x08002f07
 8002d6c:	08002e85 	.word	0x08002e85
 8002d70:	08002f07 	.word	0x08002f07
 8002d74:	08002f07 	.word	0x08002f07
 8002d78:	08002f07 	.word	0x08002f07
 8002d7c:	08002ec5 	.word	0x08002ec5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 f982 	bl	8003090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699a      	ldr	r2, [r3, #24]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0208 	orr.w	r2, r2, #8
 8002d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0204 	bic.w	r2, r2, #4
 8002daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6999      	ldr	r1, [r3, #24]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	619a      	str	r2, [r3, #24]
      break;
 8002dbe:	e0a5      	b.n	8002f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f9f2 	bl	80031b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6999      	ldr	r1, [r3, #24]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	021a      	lsls	r2, r3, #8
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	619a      	str	r2, [r3, #24]
      break;
 8002e00:	e084      	b.n	8002f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fa5b 	bl	80032c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0208 	orr.w	r2, r2, #8
 8002e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0204 	bic.w	r2, r2, #4
 8002e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69d9      	ldr	r1, [r3, #28]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	61da      	str	r2, [r3, #28]
      break;
 8002e40:	e064      	b.n	8002f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fac3 	bl	80033d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69da      	ldr	r2, [r3, #28]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69d9      	ldr	r1, [r3, #28]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	021a      	lsls	r2, r3, #8
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	61da      	str	r2, [r3, #28]
      break;
 8002e82:	e043      	b.n	8002f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fb2c 	bl	80034e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0208 	orr.w	r2, r2, #8
 8002e9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0204 	bic.w	r2, r2, #4
 8002eae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002ec2:	e023      	b.n	8002f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fb70 	bl	80035b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ede:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	021a      	lsls	r2, r3, #8
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002f04:	e002      	b.n	8002f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	75fb      	strb	r3, [r7, #23]
      break;
 8002f0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop

08002f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a3c      	ldr	r2, [pc, #240]	; (8003074 <TIM_Base_SetConfig+0x104>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00f      	beq.n	8002fa8 <TIM_Base_SetConfig+0x38>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8e:	d00b      	beq.n	8002fa8 <TIM_Base_SetConfig+0x38>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a39      	ldr	r2, [pc, #228]	; (8003078 <TIM_Base_SetConfig+0x108>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <TIM_Base_SetConfig+0x38>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a38      	ldr	r2, [pc, #224]	; (800307c <TIM_Base_SetConfig+0x10c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d003      	beq.n	8002fa8 <TIM_Base_SetConfig+0x38>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a37      	ldr	r2, [pc, #220]	; (8003080 <TIM_Base_SetConfig+0x110>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d108      	bne.n	8002fba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a2d      	ldr	r2, [pc, #180]	; (8003074 <TIM_Base_SetConfig+0x104>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d01b      	beq.n	8002ffa <TIM_Base_SetConfig+0x8a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d017      	beq.n	8002ffa <TIM_Base_SetConfig+0x8a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a2a      	ldr	r2, [pc, #168]	; (8003078 <TIM_Base_SetConfig+0x108>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d013      	beq.n	8002ffa <TIM_Base_SetConfig+0x8a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a29      	ldr	r2, [pc, #164]	; (800307c <TIM_Base_SetConfig+0x10c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00f      	beq.n	8002ffa <TIM_Base_SetConfig+0x8a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a28      	ldr	r2, [pc, #160]	; (8003080 <TIM_Base_SetConfig+0x110>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00b      	beq.n	8002ffa <TIM_Base_SetConfig+0x8a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a27      	ldr	r2, [pc, #156]	; (8003084 <TIM_Base_SetConfig+0x114>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d007      	beq.n	8002ffa <TIM_Base_SetConfig+0x8a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a26      	ldr	r2, [pc, #152]	; (8003088 <TIM_Base_SetConfig+0x118>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d003      	beq.n	8002ffa <TIM_Base_SetConfig+0x8a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a25      	ldr	r2, [pc, #148]	; (800308c <TIM_Base_SetConfig+0x11c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d108      	bne.n	800300c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a10      	ldr	r2, [pc, #64]	; (8003074 <TIM_Base_SetConfig+0x104>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00f      	beq.n	8003058 <TIM_Base_SetConfig+0xe8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a11      	ldr	r2, [pc, #68]	; (8003080 <TIM_Base_SetConfig+0x110>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00b      	beq.n	8003058 <TIM_Base_SetConfig+0xe8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a10      	ldr	r2, [pc, #64]	; (8003084 <TIM_Base_SetConfig+0x114>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d007      	beq.n	8003058 <TIM_Base_SetConfig+0xe8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <TIM_Base_SetConfig+0x118>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_Base_SetConfig+0xe8>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a0e      	ldr	r2, [pc, #56]	; (800308c <TIM_Base_SetConfig+0x11c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d103      	bne.n	8003060 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	615a      	str	r2, [r3, #20]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40012c00 	.word	0x40012c00
 8003078:	40000400 	.word	0x40000400
 800307c:	40000800 	.word	0x40000800
 8003080:	40013400 	.word	0x40013400
 8003084:	40014000 	.word	0x40014000
 8003088:	40014400 	.word	0x40014400
 800308c:	40014800 	.word	0x40014800

08003090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f023 0201 	bic.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0303 	bic.w	r3, r3, #3
 80030ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 0302 	bic.w	r3, r3, #2
 80030dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a2c      	ldr	r2, [pc, #176]	; (800319c <TIM_OC1_SetConfig+0x10c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00f      	beq.n	8003110 <TIM_OC1_SetConfig+0x80>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <TIM_OC1_SetConfig+0x110>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00b      	beq.n	8003110 <TIM_OC1_SetConfig+0x80>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a2a      	ldr	r2, [pc, #168]	; (80031a4 <TIM_OC1_SetConfig+0x114>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d007      	beq.n	8003110 <TIM_OC1_SetConfig+0x80>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a29      	ldr	r2, [pc, #164]	; (80031a8 <TIM_OC1_SetConfig+0x118>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d003      	beq.n	8003110 <TIM_OC1_SetConfig+0x80>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a28      	ldr	r2, [pc, #160]	; (80031ac <TIM_OC1_SetConfig+0x11c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d10c      	bne.n	800312a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f023 0308 	bic.w	r3, r3, #8
 8003116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f023 0304 	bic.w	r3, r3, #4
 8003128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1b      	ldr	r2, [pc, #108]	; (800319c <TIM_OC1_SetConfig+0x10c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00f      	beq.n	8003152 <TIM_OC1_SetConfig+0xc2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a1a      	ldr	r2, [pc, #104]	; (80031a0 <TIM_OC1_SetConfig+0x110>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00b      	beq.n	8003152 <TIM_OC1_SetConfig+0xc2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <TIM_OC1_SetConfig+0x114>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <TIM_OC1_SetConfig+0xc2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <TIM_OC1_SetConfig+0x118>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d003      	beq.n	8003152 <TIM_OC1_SetConfig+0xc2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a17      	ldr	r2, [pc, #92]	; (80031ac <TIM_OC1_SetConfig+0x11c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d111      	bne.n	8003176 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	621a      	str	r2, [r3, #32]
}
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	40013400 	.word	0x40013400
 80031a4:	40014000 	.word	0x40014000
 80031a8:	40014400 	.word	0x40014400
 80031ac:	40014800 	.word	0x40014800

080031b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f023 0210 	bic.w	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f023 0320 	bic.w	r3, r3, #32
 80031fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a28      	ldr	r2, [pc, #160]	; (80032b0 <TIM_OC2_SetConfig+0x100>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_OC2_SetConfig+0x6c>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <TIM_OC2_SetConfig+0x104>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d10d      	bne.n	8003238 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003236:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <TIM_OC2_SetConfig+0x100>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00f      	beq.n	8003260 <TIM_OC2_SetConfig+0xb0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <TIM_OC2_SetConfig+0x104>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00b      	beq.n	8003260 <TIM_OC2_SetConfig+0xb0>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <TIM_OC2_SetConfig+0x108>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d007      	beq.n	8003260 <TIM_OC2_SetConfig+0xb0>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a1a      	ldr	r2, [pc, #104]	; (80032bc <TIM_OC2_SetConfig+0x10c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d003      	beq.n	8003260 <TIM_OC2_SetConfig+0xb0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <TIM_OC2_SetConfig+0x110>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d113      	bne.n	8003288 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800326e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	621a      	str	r2, [r3, #32]
}
 80032a2:	bf00      	nop
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40013400 	.word	0x40013400
 80032b8:	40014000 	.word	0x40014000
 80032bc:	40014400 	.word	0x40014400
 80032c0:	40014800 	.word	0x40014800

080032c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0303 	bic.w	r3, r3, #3
 80032fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a27      	ldr	r2, [pc, #156]	; (80033c0 <TIM_OC3_SetConfig+0xfc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <TIM_OC3_SetConfig+0x6a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a26      	ldr	r2, [pc, #152]	; (80033c4 <TIM_OC3_SetConfig+0x100>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d10d      	bne.n	800334a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1c      	ldr	r2, [pc, #112]	; (80033c0 <TIM_OC3_SetConfig+0xfc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00f      	beq.n	8003372 <TIM_OC3_SetConfig+0xae>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <TIM_OC3_SetConfig+0x100>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00b      	beq.n	8003372 <TIM_OC3_SetConfig+0xae>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <TIM_OC3_SetConfig+0x104>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <TIM_OC3_SetConfig+0xae>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a19      	ldr	r2, [pc, #100]	; (80033cc <TIM_OC3_SetConfig+0x108>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d003      	beq.n	8003372 <TIM_OC3_SetConfig+0xae>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a18      	ldr	r2, [pc, #96]	; (80033d0 <TIM_OC3_SetConfig+0x10c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d113      	bne.n	800339a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	621a      	str	r2, [r3, #32]
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40013400 	.word	0x40013400
 80033c8:	40014000 	.word	0x40014000
 80033cc:	40014400 	.word	0x40014400
 80033d0:	40014800 	.word	0x40014800

080033d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	031b      	lsls	r3, r3, #12
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a28      	ldr	r2, [pc, #160]	; (80034d4 <TIM_OC4_SetConfig+0x100>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_OC4_SetConfig+0x6c>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a27      	ldr	r2, [pc, #156]	; (80034d8 <TIM_OC4_SetConfig+0x104>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d10d      	bne.n	800345c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	031b      	lsls	r3, r3, #12
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800345a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <TIM_OC4_SetConfig+0x100>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00f      	beq.n	8003484 <TIM_OC4_SetConfig+0xb0>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <TIM_OC4_SetConfig+0x104>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00b      	beq.n	8003484 <TIM_OC4_SetConfig+0xb0>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <TIM_OC4_SetConfig+0x108>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d007      	beq.n	8003484 <TIM_OC4_SetConfig+0xb0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a1a      	ldr	r2, [pc, #104]	; (80034e0 <TIM_OC4_SetConfig+0x10c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_OC4_SetConfig+0xb0>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a19      	ldr	r2, [pc, #100]	; (80034e4 <TIM_OC4_SetConfig+0x110>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d113      	bne.n	80034ac <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800348a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003492:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	019b      	lsls	r3, r3, #6
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	019b      	lsls	r3, r3, #6
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	621a      	str	r2, [r3, #32]
}
 80034c6:	bf00      	nop
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40013400 	.word	0x40013400
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40014400 	.word	0x40014400
 80034e4:	40014800 	.word	0x40014800

080034e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800352c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	041b      	lsls	r3, r3, #16
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a17      	ldr	r2, [pc, #92]	; (800359c <TIM_OC5_SetConfig+0xb4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00f      	beq.n	8003562 <TIM_OC5_SetConfig+0x7a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <TIM_OC5_SetConfig+0xb8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00b      	beq.n	8003562 <TIM_OC5_SetConfig+0x7a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <TIM_OC5_SetConfig+0xbc>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d007      	beq.n	8003562 <TIM_OC5_SetConfig+0x7a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <TIM_OC5_SetConfig+0xc0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d003      	beq.n	8003562 <TIM_OC5_SetConfig+0x7a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a13      	ldr	r2, [pc, #76]	; (80035ac <TIM_OC5_SetConfig+0xc4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d109      	bne.n	8003576 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003568:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	621a      	str	r2, [r3, #32]
}
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40013400 	.word	0x40013400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40014400 	.word	0x40014400
 80035ac:	40014800 	.word	0x40014800

080035b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	051b      	lsls	r3, r3, #20
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a18      	ldr	r2, [pc, #96]	; (8003668 <TIM_OC6_SetConfig+0xb8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00f      	beq.n	800362c <TIM_OC6_SetConfig+0x7c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a17      	ldr	r2, [pc, #92]	; (800366c <TIM_OC6_SetConfig+0xbc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00b      	beq.n	800362c <TIM_OC6_SetConfig+0x7c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a16      	ldr	r2, [pc, #88]	; (8003670 <TIM_OC6_SetConfig+0xc0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d007      	beq.n	800362c <TIM_OC6_SetConfig+0x7c>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a15      	ldr	r2, [pc, #84]	; (8003674 <TIM_OC6_SetConfig+0xc4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_OC6_SetConfig+0x7c>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a14      	ldr	r2, [pc, #80]	; (8003678 <TIM_OC6_SetConfig+0xc8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d109      	bne.n	8003640 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003632:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	029b      	lsls	r3, r3, #10
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	621a      	str	r2, [r3, #32]
}
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40012c00 	.word	0x40012c00
 800366c:	40013400 	.word	0x40013400
 8003670:	40014000 	.word	0x40014000
 8003674:	40014400 	.word	0x40014400
 8003678:	40014800 	.word	0x40014800

0800367c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003690:	2302      	movs	r3, #2
 8003692:	e065      	b.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2c      	ldr	r2, [pc, #176]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2b      	ldr	r2, [pc, #172]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d108      	bne.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80036e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1b      	ldr	r2, [pc, #108]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d018      	beq.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370a:	d013      	beq.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00e      	beq.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a17      	ldr	r2, [pc, #92]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d009      	beq.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a12      	ldr	r2, [pc, #72]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a13      	ldr	r2, [pc, #76]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d10c      	bne.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800373a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	4313      	orrs	r3, r2
 8003744:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40013400 	.word	0x40013400
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800
 800377c:	40014000 	.word	0x40014000

08003780 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003798:	2302      	movs	r3, #2
 800379a:	e087      	b.n	80038ac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	041b      	lsls	r3, r3, #16
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a27      	ldr	r2, [pc, #156]	; (80038b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d004      	beq.n	800382a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a25      	ldr	r2, [pc, #148]	; (80038bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d106      	bne.n	8003838 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1e      	ldr	r2, [pc, #120]	; (80038b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1d      	ldr	r2, [pc, #116]	; (80038bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d126      	bne.n	800389a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	051b      	lsls	r3, r3, #20
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a0e      	ldr	r2, [pc, #56]	; (80038b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d004      	beq.n	800388c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a0d      	ldr	r2, [pc, #52]	; (80038bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d106      	bne.n	800389a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40012c00 	.word	0x40012c00
 80038bc:	40013400 	.word	0x40013400

080038c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e042      	b.n	80039e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7fd f981 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2224      	movs	r2, #36	; 0x24
 800397a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0201 	bic.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fc50 	bl	8004234 <UART_SetConfig>
 8003994:	4603      	mov	r3, r0
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e022      	b.n	80039e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 ff10 	bl	80047cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 ff97 	bl	8004910 <UART_CheckIdleState>
 80039e2:	4603      	mov	r3, r0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	f040 8083 	bne.w	8003b0e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_UART_Transmit+0x28>
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e07b      	b.n	8003b10 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_UART_Transmit+0x3a>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e074      	b.n	8003b10 <HAL_UART_Transmit+0x124>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2221      	movs	r2, #33	; 0x21
 8003a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a3e:	f7fd fb57 	bl	80010f0 <HAL_GetTick>
 8003a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	88fa      	ldrh	r2, [r7, #6]
 8003a50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5c:	d108      	bne.n	8003a70 <HAL_UART_Transmit+0x84>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	e003      	b.n	8003a78 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003a80:	e02c      	b.n	8003adc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2180      	movs	r1, #128	; 0x80
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 ff8a 	bl	80049a6 <UART_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e039      	b.n	8003b10 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10b      	bne.n	8003aba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	e007      	b.n	8003aca <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1cc      	bne.n	8003a82 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2200      	movs	r2, #0
 8003af0:	2140      	movs	r1, #64	; 0x40
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 ff57 	bl	80049a6 <UART_WaitOnFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e006      	b.n	8003b10 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e000      	b.n	8003b10 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
  }
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3720      	adds	r7, #32
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	4613      	mov	r3, r2
 8003b24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d142      	bne.n	8003bb6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_UART_Receive_IT+0x24>
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e03b      	b.n	8003bb8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <HAL_UART_Receive_IT+0x36>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e034      	b.n	8003bb8 <HAL_UART_Receive_IT+0xa0>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a17      	ldr	r2, [pc, #92]	; (8003bc0 <HAL_UART_Receive_IT+0xa8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01f      	beq.n	8003ba6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d018      	beq.n	8003ba6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	e853 3f00 	ldrex	r3, [r3]
 8003b80:	613b      	str	r3, [r7, #16]
   return(result);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	623b      	str	r3, [r7, #32]
 8003b94:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	69f9      	ldr	r1, [r7, #28]
 8003b98:	6a3a      	ldr	r2, [r7, #32]
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e6      	bne.n	8003b74 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 ffc3 	bl	8004b38 <UART_Start_Receive_IT>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	e000      	b.n	8003bb8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3728      	adds	r7, #40	; 0x28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40008000 	.word	0x40008000

08003bc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b0ba      	sub	sp, #232	; 0xe8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003bee:	f640 030f 	movw	r3, #2063	; 0x80f
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003bf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d11b      	bne.n	8003c38 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d015      	beq.n	8003c38 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d009      	beq.n	8003c38 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 82d6 	beq.w	80041da <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	4798      	blx	r3
      }
      return;
 8003c36:	e2d0      	b.n	80041da <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 811f 	beq.w	8003e80 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003c42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003c46:	4b8b      	ldr	r3, [pc, #556]	; (8003e74 <HAL_UART_IRQHandler+0x2b0>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003c4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c52:	4b89      	ldr	r3, [pc, #548]	; (8003e78 <HAL_UART_IRQHandler+0x2b4>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8112 	beq.w	8003e80 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d011      	beq.n	8003c8c <HAL_UART_IRQHandler+0xc8>
 8003c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00b      	beq.n	8003c8c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c82:	f043 0201 	orr.w	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d011      	beq.n	8003cbc <HAL_UART_IRQHandler+0xf8>
 8003c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb2:	f043 0204 	orr.w	r2, r3, #4
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d011      	beq.n	8003cec <HAL_UART_IRQHandler+0x128>
 8003cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00b      	beq.n	8003cec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2204      	movs	r2, #4
 8003cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce2:	f043 0202 	orr.w	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d017      	beq.n	8003d28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d105      	bne.n	8003d10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003d04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003d08:	4b5a      	ldr	r3, [pc, #360]	; (8003e74 <HAL_UART_IRQHandler+0x2b0>)
 8003d0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00b      	beq.n	8003d28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2208      	movs	r2, #8
 8003d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d1e:	f043 0208 	orr.w	r2, r3, #8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d012      	beq.n	8003d5a <HAL_UART_IRQHandler+0x196>
 8003d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00c      	beq.n	8003d5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d50:	f043 0220 	orr.w	r2, r3, #32
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 823c 	beq.w	80041de <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d013      	beq.n	8003d9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d105      	bne.n	8003d8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dae:	2b40      	cmp	r3, #64	; 0x40
 8003db0:	d005      	beq.n	8003dbe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003db6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d04f      	beq.n	8003e5e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 ffe4 	bl	8004d8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	d141      	bne.n	8003e56 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003de0:	e853 3f00 	ldrex	r3, [r3]
 8003de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3308      	adds	r3, #8
 8003dfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1d9      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d013      	beq.n	8003e4e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e2a:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <HAL_UART_IRQHandler+0x2b8>)
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fd fac3 	bl	80013be <HAL_DMA_Abort_IT>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d017      	beq.n	8003e6e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003e48:	4610      	mov	r0, r2
 8003e4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4c:	e00f      	b.n	8003e6e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f9da 	bl	8004208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e54:	e00b      	b.n	8003e6e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f9d6 	bl	8004208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e5c:	e007      	b.n	8003e6e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f9d2 	bl	8004208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003e6c:	e1b7      	b.n	80041de <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6e:	bf00      	nop
    return;
 8003e70:	e1b5      	b.n	80041de <HAL_UART_IRQHandler+0x61a>
 8003e72:	bf00      	nop
 8003e74:	10000001 	.word	0x10000001
 8003e78:	04000120 	.word	0x04000120
 8003e7c:	08004e59 	.word	0x08004e59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	f040 814a 	bne.w	800411e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 8143 	beq.w	800411e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 813c 	beq.w	800411e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2210      	movs	r2, #16
 8003eac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb8:	2b40      	cmp	r3, #64	; 0x40
 8003eba:	f040 80b5 	bne.w	8004028 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003eca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8187 	beq.w	80041e2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	f080 817f 	bcs.w	80041e2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f040 8086 	bne.w	800400c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f3a:	e841 2300 	strex	r3, r2, [r1]
 8003f3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1da      	bne.n	8003f00 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3308      	adds	r3, #8
 8003f50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e1      	bne.n	8003f4a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003faa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e3      	bne.n	8003f86 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fdc:	f023 0310 	bic.w	r3, r3, #16
 8003fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fee:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ff0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ff4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e4      	bne.n	8003fcc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004006:	4618      	mov	r0, r3
 8004008:	f7fd f980 	bl	800130c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004018:	b29b      	uxth	r3, r3
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	b29b      	uxth	r3, r3
 800401e:	4619      	mov	r1, r3
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f8fb 	bl	800421c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004026:	e0dc      	b.n	80041e2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004034:	b29b      	uxth	r3, r3
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80ce 	beq.w	80041e6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800404a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 80c9 	beq.w	80041e6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004068:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004076:	647b      	str	r3, [r7, #68]	; 0x44
 8004078:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800407c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e4      	bne.n	8004054 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3308      	adds	r3, #8
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	623b      	str	r3, [r7, #32]
   return(result);
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3308      	adds	r3, #8
 80040ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040b2:	633a      	str	r2, [r7, #48]	; 0x30
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e1      	bne.n	800408a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0310 	bic.w	r3, r3, #16
 80040ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	69b9      	ldr	r1, [r7, #24]
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	617b      	str	r3, [r7, #20]
   return(result);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e4      	bne.n	80040da <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004114:	4619      	mov	r1, r3
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f880 	bl	800421c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800411c:	e063      	b.n	80041e6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800411e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00e      	beq.n	8004148 <HAL_UART_IRQHandler+0x584>
 800412a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800412e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800413e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f001 fb27 	bl	8005794 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004146:	e051      	b.n	80041ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004150:	2b00      	cmp	r3, #0
 8004152:	d014      	beq.n	800417e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415c:	2b00      	cmp	r3, #0
 800415e:	d105      	bne.n	800416c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004170:	2b00      	cmp	r3, #0
 8004172:	d03a      	beq.n	80041ea <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	4798      	blx	r3
    }
    return;
 800417c:	e035      	b.n	80041ea <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d009      	beq.n	800419e <HAL_UART_IRQHandler+0x5da>
 800418a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fe74 	bl	8004e84 <UART_EndTransmit_IT>
    return;
 800419c:	e026      	b.n	80041ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800419e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <HAL_UART_IRQHandler+0x5fa>
 80041aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f001 fb00 	bl	80057bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041bc:	e016      	b.n	80041ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80041be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d010      	beq.n	80041ec <HAL_UART_IRQHandler+0x628>
 80041ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	da0c      	bge.n	80041ec <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f001 fae8 	bl	80057a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041d8:	e008      	b.n	80041ec <HAL_UART_IRQHandler+0x628>
      return;
 80041da:	bf00      	nop
 80041dc:	e006      	b.n	80041ec <HAL_UART_IRQHandler+0x628>
    return;
 80041de:	bf00      	nop
 80041e0:	e004      	b.n	80041ec <HAL_UART_IRQHandler+0x628>
      return;
 80041e2:	bf00      	nop
 80041e4:	e002      	b.n	80041ec <HAL_UART_IRQHandler+0x628>
      return;
 80041e6:	bf00      	nop
 80041e8:	e000      	b.n	80041ec <HAL_UART_IRQHandler+0x628>
    return;
 80041ea:	bf00      	nop
  }
}
 80041ec:	37e8      	adds	r7, #232	; 0xe8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop

080041f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004238:	b08c      	sub	sp, #48	; 0x30
 800423a:	af00      	add	r7, sp, #0
 800423c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	431a      	orrs	r2, r3
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	431a      	orrs	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	4313      	orrs	r3, r2
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4bab      	ldr	r3, [pc, #684]	; (8004510 <UART_SetConfig+0x2dc>)
 8004264:	4013      	ands	r3, r2
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	6812      	ldr	r2, [r2, #0]
 800426a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800426c:	430b      	orrs	r3, r1
 800426e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4aa0      	ldr	r2, [pc, #640]	; (8004514 <UART_SetConfig+0x2e0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800429c:	4313      	orrs	r3, r2
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80042aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	f023 010f 	bic.w	r1, r3, #15
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a91      	ldr	r2, [pc, #580]	; (8004518 <UART_SetConfig+0x2e4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d125      	bne.n	8004324 <UART_SetConfig+0xf0>
 80042d8:	4b90      	ldr	r3, [pc, #576]	; (800451c <UART_SetConfig+0x2e8>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d81a      	bhi.n	800431c <UART_SetConfig+0xe8>
 80042e6:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <UART_SetConfig+0xb8>)
 80042e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ec:	080042fd 	.word	0x080042fd
 80042f0:	0800430d 	.word	0x0800430d
 80042f4:	08004305 	.word	0x08004305
 80042f8:	08004315 	.word	0x08004315
 80042fc:	2301      	movs	r3, #1
 80042fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004302:	e0d6      	b.n	80044b2 <UART_SetConfig+0x27e>
 8004304:	2302      	movs	r3, #2
 8004306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800430a:	e0d2      	b.n	80044b2 <UART_SetConfig+0x27e>
 800430c:	2304      	movs	r3, #4
 800430e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004312:	e0ce      	b.n	80044b2 <UART_SetConfig+0x27e>
 8004314:	2308      	movs	r3, #8
 8004316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800431a:	e0ca      	b.n	80044b2 <UART_SetConfig+0x27e>
 800431c:	2310      	movs	r3, #16
 800431e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004322:	e0c6      	b.n	80044b2 <UART_SetConfig+0x27e>
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a7d      	ldr	r2, [pc, #500]	; (8004520 <UART_SetConfig+0x2ec>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d138      	bne.n	80043a0 <UART_SetConfig+0x16c>
 800432e:	4b7b      	ldr	r3, [pc, #492]	; (800451c <UART_SetConfig+0x2e8>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	f003 030c 	and.w	r3, r3, #12
 8004338:	2b0c      	cmp	r3, #12
 800433a:	d82d      	bhi.n	8004398 <UART_SetConfig+0x164>
 800433c:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <UART_SetConfig+0x110>)
 800433e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004342:	bf00      	nop
 8004344:	08004379 	.word	0x08004379
 8004348:	08004399 	.word	0x08004399
 800434c:	08004399 	.word	0x08004399
 8004350:	08004399 	.word	0x08004399
 8004354:	08004389 	.word	0x08004389
 8004358:	08004399 	.word	0x08004399
 800435c:	08004399 	.word	0x08004399
 8004360:	08004399 	.word	0x08004399
 8004364:	08004381 	.word	0x08004381
 8004368:	08004399 	.word	0x08004399
 800436c:	08004399 	.word	0x08004399
 8004370:	08004399 	.word	0x08004399
 8004374:	08004391 	.word	0x08004391
 8004378:	2300      	movs	r3, #0
 800437a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800437e:	e098      	b.n	80044b2 <UART_SetConfig+0x27e>
 8004380:	2302      	movs	r3, #2
 8004382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004386:	e094      	b.n	80044b2 <UART_SetConfig+0x27e>
 8004388:	2304      	movs	r3, #4
 800438a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800438e:	e090      	b.n	80044b2 <UART_SetConfig+0x27e>
 8004390:	2308      	movs	r3, #8
 8004392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004396:	e08c      	b.n	80044b2 <UART_SetConfig+0x27e>
 8004398:	2310      	movs	r3, #16
 800439a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800439e:	e088      	b.n	80044b2 <UART_SetConfig+0x27e>
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a5f      	ldr	r2, [pc, #380]	; (8004524 <UART_SetConfig+0x2f0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d125      	bne.n	80043f6 <UART_SetConfig+0x1c2>
 80043aa:	4b5c      	ldr	r3, [pc, #368]	; (800451c <UART_SetConfig+0x2e8>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043b4:	2b30      	cmp	r3, #48	; 0x30
 80043b6:	d016      	beq.n	80043e6 <UART_SetConfig+0x1b2>
 80043b8:	2b30      	cmp	r3, #48	; 0x30
 80043ba:	d818      	bhi.n	80043ee <UART_SetConfig+0x1ba>
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d00a      	beq.n	80043d6 <UART_SetConfig+0x1a2>
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d814      	bhi.n	80043ee <UART_SetConfig+0x1ba>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <UART_SetConfig+0x19a>
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d008      	beq.n	80043de <UART_SetConfig+0x1aa>
 80043cc:	e00f      	b.n	80043ee <UART_SetConfig+0x1ba>
 80043ce:	2300      	movs	r3, #0
 80043d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043d4:	e06d      	b.n	80044b2 <UART_SetConfig+0x27e>
 80043d6:	2302      	movs	r3, #2
 80043d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043dc:	e069      	b.n	80044b2 <UART_SetConfig+0x27e>
 80043de:	2304      	movs	r3, #4
 80043e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043e4:	e065      	b.n	80044b2 <UART_SetConfig+0x27e>
 80043e6:	2308      	movs	r3, #8
 80043e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ec:	e061      	b.n	80044b2 <UART_SetConfig+0x27e>
 80043ee:	2310      	movs	r3, #16
 80043f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043f4:	e05d      	b.n	80044b2 <UART_SetConfig+0x27e>
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a4b      	ldr	r2, [pc, #300]	; (8004528 <UART_SetConfig+0x2f4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d125      	bne.n	800444c <UART_SetConfig+0x218>
 8004400:	4b46      	ldr	r3, [pc, #280]	; (800451c <UART_SetConfig+0x2e8>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004406:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800440a:	2bc0      	cmp	r3, #192	; 0xc0
 800440c:	d016      	beq.n	800443c <UART_SetConfig+0x208>
 800440e:	2bc0      	cmp	r3, #192	; 0xc0
 8004410:	d818      	bhi.n	8004444 <UART_SetConfig+0x210>
 8004412:	2b80      	cmp	r3, #128	; 0x80
 8004414:	d00a      	beq.n	800442c <UART_SetConfig+0x1f8>
 8004416:	2b80      	cmp	r3, #128	; 0x80
 8004418:	d814      	bhi.n	8004444 <UART_SetConfig+0x210>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <UART_SetConfig+0x1f0>
 800441e:	2b40      	cmp	r3, #64	; 0x40
 8004420:	d008      	beq.n	8004434 <UART_SetConfig+0x200>
 8004422:	e00f      	b.n	8004444 <UART_SetConfig+0x210>
 8004424:	2300      	movs	r3, #0
 8004426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800442a:	e042      	b.n	80044b2 <UART_SetConfig+0x27e>
 800442c:	2302      	movs	r3, #2
 800442e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004432:	e03e      	b.n	80044b2 <UART_SetConfig+0x27e>
 8004434:	2304      	movs	r3, #4
 8004436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800443a:	e03a      	b.n	80044b2 <UART_SetConfig+0x27e>
 800443c:	2308      	movs	r3, #8
 800443e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004442:	e036      	b.n	80044b2 <UART_SetConfig+0x27e>
 8004444:	2310      	movs	r3, #16
 8004446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800444a:	e032      	b.n	80044b2 <UART_SetConfig+0x27e>
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a30      	ldr	r2, [pc, #192]	; (8004514 <UART_SetConfig+0x2e0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d12a      	bne.n	80044ac <UART_SetConfig+0x278>
 8004456:	4b31      	ldr	r3, [pc, #196]	; (800451c <UART_SetConfig+0x2e8>)
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004460:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004464:	d01a      	beq.n	800449c <UART_SetConfig+0x268>
 8004466:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800446a:	d81b      	bhi.n	80044a4 <UART_SetConfig+0x270>
 800446c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004470:	d00c      	beq.n	800448c <UART_SetConfig+0x258>
 8004472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004476:	d815      	bhi.n	80044a4 <UART_SetConfig+0x270>
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <UART_SetConfig+0x250>
 800447c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004480:	d008      	beq.n	8004494 <UART_SetConfig+0x260>
 8004482:	e00f      	b.n	80044a4 <UART_SetConfig+0x270>
 8004484:	2300      	movs	r3, #0
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800448a:	e012      	b.n	80044b2 <UART_SetConfig+0x27e>
 800448c:	2302      	movs	r3, #2
 800448e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004492:	e00e      	b.n	80044b2 <UART_SetConfig+0x27e>
 8004494:	2304      	movs	r3, #4
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800449a:	e00a      	b.n	80044b2 <UART_SetConfig+0x27e>
 800449c:	2308      	movs	r3, #8
 800449e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044a2:	e006      	b.n	80044b2 <UART_SetConfig+0x27e>
 80044a4:	2310      	movs	r3, #16
 80044a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044aa:	e002      	b.n	80044b2 <UART_SetConfig+0x27e>
 80044ac:	2310      	movs	r3, #16
 80044ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a17      	ldr	r2, [pc, #92]	; (8004514 <UART_SetConfig+0x2e0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	f040 80a8 	bne.w	800460e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d834      	bhi.n	8004530 <UART_SetConfig+0x2fc>
 80044c6:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <UART_SetConfig+0x298>)
 80044c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	08004531 	.word	0x08004531
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	08004531 	.word	0x08004531
 80044dc:	080044ff 	.word	0x080044ff
 80044e0:	08004531 	.word	0x08004531
 80044e4:	08004531 	.word	0x08004531
 80044e8:	08004531 	.word	0x08004531
 80044ec:	08004507 	.word	0x08004507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f0:	f7fd fecc 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 80044f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044f6:	e021      	b.n	800453c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <UART_SetConfig+0x2f8>)
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044fc:	e01e      	b.n	800453c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fe:	f7fd fe57 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 8004502:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004504:	e01a      	b.n	800453c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800450c:	e016      	b.n	800453c <UART_SetConfig+0x308>
 800450e:	bf00      	nop
 8004510:	cfff69f3 	.word	0xcfff69f3
 8004514:	40008000 	.word	0x40008000
 8004518:	40013800 	.word	0x40013800
 800451c:	40021000 	.word	0x40021000
 8004520:	40004400 	.word	0x40004400
 8004524:	40004800 	.word	0x40004800
 8004528:	40004c00 	.word	0x40004c00
 800452c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800453a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 812a 	beq.w	8004798 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	4a9e      	ldr	r2, [pc, #632]	; (80047c4 <UART_SetConfig+0x590>)
 800454a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800454e:	461a      	mov	r2, r3
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	fbb3 f3f2 	udiv	r3, r3, r2
 8004556:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	4413      	add	r3, r2
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	429a      	cmp	r2, r3
 8004566:	d305      	bcc.n	8004574 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	429a      	cmp	r2, r3
 8004572:	d903      	bls.n	800457c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800457a:	e10d      	b.n	8004798 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	2200      	movs	r2, #0
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	60fa      	str	r2, [r7, #12]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	4a8e      	ldr	r2, [pc, #568]	; (80047c4 <UART_SetConfig+0x590>)
 800458a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800458e:	b29b      	uxth	r3, r3
 8004590:	2200      	movs	r2, #0
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800459a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800459e:	f7fb fe9f 	bl	80002e0 <__aeabi_uldivmod>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	020b      	lsls	r3, r1, #8
 80045b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045b8:	0202      	lsls	r2, r0, #8
 80045ba:	6979      	ldr	r1, [r7, #20]
 80045bc:	6849      	ldr	r1, [r1, #4]
 80045be:	0849      	lsrs	r1, r1, #1
 80045c0:	2000      	movs	r0, #0
 80045c2:	460c      	mov	r4, r1
 80045c4:	4605      	mov	r5, r0
 80045c6:	eb12 0804 	adds.w	r8, r2, r4
 80045ca:	eb43 0905 	adc.w	r9, r3, r5
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	469a      	mov	sl, r3
 80045d6:	4693      	mov	fp, r2
 80045d8:	4652      	mov	r2, sl
 80045da:	465b      	mov	r3, fp
 80045dc:	4640      	mov	r0, r8
 80045de:	4649      	mov	r1, r9
 80045e0:	f7fb fe7e 	bl	80002e0 <__aeabi_uldivmod>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4613      	mov	r3, r2
 80045ea:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045f2:	d308      	bcc.n	8004606 <UART_SetConfig+0x3d2>
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045fa:	d204      	bcs.n	8004606 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6a3a      	ldr	r2, [r7, #32]
 8004602:	60da      	str	r2, [r3, #12]
 8004604:	e0c8      	b.n	8004798 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800460c:	e0c4      	b.n	8004798 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004616:	d167      	bne.n	80046e8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004618:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800461c:	2b08      	cmp	r3, #8
 800461e:	d828      	bhi.n	8004672 <UART_SetConfig+0x43e>
 8004620:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <UART_SetConfig+0x3f4>)
 8004622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004626:	bf00      	nop
 8004628:	0800464d 	.word	0x0800464d
 800462c:	08004655 	.word	0x08004655
 8004630:	0800465d 	.word	0x0800465d
 8004634:	08004673 	.word	0x08004673
 8004638:	08004663 	.word	0x08004663
 800463c:	08004673 	.word	0x08004673
 8004640:	08004673 	.word	0x08004673
 8004644:	08004673 	.word	0x08004673
 8004648:	0800466b 	.word	0x0800466b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800464c:	f7fd fe1e 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8004650:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004652:	e014      	b.n	800467e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004654:	f7fd fe30 	bl	80022b8 <HAL_RCC_GetPCLK2Freq>
 8004658:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800465a:	e010      	b.n	800467e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800465c:	4b5a      	ldr	r3, [pc, #360]	; (80047c8 <UART_SetConfig+0x594>)
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004660:	e00d      	b.n	800467e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004662:	f7fd fda5 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 8004666:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004668:	e009      	b.n	800467e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800466a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004670:	e005      	b.n	800467e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800467c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8089 	beq.w	8004798 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	4a4e      	ldr	r2, [pc, #312]	; (80047c4 <UART_SetConfig+0x590>)
 800468c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004690:	461a      	mov	r2, r3
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	fbb3 f3f2 	udiv	r3, r3, r2
 8004698:	005a      	lsls	r2, r3, #1
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	085b      	lsrs	r3, r3, #1
 80046a0:	441a      	add	r2, r3
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	2b0f      	cmp	r3, #15
 80046b0:	d916      	bls.n	80046e0 <UART_SetConfig+0x4ac>
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b8:	d212      	bcs.n	80046e0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f023 030f 	bic.w	r3, r3, #15
 80046c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	085b      	lsrs	r3, r3, #1
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	8bfb      	ldrh	r3, [r7, #30]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	8bfa      	ldrh	r2, [r7, #30]
 80046dc:	60da      	str	r2, [r3, #12]
 80046de:	e05b      	b.n	8004798 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80046e6:	e057      	b.n	8004798 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d828      	bhi.n	8004742 <UART_SetConfig+0x50e>
 80046f0:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <UART_SetConfig+0x4c4>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	0800471d 	.word	0x0800471d
 80046fc:	08004725 	.word	0x08004725
 8004700:	0800472d 	.word	0x0800472d
 8004704:	08004743 	.word	0x08004743
 8004708:	08004733 	.word	0x08004733
 800470c:	08004743 	.word	0x08004743
 8004710:	08004743 	.word	0x08004743
 8004714:	08004743 	.word	0x08004743
 8004718:	0800473b 	.word	0x0800473b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800471c:	f7fd fdb6 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8004720:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004722:	e014      	b.n	800474e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004724:	f7fd fdc8 	bl	80022b8 <HAL_RCC_GetPCLK2Freq>
 8004728:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800472a:	e010      	b.n	800474e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800472c:	4b26      	ldr	r3, [pc, #152]	; (80047c8 <UART_SetConfig+0x594>)
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004730:	e00d      	b.n	800474e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004732:	f7fd fd3d 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 8004736:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004738:	e009      	b.n	800474e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004740:	e005      	b.n	800474e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800474c:	bf00      	nop
    }

    if (pclk != 0U)
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	2b00      	cmp	r3, #0
 8004752:	d021      	beq.n	8004798 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	4a1a      	ldr	r2, [pc, #104]	; (80047c4 <UART_SetConfig+0x590>)
 800475a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800475e:	461a      	mov	r2, r3
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	fbb3 f2f2 	udiv	r2, r3, r2
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	441a      	add	r2, r3
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	fbb2 f3f3 	udiv	r3, r2, r3
 8004776:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	2b0f      	cmp	r3, #15
 800477c:	d909      	bls.n	8004792 <UART_SetConfig+0x55e>
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004784:	d205      	bcs.n	8004792 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	b29a      	uxth	r2, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60da      	str	r2, [r3, #12]
 8004790:	e002      	b.n	8004798 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2201      	movs	r2, #1
 800479c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2200      	movs	r2, #0
 80047ac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2200      	movs	r2, #0
 80047b2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80047b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3730      	adds	r7, #48	; 0x30
 80047bc:	46bd      	mov	sp, r7
 80047be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c2:	bf00      	nop
 80047c4:	0800701c 	.word	0x0800701c
 80047c8:	00f42400 	.word	0x00f42400

080047cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01a      	beq.n	80048e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ca:	d10a      	bne.n	80048e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  }
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af02      	add	r7, sp, #8
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004920:	f7fc fbe6 	bl	80010f0 <HAL_GetTick>
 8004924:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b08      	cmp	r3, #8
 8004932:	d10e      	bne.n	8004952 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004934:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f82f 	bl	80049a6 <UART_WaitOnFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e025      	b.n	800499e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b04      	cmp	r3, #4
 800495e:	d10e      	bne.n	800497e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004960:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f819 	bl	80049a6 <UART_WaitOnFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e00f      	b.n	800499e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b09c      	sub	sp, #112	; 0x70
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	4613      	mov	r3, r2
 80049b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b6:	e0a9      	b.n	8004b0c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049be:	f000 80a5 	beq.w	8004b0c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c2:	f7fc fb95 	bl	80010f0 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d302      	bcc.n	80049d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80049d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d140      	bne.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049ec:	667b      	str	r3, [r7, #100]	; 0x64
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e6      	bne.n	80049d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3308      	adds	r3, #8
 8004a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	f023 0301 	bic.w	r3, r3, #1
 8004a20:	663b      	str	r3, [r7, #96]	; 0x60
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3308      	adds	r3, #8
 8004a28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e5      	bne.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e069      	b.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d051      	beq.n	8004b0c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a76:	d149      	bne.n	8004b0c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e6      	bne.n	8004a82 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3308      	adds	r3, #8
 8004aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f023 0301 	bic.w	r3, r3, #1
 8004aca:	66bb      	str	r3, [r7, #104]	; 0x68
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ad4:	623a      	str	r2, [r7, #32]
 8004ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	69f9      	ldr	r1, [r7, #28]
 8004ada:	6a3a      	ldr	r2, [r7, #32]
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e5      	bne.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e010      	b.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4013      	ands	r3, r2
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	bf0c      	ite	eq
 8004b1c:	2301      	moveq	r3, #1
 8004b1e:	2300      	movne	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	f43f af46 	beq.w	80049b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3770      	adds	r7, #112	; 0x70
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b0a3      	sub	sp, #140	; 0x8c
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	4613      	mov	r3, r2
 8004b44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6a:	d10e      	bne.n	8004b8a <UART_Start_Receive_IT+0x52>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <UART_Start_Receive_IT+0x48>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b7e:	e02d      	b.n	8004bdc <UART_Start_Receive_IT+0xa4>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	22ff      	movs	r2, #255	; 0xff
 8004b84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b88:	e028      	b.n	8004bdc <UART_Start_Receive_IT+0xa4>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10d      	bne.n	8004bae <UART_Start_Receive_IT+0x76>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d104      	bne.n	8004ba4 <UART_Start_Receive_IT+0x6c>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	22ff      	movs	r2, #255	; 0xff
 8004b9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ba2:	e01b      	b.n	8004bdc <UART_Start_Receive_IT+0xa4>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	227f      	movs	r2, #127	; 0x7f
 8004ba8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004bac:	e016      	b.n	8004bdc <UART_Start_Receive_IT+0xa4>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bb6:	d10d      	bne.n	8004bd4 <UART_Start_Receive_IT+0x9c>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d104      	bne.n	8004bca <UART_Start_Receive_IT+0x92>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	227f      	movs	r2, #127	; 0x7f
 8004bc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004bc8:	e008      	b.n	8004bdc <UART_Start_Receive_IT+0xa4>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	223f      	movs	r2, #63	; 0x3f
 8004bce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004bd2:	e003      	b.n	8004bdc <UART_Start_Receive_IT+0xa4>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2222      	movs	r2, #34	; 0x22
 8004be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3308      	adds	r3, #8
 8004c0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004c10:	673a      	str	r2, [r7, #112]	; 0x70
 8004c12:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004c16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004c1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e3      	bne.n	8004bec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c2c:	d153      	bne.n	8004cd6 <UART_Start_Receive_IT+0x19e>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004c34:	88fa      	ldrh	r2, [r7, #6]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d34d      	bcc.n	8004cd6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c42:	d107      	bne.n	8004c54 <UART_Start_Receive_IT+0x11c>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d103      	bne.n	8004c54 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a4b      	ldr	r2, [pc, #300]	; (8004d7c <UART_Start_Receive_IT+0x244>)
 8004c50:	671a      	str	r2, [r3, #112]	; 0x70
 8004c52:	e002      	b.n	8004c5a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4a4a      	ldr	r2, [pc, #296]	; (8004d80 <UART_Start_Receive_IT+0x248>)
 8004c58:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01a      	beq.n	8004ca0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c8e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e4      	bne.n	8004c6a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004cc0:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e5      	bne.n	8004ca0 <UART_Start_Receive_IT+0x168>
 8004cd4:	e04a      	b.n	8004d6c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cde:	d107      	bne.n	8004cf0 <UART_Start_Receive_IT+0x1b8>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d103      	bne.n	8004cf0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4a26      	ldr	r2, [pc, #152]	; (8004d84 <UART_Start_Receive_IT+0x24c>)
 8004cec:	671a      	str	r2, [r3, #112]	; 0x70
 8004cee:	e002      	b.n	8004cf6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a25      	ldr	r2, [pc, #148]	; (8004d88 <UART_Start_Receive_IT+0x250>)
 8004cf4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d019      	beq.n	8004d3a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004d1a:	677b      	str	r3, [r7, #116]	; 0x74
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
 8004d26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e6      	bne.n	8004d06 <UART_Start_Receive_IT+0x1ce>
 8004d38:	e018      	b.n	8004d6c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	613b      	str	r3, [r7, #16]
   return(result);
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f043 0320 	orr.w	r3, r3, #32
 8004d4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d58:	623b      	str	r3, [r7, #32]
 8004d5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	69f9      	ldr	r1, [r7, #28]
 8004d5e:	6a3a      	ldr	r2, [r7, #32]
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e6      	bne.n	8004d3a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	378c      	adds	r7, #140	; 0x8c
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	08005495 	.word	0x08005495
 8004d80:	0800519d 	.word	0x0800519d
 8004d84:	0800503b 	.word	0x0800503b
 8004d88:	08004edb 	.word	0x08004edb

08004d8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b095      	sub	sp, #84	; 0x54
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db2:	643b      	str	r3, [r7, #64]	; 0x40
 8004db4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004db8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e6      	bne.n	8004d94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3308      	adds	r3, #8
 8004dcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3308      	adds	r3, #8
 8004de8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e3      	bne.n	8004dc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d118      	bne.n	8004e38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f023 0310 	bic.w	r3, r3, #16
 8004e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6979      	ldr	r1, [r7, #20]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	613b      	str	r3, [r7, #16]
   return(result);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e6      	bne.n	8004e06 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004e4c:	bf00      	nop
 8004e4e:	3754      	adds	r7, #84	; 0x54
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f7ff f9c6 	bl	8004208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	61bb      	str	r3, [r7, #24]
 8004eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6979      	ldr	r1, [r7, #20]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e6      	bne.n	8004e8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff f991 	bl	80041f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ed2:	bf00      	nop
 8004ed4:	3720      	adds	r7, #32
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b096      	sub	sp, #88	; 0x58
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004ee8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	2b22      	cmp	r3, #34	; 0x22
 8004ef4:	f040 8095 	bne.w	8005022 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f02:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004f06:	b2d9      	uxtb	r1, r3
 8004f08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f12:	400a      	ands	r2, r1
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d178      	bne.n	8005032 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f54:	653b      	str	r3, [r7, #80]	; 0x50
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e6      	bne.n	8004f40 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3308      	adds	r3, #8
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	623b      	str	r3, [r7, #32]
   return(result);
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3308      	adds	r3, #8
 8004f90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f92:	633a      	str	r2, [r7, #48]	; 0x30
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e5      	bne.n	8004f72 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d12e      	bne.n	800501a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	e853 3f00 	ldrex	r3, [r3]
 8004fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0310 	bic.w	r3, r3, #16
 8004fd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe4:	69b9      	ldr	r1, [r7, #24]
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	e841 2300 	strex	r3, r2, [r1]
 8004fec:	617b      	str	r3, [r7, #20]
   return(result);
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1e6      	bne.n	8004fc2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2b10      	cmp	r3, #16
 8005000:	d103      	bne.n	800500a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2210      	movs	r2, #16
 8005008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005010:	4619      	mov	r1, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff f902 	bl	800421c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005018:	e00b      	b.n	8005032 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7fb fd82 	bl	8000b24 <HAL_UART_RxCpltCallback>
}
 8005020:	e007      	b.n	8005032 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699a      	ldr	r2, [r3, #24]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0208 	orr.w	r2, r2, #8
 8005030:	619a      	str	r2, [r3, #24]
}
 8005032:	bf00      	nop
 8005034:	3758      	adds	r7, #88	; 0x58
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b096      	sub	sp, #88	; 0x58
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005048:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005052:	2b22      	cmp	r3, #34	; 0x22
 8005054:	f040 8095 	bne.w	8005182 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005066:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005068:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800506c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005070:	4013      	ands	r3, r2
 8005072:	b29a      	uxth	r2, r3
 8005074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005076:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507c:	1c9a      	adds	r2, r3, #2
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d178      	bne.n	8005192 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050be:	643b      	str	r3, [r7, #64]	; 0x40
 80050c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e6      	bne.n	80050a0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3308      	adds	r3, #8
 80050d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3308      	adds	r3, #8
 80050f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e5      	bne.n	80050d2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d12e      	bne.n	800517a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f023 0310 	bic.w	r3, r3, #16
 8005136:	647b      	str	r3, [r7, #68]	; 0x44
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6979      	ldr	r1, [r7, #20]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	613b      	str	r3, [r7, #16]
   return(result);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e6      	bne.n	8005122 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b10      	cmp	r3, #16
 8005160:	d103      	bne.n	800516a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2210      	movs	r2, #16
 8005168:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff f852 	bl	800421c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005178:	e00b      	b.n	8005192 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fb fcd2 	bl	8000b24 <HAL_UART_RxCpltCallback>
}
 8005180:	e007      	b.n	8005192 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699a      	ldr	r2, [r3, #24]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0208 	orr.w	r2, r2, #8
 8005190:	619a      	str	r2, [r3, #24]
}
 8005192:	bf00      	nop
 8005194:	3758      	adds	r7, #88	; 0x58
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b0a6      	sub	sp, #152	; 0x98
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80051aa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	2b22      	cmp	r3, #34	; 0x22
 80051d4:	f040 814f 	bne.w	8005476 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80051de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051e2:	e0f6      	b.n	80053d2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051ee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80051f2:	b2d9      	uxtb	r1, r3
 80051f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fe:	400a      	ands	r2, r1
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800522a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	2b00      	cmp	r3, #0
 8005234:	d053      	beq.n	80052de <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005236:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d011      	beq.n	8005266 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005242:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00b      	beq.n	8005266 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2201      	movs	r2, #1
 8005254:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800525c:	f043 0201 	orr.w	r2, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005266:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d011      	beq.n	8005296 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005272:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00b      	beq.n	8005296 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2202      	movs	r2, #2
 8005284:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800528c:	f043 0204 	orr.w	r2, r3, #4
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005296:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d011      	beq.n	80052c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80052a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2204      	movs	r2, #4
 80052b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052bc:	f043 0202 	orr.w	r2, r3, #2
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d006      	beq.n	80052de <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7fe ff99 	bl	8004208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d173      	bne.n	80053d2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80052f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800530c:	66bb      	str	r3, [r7, #104]	; 0x68
 800530e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005312:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800531a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e4      	bne.n	80052ea <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3308      	adds	r3, #8
 8005326:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532a:	e853 3f00 	ldrex	r3, [r3]
 800532e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005336:	f023 0301 	bic.w	r3, r3, #1
 800533a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3308      	adds	r3, #8
 8005342:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005344:	657a      	str	r2, [r7, #84]	; 0x54
 8005346:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800534a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800534c:	e841 2300 	strex	r3, r2, [r1]
 8005350:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e3      	bne.n	8005320 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800536a:	2b01      	cmp	r3, #1
 800536c:	d12e      	bne.n	80053cc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	f023 0310 	bic.w	r3, r3, #16
 8005388:	67bb      	str	r3, [r7, #120]	; 0x78
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005392:	643b      	str	r3, [r7, #64]	; 0x40
 8005394:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005398:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e6      	bne.n	8005374 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d103      	bne.n	80053bc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2210      	movs	r2, #16
 80053ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053c2:	4619      	mov	r1, r3
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7fe ff29 	bl	800421c <HAL_UARTEx_RxEventCallback>
 80053ca:	e002      	b.n	80053d2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7fb fba9 	bl	8000b24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80053d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d006      	beq.n	80053e8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80053da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f47f aefe 	bne.w	80051e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80053f2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d045      	beq.n	8005486 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005400:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005404:	429a      	cmp	r2, r3
 8005406:	d23e      	bcs.n	8005486 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3308      	adds	r3, #8
 800540e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	61fb      	str	r3, [r7, #28]
   return(result);
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800541e:	673b      	str	r3, [r7, #112]	; 0x70
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3308      	adds	r3, #8
 8005426:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005428:	62fa      	str	r2, [r7, #44]	; 0x2c
 800542a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800542e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e5      	bne.n	8005408 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a14      	ldr	r2, [pc, #80]	; (8005490 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005440:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f043 0320 	orr.w	r3, r3, #32
 8005456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	6979      	ldr	r1, [r7, #20]
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	e841 2300 	strex	r3, r2, [r1]
 800546c:	613b      	str	r3, [r7, #16]
   return(result);
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e6      	bne.n	8005442 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005474:	e007      	b.n	8005486 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699a      	ldr	r2, [r3, #24]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0208 	orr.w	r2, r2, #8
 8005484:	619a      	str	r2, [r3, #24]
}
 8005486:	bf00      	nop
 8005488:	3798      	adds	r7, #152	; 0x98
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	08004edb 	.word	0x08004edb

08005494 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b0a8      	sub	sp, #160	; 0xa0
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80054a2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	2b22      	cmp	r3, #34	; 0x22
 80054cc:	f040 8153 	bne.w	8005776 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80054d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80054da:	e0fa      	b.n	80056d2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80054ee:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80054f2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80054f6:	4013      	ands	r3, r2
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005504:	1c9a      	adds	r2, r3, #2
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005526:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	2b00      	cmp	r3, #0
 8005530:	d053      	beq.n	80055da <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005532:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d011      	beq.n	8005562 <UART_RxISR_16BIT_FIFOEN+0xce>
 800553e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00b      	beq.n	8005562 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2201      	movs	r2, #1
 8005550:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005558:	f043 0201 	orr.w	r2, r3, #1
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005562:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d011      	beq.n	8005592 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800556e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00b      	beq.n	8005592 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2202      	movs	r2, #2
 8005580:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005588:	f043 0204 	orr.w	r2, r3, #4
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005592:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	d011      	beq.n	80055c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800559e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00b      	beq.n	80055c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2204      	movs	r2, #4
 80055b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b8:	f043 0202 	orr.w	r2, r3, #2
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d006      	beq.n	80055da <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7fe fe1b 	bl	8004208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d175      	bne.n	80056d2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005608:	66fb      	str	r3, [r7, #108]	; 0x6c
 800560a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800560e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e4      	bne.n	80055e6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800562c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800562e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3308      	adds	r3, #8
 8005640:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005644:	65ba      	str	r2, [r7, #88]	; 0x58
 8005646:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800564a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e1      	bne.n	800561c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800566a:	2b01      	cmp	r3, #1
 800566c:	d12e      	bne.n	80056cc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005684:	f023 0310 	bic.w	r3, r3, #16
 8005688:	67fb      	str	r3, [r7, #124]	; 0x7c
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005692:	647b      	str	r3, [r7, #68]	; 0x44
 8005694:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e6      	bne.n	8005674 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	f003 0310 	and.w	r3, r3, #16
 80056b0:	2b10      	cmp	r3, #16
 80056b2:	d103      	bne.n	80056bc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2210      	movs	r2, #16
 80056ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7fe fda9 	bl	800421c <HAL_UARTEx_RxEventCallback>
 80056ca:	e002      	b.n	80056d2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7fb fa29 	bl	8000b24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d006      	beq.n	80056e8 <UART_RxISR_16BIT_FIFOEN+0x254>
 80056da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f47f aefa 	bne.w	80054dc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056ee:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80056f2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d045      	beq.n	8005786 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005700:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005704:	429a      	cmp	r2, r3
 8005706:	d23e      	bcs.n	8005786 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3308      	adds	r3, #8
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	623b      	str	r3, [r7, #32]
   return(result);
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800571e:	677b      	str	r3, [r7, #116]	; 0x74
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3308      	adds	r3, #8
 8005726:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005728:	633a      	str	r2, [r7, #48]	; 0x30
 800572a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800572e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e5      	bne.n	8005708 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a14      	ldr	r2, [pc, #80]	; (8005790 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8005740:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f043 0320 	orr.w	r3, r3, #32
 8005756:	673b      	str	r3, [r7, #112]	; 0x70
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	69b9      	ldr	r1, [r7, #24]
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	617b      	str	r3, [r7, #20]
   return(result);
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e6      	bne.n	8005742 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005774:	e007      	b.n	8005786 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0208 	orr.w	r2, r2, #8
 8005784:	619a      	str	r2, [r3, #24]
}
 8005786:	bf00      	nop
 8005788:	37a0      	adds	r7, #160	; 0xa0
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	0800503b 	.word	0x0800503b

08005794 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d101      	bne.n	80057e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80057e2:	2302      	movs	r3, #2
 80057e4:	e027      	b.n	8005836 <HAL_UARTEx_DisableFifoMode+0x66>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2224      	movs	r2, #36	; 0x24
 80057f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0201 	bic.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005814:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2220      	movs	r2, #32
 8005828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005856:	2302      	movs	r3, #2
 8005858:	e02d      	b.n	80058b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2224      	movs	r2, #36	; 0x24
 8005866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0201 	bic.w	r2, r2, #1
 8005880:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f850 	bl	800593c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058d2:	2302      	movs	r3, #2
 80058d4:	e02d      	b.n	8005932 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2224      	movs	r2, #36	; 0x24
 80058e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0201 	bic.w	r2, r2, #1
 80058fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f812 	bl	800593c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005948:	2b00      	cmp	r3, #0
 800594a:	d108      	bne.n	800595e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800595c:	e031      	b.n	80059c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800595e:	2308      	movs	r3, #8
 8005960:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005962:	2308      	movs	r3, #8
 8005964:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	0e5b      	lsrs	r3, r3, #25
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	0f5b      	lsrs	r3, r3, #29
 800597e:	b2db      	uxtb	r3, r3
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005986:	7bbb      	ldrb	r3, [r7, #14]
 8005988:	7b3a      	ldrb	r2, [r7, #12]
 800598a:	4911      	ldr	r1, [pc, #68]	; (80059d0 <UARTEx_SetNbDataToProcess+0x94>)
 800598c:	5c8a      	ldrb	r2, [r1, r2]
 800598e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005992:	7b3a      	ldrb	r2, [r7, #12]
 8005994:	490f      	ldr	r1, [pc, #60]	; (80059d4 <UARTEx_SetNbDataToProcess+0x98>)
 8005996:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005998:	fb93 f3f2 	sdiv	r3, r3, r2
 800599c:	b29a      	uxth	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	7b7a      	ldrb	r2, [r7, #13]
 80059a8:	4909      	ldr	r1, [pc, #36]	; (80059d0 <UARTEx_SetNbDataToProcess+0x94>)
 80059aa:	5c8a      	ldrb	r2, [r1, r2]
 80059ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80059b0:	7b7a      	ldrb	r2, [r7, #13]
 80059b2:	4908      	ldr	r1, [pc, #32]	; (80059d4 <UARTEx_SetNbDataToProcess+0x98>)
 80059b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80059c2:	bf00      	nop
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	08007034 	.word	0x08007034
 80059d4:	0800703c 	.word	0x0800703c

080059d8 <atoi>:
 80059d8:	220a      	movs	r2, #10
 80059da:	2100      	movs	r1, #0
 80059dc:	f000 b930 	b.w	8005c40 <strtol>

080059e0 <__errno>:
 80059e0:	4b01      	ldr	r3, [pc, #4]	; (80059e8 <__errno+0x8>)
 80059e2:	6818      	ldr	r0, [r3, #0]
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	200000a4 	.word	0x200000a4

080059ec <__libc_init_array>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	4d0d      	ldr	r5, [pc, #52]	; (8005a24 <__libc_init_array+0x38>)
 80059f0:	4c0d      	ldr	r4, [pc, #52]	; (8005a28 <__libc_init_array+0x3c>)
 80059f2:	1b64      	subs	r4, r4, r5
 80059f4:	10a4      	asrs	r4, r4, #2
 80059f6:	2600      	movs	r6, #0
 80059f8:	42a6      	cmp	r6, r4
 80059fa:	d109      	bne.n	8005a10 <__libc_init_array+0x24>
 80059fc:	4d0b      	ldr	r5, [pc, #44]	; (8005a2c <__libc_init_array+0x40>)
 80059fe:	4c0c      	ldr	r4, [pc, #48]	; (8005a30 <__libc_init_array+0x44>)
 8005a00:	f001 fade 	bl	8006fc0 <_init>
 8005a04:	1b64      	subs	r4, r4, r5
 8005a06:	10a4      	asrs	r4, r4, #2
 8005a08:	2600      	movs	r6, #0
 8005a0a:	42a6      	cmp	r6, r4
 8005a0c:	d105      	bne.n	8005a1a <__libc_init_array+0x2e>
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
 8005a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a14:	4798      	blx	r3
 8005a16:	3601      	adds	r6, #1
 8005a18:	e7ee      	b.n	80059f8 <__libc_init_array+0xc>
 8005a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1e:	4798      	blx	r3
 8005a20:	3601      	adds	r6, #1
 8005a22:	e7f2      	b.n	8005a0a <__libc_init_array+0x1e>
 8005a24:	08007294 	.word	0x08007294
 8005a28:	08007294 	.word	0x08007294
 8005a2c:	08007294 	.word	0x08007294
 8005a30:	08007298 	.word	0x08007298

08005a34 <memset>:
 8005a34:	4402      	add	r2, r0
 8005a36:	4603      	mov	r3, r0
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d100      	bne.n	8005a3e <memset+0xa>
 8005a3c:	4770      	bx	lr
 8005a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a42:	e7f9      	b.n	8005a38 <memset+0x4>

08005a44 <siprintf>:
 8005a44:	b40e      	push	{r1, r2, r3}
 8005a46:	b500      	push	{lr}
 8005a48:	b09c      	sub	sp, #112	; 0x70
 8005a4a:	ab1d      	add	r3, sp, #116	; 0x74
 8005a4c:	9002      	str	r0, [sp, #8]
 8005a4e:	9006      	str	r0, [sp, #24]
 8005a50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a54:	4809      	ldr	r0, [pc, #36]	; (8005a7c <siprintf+0x38>)
 8005a56:	9107      	str	r1, [sp, #28]
 8005a58:	9104      	str	r1, [sp, #16]
 8005a5a:	4909      	ldr	r1, [pc, #36]	; (8005a80 <siprintf+0x3c>)
 8005a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a60:	9105      	str	r1, [sp, #20]
 8005a62:	6800      	ldr	r0, [r0, #0]
 8005a64:	9301      	str	r3, [sp, #4]
 8005a66:	a902      	add	r1, sp, #8
 8005a68:	f000 fa68 	bl	8005f3c <_svfiprintf_r>
 8005a6c:	9b02      	ldr	r3, [sp, #8]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	b01c      	add	sp, #112	; 0x70
 8005a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a78:	b003      	add	sp, #12
 8005a7a:	4770      	bx	lr
 8005a7c:	200000a4 	.word	0x200000a4
 8005a80:	ffff0208 	.word	0xffff0208

08005a84 <strtok>:
 8005a84:	4b16      	ldr	r3, [pc, #88]	; (8005ae0 <strtok+0x5c>)
 8005a86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a88:	681e      	ldr	r6, [r3, #0]
 8005a8a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005a8c:	4605      	mov	r5, r0
 8005a8e:	b9fc      	cbnz	r4, 8005ad0 <strtok+0x4c>
 8005a90:	2050      	movs	r0, #80	; 0x50
 8005a92:	9101      	str	r1, [sp, #4]
 8005a94:	f000 f90e 	bl	8005cb4 <malloc>
 8005a98:	9901      	ldr	r1, [sp, #4]
 8005a9a:	65b0      	str	r0, [r6, #88]	; 0x58
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	b920      	cbnz	r0, 8005aaa <strtok+0x26>
 8005aa0:	4b10      	ldr	r3, [pc, #64]	; (8005ae4 <strtok+0x60>)
 8005aa2:	4811      	ldr	r0, [pc, #68]	; (8005ae8 <strtok+0x64>)
 8005aa4:	2157      	movs	r1, #87	; 0x57
 8005aa6:	f000 f8d5 	bl	8005c54 <__assert_func>
 8005aaa:	e9c0 4400 	strd	r4, r4, [r0]
 8005aae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005ab2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005ab6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005aba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005abe:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005ac2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005ac6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005aca:	6184      	str	r4, [r0, #24]
 8005acc:	7704      	strb	r4, [r0, #28]
 8005ace:	6244      	str	r4, [r0, #36]	; 0x24
 8005ad0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	b002      	add	sp, #8
 8005ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005adc:	f000 b806 	b.w	8005aec <__strtok_r>
 8005ae0:	200000a4 	.word	0x200000a4
 8005ae4:	08007048 	.word	0x08007048
 8005ae8:	0800705f 	.word	0x0800705f

08005aec <__strtok_r>:
 8005aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aee:	b908      	cbnz	r0, 8005af4 <__strtok_r+0x8>
 8005af0:	6810      	ldr	r0, [r2, #0]
 8005af2:	b188      	cbz	r0, 8005b18 <__strtok_r+0x2c>
 8005af4:	4604      	mov	r4, r0
 8005af6:	4620      	mov	r0, r4
 8005af8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005afc:	460f      	mov	r7, r1
 8005afe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005b02:	b91e      	cbnz	r6, 8005b0c <__strtok_r+0x20>
 8005b04:	b965      	cbnz	r5, 8005b20 <__strtok_r+0x34>
 8005b06:	6015      	str	r5, [r2, #0]
 8005b08:	4628      	mov	r0, r5
 8005b0a:	e005      	b.n	8005b18 <__strtok_r+0x2c>
 8005b0c:	42b5      	cmp	r5, r6
 8005b0e:	d1f6      	bne.n	8005afe <__strtok_r+0x12>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1f0      	bne.n	8005af6 <__strtok_r+0xa>
 8005b14:	6014      	str	r4, [r2, #0]
 8005b16:	7003      	strb	r3, [r0, #0]
 8005b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b1a:	461c      	mov	r4, r3
 8005b1c:	e00c      	b.n	8005b38 <__strtok_r+0x4c>
 8005b1e:	b915      	cbnz	r5, 8005b26 <__strtok_r+0x3a>
 8005b20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b24:	460e      	mov	r6, r1
 8005b26:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005b2a:	42ab      	cmp	r3, r5
 8005b2c:	d1f7      	bne.n	8005b1e <__strtok_r+0x32>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f3      	beq.n	8005b1a <__strtok_r+0x2e>
 8005b32:	2300      	movs	r3, #0
 8005b34:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005b38:	6014      	str	r4, [r2, #0]
 8005b3a:	e7ed      	b.n	8005b18 <__strtok_r+0x2c>

08005b3c <_strtol_l.constprop.0>:
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b42:	d001      	beq.n	8005b48 <_strtol_l.constprop.0+0xc>
 8005b44:	2b24      	cmp	r3, #36	; 0x24
 8005b46:	d906      	bls.n	8005b56 <_strtol_l.constprop.0+0x1a>
 8005b48:	f7ff ff4a 	bl	80059e0 <__errno>
 8005b4c:	2316      	movs	r3, #22
 8005b4e:	6003      	str	r3, [r0, #0]
 8005b50:	2000      	movs	r0, #0
 8005b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005c3c <_strtol_l.constprop.0+0x100>
 8005b5a:	460d      	mov	r5, r1
 8005b5c:	462e      	mov	r6, r5
 8005b5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b62:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005b66:	f017 0708 	ands.w	r7, r7, #8
 8005b6a:	d1f7      	bne.n	8005b5c <_strtol_l.constprop.0+0x20>
 8005b6c:	2c2d      	cmp	r4, #45	; 0x2d
 8005b6e:	d132      	bne.n	8005bd6 <_strtol_l.constprop.0+0x9a>
 8005b70:	782c      	ldrb	r4, [r5, #0]
 8005b72:	2701      	movs	r7, #1
 8005b74:	1cb5      	adds	r5, r6, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d05b      	beq.n	8005c32 <_strtol_l.constprop.0+0xf6>
 8005b7a:	2b10      	cmp	r3, #16
 8005b7c:	d109      	bne.n	8005b92 <_strtol_l.constprop.0+0x56>
 8005b7e:	2c30      	cmp	r4, #48	; 0x30
 8005b80:	d107      	bne.n	8005b92 <_strtol_l.constprop.0+0x56>
 8005b82:	782c      	ldrb	r4, [r5, #0]
 8005b84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005b88:	2c58      	cmp	r4, #88	; 0x58
 8005b8a:	d14d      	bne.n	8005c28 <_strtol_l.constprop.0+0xec>
 8005b8c:	786c      	ldrb	r4, [r5, #1]
 8005b8e:	2310      	movs	r3, #16
 8005b90:	3502      	adds	r5, #2
 8005b92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005b96:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b9a:	f04f 0c00 	mov.w	ip, #0
 8005b9e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005ba2:	4666      	mov	r6, ip
 8005ba4:	fb03 8a19 	mls	sl, r3, r9, r8
 8005ba8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005bac:	f1be 0f09 	cmp.w	lr, #9
 8005bb0:	d816      	bhi.n	8005be0 <_strtol_l.constprop.0+0xa4>
 8005bb2:	4674      	mov	r4, lr
 8005bb4:	42a3      	cmp	r3, r4
 8005bb6:	dd24      	ble.n	8005c02 <_strtol_l.constprop.0+0xc6>
 8005bb8:	f1bc 0f00 	cmp.w	ip, #0
 8005bbc:	db1e      	blt.n	8005bfc <_strtol_l.constprop.0+0xc0>
 8005bbe:	45b1      	cmp	r9, r6
 8005bc0:	d31c      	bcc.n	8005bfc <_strtol_l.constprop.0+0xc0>
 8005bc2:	d101      	bne.n	8005bc8 <_strtol_l.constprop.0+0x8c>
 8005bc4:	45a2      	cmp	sl, r4
 8005bc6:	db19      	blt.n	8005bfc <_strtol_l.constprop.0+0xc0>
 8005bc8:	fb06 4603 	mla	r6, r6, r3, r4
 8005bcc:	f04f 0c01 	mov.w	ip, #1
 8005bd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bd4:	e7e8      	b.n	8005ba8 <_strtol_l.constprop.0+0x6c>
 8005bd6:	2c2b      	cmp	r4, #43	; 0x2b
 8005bd8:	bf04      	itt	eq
 8005bda:	782c      	ldrbeq	r4, [r5, #0]
 8005bdc:	1cb5      	addeq	r5, r6, #2
 8005bde:	e7ca      	b.n	8005b76 <_strtol_l.constprop.0+0x3a>
 8005be0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005be4:	f1be 0f19 	cmp.w	lr, #25
 8005be8:	d801      	bhi.n	8005bee <_strtol_l.constprop.0+0xb2>
 8005bea:	3c37      	subs	r4, #55	; 0x37
 8005bec:	e7e2      	b.n	8005bb4 <_strtol_l.constprop.0+0x78>
 8005bee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005bf2:	f1be 0f19 	cmp.w	lr, #25
 8005bf6:	d804      	bhi.n	8005c02 <_strtol_l.constprop.0+0xc6>
 8005bf8:	3c57      	subs	r4, #87	; 0x57
 8005bfa:	e7db      	b.n	8005bb4 <_strtol_l.constprop.0+0x78>
 8005bfc:	f04f 3cff 	mov.w	ip, #4294967295
 8005c00:	e7e6      	b.n	8005bd0 <_strtol_l.constprop.0+0x94>
 8005c02:	f1bc 0f00 	cmp.w	ip, #0
 8005c06:	da05      	bge.n	8005c14 <_strtol_l.constprop.0+0xd8>
 8005c08:	2322      	movs	r3, #34	; 0x22
 8005c0a:	6003      	str	r3, [r0, #0]
 8005c0c:	4646      	mov	r6, r8
 8005c0e:	b942      	cbnz	r2, 8005c22 <_strtol_l.constprop.0+0xe6>
 8005c10:	4630      	mov	r0, r6
 8005c12:	e79e      	b.n	8005b52 <_strtol_l.constprop.0+0x16>
 8005c14:	b107      	cbz	r7, 8005c18 <_strtol_l.constprop.0+0xdc>
 8005c16:	4276      	negs	r6, r6
 8005c18:	2a00      	cmp	r2, #0
 8005c1a:	d0f9      	beq.n	8005c10 <_strtol_l.constprop.0+0xd4>
 8005c1c:	f1bc 0f00 	cmp.w	ip, #0
 8005c20:	d000      	beq.n	8005c24 <_strtol_l.constprop.0+0xe8>
 8005c22:	1e69      	subs	r1, r5, #1
 8005c24:	6011      	str	r1, [r2, #0]
 8005c26:	e7f3      	b.n	8005c10 <_strtol_l.constprop.0+0xd4>
 8005c28:	2430      	movs	r4, #48	; 0x30
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1b1      	bne.n	8005b92 <_strtol_l.constprop.0+0x56>
 8005c2e:	2308      	movs	r3, #8
 8005c30:	e7af      	b.n	8005b92 <_strtol_l.constprop.0+0x56>
 8005c32:	2c30      	cmp	r4, #48	; 0x30
 8005c34:	d0a5      	beq.n	8005b82 <_strtol_l.constprop.0+0x46>
 8005c36:	230a      	movs	r3, #10
 8005c38:	e7ab      	b.n	8005b92 <_strtol_l.constprop.0+0x56>
 8005c3a:	bf00      	nop
 8005c3c:	080070f9 	.word	0x080070f9

08005c40 <strtol>:
 8005c40:	4613      	mov	r3, r2
 8005c42:	460a      	mov	r2, r1
 8005c44:	4601      	mov	r1, r0
 8005c46:	4802      	ldr	r0, [pc, #8]	; (8005c50 <strtol+0x10>)
 8005c48:	6800      	ldr	r0, [r0, #0]
 8005c4a:	f7ff bf77 	b.w	8005b3c <_strtol_l.constprop.0>
 8005c4e:	bf00      	nop
 8005c50:	200000a4 	.word	0x200000a4

08005c54 <__assert_func>:
 8005c54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c56:	4614      	mov	r4, r2
 8005c58:	461a      	mov	r2, r3
 8005c5a:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <__assert_func+0x2c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4605      	mov	r5, r0
 8005c60:	68d8      	ldr	r0, [r3, #12]
 8005c62:	b14c      	cbz	r4, 8005c78 <__assert_func+0x24>
 8005c64:	4b07      	ldr	r3, [pc, #28]	; (8005c84 <__assert_func+0x30>)
 8005c66:	9100      	str	r1, [sp, #0]
 8005c68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c6c:	4906      	ldr	r1, [pc, #24]	; (8005c88 <__assert_func+0x34>)
 8005c6e:	462b      	mov	r3, r5
 8005c70:	f000 f80e 	bl	8005c90 <fiprintf>
 8005c74:	f000 fe20 	bl	80068b8 <abort>
 8005c78:	4b04      	ldr	r3, [pc, #16]	; (8005c8c <__assert_func+0x38>)
 8005c7a:	461c      	mov	r4, r3
 8005c7c:	e7f3      	b.n	8005c66 <__assert_func+0x12>
 8005c7e:	bf00      	nop
 8005c80:	200000a4 	.word	0x200000a4
 8005c84:	080070bc 	.word	0x080070bc
 8005c88:	080070c9 	.word	0x080070c9
 8005c8c:	080070f7 	.word	0x080070f7

08005c90 <fiprintf>:
 8005c90:	b40e      	push	{r1, r2, r3}
 8005c92:	b503      	push	{r0, r1, lr}
 8005c94:	4601      	mov	r1, r0
 8005c96:	ab03      	add	r3, sp, #12
 8005c98:	4805      	ldr	r0, [pc, #20]	; (8005cb0 <fiprintf+0x20>)
 8005c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c9e:	6800      	ldr	r0, [r0, #0]
 8005ca0:	9301      	str	r3, [sp, #4]
 8005ca2:	f000 fa75 	bl	8006190 <_vfiprintf_r>
 8005ca6:	b002      	add	sp, #8
 8005ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cac:	b003      	add	sp, #12
 8005cae:	4770      	bx	lr
 8005cb0:	200000a4 	.word	0x200000a4

08005cb4 <malloc>:
 8005cb4:	4b02      	ldr	r3, [pc, #8]	; (8005cc0 <malloc+0xc>)
 8005cb6:	4601      	mov	r1, r0
 8005cb8:	6818      	ldr	r0, [r3, #0]
 8005cba:	f000 b86f 	b.w	8005d9c <_malloc_r>
 8005cbe:	bf00      	nop
 8005cc0:	200000a4 	.word	0x200000a4

08005cc4 <_free_r>:
 8005cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cc6:	2900      	cmp	r1, #0
 8005cc8:	d044      	beq.n	8005d54 <_free_r+0x90>
 8005cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cce:	9001      	str	r0, [sp, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f1a1 0404 	sub.w	r4, r1, #4
 8005cd6:	bfb8      	it	lt
 8005cd8:	18e4      	addlt	r4, r4, r3
 8005cda:	f001 f83d 	bl	8006d58 <__malloc_lock>
 8005cde:	4a1e      	ldr	r2, [pc, #120]	; (8005d58 <_free_r+0x94>)
 8005ce0:	9801      	ldr	r0, [sp, #4]
 8005ce2:	6813      	ldr	r3, [r2, #0]
 8005ce4:	b933      	cbnz	r3, 8005cf4 <_free_r+0x30>
 8005ce6:	6063      	str	r3, [r4, #4]
 8005ce8:	6014      	str	r4, [r2, #0]
 8005cea:	b003      	add	sp, #12
 8005cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cf0:	f001 b838 	b.w	8006d64 <__malloc_unlock>
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	d908      	bls.n	8005d0a <_free_r+0x46>
 8005cf8:	6825      	ldr	r5, [r4, #0]
 8005cfa:	1961      	adds	r1, r4, r5
 8005cfc:	428b      	cmp	r3, r1
 8005cfe:	bf01      	itttt	eq
 8005d00:	6819      	ldreq	r1, [r3, #0]
 8005d02:	685b      	ldreq	r3, [r3, #4]
 8005d04:	1949      	addeq	r1, r1, r5
 8005d06:	6021      	streq	r1, [r4, #0]
 8005d08:	e7ed      	b.n	8005ce6 <_free_r+0x22>
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	b10b      	cbz	r3, 8005d14 <_free_r+0x50>
 8005d10:	42a3      	cmp	r3, r4
 8005d12:	d9fa      	bls.n	8005d0a <_free_r+0x46>
 8005d14:	6811      	ldr	r1, [r2, #0]
 8005d16:	1855      	adds	r5, r2, r1
 8005d18:	42a5      	cmp	r5, r4
 8005d1a:	d10b      	bne.n	8005d34 <_free_r+0x70>
 8005d1c:	6824      	ldr	r4, [r4, #0]
 8005d1e:	4421      	add	r1, r4
 8005d20:	1854      	adds	r4, r2, r1
 8005d22:	42a3      	cmp	r3, r4
 8005d24:	6011      	str	r1, [r2, #0]
 8005d26:	d1e0      	bne.n	8005cea <_free_r+0x26>
 8005d28:	681c      	ldr	r4, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	6053      	str	r3, [r2, #4]
 8005d2e:	4421      	add	r1, r4
 8005d30:	6011      	str	r1, [r2, #0]
 8005d32:	e7da      	b.n	8005cea <_free_r+0x26>
 8005d34:	d902      	bls.n	8005d3c <_free_r+0x78>
 8005d36:	230c      	movs	r3, #12
 8005d38:	6003      	str	r3, [r0, #0]
 8005d3a:	e7d6      	b.n	8005cea <_free_r+0x26>
 8005d3c:	6825      	ldr	r5, [r4, #0]
 8005d3e:	1961      	adds	r1, r4, r5
 8005d40:	428b      	cmp	r3, r1
 8005d42:	bf04      	itt	eq
 8005d44:	6819      	ldreq	r1, [r3, #0]
 8005d46:	685b      	ldreq	r3, [r3, #4]
 8005d48:	6063      	str	r3, [r4, #4]
 8005d4a:	bf04      	itt	eq
 8005d4c:	1949      	addeq	r1, r1, r5
 8005d4e:	6021      	streq	r1, [r4, #0]
 8005d50:	6054      	str	r4, [r2, #4]
 8005d52:	e7ca      	b.n	8005cea <_free_r+0x26>
 8005d54:	b003      	add	sp, #12
 8005d56:	bd30      	pop	{r4, r5, pc}
 8005d58:	2000029c 	.word	0x2000029c

08005d5c <sbrk_aligned>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	4e0e      	ldr	r6, [pc, #56]	; (8005d98 <sbrk_aligned+0x3c>)
 8005d60:	460c      	mov	r4, r1
 8005d62:	6831      	ldr	r1, [r6, #0]
 8005d64:	4605      	mov	r5, r0
 8005d66:	b911      	cbnz	r1, 8005d6e <sbrk_aligned+0x12>
 8005d68:	f000 fcd6 	bl	8006718 <_sbrk_r>
 8005d6c:	6030      	str	r0, [r6, #0]
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4628      	mov	r0, r5
 8005d72:	f000 fcd1 	bl	8006718 <_sbrk_r>
 8005d76:	1c43      	adds	r3, r0, #1
 8005d78:	d00a      	beq.n	8005d90 <sbrk_aligned+0x34>
 8005d7a:	1cc4      	adds	r4, r0, #3
 8005d7c:	f024 0403 	bic.w	r4, r4, #3
 8005d80:	42a0      	cmp	r0, r4
 8005d82:	d007      	beq.n	8005d94 <sbrk_aligned+0x38>
 8005d84:	1a21      	subs	r1, r4, r0
 8005d86:	4628      	mov	r0, r5
 8005d88:	f000 fcc6 	bl	8006718 <_sbrk_r>
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d101      	bne.n	8005d94 <sbrk_aligned+0x38>
 8005d90:	f04f 34ff 	mov.w	r4, #4294967295
 8005d94:	4620      	mov	r0, r4
 8005d96:	bd70      	pop	{r4, r5, r6, pc}
 8005d98:	200002a0 	.word	0x200002a0

08005d9c <_malloc_r>:
 8005d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da0:	1ccd      	adds	r5, r1, #3
 8005da2:	f025 0503 	bic.w	r5, r5, #3
 8005da6:	3508      	adds	r5, #8
 8005da8:	2d0c      	cmp	r5, #12
 8005daa:	bf38      	it	cc
 8005dac:	250c      	movcc	r5, #12
 8005dae:	2d00      	cmp	r5, #0
 8005db0:	4607      	mov	r7, r0
 8005db2:	db01      	blt.n	8005db8 <_malloc_r+0x1c>
 8005db4:	42a9      	cmp	r1, r5
 8005db6:	d905      	bls.n	8005dc4 <_malloc_r+0x28>
 8005db8:	230c      	movs	r3, #12
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	2600      	movs	r6, #0
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dc4:	4e2e      	ldr	r6, [pc, #184]	; (8005e80 <_malloc_r+0xe4>)
 8005dc6:	f000 ffc7 	bl	8006d58 <__malloc_lock>
 8005dca:	6833      	ldr	r3, [r6, #0]
 8005dcc:	461c      	mov	r4, r3
 8005dce:	bb34      	cbnz	r4, 8005e1e <_malloc_r+0x82>
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	f7ff ffc2 	bl	8005d5c <sbrk_aligned>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	4604      	mov	r4, r0
 8005ddc:	d14d      	bne.n	8005e7a <_malloc_r+0xde>
 8005dde:	6834      	ldr	r4, [r6, #0]
 8005de0:	4626      	mov	r6, r4
 8005de2:	2e00      	cmp	r6, #0
 8005de4:	d140      	bne.n	8005e68 <_malloc_r+0xcc>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	4631      	mov	r1, r6
 8005dea:	4638      	mov	r0, r7
 8005dec:	eb04 0803 	add.w	r8, r4, r3
 8005df0:	f000 fc92 	bl	8006718 <_sbrk_r>
 8005df4:	4580      	cmp	r8, r0
 8005df6:	d13a      	bne.n	8005e6e <_malloc_r+0xd2>
 8005df8:	6821      	ldr	r1, [r4, #0]
 8005dfa:	3503      	adds	r5, #3
 8005dfc:	1a6d      	subs	r5, r5, r1
 8005dfe:	f025 0503 	bic.w	r5, r5, #3
 8005e02:	3508      	adds	r5, #8
 8005e04:	2d0c      	cmp	r5, #12
 8005e06:	bf38      	it	cc
 8005e08:	250c      	movcc	r5, #12
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	f7ff ffa5 	bl	8005d5c <sbrk_aligned>
 8005e12:	3001      	adds	r0, #1
 8005e14:	d02b      	beq.n	8005e6e <_malloc_r+0xd2>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	442b      	add	r3, r5
 8005e1a:	6023      	str	r3, [r4, #0]
 8005e1c:	e00e      	b.n	8005e3c <_malloc_r+0xa0>
 8005e1e:	6822      	ldr	r2, [r4, #0]
 8005e20:	1b52      	subs	r2, r2, r5
 8005e22:	d41e      	bmi.n	8005e62 <_malloc_r+0xc6>
 8005e24:	2a0b      	cmp	r2, #11
 8005e26:	d916      	bls.n	8005e56 <_malloc_r+0xba>
 8005e28:	1961      	adds	r1, r4, r5
 8005e2a:	42a3      	cmp	r3, r4
 8005e2c:	6025      	str	r5, [r4, #0]
 8005e2e:	bf18      	it	ne
 8005e30:	6059      	strne	r1, [r3, #4]
 8005e32:	6863      	ldr	r3, [r4, #4]
 8005e34:	bf08      	it	eq
 8005e36:	6031      	streq	r1, [r6, #0]
 8005e38:	5162      	str	r2, [r4, r5]
 8005e3a:	604b      	str	r3, [r1, #4]
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	f104 060b 	add.w	r6, r4, #11
 8005e42:	f000 ff8f 	bl	8006d64 <__malloc_unlock>
 8005e46:	f026 0607 	bic.w	r6, r6, #7
 8005e4a:	1d23      	adds	r3, r4, #4
 8005e4c:	1af2      	subs	r2, r6, r3
 8005e4e:	d0b6      	beq.n	8005dbe <_malloc_r+0x22>
 8005e50:	1b9b      	subs	r3, r3, r6
 8005e52:	50a3      	str	r3, [r4, r2]
 8005e54:	e7b3      	b.n	8005dbe <_malloc_r+0x22>
 8005e56:	6862      	ldr	r2, [r4, #4]
 8005e58:	42a3      	cmp	r3, r4
 8005e5a:	bf0c      	ite	eq
 8005e5c:	6032      	streq	r2, [r6, #0]
 8005e5e:	605a      	strne	r2, [r3, #4]
 8005e60:	e7ec      	b.n	8005e3c <_malloc_r+0xa0>
 8005e62:	4623      	mov	r3, r4
 8005e64:	6864      	ldr	r4, [r4, #4]
 8005e66:	e7b2      	b.n	8005dce <_malloc_r+0x32>
 8005e68:	4634      	mov	r4, r6
 8005e6a:	6876      	ldr	r6, [r6, #4]
 8005e6c:	e7b9      	b.n	8005de2 <_malloc_r+0x46>
 8005e6e:	230c      	movs	r3, #12
 8005e70:	603b      	str	r3, [r7, #0]
 8005e72:	4638      	mov	r0, r7
 8005e74:	f000 ff76 	bl	8006d64 <__malloc_unlock>
 8005e78:	e7a1      	b.n	8005dbe <_malloc_r+0x22>
 8005e7a:	6025      	str	r5, [r4, #0]
 8005e7c:	e7de      	b.n	8005e3c <_malloc_r+0xa0>
 8005e7e:	bf00      	nop
 8005e80:	2000029c 	.word	0x2000029c

08005e84 <__ssputs_r>:
 8005e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e88:	688e      	ldr	r6, [r1, #8]
 8005e8a:	429e      	cmp	r6, r3
 8005e8c:	4682      	mov	sl, r0
 8005e8e:	460c      	mov	r4, r1
 8005e90:	4690      	mov	r8, r2
 8005e92:	461f      	mov	r7, r3
 8005e94:	d838      	bhi.n	8005f08 <__ssputs_r+0x84>
 8005e96:	898a      	ldrh	r2, [r1, #12]
 8005e98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e9c:	d032      	beq.n	8005f04 <__ssputs_r+0x80>
 8005e9e:	6825      	ldr	r5, [r4, #0]
 8005ea0:	6909      	ldr	r1, [r1, #16]
 8005ea2:	eba5 0901 	sub.w	r9, r5, r1
 8005ea6:	6965      	ldr	r5, [r4, #20]
 8005ea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005eac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	444b      	add	r3, r9
 8005eb4:	106d      	asrs	r5, r5, #1
 8005eb6:	429d      	cmp	r5, r3
 8005eb8:	bf38      	it	cc
 8005eba:	461d      	movcc	r5, r3
 8005ebc:	0553      	lsls	r3, r2, #21
 8005ebe:	d531      	bpl.n	8005f24 <__ssputs_r+0xa0>
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	f7ff ff6b 	bl	8005d9c <_malloc_r>
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	b950      	cbnz	r0, 8005ee0 <__ssputs_r+0x5c>
 8005eca:	230c      	movs	r3, #12
 8005ecc:	f8ca 3000 	str.w	r3, [sl]
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ed6:	81a3      	strh	r3, [r4, #12]
 8005ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8005edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee0:	6921      	ldr	r1, [r4, #16]
 8005ee2:	464a      	mov	r2, r9
 8005ee4:	f000 ff10 	bl	8006d08 <memcpy>
 8005ee8:	89a3      	ldrh	r3, [r4, #12]
 8005eea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef2:	81a3      	strh	r3, [r4, #12]
 8005ef4:	6126      	str	r6, [r4, #16]
 8005ef6:	6165      	str	r5, [r4, #20]
 8005ef8:	444e      	add	r6, r9
 8005efa:	eba5 0509 	sub.w	r5, r5, r9
 8005efe:	6026      	str	r6, [r4, #0]
 8005f00:	60a5      	str	r5, [r4, #8]
 8005f02:	463e      	mov	r6, r7
 8005f04:	42be      	cmp	r6, r7
 8005f06:	d900      	bls.n	8005f0a <__ssputs_r+0x86>
 8005f08:	463e      	mov	r6, r7
 8005f0a:	6820      	ldr	r0, [r4, #0]
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	4641      	mov	r1, r8
 8005f10:	f000 ff08 	bl	8006d24 <memmove>
 8005f14:	68a3      	ldr	r3, [r4, #8]
 8005f16:	1b9b      	subs	r3, r3, r6
 8005f18:	60a3      	str	r3, [r4, #8]
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	4433      	add	r3, r6
 8005f1e:	6023      	str	r3, [r4, #0]
 8005f20:	2000      	movs	r0, #0
 8005f22:	e7db      	b.n	8005edc <__ssputs_r+0x58>
 8005f24:	462a      	mov	r2, r5
 8005f26:	f000 ff23 	bl	8006d70 <_realloc_r>
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	d1e1      	bne.n	8005ef4 <__ssputs_r+0x70>
 8005f30:	6921      	ldr	r1, [r4, #16]
 8005f32:	4650      	mov	r0, sl
 8005f34:	f7ff fec6 	bl	8005cc4 <_free_r>
 8005f38:	e7c7      	b.n	8005eca <__ssputs_r+0x46>
	...

08005f3c <_svfiprintf_r>:
 8005f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f40:	4698      	mov	r8, r3
 8005f42:	898b      	ldrh	r3, [r1, #12]
 8005f44:	061b      	lsls	r3, r3, #24
 8005f46:	b09d      	sub	sp, #116	; 0x74
 8005f48:	4607      	mov	r7, r0
 8005f4a:	460d      	mov	r5, r1
 8005f4c:	4614      	mov	r4, r2
 8005f4e:	d50e      	bpl.n	8005f6e <_svfiprintf_r+0x32>
 8005f50:	690b      	ldr	r3, [r1, #16]
 8005f52:	b963      	cbnz	r3, 8005f6e <_svfiprintf_r+0x32>
 8005f54:	2140      	movs	r1, #64	; 0x40
 8005f56:	f7ff ff21 	bl	8005d9c <_malloc_r>
 8005f5a:	6028      	str	r0, [r5, #0]
 8005f5c:	6128      	str	r0, [r5, #16]
 8005f5e:	b920      	cbnz	r0, 8005f6a <_svfiprintf_r+0x2e>
 8005f60:	230c      	movs	r3, #12
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	f04f 30ff 	mov.w	r0, #4294967295
 8005f68:	e0d1      	b.n	800610e <_svfiprintf_r+0x1d2>
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	616b      	str	r3, [r5, #20]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9309      	str	r3, [sp, #36]	; 0x24
 8005f72:	2320      	movs	r3, #32
 8005f74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f78:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f7c:	2330      	movs	r3, #48	; 0x30
 8005f7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006128 <_svfiprintf_r+0x1ec>
 8005f82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f86:	f04f 0901 	mov.w	r9, #1
 8005f8a:	4623      	mov	r3, r4
 8005f8c:	469a      	mov	sl, r3
 8005f8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f92:	b10a      	cbz	r2, 8005f98 <_svfiprintf_r+0x5c>
 8005f94:	2a25      	cmp	r2, #37	; 0x25
 8005f96:	d1f9      	bne.n	8005f8c <_svfiprintf_r+0x50>
 8005f98:	ebba 0b04 	subs.w	fp, sl, r4
 8005f9c:	d00b      	beq.n	8005fb6 <_svfiprintf_r+0x7a>
 8005f9e:	465b      	mov	r3, fp
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	f7ff ff6d 	bl	8005e84 <__ssputs_r>
 8005faa:	3001      	adds	r0, #1
 8005fac:	f000 80aa 	beq.w	8006104 <_svfiprintf_r+0x1c8>
 8005fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fb2:	445a      	add	r2, fp
 8005fb4:	9209      	str	r2, [sp, #36]	; 0x24
 8005fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 80a2 	beq.w	8006104 <_svfiprintf_r+0x1c8>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fca:	f10a 0a01 	add.w	sl, sl, #1
 8005fce:	9304      	str	r3, [sp, #16]
 8005fd0:	9307      	str	r3, [sp, #28]
 8005fd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fd6:	931a      	str	r3, [sp, #104]	; 0x68
 8005fd8:	4654      	mov	r4, sl
 8005fda:	2205      	movs	r2, #5
 8005fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe0:	4851      	ldr	r0, [pc, #324]	; (8006128 <_svfiprintf_r+0x1ec>)
 8005fe2:	f7fa f92d 	bl	8000240 <memchr>
 8005fe6:	9a04      	ldr	r2, [sp, #16]
 8005fe8:	b9d8      	cbnz	r0, 8006022 <_svfiprintf_r+0xe6>
 8005fea:	06d0      	lsls	r0, r2, #27
 8005fec:	bf44      	itt	mi
 8005fee:	2320      	movmi	r3, #32
 8005ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ff4:	0711      	lsls	r1, r2, #28
 8005ff6:	bf44      	itt	mi
 8005ff8:	232b      	movmi	r3, #43	; 0x2b
 8005ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8006002:	2b2a      	cmp	r3, #42	; 0x2a
 8006004:	d015      	beq.n	8006032 <_svfiprintf_r+0xf6>
 8006006:	9a07      	ldr	r2, [sp, #28]
 8006008:	4654      	mov	r4, sl
 800600a:	2000      	movs	r0, #0
 800600c:	f04f 0c0a 	mov.w	ip, #10
 8006010:	4621      	mov	r1, r4
 8006012:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006016:	3b30      	subs	r3, #48	; 0x30
 8006018:	2b09      	cmp	r3, #9
 800601a:	d94e      	bls.n	80060ba <_svfiprintf_r+0x17e>
 800601c:	b1b0      	cbz	r0, 800604c <_svfiprintf_r+0x110>
 800601e:	9207      	str	r2, [sp, #28]
 8006020:	e014      	b.n	800604c <_svfiprintf_r+0x110>
 8006022:	eba0 0308 	sub.w	r3, r0, r8
 8006026:	fa09 f303 	lsl.w	r3, r9, r3
 800602a:	4313      	orrs	r3, r2
 800602c:	9304      	str	r3, [sp, #16]
 800602e:	46a2      	mov	sl, r4
 8006030:	e7d2      	b.n	8005fd8 <_svfiprintf_r+0x9c>
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	1d19      	adds	r1, r3, #4
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	9103      	str	r1, [sp, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	bfbb      	ittet	lt
 800603e:	425b      	neglt	r3, r3
 8006040:	f042 0202 	orrlt.w	r2, r2, #2
 8006044:	9307      	strge	r3, [sp, #28]
 8006046:	9307      	strlt	r3, [sp, #28]
 8006048:	bfb8      	it	lt
 800604a:	9204      	strlt	r2, [sp, #16]
 800604c:	7823      	ldrb	r3, [r4, #0]
 800604e:	2b2e      	cmp	r3, #46	; 0x2e
 8006050:	d10c      	bne.n	800606c <_svfiprintf_r+0x130>
 8006052:	7863      	ldrb	r3, [r4, #1]
 8006054:	2b2a      	cmp	r3, #42	; 0x2a
 8006056:	d135      	bne.n	80060c4 <_svfiprintf_r+0x188>
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	1d1a      	adds	r2, r3, #4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	9203      	str	r2, [sp, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	bfb8      	it	lt
 8006064:	f04f 33ff 	movlt.w	r3, #4294967295
 8006068:	3402      	adds	r4, #2
 800606a:	9305      	str	r3, [sp, #20]
 800606c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006138 <_svfiprintf_r+0x1fc>
 8006070:	7821      	ldrb	r1, [r4, #0]
 8006072:	2203      	movs	r2, #3
 8006074:	4650      	mov	r0, sl
 8006076:	f7fa f8e3 	bl	8000240 <memchr>
 800607a:	b140      	cbz	r0, 800608e <_svfiprintf_r+0x152>
 800607c:	2340      	movs	r3, #64	; 0x40
 800607e:	eba0 000a 	sub.w	r0, r0, sl
 8006082:	fa03 f000 	lsl.w	r0, r3, r0
 8006086:	9b04      	ldr	r3, [sp, #16]
 8006088:	4303      	orrs	r3, r0
 800608a:	3401      	adds	r4, #1
 800608c:	9304      	str	r3, [sp, #16]
 800608e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006092:	4826      	ldr	r0, [pc, #152]	; (800612c <_svfiprintf_r+0x1f0>)
 8006094:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006098:	2206      	movs	r2, #6
 800609a:	f7fa f8d1 	bl	8000240 <memchr>
 800609e:	2800      	cmp	r0, #0
 80060a0:	d038      	beq.n	8006114 <_svfiprintf_r+0x1d8>
 80060a2:	4b23      	ldr	r3, [pc, #140]	; (8006130 <_svfiprintf_r+0x1f4>)
 80060a4:	bb1b      	cbnz	r3, 80060ee <_svfiprintf_r+0x1b2>
 80060a6:	9b03      	ldr	r3, [sp, #12]
 80060a8:	3307      	adds	r3, #7
 80060aa:	f023 0307 	bic.w	r3, r3, #7
 80060ae:	3308      	adds	r3, #8
 80060b0:	9303      	str	r3, [sp, #12]
 80060b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b4:	4433      	add	r3, r6
 80060b6:	9309      	str	r3, [sp, #36]	; 0x24
 80060b8:	e767      	b.n	8005f8a <_svfiprintf_r+0x4e>
 80060ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80060be:	460c      	mov	r4, r1
 80060c0:	2001      	movs	r0, #1
 80060c2:	e7a5      	b.n	8006010 <_svfiprintf_r+0xd4>
 80060c4:	2300      	movs	r3, #0
 80060c6:	3401      	adds	r4, #1
 80060c8:	9305      	str	r3, [sp, #20]
 80060ca:	4619      	mov	r1, r3
 80060cc:	f04f 0c0a 	mov.w	ip, #10
 80060d0:	4620      	mov	r0, r4
 80060d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060d6:	3a30      	subs	r2, #48	; 0x30
 80060d8:	2a09      	cmp	r2, #9
 80060da:	d903      	bls.n	80060e4 <_svfiprintf_r+0x1a8>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0c5      	beq.n	800606c <_svfiprintf_r+0x130>
 80060e0:	9105      	str	r1, [sp, #20]
 80060e2:	e7c3      	b.n	800606c <_svfiprintf_r+0x130>
 80060e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80060e8:	4604      	mov	r4, r0
 80060ea:	2301      	movs	r3, #1
 80060ec:	e7f0      	b.n	80060d0 <_svfiprintf_r+0x194>
 80060ee:	ab03      	add	r3, sp, #12
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	462a      	mov	r2, r5
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <_svfiprintf_r+0x1f8>)
 80060f6:	a904      	add	r1, sp, #16
 80060f8:	4638      	mov	r0, r7
 80060fa:	f3af 8000 	nop.w
 80060fe:	1c42      	adds	r2, r0, #1
 8006100:	4606      	mov	r6, r0
 8006102:	d1d6      	bne.n	80060b2 <_svfiprintf_r+0x176>
 8006104:	89ab      	ldrh	r3, [r5, #12]
 8006106:	065b      	lsls	r3, r3, #25
 8006108:	f53f af2c 	bmi.w	8005f64 <_svfiprintf_r+0x28>
 800610c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800610e:	b01d      	add	sp, #116	; 0x74
 8006110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006114:	ab03      	add	r3, sp, #12
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	462a      	mov	r2, r5
 800611a:	4b06      	ldr	r3, [pc, #24]	; (8006134 <_svfiprintf_r+0x1f8>)
 800611c:	a904      	add	r1, sp, #16
 800611e:	4638      	mov	r0, r7
 8006120:	f000 f9d4 	bl	80064cc <_printf_i>
 8006124:	e7eb      	b.n	80060fe <_svfiprintf_r+0x1c2>
 8006126:	bf00      	nop
 8006128:	080071f9 	.word	0x080071f9
 800612c:	08007203 	.word	0x08007203
 8006130:	00000000 	.word	0x00000000
 8006134:	08005e85 	.word	0x08005e85
 8006138:	080071ff 	.word	0x080071ff

0800613c <__sfputc_r>:
 800613c:	6893      	ldr	r3, [r2, #8]
 800613e:	3b01      	subs	r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	b410      	push	{r4}
 8006144:	6093      	str	r3, [r2, #8]
 8006146:	da08      	bge.n	800615a <__sfputc_r+0x1e>
 8006148:	6994      	ldr	r4, [r2, #24]
 800614a:	42a3      	cmp	r3, r4
 800614c:	db01      	blt.n	8006152 <__sfputc_r+0x16>
 800614e:	290a      	cmp	r1, #10
 8006150:	d103      	bne.n	800615a <__sfputc_r+0x1e>
 8006152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006156:	f000 baef 	b.w	8006738 <__swbuf_r>
 800615a:	6813      	ldr	r3, [r2, #0]
 800615c:	1c58      	adds	r0, r3, #1
 800615e:	6010      	str	r0, [r2, #0]
 8006160:	7019      	strb	r1, [r3, #0]
 8006162:	4608      	mov	r0, r1
 8006164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006168:	4770      	bx	lr

0800616a <__sfputs_r>:
 800616a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616c:	4606      	mov	r6, r0
 800616e:	460f      	mov	r7, r1
 8006170:	4614      	mov	r4, r2
 8006172:	18d5      	adds	r5, r2, r3
 8006174:	42ac      	cmp	r4, r5
 8006176:	d101      	bne.n	800617c <__sfputs_r+0x12>
 8006178:	2000      	movs	r0, #0
 800617a:	e007      	b.n	800618c <__sfputs_r+0x22>
 800617c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006180:	463a      	mov	r2, r7
 8006182:	4630      	mov	r0, r6
 8006184:	f7ff ffda 	bl	800613c <__sfputc_r>
 8006188:	1c43      	adds	r3, r0, #1
 800618a:	d1f3      	bne.n	8006174 <__sfputs_r+0xa>
 800618c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006190 <_vfiprintf_r>:
 8006190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	460d      	mov	r5, r1
 8006196:	b09d      	sub	sp, #116	; 0x74
 8006198:	4614      	mov	r4, r2
 800619a:	4698      	mov	r8, r3
 800619c:	4606      	mov	r6, r0
 800619e:	b118      	cbz	r0, 80061a8 <_vfiprintf_r+0x18>
 80061a0:	6983      	ldr	r3, [r0, #24]
 80061a2:	b90b      	cbnz	r3, 80061a8 <_vfiprintf_r+0x18>
 80061a4:	f000 fcaa 	bl	8006afc <__sinit>
 80061a8:	4b89      	ldr	r3, [pc, #548]	; (80063d0 <_vfiprintf_r+0x240>)
 80061aa:	429d      	cmp	r5, r3
 80061ac:	d11b      	bne.n	80061e6 <_vfiprintf_r+0x56>
 80061ae:	6875      	ldr	r5, [r6, #4]
 80061b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061b2:	07d9      	lsls	r1, r3, #31
 80061b4:	d405      	bmi.n	80061c2 <_vfiprintf_r+0x32>
 80061b6:	89ab      	ldrh	r3, [r5, #12]
 80061b8:	059a      	lsls	r2, r3, #22
 80061ba:	d402      	bmi.n	80061c2 <_vfiprintf_r+0x32>
 80061bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061be:	f000 fd3b 	bl	8006c38 <__retarget_lock_acquire_recursive>
 80061c2:	89ab      	ldrh	r3, [r5, #12]
 80061c4:	071b      	lsls	r3, r3, #28
 80061c6:	d501      	bpl.n	80061cc <_vfiprintf_r+0x3c>
 80061c8:	692b      	ldr	r3, [r5, #16]
 80061ca:	b9eb      	cbnz	r3, 8006208 <_vfiprintf_r+0x78>
 80061cc:	4629      	mov	r1, r5
 80061ce:	4630      	mov	r0, r6
 80061d0:	f000 fb04 	bl	80067dc <__swsetup_r>
 80061d4:	b1c0      	cbz	r0, 8006208 <_vfiprintf_r+0x78>
 80061d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061d8:	07dc      	lsls	r4, r3, #31
 80061da:	d50e      	bpl.n	80061fa <_vfiprintf_r+0x6a>
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295
 80061e0:	b01d      	add	sp, #116	; 0x74
 80061e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e6:	4b7b      	ldr	r3, [pc, #492]	; (80063d4 <_vfiprintf_r+0x244>)
 80061e8:	429d      	cmp	r5, r3
 80061ea:	d101      	bne.n	80061f0 <_vfiprintf_r+0x60>
 80061ec:	68b5      	ldr	r5, [r6, #8]
 80061ee:	e7df      	b.n	80061b0 <_vfiprintf_r+0x20>
 80061f0:	4b79      	ldr	r3, [pc, #484]	; (80063d8 <_vfiprintf_r+0x248>)
 80061f2:	429d      	cmp	r5, r3
 80061f4:	bf08      	it	eq
 80061f6:	68f5      	ldreq	r5, [r6, #12]
 80061f8:	e7da      	b.n	80061b0 <_vfiprintf_r+0x20>
 80061fa:	89ab      	ldrh	r3, [r5, #12]
 80061fc:	0598      	lsls	r0, r3, #22
 80061fe:	d4ed      	bmi.n	80061dc <_vfiprintf_r+0x4c>
 8006200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006202:	f000 fd1a 	bl	8006c3a <__retarget_lock_release_recursive>
 8006206:	e7e9      	b.n	80061dc <_vfiprintf_r+0x4c>
 8006208:	2300      	movs	r3, #0
 800620a:	9309      	str	r3, [sp, #36]	; 0x24
 800620c:	2320      	movs	r3, #32
 800620e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006212:	f8cd 800c 	str.w	r8, [sp, #12]
 8006216:	2330      	movs	r3, #48	; 0x30
 8006218:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80063dc <_vfiprintf_r+0x24c>
 800621c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006220:	f04f 0901 	mov.w	r9, #1
 8006224:	4623      	mov	r3, r4
 8006226:	469a      	mov	sl, r3
 8006228:	f813 2b01 	ldrb.w	r2, [r3], #1
 800622c:	b10a      	cbz	r2, 8006232 <_vfiprintf_r+0xa2>
 800622e:	2a25      	cmp	r2, #37	; 0x25
 8006230:	d1f9      	bne.n	8006226 <_vfiprintf_r+0x96>
 8006232:	ebba 0b04 	subs.w	fp, sl, r4
 8006236:	d00b      	beq.n	8006250 <_vfiprintf_r+0xc0>
 8006238:	465b      	mov	r3, fp
 800623a:	4622      	mov	r2, r4
 800623c:	4629      	mov	r1, r5
 800623e:	4630      	mov	r0, r6
 8006240:	f7ff ff93 	bl	800616a <__sfputs_r>
 8006244:	3001      	adds	r0, #1
 8006246:	f000 80aa 	beq.w	800639e <_vfiprintf_r+0x20e>
 800624a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800624c:	445a      	add	r2, fp
 800624e:	9209      	str	r2, [sp, #36]	; 0x24
 8006250:	f89a 3000 	ldrb.w	r3, [sl]
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 80a2 	beq.w	800639e <_vfiprintf_r+0x20e>
 800625a:	2300      	movs	r3, #0
 800625c:	f04f 32ff 	mov.w	r2, #4294967295
 8006260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006264:	f10a 0a01 	add.w	sl, sl, #1
 8006268:	9304      	str	r3, [sp, #16]
 800626a:	9307      	str	r3, [sp, #28]
 800626c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006270:	931a      	str	r3, [sp, #104]	; 0x68
 8006272:	4654      	mov	r4, sl
 8006274:	2205      	movs	r2, #5
 8006276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800627a:	4858      	ldr	r0, [pc, #352]	; (80063dc <_vfiprintf_r+0x24c>)
 800627c:	f7f9 ffe0 	bl	8000240 <memchr>
 8006280:	9a04      	ldr	r2, [sp, #16]
 8006282:	b9d8      	cbnz	r0, 80062bc <_vfiprintf_r+0x12c>
 8006284:	06d1      	lsls	r1, r2, #27
 8006286:	bf44      	itt	mi
 8006288:	2320      	movmi	r3, #32
 800628a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800628e:	0713      	lsls	r3, r2, #28
 8006290:	bf44      	itt	mi
 8006292:	232b      	movmi	r3, #43	; 0x2b
 8006294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006298:	f89a 3000 	ldrb.w	r3, [sl]
 800629c:	2b2a      	cmp	r3, #42	; 0x2a
 800629e:	d015      	beq.n	80062cc <_vfiprintf_r+0x13c>
 80062a0:	9a07      	ldr	r2, [sp, #28]
 80062a2:	4654      	mov	r4, sl
 80062a4:	2000      	movs	r0, #0
 80062a6:	f04f 0c0a 	mov.w	ip, #10
 80062aa:	4621      	mov	r1, r4
 80062ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062b0:	3b30      	subs	r3, #48	; 0x30
 80062b2:	2b09      	cmp	r3, #9
 80062b4:	d94e      	bls.n	8006354 <_vfiprintf_r+0x1c4>
 80062b6:	b1b0      	cbz	r0, 80062e6 <_vfiprintf_r+0x156>
 80062b8:	9207      	str	r2, [sp, #28]
 80062ba:	e014      	b.n	80062e6 <_vfiprintf_r+0x156>
 80062bc:	eba0 0308 	sub.w	r3, r0, r8
 80062c0:	fa09 f303 	lsl.w	r3, r9, r3
 80062c4:	4313      	orrs	r3, r2
 80062c6:	9304      	str	r3, [sp, #16]
 80062c8:	46a2      	mov	sl, r4
 80062ca:	e7d2      	b.n	8006272 <_vfiprintf_r+0xe2>
 80062cc:	9b03      	ldr	r3, [sp, #12]
 80062ce:	1d19      	adds	r1, r3, #4
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	9103      	str	r1, [sp, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bfbb      	ittet	lt
 80062d8:	425b      	neglt	r3, r3
 80062da:	f042 0202 	orrlt.w	r2, r2, #2
 80062de:	9307      	strge	r3, [sp, #28]
 80062e0:	9307      	strlt	r3, [sp, #28]
 80062e2:	bfb8      	it	lt
 80062e4:	9204      	strlt	r2, [sp, #16]
 80062e6:	7823      	ldrb	r3, [r4, #0]
 80062e8:	2b2e      	cmp	r3, #46	; 0x2e
 80062ea:	d10c      	bne.n	8006306 <_vfiprintf_r+0x176>
 80062ec:	7863      	ldrb	r3, [r4, #1]
 80062ee:	2b2a      	cmp	r3, #42	; 0x2a
 80062f0:	d135      	bne.n	800635e <_vfiprintf_r+0x1ce>
 80062f2:	9b03      	ldr	r3, [sp, #12]
 80062f4:	1d1a      	adds	r2, r3, #4
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	9203      	str	r2, [sp, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	bfb8      	it	lt
 80062fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8006302:	3402      	adds	r4, #2
 8006304:	9305      	str	r3, [sp, #20]
 8006306:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80063ec <_vfiprintf_r+0x25c>
 800630a:	7821      	ldrb	r1, [r4, #0]
 800630c:	2203      	movs	r2, #3
 800630e:	4650      	mov	r0, sl
 8006310:	f7f9 ff96 	bl	8000240 <memchr>
 8006314:	b140      	cbz	r0, 8006328 <_vfiprintf_r+0x198>
 8006316:	2340      	movs	r3, #64	; 0x40
 8006318:	eba0 000a 	sub.w	r0, r0, sl
 800631c:	fa03 f000 	lsl.w	r0, r3, r0
 8006320:	9b04      	ldr	r3, [sp, #16]
 8006322:	4303      	orrs	r3, r0
 8006324:	3401      	adds	r4, #1
 8006326:	9304      	str	r3, [sp, #16]
 8006328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800632c:	482c      	ldr	r0, [pc, #176]	; (80063e0 <_vfiprintf_r+0x250>)
 800632e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006332:	2206      	movs	r2, #6
 8006334:	f7f9 ff84 	bl	8000240 <memchr>
 8006338:	2800      	cmp	r0, #0
 800633a:	d03f      	beq.n	80063bc <_vfiprintf_r+0x22c>
 800633c:	4b29      	ldr	r3, [pc, #164]	; (80063e4 <_vfiprintf_r+0x254>)
 800633e:	bb1b      	cbnz	r3, 8006388 <_vfiprintf_r+0x1f8>
 8006340:	9b03      	ldr	r3, [sp, #12]
 8006342:	3307      	adds	r3, #7
 8006344:	f023 0307 	bic.w	r3, r3, #7
 8006348:	3308      	adds	r3, #8
 800634a:	9303      	str	r3, [sp, #12]
 800634c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800634e:	443b      	add	r3, r7
 8006350:	9309      	str	r3, [sp, #36]	; 0x24
 8006352:	e767      	b.n	8006224 <_vfiprintf_r+0x94>
 8006354:	fb0c 3202 	mla	r2, ip, r2, r3
 8006358:	460c      	mov	r4, r1
 800635a:	2001      	movs	r0, #1
 800635c:	e7a5      	b.n	80062aa <_vfiprintf_r+0x11a>
 800635e:	2300      	movs	r3, #0
 8006360:	3401      	adds	r4, #1
 8006362:	9305      	str	r3, [sp, #20]
 8006364:	4619      	mov	r1, r3
 8006366:	f04f 0c0a 	mov.w	ip, #10
 800636a:	4620      	mov	r0, r4
 800636c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006370:	3a30      	subs	r2, #48	; 0x30
 8006372:	2a09      	cmp	r2, #9
 8006374:	d903      	bls.n	800637e <_vfiprintf_r+0x1ee>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0c5      	beq.n	8006306 <_vfiprintf_r+0x176>
 800637a:	9105      	str	r1, [sp, #20]
 800637c:	e7c3      	b.n	8006306 <_vfiprintf_r+0x176>
 800637e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006382:	4604      	mov	r4, r0
 8006384:	2301      	movs	r3, #1
 8006386:	e7f0      	b.n	800636a <_vfiprintf_r+0x1da>
 8006388:	ab03      	add	r3, sp, #12
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	462a      	mov	r2, r5
 800638e:	4b16      	ldr	r3, [pc, #88]	; (80063e8 <_vfiprintf_r+0x258>)
 8006390:	a904      	add	r1, sp, #16
 8006392:	4630      	mov	r0, r6
 8006394:	f3af 8000 	nop.w
 8006398:	4607      	mov	r7, r0
 800639a:	1c78      	adds	r0, r7, #1
 800639c:	d1d6      	bne.n	800634c <_vfiprintf_r+0x1bc>
 800639e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063a0:	07d9      	lsls	r1, r3, #31
 80063a2:	d405      	bmi.n	80063b0 <_vfiprintf_r+0x220>
 80063a4:	89ab      	ldrh	r3, [r5, #12]
 80063a6:	059a      	lsls	r2, r3, #22
 80063a8:	d402      	bmi.n	80063b0 <_vfiprintf_r+0x220>
 80063aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063ac:	f000 fc45 	bl	8006c3a <__retarget_lock_release_recursive>
 80063b0:	89ab      	ldrh	r3, [r5, #12]
 80063b2:	065b      	lsls	r3, r3, #25
 80063b4:	f53f af12 	bmi.w	80061dc <_vfiprintf_r+0x4c>
 80063b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063ba:	e711      	b.n	80061e0 <_vfiprintf_r+0x50>
 80063bc:	ab03      	add	r3, sp, #12
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	462a      	mov	r2, r5
 80063c2:	4b09      	ldr	r3, [pc, #36]	; (80063e8 <_vfiprintf_r+0x258>)
 80063c4:	a904      	add	r1, sp, #16
 80063c6:	4630      	mov	r0, r6
 80063c8:	f000 f880 	bl	80064cc <_printf_i>
 80063cc:	e7e4      	b.n	8006398 <_vfiprintf_r+0x208>
 80063ce:	bf00      	nop
 80063d0:	0800724c 	.word	0x0800724c
 80063d4:	0800726c 	.word	0x0800726c
 80063d8:	0800722c 	.word	0x0800722c
 80063dc:	080071f9 	.word	0x080071f9
 80063e0:	08007203 	.word	0x08007203
 80063e4:	00000000 	.word	0x00000000
 80063e8:	0800616b 	.word	0x0800616b
 80063ec:	080071ff 	.word	0x080071ff

080063f0 <_printf_common>:
 80063f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f4:	4616      	mov	r6, r2
 80063f6:	4699      	mov	r9, r3
 80063f8:	688a      	ldr	r2, [r1, #8]
 80063fa:	690b      	ldr	r3, [r1, #16]
 80063fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006400:	4293      	cmp	r3, r2
 8006402:	bfb8      	it	lt
 8006404:	4613      	movlt	r3, r2
 8006406:	6033      	str	r3, [r6, #0]
 8006408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800640c:	4607      	mov	r7, r0
 800640e:	460c      	mov	r4, r1
 8006410:	b10a      	cbz	r2, 8006416 <_printf_common+0x26>
 8006412:	3301      	adds	r3, #1
 8006414:	6033      	str	r3, [r6, #0]
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	0699      	lsls	r1, r3, #26
 800641a:	bf42      	ittt	mi
 800641c:	6833      	ldrmi	r3, [r6, #0]
 800641e:	3302      	addmi	r3, #2
 8006420:	6033      	strmi	r3, [r6, #0]
 8006422:	6825      	ldr	r5, [r4, #0]
 8006424:	f015 0506 	ands.w	r5, r5, #6
 8006428:	d106      	bne.n	8006438 <_printf_common+0x48>
 800642a:	f104 0a19 	add.w	sl, r4, #25
 800642e:	68e3      	ldr	r3, [r4, #12]
 8006430:	6832      	ldr	r2, [r6, #0]
 8006432:	1a9b      	subs	r3, r3, r2
 8006434:	42ab      	cmp	r3, r5
 8006436:	dc26      	bgt.n	8006486 <_printf_common+0x96>
 8006438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800643c:	1e13      	subs	r3, r2, #0
 800643e:	6822      	ldr	r2, [r4, #0]
 8006440:	bf18      	it	ne
 8006442:	2301      	movne	r3, #1
 8006444:	0692      	lsls	r2, r2, #26
 8006446:	d42b      	bmi.n	80064a0 <_printf_common+0xb0>
 8006448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800644c:	4649      	mov	r1, r9
 800644e:	4638      	mov	r0, r7
 8006450:	47c0      	blx	r8
 8006452:	3001      	adds	r0, #1
 8006454:	d01e      	beq.n	8006494 <_printf_common+0xa4>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	68e5      	ldr	r5, [r4, #12]
 800645a:	6832      	ldr	r2, [r6, #0]
 800645c:	f003 0306 	and.w	r3, r3, #6
 8006460:	2b04      	cmp	r3, #4
 8006462:	bf08      	it	eq
 8006464:	1aad      	subeq	r5, r5, r2
 8006466:	68a3      	ldr	r3, [r4, #8]
 8006468:	6922      	ldr	r2, [r4, #16]
 800646a:	bf0c      	ite	eq
 800646c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006470:	2500      	movne	r5, #0
 8006472:	4293      	cmp	r3, r2
 8006474:	bfc4      	itt	gt
 8006476:	1a9b      	subgt	r3, r3, r2
 8006478:	18ed      	addgt	r5, r5, r3
 800647a:	2600      	movs	r6, #0
 800647c:	341a      	adds	r4, #26
 800647e:	42b5      	cmp	r5, r6
 8006480:	d11a      	bne.n	80064b8 <_printf_common+0xc8>
 8006482:	2000      	movs	r0, #0
 8006484:	e008      	b.n	8006498 <_printf_common+0xa8>
 8006486:	2301      	movs	r3, #1
 8006488:	4652      	mov	r2, sl
 800648a:	4649      	mov	r1, r9
 800648c:	4638      	mov	r0, r7
 800648e:	47c0      	blx	r8
 8006490:	3001      	adds	r0, #1
 8006492:	d103      	bne.n	800649c <_printf_common+0xac>
 8006494:	f04f 30ff 	mov.w	r0, #4294967295
 8006498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649c:	3501      	adds	r5, #1
 800649e:	e7c6      	b.n	800642e <_printf_common+0x3e>
 80064a0:	18e1      	adds	r1, r4, r3
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	2030      	movs	r0, #48	; 0x30
 80064a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064aa:	4422      	add	r2, r4
 80064ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064b4:	3302      	adds	r3, #2
 80064b6:	e7c7      	b.n	8006448 <_printf_common+0x58>
 80064b8:	2301      	movs	r3, #1
 80064ba:	4622      	mov	r2, r4
 80064bc:	4649      	mov	r1, r9
 80064be:	4638      	mov	r0, r7
 80064c0:	47c0      	blx	r8
 80064c2:	3001      	adds	r0, #1
 80064c4:	d0e6      	beq.n	8006494 <_printf_common+0xa4>
 80064c6:	3601      	adds	r6, #1
 80064c8:	e7d9      	b.n	800647e <_printf_common+0x8e>
	...

080064cc <_printf_i>:
 80064cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064d0:	7e0f      	ldrb	r7, [r1, #24]
 80064d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064d4:	2f78      	cmp	r7, #120	; 0x78
 80064d6:	4691      	mov	r9, r2
 80064d8:	4680      	mov	r8, r0
 80064da:	460c      	mov	r4, r1
 80064dc:	469a      	mov	sl, r3
 80064de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064e2:	d807      	bhi.n	80064f4 <_printf_i+0x28>
 80064e4:	2f62      	cmp	r7, #98	; 0x62
 80064e6:	d80a      	bhi.n	80064fe <_printf_i+0x32>
 80064e8:	2f00      	cmp	r7, #0
 80064ea:	f000 80d8 	beq.w	800669e <_printf_i+0x1d2>
 80064ee:	2f58      	cmp	r7, #88	; 0x58
 80064f0:	f000 80a3 	beq.w	800663a <_printf_i+0x16e>
 80064f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064fc:	e03a      	b.n	8006574 <_printf_i+0xa8>
 80064fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006502:	2b15      	cmp	r3, #21
 8006504:	d8f6      	bhi.n	80064f4 <_printf_i+0x28>
 8006506:	a101      	add	r1, pc, #4	; (adr r1, 800650c <_printf_i+0x40>)
 8006508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800650c:	08006565 	.word	0x08006565
 8006510:	08006579 	.word	0x08006579
 8006514:	080064f5 	.word	0x080064f5
 8006518:	080064f5 	.word	0x080064f5
 800651c:	080064f5 	.word	0x080064f5
 8006520:	080064f5 	.word	0x080064f5
 8006524:	08006579 	.word	0x08006579
 8006528:	080064f5 	.word	0x080064f5
 800652c:	080064f5 	.word	0x080064f5
 8006530:	080064f5 	.word	0x080064f5
 8006534:	080064f5 	.word	0x080064f5
 8006538:	08006685 	.word	0x08006685
 800653c:	080065a9 	.word	0x080065a9
 8006540:	08006667 	.word	0x08006667
 8006544:	080064f5 	.word	0x080064f5
 8006548:	080064f5 	.word	0x080064f5
 800654c:	080066a7 	.word	0x080066a7
 8006550:	080064f5 	.word	0x080064f5
 8006554:	080065a9 	.word	0x080065a9
 8006558:	080064f5 	.word	0x080064f5
 800655c:	080064f5 	.word	0x080064f5
 8006560:	0800666f 	.word	0x0800666f
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	1d1a      	adds	r2, r3, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	602a      	str	r2, [r5, #0]
 800656c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006574:	2301      	movs	r3, #1
 8006576:	e0a3      	b.n	80066c0 <_printf_i+0x1f4>
 8006578:	6820      	ldr	r0, [r4, #0]
 800657a:	6829      	ldr	r1, [r5, #0]
 800657c:	0606      	lsls	r6, r0, #24
 800657e:	f101 0304 	add.w	r3, r1, #4
 8006582:	d50a      	bpl.n	800659a <_printf_i+0xce>
 8006584:	680e      	ldr	r6, [r1, #0]
 8006586:	602b      	str	r3, [r5, #0]
 8006588:	2e00      	cmp	r6, #0
 800658a:	da03      	bge.n	8006594 <_printf_i+0xc8>
 800658c:	232d      	movs	r3, #45	; 0x2d
 800658e:	4276      	negs	r6, r6
 8006590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006594:	485e      	ldr	r0, [pc, #376]	; (8006710 <_printf_i+0x244>)
 8006596:	230a      	movs	r3, #10
 8006598:	e019      	b.n	80065ce <_printf_i+0x102>
 800659a:	680e      	ldr	r6, [r1, #0]
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065a2:	bf18      	it	ne
 80065a4:	b236      	sxthne	r6, r6
 80065a6:	e7ef      	b.n	8006588 <_printf_i+0xbc>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	6820      	ldr	r0, [r4, #0]
 80065ac:	1d19      	adds	r1, r3, #4
 80065ae:	6029      	str	r1, [r5, #0]
 80065b0:	0601      	lsls	r1, r0, #24
 80065b2:	d501      	bpl.n	80065b8 <_printf_i+0xec>
 80065b4:	681e      	ldr	r6, [r3, #0]
 80065b6:	e002      	b.n	80065be <_printf_i+0xf2>
 80065b8:	0646      	lsls	r6, r0, #25
 80065ba:	d5fb      	bpl.n	80065b4 <_printf_i+0xe8>
 80065bc:	881e      	ldrh	r6, [r3, #0]
 80065be:	4854      	ldr	r0, [pc, #336]	; (8006710 <_printf_i+0x244>)
 80065c0:	2f6f      	cmp	r7, #111	; 0x6f
 80065c2:	bf0c      	ite	eq
 80065c4:	2308      	moveq	r3, #8
 80065c6:	230a      	movne	r3, #10
 80065c8:	2100      	movs	r1, #0
 80065ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065ce:	6865      	ldr	r5, [r4, #4]
 80065d0:	60a5      	str	r5, [r4, #8]
 80065d2:	2d00      	cmp	r5, #0
 80065d4:	bfa2      	ittt	ge
 80065d6:	6821      	ldrge	r1, [r4, #0]
 80065d8:	f021 0104 	bicge.w	r1, r1, #4
 80065dc:	6021      	strge	r1, [r4, #0]
 80065de:	b90e      	cbnz	r6, 80065e4 <_printf_i+0x118>
 80065e0:	2d00      	cmp	r5, #0
 80065e2:	d04d      	beq.n	8006680 <_printf_i+0x1b4>
 80065e4:	4615      	mov	r5, r2
 80065e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80065ea:	fb03 6711 	mls	r7, r3, r1, r6
 80065ee:	5dc7      	ldrb	r7, [r0, r7]
 80065f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065f4:	4637      	mov	r7, r6
 80065f6:	42bb      	cmp	r3, r7
 80065f8:	460e      	mov	r6, r1
 80065fa:	d9f4      	bls.n	80065e6 <_printf_i+0x11a>
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d10b      	bne.n	8006618 <_printf_i+0x14c>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	07de      	lsls	r6, r3, #31
 8006604:	d508      	bpl.n	8006618 <_printf_i+0x14c>
 8006606:	6923      	ldr	r3, [r4, #16]
 8006608:	6861      	ldr	r1, [r4, #4]
 800660a:	4299      	cmp	r1, r3
 800660c:	bfde      	ittt	le
 800660e:	2330      	movle	r3, #48	; 0x30
 8006610:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006614:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006618:	1b52      	subs	r2, r2, r5
 800661a:	6122      	str	r2, [r4, #16]
 800661c:	f8cd a000 	str.w	sl, [sp]
 8006620:	464b      	mov	r3, r9
 8006622:	aa03      	add	r2, sp, #12
 8006624:	4621      	mov	r1, r4
 8006626:	4640      	mov	r0, r8
 8006628:	f7ff fee2 	bl	80063f0 <_printf_common>
 800662c:	3001      	adds	r0, #1
 800662e:	d14c      	bne.n	80066ca <_printf_i+0x1fe>
 8006630:	f04f 30ff 	mov.w	r0, #4294967295
 8006634:	b004      	add	sp, #16
 8006636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663a:	4835      	ldr	r0, [pc, #212]	; (8006710 <_printf_i+0x244>)
 800663c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006640:	6829      	ldr	r1, [r5, #0]
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	f851 6b04 	ldr.w	r6, [r1], #4
 8006648:	6029      	str	r1, [r5, #0]
 800664a:	061d      	lsls	r5, r3, #24
 800664c:	d514      	bpl.n	8006678 <_printf_i+0x1ac>
 800664e:	07df      	lsls	r7, r3, #31
 8006650:	bf44      	itt	mi
 8006652:	f043 0320 	orrmi.w	r3, r3, #32
 8006656:	6023      	strmi	r3, [r4, #0]
 8006658:	b91e      	cbnz	r6, 8006662 <_printf_i+0x196>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	f023 0320 	bic.w	r3, r3, #32
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	2310      	movs	r3, #16
 8006664:	e7b0      	b.n	80065c8 <_printf_i+0xfc>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	f043 0320 	orr.w	r3, r3, #32
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	2378      	movs	r3, #120	; 0x78
 8006670:	4828      	ldr	r0, [pc, #160]	; (8006714 <_printf_i+0x248>)
 8006672:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006676:	e7e3      	b.n	8006640 <_printf_i+0x174>
 8006678:	0659      	lsls	r1, r3, #25
 800667a:	bf48      	it	mi
 800667c:	b2b6      	uxthmi	r6, r6
 800667e:	e7e6      	b.n	800664e <_printf_i+0x182>
 8006680:	4615      	mov	r5, r2
 8006682:	e7bb      	b.n	80065fc <_printf_i+0x130>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	6826      	ldr	r6, [r4, #0]
 8006688:	6961      	ldr	r1, [r4, #20]
 800668a:	1d18      	adds	r0, r3, #4
 800668c:	6028      	str	r0, [r5, #0]
 800668e:	0635      	lsls	r5, r6, #24
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	d501      	bpl.n	8006698 <_printf_i+0x1cc>
 8006694:	6019      	str	r1, [r3, #0]
 8006696:	e002      	b.n	800669e <_printf_i+0x1d2>
 8006698:	0670      	lsls	r0, r6, #25
 800669a:	d5fb      	bpl.n	8006694 <_printf_i+0x1c8>
 800669c:	8019      	strh	r1, [r3, #0]
 800669e:	2300      	movs	r3, #0
 80066a0:	6123      	str	r3, [r4, #16]
 80066a2:	4615      	mov	r5, r2
 80066a4:	e7ba      	b.n	800661c <_printf_i+0x150>
 80066a6:	682b      	ldr	r3, [r5, #0]
 80066a8:	1d1a      	adds	r2, r3, #4
 80066aa:	602a      	str	r2, [r5, #0]
 80066ac:	681d      	ldr	r5, [r3, #0]
 80066ae:	6862      	ldr	r2, [r4, #4]
 80066b0:	2100      	movs	r1, #0
 80066b2:	4628      	mov	r0, r5
 80066b4:	f7f9 fdc4 	bl	8000240 <memchr>
 80066b8:	b108      	cbz	r0, 80066be <_printf_i+0x1f2>
 80066ba:	1b40      	subs	r0, r0, r5
 80066bc:	6060      	str	r0, [r4, #4]
 80066be:	6863      	ldr	r3, [r4, #4]
 80066c0:	6123      	str	r3, [r4, #16]
 80066c2:	2300      	movs	r3, #0
 80066c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c8:	e7a8      	b.n	800661c <_printf_i+0x150>
 80066ca:	6923      	ldr	r3, [r4, #16]
 80066cc:	462a      	mov	r2, r5
 80066ce:	4649      	mov	r1, r9
 80066d0:	4640      	mov	r0, r8
 80066d2:	47d0      	blx	sl
 80066d4:	3001      	adds	r0, #1
 80066d6:	d0ab      	beq.n	8006630 <_printf_i+0x164>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	079b      	lsls	r3, r3, #30
 80066dc:	d413      	bmi.n	8006706 <_printf_i+0x23a>
 80066de:	68e0      	ldr	r0, [r4, #12]
 80066e0:	9b03      	ldr	r3, [sp, #12]
 80066e2:	4298      	cmp	r0, r3
 80066e4:	bfb8      	it	lt
 80066e6:	4618      	movlt	r0, r3
 80066e8:	e7a4      	b.n	8006634 <_printf_i+0x168>
 80066ea:	2301      	movs	r3, #1
 80066ec:	4632      	mov	r2, r6
 80066ee:	4649      	mov	r1, r9
 80066f0:	4640      	mov	r0, r8
 80066f2:	47d0      	blx	sl
 80066f4:	3001      	adds	r0, #1
 80066f6:	d09b      	beq.n	8006630 <_printf_i+0x164>
 80066f8:	3501      	adds	r5, #1
 80066fa:	68e3      	ldr	r3, [r4, #12]
 80066fc:	9903      	ldr	r1, [sp, #12]
 80066fe:	1a5b      	subs	r3, r3, r1
 8006700:	42ab      	cmp	r3, r5
 8006702:	dcf2      	bgt.n	80066ea <_printf_i+0x21e>
 8006704:	e7eb      	b.n	80066de <_printf_i+0x212>
 8006706:	2500      	movs	r5, #0
 8006708:	f104 0619 	add.w	r6, r4, #25
 800670c:	e7f5      	b.n	80066fa <_printf_i+0x22e>
 800670e:	bf00      	nop
 8006710:	0800720a 	.word	0x0800720a
 8006714:	0800721b 	.word	0x0800721b

08006718 <_sbrk_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4d06      	ldr	r5, [pc, #24]	; (8006734 <_sbrk_r+0x1c>)
 800671c:	2300      	movs	r3, #0
 800671e:	4604      	mov	r4, r0
 8006720:	4608      	mov	r0, r1
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	f7fa fc48 	bl	8000fb8 <_sbrk>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d102      	bne.n	8006732 <_sbrk_r+0x1a>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	b103      	cbz	r3, 8006732 <_sbrk_r+0x1a>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	200002a8 	.word	0x200002a8

08006738 <__swbuf_r>:
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	460e      	mov	r6, r1
 800673c:	4614      	mov	r4, r2
 800673e:	4605      	mov	r5, r0
 8006740:	b118      	cbz	r0, 800674a <__swbuf_r+0x12>
 8006742:	6983      	ldr	r3, [r0, #24]
 8006744:	b90b      	cbnz	r3, 800674a <__swbuf_r+0x12>
 8006746:	f000 f9d9 	bl	8006afc <__sinit>
 800674a:	4b21      	ldr	r3, [pc, #132]	; (80067d0 <__swbuf_r+0x98>)
 800674c:	429c      	cmp	r4, r3
 800674e:	d12b      	bne.n	80067a8 <__swbuf_r+0x70>
 8006750:	686c      	ldr	r4, [r5, #4]
 8006752:	69a3      	ldr	r3, [r4, #24]
 8006754:	60a3      	str	r3, [r4, #8]
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	071a      	lsls	r2, r3, #28
 800675a:	d52f      	bpl.n	80067bc <__swbuf_r+0x84>
 800675c:	6923      	ldr	r3, [r4, #16]
 800675e:	b36b      	cbz	r3, 80067bc <__swbuf_r+0x84>
 8006760:	6923      	ldr	r3, [r4, #16]
 8006762:	6820      	ldr	r0, [r4, #0]
 8006764:	1ac0      	subs	r0, r0, r3
 8006766:	6963      	ldr	r3, [r4, #20]
 8006768:	b2f6      	uxtb	r6, r6
 800676a:	4283      	cmp	r3, r0
 800676c:	4637      	mov	r7, r6
 800676e:	dc04      	bgt.n	800677a <__swbuf_r+0x42>
 8006770:	4621      	mov	r1, r4
 8006772:	4628      	mov	r0, r5
 8006774:	f000 f92e 	bl	80069d4 <_fflush_r>
 8006778:	bb30      	cbnz	r0, 80067c8 <__swbuf_r+0x90>
 800677a:	68a3      	ldr	r3, [r4, #8]
 800677c:	3b01      	subs	r3, #1
 800677e:	60a3      	str	r3, [r4, #8]
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	6022      	str	r2, [r4, #0]
 8006786:	701e      	strb	r6, [r3, #0]
 8006788:	6963      	ldr	r3, [r4, #20]
 800678a:	3001      	adds	r0, #1
 800678c:	4283      	cmp	r3, r0
 800678e:	d004      	beq.n	800679a <__swbuf_r+0x62>
 8006790:	89a3      	ldrh	r3, [r4, #12]
 8006792:	07db      	lsls	r3, r3, #31
 8006794:	d506      	bpl.n	80067a4 <__swbuf_r+0x6c>
 8006796:	2e0a      	cmp	r6, #10
 8006798:	d104      	bne.n	80067a4 <__swbuf_r+0x6c>
 800679a:	4621      	mov	r1, r4
 800679c:	4628      	mov	r0, r5
 800679e:	f000 f919 	bl	80069d4 <_fflush_r>
 80067a2:	b988      	cbnz	r0, 80067c8 <__swbuf_r+0x90>
 80067a4:	4638      	mov	r0, r7
 80067a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067a8:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <__swbuf_r+0x9c>)
 80067aa:	429c      	cmp	r4, r3
 80067ac:	d101      	bne.n	80067b2 <__swbuf_r+0x7a>
 80067ae:	68ac      	ldr	r4, [r5, #8]
 80067b0:	e7cf      	b.n	8006752 <__swbuf_r+0x1a>
 80067b2:	4b09      	ldr	r3, [pc, #36]	; (80067d8 <__swbuf_r+0xa0>)
 80067b4:	429c      	cmp	r4, r3
 80067b6:	bf08      	it	eq
 80067b8:	68ec      	ldreq	r4, [r5, #12]
 80067ba:	e7ca      	b.n	8006752 <__swbuf_r+0x1a>
 80067bc:	4621      	mov	r1, r4
 80067be:	4628      	mov	r0, r5
 80067c0:	f000 f80c 	bl	80067dc <__swsetup_r>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d0cb      	beq.n	8006760 <__swbuf_r+0x28>
 80067c8:	f04f 37ff 	mov.w	r7, #4294967295
 80067cc:	e7ea      	b.n	80067a4 <__swbuf_r+0x6c>
 80067ce:	bf00      	nop
 80067d0:	0800724c 	.word	0x0800724c
 80067d4:	0800726c 	.word	0x0800726c
 80067d8:	0800722c 	.word	0x0800722c

080067dc <__swsetup_r>:
 80067dc:	4b32      	ldr	r3, [pc, #200]	; (80068a8 <__swsetup_r+0xcc>)
 80067de:	b570      	push	{r4, r5, r6, lr}
 80067e0:	681d      	ldr	r5, [r3, #0]
 80067e2:	4606      	mov	r6, r0
 80067e4:	460c      	mov	r4, r1
 80067e6:	b125      	cbz	r5, 80067f2 <__swsetup_r+0x16>
 80067e8:	69ab      	ldr	r3, [r5, #24]
 80067ea:	b913      	cbnz	r3, 80067f2 <__swsetup_r+0x16>
 80067ec:	4628      	mov	r0, r5
 80067ee:	f000 f985 	bl	8006afc <__sinit>
 80067f2:	4b2e      	ldr	r3, [pc, #184]	; (80068ac <__swsetup_r+0xd0>)
 80067f4:	429c      	cmp	r4, r3
 80067f6:	d10f      	bne.n	8006818 <__swsetup_r+0x3c>
 80067f8:	686c      	ldr	r4, [r5, #4]
 80067fa:	89a3      	ldrh	r3, [r4, #12]
 80067fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006800:	0719      	lsls	r1, r3, #28
 8006802:	d42c      	bmi.n	800685e <__swsetup_r+0x82>
 8006804:	06dd      	lsls	r5, r3, #27
 8006806:	d411      	bmi.n	800682c <__swsetup_r+0x50>
 8006808:	2309      	movs	r3, #9
 800680a:	6033      	str	r3, [r6, #0]
 800680c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006810:	81a3      	strh	r3, [r4, #12]
 8006812:	f04f 30ff 	mov.w	r0, #4294967295
 8006816:	e03e      	b.n	8006896 <__swsetup_r+0xba>
 8006818:	4b25      	ldr	r3, [pc, #148]	; (80068b0 <__swsetup_r+0xd4>)
 800681a:	429c      	cmp	r4, r3
 800681c:	d101      	bne.n	8006822 <__swsetup_r+0x46>
 800681e:	68ac      	ldr	r4, [r5, #8]
 8006820:	e7eb      	b.n	80067fa <__swsetup_r+0x1e>
 8006822:	4b24      	ldr	r3, [pc, #144]	; (80068b4 <__swsetup_r+0xd8>)
 8006824:	429c      	cmp	r4, r3
 8006826:	bf08      	it	eq
 8006828:	68ec      	ldreq	r4, [r5, #12]
 800682a:	e7e6      	b.n	80067fa <__swsetup_r+0x1e>
 800682c:	0758      	lsls	r0, r3, #29
 800682e:	d512      	bpl.n	8006856 <__swsetup_r+0x7a>
 8006830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006832:	b141      	cbz	r1, 8006846 <__swsetup_r+0x6a>
 8006834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006838:	4299      	cmp	r1, r3
 800683a:	d002      	beq.n	8006842 <__swsetup_r+0x66>
 800683c:	4630      	mov	r0, r6
 800683e:	f7ff fa41 	bl	8005cc4 <_free_r>
 8006842:	2300      	movs	r3, #0
 8006844:	6363      	str	r3, [r4, #52]	; 0x34
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800684c:	81a3      	strh	r3, [r4, #12]
 800684e:	2300      	movs	r3, #0
 8006850:	6063      	str	r3, [r4, #4]
 8006852:	6923      	ldr	r3, [r4, #16]
 8006854:	6023      	str	r3, [r4, #0]
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	f043 0308 	orr.w	r3, r3, #8
 800685c:	81a3      	strh	r3, [r4, #12]
 800685e:	6923      	ldr	r3, [r4, #16]
 8006860:	b94b      	cbnz	r3, 8006876 <__swsetup_r+0x9a>
 8006862:	89a3      	ldrh	r3, [r4, #12]
 8006864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800686c:	d003      	beq.n	8006876 <__swsetup_r+0x9a>
 800686e:	4621      	mov	r1, r4
 8006870:	4630      	mov	r0, r6
 8006872:	f000 fa09 	bl	8006c88 <__smakebuf_r>
 8006876:	89a0      	ldrh	r0, [r4, #12]
 8006878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800687c:	f010 0301 	ands.w	r3, r0, #1
 8006880:	d00a      	beq.n	8006898 <__swsetup_r+0xbc>
 8006882:	2300      	movs	r3, #0
 8006884:	60a3      	str	r3, [r4, #8]
 8006886:	6963      	ldr	r3, [r4, #20]
 8006888:	425b      	negs	r3, r3
 800688a:	61a3      	str	r3, [r4, #24]
 800688c:	6923      	ldr	r3, [r4, #16]
 800688e:	b943      	cbnz	r3, 80068a2 <__swsetup_r+0xc6>
 8006890:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006894:	d1ba      	bne.n	800680c <__swsetup_r+0x30>
 8006896:	bd70      	pop	{r4, r5, r6, pc}
 8006898:	0781      	lsls	r1, r0, #30
 800689a:	bf58      	it	pl
 800689c:	6963      	ldrpl	r3, [r4, #20]
 800689e:	60a3      	str	r3, [r4, #8]
 80068a0:	e7f4      	b.n	800688c <__swsetup_r+0xb0>
 80068a2:	2000      	movs	r0, #0
 80068a4:	e7f7      	b.n	8006896 <__swsetup_r+0xba>
 80068a6:	bf00      	nop
 80068a8:	200000a4 	.word	0x200000a4
 80068ac:	0800724c 	.word	0x0800724c
 80068b0:	0800726c 	.word	0x0800726c
 80068b4:	0800722c 	.word	0x0800722c

080068b8 <abort>:
 80068b8:	b508      	push	{r3, lr}
 80068ba:	2006      	movs	r0, #6
 80068bc:	f000 fab0 	bl	8006e20 <raise>
 80068c0:	2001      	movs	r0, #1
 80068c2:	f7fa fb01 	bl	8000ec8 <_exit>
	...

080068c8 <__sflush_r>:
 80068c8:	898a      	ldrh	r2, [r1, #12]
 80068ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ce:	4605      	mov	r5, r0
 80068d0:	0710      	lsls	r0, r2, #28
 80068d2:	460c      	mov	r4, r1
 80068d4:	d458      	bmi.n	8006988 <__sflush_r+0xc0>
 80068d6:	684b      	ldr	r3, [r1, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	dc05      	bgt.n	80068e8 <__sflush_r+0x20>
 80068dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	dc02      	bgt.n	80068e8 <__sflush_r+0x20>
 80068e2:	2000      	movs	r0, #0
 80068e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068ea:	2e00      	cmp	r6, #0
 80068ec:	d0f9      	beq.n	80068e2 <__sflush_r+0x1a>
 80068ee:	2300      	movs	r3, #0
 80068f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068f4:	682f      	ldr	r7, [r5, #0]
 80068f6:	602b      	str	r3, [r5, #0]
 80068f8:	d032      	beq.n	8006960 <__sflush_r+0x98>
 80068fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	075a      	lsls	r2, r3, #29
 8006900:	d505      	bpl.n	800690e <__sflush_r+0x46>
 8006902:	6863      	ldr	r3, [r4, #4]
 8006904:	1ac0      	subs	r0, r0, r3
 8006906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006908:	b10b      	cbz	r3, 800690e <__sflush_r+0x46>
 800690a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800690c:	1ac0      	subs	r0, r0, r3
 800690e:	2300      	movs	r3, #0
 8006910:	4602      	mov	r2, r0
 8006912:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006914:	6a21      	ldr	r1, [r4, #32]
 8006916:	4628      	mov	r0, r5
 8006918:	47b0      	blx	r6
 800691a:	1c43      	adds	r3, r0, #1
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	d106      	bne.n	800692e <__sflush_r+0x66>
 8006920:	6829      	ldr	r1, [r5, #0]
 8006922:	291d      	cmp	r1, #29
 8006924:	d82c      	bhi.n	8006980 <__sflush_r+0xb8>
 8006926:	4a2a      	ldr	r2, [pc, #168]	; (80069d0 <__sflush_r+0x108>)
 8006928:	40ca      	lsrs	r2, r1
 800692a:	07d6      	lsls	r6, r2, #31
 800692c:	d528      	bpl.n	8006980 <__sflush_r+0xb8>
 800692e:	2200      	movs	r2, #0
 8006930:	6062      	str	r2, [r4, #4]
 8006932:	04d9      	lsls	r1, r3, #19
 8006934:	6922      	ldr	r2, [r4, #16]
 8006936:	6022      	str	r2, [r4, #0]
 8006938:	d504      	bpl.n	8006944 <__sflush_r+0x7c>
 800693a:	1c42      	adds	r2, r0, #1
 800693c:	d101      	bne.n	8006942 <__sflush_r+0x7a>
 800693e:	682b      	ldr	r3, [r5, #0]
 8006940:	b903      	cbnz	r3, 8006944 <__sflush_r+0x7c>
 8006942:	6560      	str	r0, [r4, #84]	; 0x54
 8006944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006946:	602f      	str	r7, [r5, #0]
 8006948:	2900      	cmp	r1, #0
 800694a:	d0ca      	beq.n	80068e2 <__sflush_r+0x1a>
 800694c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006950:	4299      	cmp	r1, r3
 8006952:	d002      	beq.n	800695a <__sflush_r+0x92>
 8006954:	4628      	mov	r0, r5
 8006956:	f7ff f9b5 	bl	8005cc4 <_free_r>
 800695a:	2000      	movs	r0, #0
 800695c:	6360      	str	r0, [r4, #52]	; 0x34
 800695e:	e7c1      	b.n	80068e4 <__sflush_r+0x1c>
 8006960:	6a21      	ldr	r1, [r4, #32]
 8006962:	2301      	movs	r3, #1
 8006964:	4628      	mov	r0, r5
 8006966:	47b0      	blx	r6
 8006968:	1c41      	adds	r1, r0, #1
 800696a:	d1c7      	bne.n	80068fc <__sflush_r+0x34>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0c4      	beq.n	80068fc <__sflush_r+0x34>
 8006972:	2b1d      	cmp	r3, #29
 8006974:	d001      	beq.n	800697a <__sflush_r+0xb2>
 8006976:	2b16      	cmp	r3, #22
 8006978:	d101      	bne.n	800697e <__sflush_r+0xb6>
 800697a:	602f      	str	r7, [r5, #0]
 800697c:	e7b1      	b.n	80068e2 <__sflush_r+0x1a>
 800697e:	89a3      	ldrh	r3, [r4, #12]
 8006980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006984:	81a3      	strh	r3, [r4, #12]
 8006986:	e7ad      	b.n	80068e4 <__sflush_r+0x1c>
 8006988:	690f      	ldr	r7, [r1, #16]
 800698a:	2f00      	cmp	r7, #0
 800698c:	d0a9      	beq.n	80068e2 <__sflush_r+0x1a>
 800698e:	0793      	lsls	r3, r2, #30
 8006990:	680e      	ldr	r6, [r1, #0]
 8006992:	bf08      	it	eq
 8006994:	694b      	ldreq	r3, [r1, #20]
 8006996:	600f      	str	r7, [r1, #0]
 8006998:	bf18      	it	ne
 800699a:	2300      	movne	r3, #0
 800699c:	eba6 0807 	sub.w	r8, r6, r7
 80069a0:	608b      	str	r3, [r1, #8]
 80069a2:	f1b8 0f00 	cmp.w	r8, #0
 80069a6:	dd9c      	ble.n	80068e2 <__sflush_r+0x1a>
 80069a8:	6a21      	ldr	r1, [r4, #32]
 80069aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069ac:	4643      	mov	r3, r8
 80069ae:	463a      	mov	r2, r7
 80069b0:	4628      	mov	r0, r5
 80069b2:	47b0      	blx	r6
 80069b4:	2800      	cmp	r0, #0
 80069b6:	dc06      	bgt.n	80069c6 <__sflush_r+0xfe>
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069be:	81a3      	strh	r3, [r4, #12]
 80069c0:	f04f 30ff 	mov.w	r0, #4294967295
 80069c4:	e78e      	b.n	80068e4 <__sflush_r+0x1c>
 80069c6:	4407      	add	r7, r0
 80069c8:	eba8 0800 	sub.w	r8, r8, r0
 80069cc:	e7e9      	b.n	80069a2 <__sflush_r+0xda>
 80069ce:	bf00      	nop
 80069d0:	20400001 	.word	0x20400001

080069d4 <_fflush_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	690b      	ldr	r3, [r1, #16]
 80069d8:	4605      	mov	r5, r0
 80069da:	460c      	mov	r4, r1
 80069dc:	b913      	cbnz	r3, 80069e4 <_fflush_r+0x10>
 80069de:	2500      	movs	r5, #0
 80069e0:	4628      	mov	r0, r5
 80069e2:	bd38      	pop	{r3, r4, r5, pc}
 80069e4:	b118      	cbz	r0, 80069ee <_fflush_r+0x1a>
 80069e6:	6983      	ldr	r3, [r0, #24]
 80069e8:	b90b      	cbnz	r3, 80069ee <_fflush_r+0x1a>
 80069ea:	f000 f887 	bl	8006afc <__sinit>
 80069ee:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <_fflush_r+0x6c>)
 80069f0:	429c      	cmp	r4, r3
 80069f2:	d11b      	bne.n	8006a2c <_fflush_r+0x58>
 80069f4:	686c      	ldr	r4, [r5, #4]
 80069f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0ef      	beq.n	80069de <_fflush_r+0xa>
 80069fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a00:	07d0      	lsls	r0, r2, #31
 8006a02:	d404      	bmi.n	8006a0e <_fflush_r+0x3a>
 8006a04:	0599      	lsls	r1, r3, #22
 8006a06:	d402      	bmi.n	8006a0e <_fflush_r+0x3a>
 8006a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a0a:	f000 f915 	bl	8006c38 <__retarget_lock_acquire_recursive>
 8006a0e:	4628      	mov	r0, r5
 8006a10:	4621      	mov	r1, r4
 8006a12:	f7ff ff59 	bl	80068c8 <__sflush_r>
 8006a16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a18:	07da      	lsls	r2, r3, #31
 8006a1a:	4605      	mov	r5, r0
 8006a1c:	d4e0      	bmi.n	80069e0 <_fflush_r+0xc>
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	059b      	lsls	r3, r3, #22
 8006a22:	d4dd      	bmi.n	80069e0 <_fflush_r+0xc>
 8006a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a26:	f000 f908 	bl	8006c3a <__retarget_lock_release_recursive>
 8006a2a:	e7d9      	b.n	80069e0 <_fflush_r+0xc>
 8006a2c:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <_fflush_r+0x70>)
 8006a2e:	429c      	cmp	r4, r3
 8006a30:	d101      	bne.n	8006a36 <_fflush_r+0x62>
 8006a32:	68ac      	ldr	r4, [r5, #8]
 8006a34:	e7df      	b.n	80069f6 <_fflush_r+0x22>
 8006a36:	4b04      	ldr	r3, [pc, #16]	; (8006a48 <_fflush_r+0x74>)
 8006a38:	429c      	cmp	r4, r3
 8006a3a:	bf08      	it	eq
 8006a3c:	68ec      	ldreq	r4, [r5, #12]
 8006a3e:	e7da      	b.n	80069f6 <_fflush_r+0x22>
 8006a40:	0800724c 	.word	0x0800724c
 8006a44:	0800726c 	.word	0x0800726c
 8006a48:	0800722c 	.word	0x0800722c

08006a4c <std>:
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	b510      	push	{r4, lr}
 8006a50:	4604      	mov	r4, r0
 8006a52:	e9c0 3300 	strd	r3, r3, [r0]
 8006a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a5a:	6083      	str	r3, [r0, #8]
 8006a5c:	8181      	strh	r1, [r0, #12]
 8006a5e:	6643      	str	r3, [r0, #100]	; 0x64
 8006a60:	81c2      	strh	r2, [r0, #14]
 8006a62:	6183      	str	r3, [r0, #24]
 8006a64:	4619      	mov	r1, r3
 8006a66:	2208      	movs	r2, #8
 8006a68:	305c      	adds	r0, #92	; 0x5c
 8006a6a:	f7fe ffe3 	bl	8005a34 <memset>
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <std+0x38>)
 8006a70:	6263      	str	r3, [r4, #36]	; 0x24
 8006a72:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <std+0x3c>)
 8006a74:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a76:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <std+0x40>)
 8006a78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a7a:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <std+0x44>)
 8006a7c:	6224      	str	r4, [r4, #32]
 8006a7e:	6323      	str	r3, [r4, #48]	; 0x30
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	bf00      	nop
 8006a84:	08006e59 	.word	0x08006e59
 8006a88:	08006e7b 	.word	0x08006e7b
 8006a8c:	08006eb3 	.word	0x08006eb3
 8006a90:	08006ed7 	.word	0x08006ed7

08006a94 <_cleanup_r>:
 8006a94:	4901      	ldr	r1, [pc, #4]	; (8006a9c <_cleanup_r+0x8>)
 8006a96:	f000 b8af 	b.w	8006bf8 <_fwalk_reent>
 8006a9a:	bf00      	nop
 8006a9c:	080069d5 	.word	0x080069d5

08006aa0 <__sfmoreglue>:
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	2268      	movs	r2, #104	; 0x68
 8006aa4:	1e4d      	subs	r5, r1, #1
 8006aa6:	4355      	muls	r5, r2
 8006aa8:	460e      	mov	r6, r1
 8006aaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006aae:	f7ff f975 	bl	8005d9c <_malloc_r>
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	b140      	cbz	r0, 8006ac8 <__sfmoreglue+0x28>
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	e9c0 1600 	strd	r1, r6, [r0]
 8006abc:	300c      	adds	r0, #12
 8006abe:	60a0      	str	r0, [r4, #8]
 8006ac0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ac4:	f7fe ffb6 	bl	8005a34 <memset>
 8006ac8:	4620      	mov	r0, r4
 8006aca:	bd70      	pop	{r4, r5, r6, pc}

08006acc <__sfp_lock_acquire>:
 8006acc:	4801      	ldr	r0, [pc, #4]	; (8006ad4 <__sfp_lock_acquire+0x8>)
 8006ace:	f000 b8b3 	b.w	8006c38 <__retarget_lock_acquire_recursive>
 8006ad2:	bf00      	nop
 8006ad4:	200002a5 	.word	0x200002a5

08006ad8 <__sfp_lock_release>:
 8006ad8:	4801      	ldr	r0, [pc, #4]	; (8006ae0 <__sfp_lock_release+0x8>)
 8006ada:	f000 b8ae 	b.w	8006c3a <__retarget_lock_release_recursive>
 8006ade:	bf00      	nop
 8006ae0:	200002a5 	.word	0x200002a5

08006ae4 <__sinit_lock_acquire>:
 8006ae4:	4801      	ldr	r0, [pc, #4]	; (8006aec <__sinit_lock_acquire+0x8>)
 8006ae6:	f000 b8a7 	b.w	8006c38 <__retarget_lock_acquire_recursive>
 8006aea:	bf00      	nop
 8006aec:	200002a6 	.word	0x200002a6

08006af0 <__sinit_lock_release>:
 8006af0:	4801      	ldr	r0, [pc, #4]	; (8006af8 <__sinit_lock_release+0x8>)
 8006af2:	f000 b8a2 	b.w	8006c3a <__retarget_lock_release_recursive>
 8006af6:	bf00      	nop
 8006af8:	200002a6 	.word	0x200002a6

08006afc <__sinit>:
 8006afc:	b510      	push	{r4, lr}
 8006afe:	4604      	mov	r4, r0
 8006b00:	f7ff fff0 	bl	8006ae4 <__sinit_lock_acquire>
 8006b04:	69a3      	ldr	r3, [r4, #24]
 8006b06:	b11b      	cbz	r3, 8006b10 <__sinit+0x14>
 8006b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b0c:	f7ff bff0 	b.w	8006af0 <__sinit_lock_release>
 8006b10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b14:	6523      	str	r3, [r4, #80]	; 0x50
 8006b16:	4b13      	ldr	r3, [pc, #76]	; (8006b64 <__sinit+0x68>)
 8006b18:	4a13      	ldr	r2, [pc, #76]	; (8006b68 <__sinit+0x6c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b1e:	42a3      	cmp	r3, r4
 8006b20:	bf04      	itt	eq
 8006b22:	2301      	moveq	r3, #1
 8006b24:	61a3      	streq	r3, [r4, #24]
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 f820 	bl	8006b6c <__sfp>
 8006b2c:	6060      	str	r0, [r4, #4]
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f000 f81c 	bl	8006b6c <__sfp>
 8006b34:	60a0      	str	r0, [r4, #8]
 8006b36:	4620      	mov	r0, r4
 8006b38:	f000 f818 	bl	8006b6c <__sfp>
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	60e0      	str	r0, [r4, #12]
 8006b40:	2104      	movs	r1, #4
 8006b42:	6860      	ldr	r0, [r4, #4]
 8006b44:	f7ff ff82 	bl	8006a4c <std>
 8006b48:	68a0      	ldr	r0, [r4, #8]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	2109      	movs	r1, #9
 8006b4e:	f7ff ff7d 	bl	8006a4c <std>
 8006b52:	68e0      	ldr	r0, [r4, #12]
 8006b54:	2202      	movs	r2, #2
 8006b56:	2112      	movs	r1, #18
 8006b58:	f7ff ff78 	bl	8006a4c <std>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	61a3      	str	r3, [r4, #24]
 8006b60:	e7d2      	b.n	8006b08 <__sinit+0xc>
 8006b62:	bf00      	nop
 8006b64:	08007044 	.word	0x08007044
 8006b68:	08006a95 	.word	0x08006a95

08006b6c <__sfp>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	4607      	mov	r7, r0
 8006b70:	f7ff ffac 	bl	8006acc <__sfp_lock_acquire>
 8006b74:	4b1e      	ldr	r3, [pc, #120]	; (8006bf0 <__sfp+0x84>)
 8006b76:	681e      	ldr	r6, [r3, #0]
 8006b78:	69b3      	ldr	r3, [r6, #24]
 8006b7a:	b913      	cbnz	r3, 8006b82 <__sfp+0x16>
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f7ff ffbd 	bl	8006afc <__sinit>
 8006b82:	3648      	adds	r6, #72	; 0x48
 8006b84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	d503      	bpl.n	8006b94 <__sfp+0x28>
 8006b8c:	6833      	ldr	r3, [r6, #0]
 8006b8e:	b30b      	cbz	r3, 8006bd4 <__sfp+0x68>
 8006b90:	6836      	ldr	r6, [r6, #0]
 8006b92:	e7f7      	b.n	8006b84 <__sfp+0x18>
 8006b94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b98:	b9d5      	cbnz	r5, 8006bd0 <__sfp+0x64>
 8006b9a:	4b16      	ldr	r3, [pc, #88]	; (8006bf4 <__sfp+0x88>)
 8006b9c:	60e3      	str	r3, [r4, #12]
 8006b9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ba2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ba4:	f000 f847 	bl	8006c36 <__retarget_lock_init_recursive>
 8006ba8:	f7ff ff96 	bl	8006ad8 <__sfp_lock_release>
 8006bac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bb4:	6025      	str	r5, [r4, #0]
 8006bb6:	61a5      	str	r5, [r4, #24]
 8006bb8:	2208      	movs	r2, #8
 8006bba:	4629      	mov	r1, r5
 8006bbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bc0:	f7fe ff38 	bl	8005a34 <memset>
 8006bc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006bc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006bcc:	4620      	mov	r0, r4
 8006bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd0:	3468      	adds	r4, #104	; 0x68
 8006bd2:	e7d9      	b.n	8006b88 <__sfp+0x1c>
 8006bd4:	2104      	movs	r1, #4
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	f7ff ff62 	bl	8006aa0 <__sfmoreglue>
 8006bdc:	4604      	mov	r4, r0
 8006bde:	6030      	str	r0, [r6, #0]
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d1d5      	bne.n	8006b90 <__sfp+0x24>
 8006be4:	f7ff ff78 	bl	8006ad8 <__sfp_lock_release>
 8006be8:	230c      	movs	r3, #12
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	e7ee      	b.n	8006bcc <__sfp+0x60>
 8006bee:	bf00      	nop
 8006bf0:	08007044 	.word	0x08007044
 8006bf4:	ffff0001 	.word	0xffff0001

08006bf8 <_fwalk_reent>:
 8006bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	4688      	mov	r8, r1
 8006c00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c04:	2700      	movs	r7, #0
 8006c06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c0a:	f1b9 0901 	subs.w	r9, r9, #1
 8006c0e:	d505      	bpl.n	8006c1c <_fwalk_reent+0x24>
 8006c10:	6824      	ldr	r4, [r4, #0]
 8006c12:	2c00      	cmp	r4, #0
 8006c14:	d1f7      	bne.n	8006c06 <_fwalk_reent+0xe>
 8006c16:	4638      	mov	r0, r7
 8006c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c1c:	89ab      	ldrh	r3, [r5, #12]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d907      	bls.n	8006c32 <_fwalk_reent+0x3a>
 8006c22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c26:	3301      	adds	r3, #1
 8006c28:	d003      	beq.n	8006c32 <_fwalk_reent+0x3a>
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	47c0      	blx	r8
 8006c30:	4307      	orrs	r7, r0
 8006c32:	3568      	adds	r5, #104	; 0x68
 8006c34:	e7e9      	b.n	8006c0a <_fwalk_reent+0x12>

08006c36 <__retarget_lock_init_recursive>:
 8006c36:	4770      	bx	lr

08006c38 <__retarget_lock_acquire_recursive>:
 8006c38:	4770      	bx	lr

08006c3a <__retarget_lock_release_recursive>:
 8006c3a:	4770      	bx	lr

08006c3c <__swhatbuf_r>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	460e      	mov	r6, r1
 8006c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c44:	2900      	cmp	r1, #0
 8006c46:	b096      	sub	sp, #88	; 0x58
 8006c48:	4614      	mov	r4, r2
 8006c4a:	461d      	mov	r5, r3
 8006c4c:	da08      	bge.n	8006c60 <__swhatbuf_r+0x24>
 8006c4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	602a      	str	r2, [r5, #0]
 8006c56:	061a      	lsls	r2, r3, #24
 8006c58:	d410      	bmi.n	8006c7c <__swhatbuf_r+0x40>
 8006c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c5e:	e00e      	b.n	8006c7e <__swhatbuf_r+0x42>
 8006c60:	466a      	mov	r2, sp
 8006c62:	f000 f95f 	bl	8006f24 <_fstat_r>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	dbf1      	blt.n	8006c4e <__swhatbuf_r+0x12>
 8006c6a:	9a01      	ldr	r2, [sp, #4]
 8006c6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c74:	425a      	negs	r2, r3
 8006c76:	415a      	adcs	r2, r3
 8006c78:	602a      	str	r2, [r5, #0]
 8006c7a:	e7ee      	b.n	8006c5a <__swhatbuf_r+0x1e>
 8006c7c:	2340      	movs	r3, #64	; 0x40
 8006c7e:	2000      	movs	r0, #0
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	b016      	add	sp, #88	; 0x58
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c88 <__smakebuf_r>:
 8006c88:	898b      	ldrh	r3, [r1, #12]
 8006c8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c8c:	079d      	lsls	r5, r3, #30
 8006c8e:	4606      	mov	r6, r0
 8006c90:	460c      	mov	r4, r1
 8006c92:	d507      	bpl.n	8006ca4 <__smakebuf_r+0x1c>
 8006c94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	6123      	str	r3, [r4, #16]
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	6163      	str	r3, [r4, #20]
 8006ca0:	b002      	add	sp, #8
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	ab01      	add	r3, sp, #4
 8006ca6:	466a      	mov	r2, sp
 8006ca8:	f7ff ffc8 	bl	8006c3c <__swhatbuf_r>
 8006cac:	9900      	ldr	r1, [sp, #0]
 8006cae:	4605      	mov	r5, r0
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f7ff f873 	bl	8005d9c <_malloc_r>
 8006cb6:	b948      	cbnz	r0, 8006ccc <__smakebuf_r+0x44>
 8006cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cbc:	059a      	lsls	r2, r3, #22
 8006cbe:	d4ef      	bmi.n	8006ca0 <__smakebuf_r+0x18>
 8006cc0:	f023 0303 	bic.w	r3, r3, #3
 8006cc4:	f043 0302 	orr.w	r3, r3, #2
 8006cc8:	81a3      	strh	r3, [r4, #12]
 8006cca:	e7e3      	b.n	8006c94 <__smakebuf_r+0xc>
 8006ccc:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <__smakebuf_r+0x7c>)
 8006cce:	62b3      	str	r3, [r6, #40]	; 0x28
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	6020      	str	r0, [r4, #0]
 8006cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd8:	81a3      	strh	r3, [r4, #12]
 8006cda:	9b00      	ldr	r3, [sp, #0]
 8006cdc:	6163      	str	r3, [r4, #20]
 8006cde:	9b01      	ldr	r3, [sp, #4]
 8006ce0:	6120      	str	r0, [r4, #16]
 8006ce2:	b15b      	cbz	r3, 8006cfc <__smakebuf_r+0x74>
 8006ce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f000 f92d 	bl	8006f48 <_isatty_r>
 8006cee:	b128      	cbz	r0, 8006cfc <__smakebuf_r+0x74>
 8006cf0:	89a3      	ldrh	r3, [r4, #12]
 8006cf2:	f023 0303 	bic.w	r3, r3, #3
 8006cf6:	f043 0301 	orr.w	r3, r3, #1
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	89a0      	ldrh	r0, [r4, #12]
 8006cfe:	4305      	orrs	r5, r0
 8006d00:	81a5      	strh	r5, [r4, #12]
 8006d02:	e7cd      	b.n	8006ca0 <__smakebuf_r+0x18>
 8006d04:	08006a95 	.word	0x08006a95

08006d08 <memcpy>:
 8006d08:	440a      	add	r2, r1
 8006d0a:	4291      	cmp	r1, r2
 8006d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d10:	d100      	bne.n	8006d14 <memcpy+0xc>
 8006d12:	4770      	bx	lr
 8006d14:	b510      	push	{r4, lr}
 8006d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d1e:	4291      	cmp	r1, r2
 8006d20:	d1f9      	bne.n	8006d16 <memcpy+0xe>
 8006d22:	bd10      	pop	{r4, pc}

08006d24 <memmove>:
 8006d24:	4288      	cmp	r0, r1
 8006d26:	b510      	push	{r4, lr}
 8006d28:	eb01 0402 	add.w	r4, r1, r2
 8006d2c:	d902      	bls.n	8006d34 <memmove+0x10>
 8006d2e:	4284      	cmp	r4, r0
 8006d30:	4623      	mov	r3, r4
 8006d32:	d807      	bhi.n	8006d44 <memmove+0x20>
 8006d34:	1e43      	subs	r3, r0, #1
 8006d36:	42a1      	cmp	r1, r4
 8006d38:	d008      	beq.n	8006d4c <memmove+0x28>
 8006d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d42:	e7f8      	b.n	8006d36 <memmove+0x12>
 8006d44:	4402      	add	r2, r0
 8006d46:	4601      	mov	r1, r0
 8006d48:	428a      	cmp	r2, r1
 8006d4a:	d100      	bne.n	8006d4e <memmove+0x2a>
 8006d4c:	bd10      	pop	{r4, pc}
 8006d4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d56:	e7f7      	b.n	8006d48 <memmove+0x24>

08006d58 <__malloc_lock>:
 8006d58:	4801      	ldr	r0, [pc, #4]	; (8006d60 <__malloc_lock+0x8>)
 8006d5a:	f7ff bf6d 	b.w	8006c38 <__retarget_lock_acquire_recursive>
 8006d5e:	bf00      	nop
 8006d60:	200002a4 	.word	0x200002a4

08006d64 <__malloc_unlock>:
 8006d64:	4801      	ldr	r0, [pc, #4]	; (8006d6c <__malloc_unlock+0x8>)
 8006d66:	f7ff bf68 	b.w	8006c3a <__retarget_lock_release_recursive>
 8006d6a:	bf00      	nop
 8006d6c:	200002a4 	.word	0x200002a4

08006d70 <_realloc_r>:
 8006d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d74:	4680      	mov	r8, r0
 8006d76:	4614      	mov	r4, r2
 8006d78:	460e      	mov	r6, r1
 8006d7a:	b921      	cbnz	r1, 8006d86 <_realloc_r+0x16>
 8006d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d80:	4611      	mov	r1, r2
 8006d82:	f7ff b80b 	b.w	8005d9c <_malloc_r>
 8006d86:	b92a      	cbnz	r2, 8006d94 <_realloc_r+0x24>
 8006d88:	f7fe ff9c 	bl	8005cc4 <_free_r>
 8006d8c:	4625      	mov	r5, r4
 8006d8e:	4628      	mov	r0, r5
 8006d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d94:	f000 f8fa 	bl	8006f8c <_malloc_usable_size_r>
 8006d98:	4284      	cmp	r4, r0
 8006d9a:	4607      	mov	r7, r0
 8006d9c:	d802      	bhi.n	8006da4 <_realloc_r+0x34>
 8006d9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006da2:	d812      	bhi.n	8006dca <_realloc_r+0x5a>
 8006da4:	4621      	mov	r1, r4
 8006da6:	4640      	mov	r0, r8
 8006da8:	f7fe fff8 	bl	8005d9c <_malloc_r>
 8006dac:	4605      	mov	r5, r0
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d0ed      	beq.n	8006d8e <_realloc_r+0x1e>
 8006db2:	42bc      	cmp	r4, r7
 8006db4:	4622      	mov	r2, r4
 8006db6:	4631      	mov	r1, r6
 8006db8:	bf28      	it	cs
 8006dba:	463a      	movcs	r2, r7
 8006dbc:	f7ff ffa4 	bl	8006d08 <memcpy>
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	f7fe ff7e 	bl	8005cc4 <_free_r>
 8006dc8:	e7e1      	b.n	8006d8e <_realloc_r+0x1e>
 8006dca:	4635      	mov	r5, r6
 8006dcc:	e7df      	b.n	8006d8e <_realloc_r+0x1e>

08006dce <_raise_r>:
 8006dce:	291f      	cmp	r1, #31
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	460d      	mov	r5, r1
 8006dd6:	d904      	bls.n	8006de2 <_raise_r+0x14>
 8006dd8:	2316      	movs	r3, #22
 8006dda:	6003      	str	r3, [r0, #0]
 8006ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8006de0:	bd38      	pop	{r3, r4, r5, pc}
 8006de2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006de4:	b112      	cbz	r2, 8006dec <_raise_r+0x1e>
 8006de6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006dea:	b94b      	cbnz	r3, 8006e00 <_raise_r+0x32>
 8006dec:	4620      	mov	r0, r4
 8006dee:	f000 f831 	bl	8006e54 <_getpid_r>
 8006df2:	462a      	mov	r2, r5
 8006df4:	4601      	mov	r1, r0
 8006df6:	4620      	mov	r0, r4
 8006df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dfc:	f000 b818 	b.w	8006e30 <_kill_r>
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d00a      	beq.n	8006e1a <_raise_r+0x4c>
 8006e04:	1c59      	adds	r1, r3, #1
 8006e06:	d103      	bne.n	8006e10 <_raise_r+0x42>
 8006e08:	2316      	movs	r3, #22
 8006e0a:	6003      	str	r3, [r0, #0]
 8006e0c:	2001      	movs	r0, #1
 8006e0e:	e7e7      	b.n	8006de0 <_raise_r+0x12>
 8006e10:	2400      	movs	r4, #0
 8006e12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e16:	4628      	mov	r0, r5
 8006e18:	4798      	blx	r3
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	e7e0      	b.n	8006de0 <_raise_r+0x12>
	...

08006e20 <raise>:
 8006e20:	4b02      	ldr	r3, [pc, #8]	; (8006e2c <raise+0xc>)
 8006e22:	4601      	mov	r1, r0
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	f7ff bfd2 	b.w	8006dce <_raise_r>
 8006e2a:	bf00      	nop
 8006e2c:	200000a4 	.word	0x200000a4

08006e30 <_kill_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4d07      	ldr	r5, [pc, #28]	; (8006e50 <_kill_r+0x20>)
 8006e34:	2300      	movs	r3, #0
 8006e36:	4604      	mov	r4, r0
 8006e38:	4608      	mov	r0, r1
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	602b      	str	r3, [r5, #0]
 8006e3e:	f7fa f833 	bl	8000ea8 <_kill>
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	d102      	bne.n	8006e4c <_kill_r+0x1c>
 8006e46:	682b      	ldr	r3, [r5, #0]
 8006e48:	b103      	cbz	r3, 8006e4c <_kill_r+0x1c>
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	bd38      	pop	{r3, r4, r5, pc}
 8006e4e:	bf00      	nop
 8006e50:	200002a8 	.word	0x200002a8

08006e54 <_getpid_r>:
 8006e54:	f7fa b820 	b.w	8000e98 <_getpid>

08006e58 <__sread>:
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e60:	f000 f89c 	bl	8006f9c <_read_r>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	bfab      	itete	ge
 8006e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e6c:	181b      	addge	r3, r3, r0
 8006e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e72:	bfac      	ite	ge
 8006e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e76:	81a3      	strhlt	r3, [r4, #12]
 8006e78:	bd10      	pop	{r4, pc}

08006e7a <__swrite>:
 8006e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e7e:	461f      	mov	r7, r3
 8006e80:	898b      	ldrh	r3, [r1, #12]
 8006e82:	05db      	lsls	r3, r3, #23
 8006e84:	4605      	mov	r5, r0
 8006e86:	460c      	mov	r4, r1
 8006e88:	4616      	mov	r6, r2
 8006e8a:	d505      	bpl.n	8006e98 <__swrite+0x1e>
 8006e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e90:	2302      	movs	r3, #2
 8006e92:	2200      	movs	r2, #0
 8006e94:	f000 f868 	bl	8006f68 <_lseek_r>
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ea2:	81a3      	strh	r3, [r4, #12]
 8006ea4:	4632      	mov	r2, r6
 8006ea6:	463b      	mov	r3, r7
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eae:	f000 b817 	b.w	8006ee0 <_write_r>

08006eb2 <__sseek>:
 8006eb2:	b510      	push	{r4, lr}
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eba:	f000 f855 	bl	8006f68 <_lseek_r>
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	bf15      	itete	ne
 8006ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ece:	81a3      	strheq	r3, [r4, #12]
 8006ed0:	bf18      	it	ne
 8006ed2:	81a3      	strhne	r3, [r4, #12]
 8006ed4:	bd10      	pop	{r4, pc}

08006ed6 <__sclose>:
 8006ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eda:	f000 b813 	b.w	8006f04 <_close_r>
	...

08006ee0 <_write_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4d07      	ldr	r5, [pc, #28]	; (8006f00 <_write_r+0x20>)
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	4608      	mov	r0, r1
 8006ee8:	4611      	mov	r1, r2
 8006eea:	2200      	movs	r2, #0
 8006eec:	602a      	str	r2, [r5, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f7fa f811 	bl	8000f16 <_write>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d102      	bne.n	8006efe <_write_r+0x1e>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	b103      	cbz	r3, 8006efe <_write_r+0x1e>
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	200002a8 	.word	0x200002a8

08006f04 <_close_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4d06      	ldr	r5, [pc, #24]	; (8006f20 <_close_r+0x1c>)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	602b      	str	r3, [r5, #0]
 8006f10:	f7fa f81d 	bl	8000f4e <_close>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_close_r+0x1a>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_close_r+0x1a>
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	200002a8 	.word	0x200002a8

08006f24 <_fstat_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4d07      	ldr	r5, [pc, #28]	; (8006f44 <_fstat_r+0x20>)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	4608      	mov	r0, r1
 8006f2e:	4611      	mov	r1, r2
 8006f30:	602b      	str	r3, [r5, #0]
 8006f32:	f7fa f818 	bl	8000f66 <_fstat>
 8006f36:	1c43      	adds	r3, r0, #1
 8006f38:	d102      	bne.n	8006f40 <_fstat_r+0x1c>
 8006f3a:	682b      	ldr	r3, [r5, #0]
 8006f3c:	b103      	cbz	r3, 8006f40 <_fstat_r+0x1c>
 8006f3e:	6023      	str	r3, [r4, #0]
 8006f40:	bd38      	pop	{r3, r4, r5, pc}
 8006f42:	bf00      	nop
 8006f44:	200002a8 	.word	0x200002a8

08006f48 <_isatty_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4d06      	ldr	r5, [pc, #24]	; (8006f64 <_isatty_r+0x1c>)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	4604      	mov	r4, r0
 8006f50:	4608      	mov	r0, r1
 8006f52:	602b      	str	r3, [r5, #0]
 8006f54:	f7fa f817 	bl	8000f86 <_isatty>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	d102      	bne.n	8006f62 <_isatty_r+0x1a>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	b103      	cbz	r3, 8006f62 <_isatty_r+0x1a>
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	200002a8 	.word	0x200002a8

08006f68 <_lseek_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4d07      	ldr	r5, [pc, #28]	; (8006f88 <_lseek_r+0x20>)
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	4608      	mov	r0, r1
 8006f70:	4611      	mov	r1, r2
 8006f72:	2200      	movs	r2, #0
 8006f74:	602a      	str	r2, [r5, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	f7fa f810 	bl	8000f9c <_lseek>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d102      	bne.n	8006f86 <_lseek_r+0x1e>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	b103      	cbz	r3, 8006f86 <_lseek_r+0x1e>
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
 8006f88:	200002a8 	.word	0x200002a8

08006f8c <_malloc_usable_size_r>:
 8006f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f90:	1f18      	subs	r0, r3, #4
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bfbc      	itt	lt
 8006f96:	580b      	ldrlt	r3, [r1, r0]
 8006f98:	18c0      	addlt	r0, r0, r3
 8006f9a:	4770      	bx	lr

08006f9c <_read_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4d07      	ldr	r5, [pc, #28]	; (8006fbc <_read_r+0x20>)
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	4608      	mov	r0, r1
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	602a      	str	r2, [r5, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f7f9 ff96 	bl	8000edc <_read>
 8006fb0:	1c43      	adds	r3, r0, #1
 8006fb2:	d102      	bne.n	8006fba <_read_r+0x1e>
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	b103      	cbz	r3, 8006fba <_read_r+0x1e>
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
 8006fbc:	200002a8 	.word	0x200002a8

08006fc0 <_init>:
 8006fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc2:	bf00      	nop
 8006fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc6:	bc08      	pop	{r3}
 8006fc8:	469e      	mov	lr, r3
 8006fca:	4770      	bx	lr

08006fcc <_fini>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	bf00      	nop
 8006fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd2:	bc08      	pop	{r3}
 8006fd4:	469e      	mov	lr, r3
 8006fd6:	4770      	bx	lr
