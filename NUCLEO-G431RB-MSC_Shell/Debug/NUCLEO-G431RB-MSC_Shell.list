
NUCLEO-G431RB-MSC_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f08  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007438  08007438  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08007438  08007438  00017438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007440  08007440  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007440  08007440  00017440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007444  08007444  00017444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08007448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000108  08007550  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08007550  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014952  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002816  00000000  00000000  00034a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  000372a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  000383b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f0ad  00000000  00000000  000393d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001375b  00000000  00000000  00058485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7839  00000000  00000000  0006bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133419  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000544c  00000000  00000000  0013346c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000108 	.word	0x20000108
 80001fc:	00000000 	.word	0x00000000
 8000200:	080070d0 	.word	0x080070d0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000010c 	.word	0x2000010c
 800021c:	080070d0 	.word	0x080070d0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b0a0      	sub	sp, #128	; 0x80
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	67bb      	str	r3, [r7, #120]	; 0x78
	char*		token;
	int 		newCmdReady = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	673b      	str	r3, [r7, #112]	; 0x70
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fdda 	bl	80011aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f98b 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fac1 	bl	8000b80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 fa73 	bl	8000ae8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000602:	f000 f9d1 	bl	80009a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2224      	movs	r2, #36	; 0x24
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f005 fa99 	bl	8005b44 <memset>
  memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000616:	2240      	movs	r2, #64	; 0x40
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f005 fa92 	bl	8005b44 <memset>
 8000620:	4ba6      	ldr	r3, [pc, #664]	; (80008bc <main+0x2d8>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
  memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
  memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000626:	2240      	movs	r2, #64	; 0x40
 8000628:	2100      	movs	r1, #0
 800062a:	48a5      	ldr	r0, [pc, #660]	; (80008c0 <main+0x2dc>)
 800062c:	f005 fa8a 	bl	8005b44 <memset>

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000630:	2201      	movs	r2, #1
 8000632:	49a2      	ldr	r1, [pc, #648]	; (80008bc <main+0x2d8>)
 8000634:	48a3      	ldr	r0, [pc, #652]	; (80008c4 <main+0x2e0>)
 8000636:	f003 faf7 	bl	8003c28 <HAL_UART_Receive_IT>
  HAL_Delay(10);
 800063a:	200a      	movs	r0, #10
 800063c:	f000 fdec 	bl	8001218 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	2266      	movs	r2, #102	; 0x66
 8000646:	49a0      	ldr	r1, [pc, #640]	; (80008c8 <main+0x2e4>)
 8000648:	489e      	ldr	r0, [pc, #632]	; (80008c4 <main+0x2e0>)
 800064a:	f003 fa57 	bl	8003afc <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	2218      	movs	r2, #24
 8000654:	499d      	ldr	r1, [pc, #628]	; (80008cc <main+0x2e8>)
 8000656:	489b      	ldr	r0, [pc, #620]	; (80008c4 <main+0x2e0>)
 8000658:	f003 fa50 	bl	8003afc <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // uartRxReceived is set to 1 when a new character is received on uart 1
	  	  if(uartRxReceived){
 800065c:	4b9c      	ldr	r3, [pc, #624]	; (80008d0 <main+0x2ec>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d058      	beq.n	8000716 <main+0x132>
	  		  switch(uartRxBuffer[0]){
 8000664:	4b95      	ldr	r3, [pc, #596]	; (80008bc <main+0x2d8>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b0d      	cmp	r3, #13
 800066a:	d002      	beq.n	8000672 <main+0x8e>
 800066c:	2b7f      	cmp	r3, #127	; 0x7f
 800066e:	d02f      	beq.n	80006d0 <main+0xec>
 8000670:	e03e      	b.n	80006f0 <main+0x10c>
	  		  // Nouvelle ligne, instruction à traiter
	  		  case ASCII_CR:
	  			  HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	2203      	movs	r2, #3
 8000678:	4996      	ldr	r1, [pc, #600]	; (80008d4 <main+0x2f0>)
 800067a:	4892      	ldr	r0, [pc, #584]	; (80008c4 <main+0x2e0>)
 800067c:	f003 fa3e 	bl	8003afc <HAL_UART_Transmit>
	  			  cmdBuffer[idx_cmd] = '\0';
 8000680:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000684:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000686:	4413      	add	r3, r2
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
	  			  argc = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	67bb      	str	r3, [r7, #120]	; 0x78
	  			  token = strtok(cmdBuffer, " ");
 8000690:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000694:	4990      	ldr	r1, [pc, #576]	; (80008d8 <main+0x2f4>)
 8000696:	4618      	mov	r0, r3
 8000698:	f005 fa7c 	bl	8005b94 <strtok>
 800069c:	4603      	mov	r3, r0
 800069e:	677b      	str	r3, [r7, #116]	; 0x74
	  			  while(token!=NULL){
 80006a0:	e00e      	b.n	80006c0 <main+0xdc>
	  				  argv[argc++] = token;
 80006a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006a4:	1c5a      	adds	r2, r3, #1
 80006a6:	67ba      	str	r2, [r7, #120]	; 0x78
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	3380      	adds	r3, #128	; 0x80
 80006ac:	443b      	add	r3, r7
 80006ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80006b0:	f843 2c7c 	str.w	r2, [r3, #-124]
	  				  token = strtok(NULL, " ");
 80006b4:	4988      	ldr	r1, [pc, #544]	; (80008d8 <main+0x2f4>)
 80006b6:	2000      	movs	r0, #0
 80006b8:	f005 fa6c 	bl	8005b94 <strtok>
 80006bc:	4603      	mov	r3, r0
 80006be:	677b      	str	r3, [r7, #116]	; 0x74
	  			  while(token!=NULL){
 80006c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1ed      	bne.n	80006a2 <main+0xbe>
	  			  }
	  			  idx_cmd = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	67fb      	str	r3, [r7, #124]	; 0x7c
	  			  newCmdReady = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	673b      	str	r3, [r7, #112]	; 0x70
	  			  break;
 80006ce:	e01f      	b.n	8000710 <main+0x12c>
	  		  // Suppression du dernier caractère
	  		  case ASCII_DEL:
	  			  cmdBuffer[idx_cmd--] = '\0';
 80006d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006d2:	1e5a      	subs	r2, r3, #1
 80006d4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80006d6:	3380      	adds	r3, #128	; 0x80
 80006d8:	443b      	add	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	f803 2c58 	strb.w	r2, [r3, #-88]
	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	2201      	movs	r2, #1
 80006e6:	4975      	ldr	r1, [pc, #468]	; (80008bc <main+0x2d8>)
 80006e8:	4876      	ldr	r0, [pc, #472]	; (80008c4 <main+0x2e0>)
 80006ea:	f003 fa07 	bl	8003afc <HAL_UART_Transmit>
	  			  break;
 80006ee:	e00f      	b.n	8000710 <main+0x12c>
	  	      // Nouveau caractère
	  		  default:
	  			  cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80006f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80006f6:	4a71      	ldr	r2, [pc, #452]	; (80008bc <main+0x2d8>)
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	3380      	adds	r3, #128	; 0x80
 80006fc:	443b      	add	r3, r7
 80006fe:	f803 2c58 	strb.w	r2, [r3, #-88]
	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	2201      	movs	r2, #1
 8000708:	496c      	ldr	r1, [pc, #432]	; (80008bc <main+0x2d8>)
 800070a:	486e      	ldr	r0, [pc, #440]	; (80008c4 <main+0x2e0>)
 800070c:	f003 f9f6 	bl	8003afc <HAL_UART_Transmit>
	  		  }
	  		  uartRxReceived = 0;
 8000710:	4b6f      	ldr	r3, [pc, #444]	; (80008d0 <main+0x2ec>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if(newCmdReady){
 8000716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000718:	2b00      	cmp	r3, #0
 800071a:	d09f      	beq.n	800065c <main+0x78>
	  		  if(strcmp(argv[0],"set")==0){
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	496f      	ldr	r1, [pc, #444]	; (80008dc <main+0x2f8>)
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fd7d 	bl	8000220 <strcmp>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d12d      	bne.n	8000788 <main+0x1a4>
	  			  if(strcmp(argv[1],"PA5")==0){
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	496c      	ldr	r1, [pc, #432]	; (80008e0 <main+0x2fc>)
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd75 	bl	8000220 <strcmp>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d11d      	bne.n	8000778 <main+0x194>
	  				  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4618      	mov	r0, r3
 8000740:	f005 f9d2 	bl	8005ae8 <atoi>
 8000744:	4603      	mov	r3, r0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	2120      	movs	r1, #32
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f001 f8a6 	bl	80018a0 <HAL_GPIO_WritePin>
	  				  sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	4618      	mov	r0, r3
 8000758:	f005 f9c6 	bl	8005ae8 <atoi>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	4960      	ldr	r1, [pc, #384]	; (80008e4 <main+0x300>)
 8000762:	4857      	ldr	r0, [pc, #348]	; (80008c0 <main+0x2dc>)
 8000764:	f005 f9f6 	bl	8005b54 <siprintf>
	  				  HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
 800076c:	2220      	movs	r2, #32
 800076e:	4954      	ldr	r1, [pc, #336]	; (80008c0 <main+0x2dc>)
 8000770:	4854      	ldr	r0, [pc, #336]	; (80008c4 <main+0x2e0>)
 8000772:	f003 f9c3 	bl	8003afc <HAL_UART_Transmit>
 8000776:	e096      	b.n	80008a6 <main+0x2c2>
	  			  }
	  			  else{
	  				  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	2214      	movs	r2, #20
 800077e:	495a      	ldr	r1, [pc, #360]	; (80008e8 <main+0x304>)
 8000780:	4850      	ldr	r0, [pc, #320]	; (80008c4 <main+0x2e0>)
 8000782:	f003 f9bb 	bl	8003afc <HAL_UART_Transmit>
 8000786:	e08e      	b.n	80008a6 <main+0x2c2>
	  			  }
	  		  }
	  		  else if(strcmp(argv[0],"get")==0)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4958      	ldr	r1, [pc, #352]	; (80008ec <main+0x308>)
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fd47 	bl	8000220 <strcmp>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d107      	bne.n	80007a8 <main+0x1c4>
	  		  {
	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000798:	f04f 33ff 	mov.w	r3, #4294967295
 800079c:	2214      	movs	r2, #20
 800079e:	4952      	ldr	r1, [pc, #328]	; (80008e8 <main+0x304>)
 80007a0:	4848      	ldr	r0, [pc, #288]	; (80008c4 <main+0x2e0>)
 80007a2:	f003 f9ab 	bl	8003afc <HAL_UART_Transmit>
 80007a6:	e07e      	b.n	80008a6 <main+0x2c2>
	  		  }
	  		  else if (strcmp(argv[0],"help")==0){
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4951      	ldr	r1, [pc, #324]	; (80008f0 <main+0x30c>)
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fd37 	bl	8000220 <strcmp>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d119      	bne.n	80007ec <main+0x208>
	  			  sprintf(uartTxBuffer," set PA5\r\n get\r\n start\r\n stop\r\n pinout\r\n");
 80007b8:	494e      	ldr	r1, [pc, #312]	; (80008f4 <main+0x310>)
 80007ba:	4841      	ldr	r0, [pc, #260]	; (80008c0 <main+0x2dc>)
 80007bc:	f005 f9ca 	bl	8005b54 <siprintf>
	  			  HAL_UART_Transmit(&huart2, uartTxBuffer, 64, HAL_MAX_DELAY);
 80007c0:	f04f 33ff 	mov.w	r3, #4294967295
 80007c4:	2240      	movs	r2, #64	; 0x40
 80007c6:	493e      	ldr	r1, [pc, #248]	; (80008c0 <main+0x2dc>)
 80007c8:	483e      	ldr	r0, [pc, #248]	; (80008c4 <main+0x2e0>)
 80007ca:	f003 f997 	bl	8003afc <HAL_UART_Transmit>
	  			  for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 80007ce:	2300      	movs	r3, #0
 80007d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80007d2:	e007      	b.n	80007e4 <main+0x200>
	  				  uartTxBuffer[i]=0;
 80007d4:	4a3a      	ldr	r2, [pc, #232]	; (80008c0 <main+0x2dc>)
 80007d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007d8:	4413      	add	r3, r2
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
	  			  for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 80007de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007e0:	3301      	adds	r3, #1
 80007e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80007e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007e6:	2b3f      	cmp	r3, #63	; 0x3f
 80007e8:	ddf4      	ble.n	80007d4 <main+0x1f0>
 80007ea:	e05c      	b.n	80008a6 <main+0x2c2>
	  			  }

	  		  }
	  		  else if (strcmp(argv[0],"pinout")==0){
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4942      	ldr	r1, [pc, #264]	; (80008f8 <main+0x314>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd15 	bl	8000220 <strcmp>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d119      	bne.n	8000830 <main+0x24c>
	  			  sprintf(uartTxBuffer," PA2:UART TX\r\n PA3:UART RX\r\n PA5:LED\r\n PA8:TIM1_CH1\r\n");
 80007fc:	493f      	ldr	r1, [pc, #252]	; (80008fc <main+0x318>)
 80007fe:	4830      	ldr	r0, [pc, #192]	; (80008c0 <main+0x2dc>)
 8000800:	f005 f9a8 	bl	8005b54 <siprintf>
	  			  HAL_UART_Transmit(&huart2, uartTxBuffer, 64, HAL_MAX_DELAY);
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
 8000808:	2240      	movs	r2, #64	; 0x40
 800080a:	492d      	ldr	r1, [pc, #180]	; (80008c0 <main+0x2dc>)
 800080c:	482d      	ldr	r0, [pc, #180]	; (80008c4 <main+0x2e0>)
 800080e:	f003 f975 	bl	8003afc <HAL_UART_Transmit>
	  			  for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 8000812:	2300      	movs	r3, #0
 8000814:	66bb      	str	r3, [r7, #104]	; 0x68
 8000816:	e007      	b.n	8000828 <main+0x244>
	  			  	  uartTxBuffer[i]=0;
 8000818:	4a29      	ldr	r2, [pc, #164]	; (80008c0 <main+0x2dc>)
 800081a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800081c:	4413      	add	r3, r2
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
	  			  for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 8000822:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000824:	3301      	adds	r3, #1
 8000826:	66bb      	str	r3, [r7, #104]	; 0x68
 8000828:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800082a:	2b3f      	cmp	r3, #63	; 0x3f
 800082c:	ddf4      	ble.n	8000818 <main+0x234>
 800082e:	e03a      	b.n	80008a6 <main+0x2c2>
	  			  }

	  		  }
	  		  else if (strcmp(argv[0],"start")==0){
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4933      	ldr	r1, [pc, #204]	; (8000900 <main+0x31c>)
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fcf3 	bl	8000220 <strcmp>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d111      	bne.n	8000864 <main+0x280>
	  			  sprintf(uartTxBuffer,"Power ON\r\n",atoi(argv[2]));
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4618      	mov	r0, r3
 8000844:	f005 f950 	bl	8005ae8 <atoi>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	492d      	ldr	r1, [pc, #180]	; (8000904 <main+0x320>)
 800084e:	481c      	ldr	r0, [pc, #112]	; (80008c0 <main+0x2dc>)
 8000850:	f005 f980 	bl	8005b54 <siprintf>
	  			  HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000854:	f04f 33ff 	mov.w	r3, #4294967295
 8000858:	2220      	movs	r2, #32
 800085a:	4919      	ldr	r1, [pc, #100]	; (80008c0 <main+0x2dc>)
 800085c:	4819      	ldr	r0, [pc, #100]	; (80008c4 <main+0x2e0>)
 800085e:	f003 f94d 	bl	8003afc <HAL_UART_Transmit>
 8000862:	e020      	b.n	80008a6 <main+0x2c2>
	  		  }
	  		  else if (strcmp(argv[0],"stop")==0){
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4928      	ldr	r1, [pc, #160]	; (8000908 <main+0x324>)
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fcd9 	bl	8000220 <strcmp>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d111      	bne.n	8000898 <main+0x2b4>
	  			  sprintf(uartTxBuffer,"Power OFF\r\n",atoi(argv[2]));
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	4618      	mov	r0, r3
 8000878:	f005 f936 	bl	8005ae8 <atoi>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	4922      	ldr	r1, [pc, #136]	; (800090c <main+0x328>)
 8000882:	480f      	ldr	r0, [pc, #60]	; (80008c0 <main+0x2dc>)
 8000884:	f005 f966 	bl	8005b54 <siprintf>
	  			  HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	2220      	movs	r2, #32
 800088e:	490c      	ldr	r1, [pc, #48]	; (80008c0 <main+0x2dc>)
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <main+0x2e0>)
 8000892:	f003 f933 	bl	8003afc <HAL_UART_Transmit>
 8000896:	e006      	b.n	80008a6 <main+0x2c2>
	  		  }
	  		  else{
	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	2214      	movs	r2, #20
 800089e:	4912      	ldr	r1, [pc, #72]	; (80008e8 <main+0x304>)
 80008a0:	4808      	ldr	r0, [pc, #32]	; (80008c4 <main+0x2e0>)
 80008a2:	f003 f92b 	bl	8003afc <HAL_UART_Transmit>
	  		  }
	  			  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	2218      	movs	r2, #24
 80008ac:	4907      	ldr	r1, [pc, #28]	; (80008cc <main+0x2e8>)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <main+0x2e0>)
 80008b0:	f003 f924 	bl	8003afc <HAL_UART_Transmit>
	  			  newCmdReady = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	673b      	str	r3, [r7, #112]	; 0x70
	  	  if(uartRxReceived){
 80008b8:	e6d0      	b.n	800065c <main+0x78>
 80008ba:	bf00      	nop
 80008bc:	20000204 	.word	0x20000204
 80008c0:	20000208 	.word	0x20000208
 80008c4:	20000170 	.word	0x20000170
 80008c8:	20000018 	.word	0x20000018
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000200 	.word	0x20000200
 80008d4:	20000080 	.word	0x20000080
 80008d8:	080070e8 	.word	0x080070e8
 80008dc:	080070ec 	.word	0x080070ec
 80008e0:	080070f0 	.word	0x080070f0
 80008e4:	080070f4 	.word	0x080070f4
 80008e8:	20000084 	.word	0x20000084
 80008ec:	08007110 	.word	0x08007110
 80008f0:	08007114 	.word	0x08007114
 80008f4:	0800711c 	.word	0x0800711c
 80008f8:	08007148 	.word	0x08007148
 80008fc:	08007150 	.word	0x08007150
 8000900:	08007188 	.word	0x08007188
 8000904:	08007190 	.word	0x08007190
 8000908:	0800719c 	.word	0x0800719c
 800090c:	080071a4 	.word	0x080071a4

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b094      	sub	sp, #80	; 0x50
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	2238      	movs	r2, #56	; 0x38
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f005 f910 	bl	8005b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000932:	2000      	movs	r0, #0
 8000934:	f000 ffcc 	bl	80018d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000938:	2302      	movs	r3, #2
 800093a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000946:	2302      	movs	r3, #2
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800094a:	2302      	movs	r3, #2
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800094e:	2304      	movs	r3, #4
 8000950:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000952:	2355      	movs	r3, #85	; 0x55
 8000954:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000956:	2302      	movs	r3, #2
 8000958:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800095a:	2302      	movs	r3, #2
 800095c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800095e:	2302      	movs	r3, #2
 8000960:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000962:	f107 0318 	add.w	r3, r7, #24
 8000966:	4618      	mov	r0, r3
 8000968:	f001 f856 	bl	8001a18 <HAL_RCC_OscConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000972:	f000 f987 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000976:	230f      	movs	r3, #15
 8000978:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097a:	2303      	movs	r3, #3
 800097c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2104      	movs	r1, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fb5a 	bl	8002048 <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800099a:	f000 f973 	bl	8000c84 <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3750      	adds	r7, #80	; 0x50
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b098      	sub	sp, #96	; 0x60
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2234      	movs	r2, #52	; 0x34
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f005 f8b5 	bl	8005b44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009da:	4b41      	ldr	r3, [pc, #260]	; (8000ae0 <MX_TIM1_Init+0x138>)
 80009dc:	4a41      	ldr	r2, [pc, #260]	; (8000ae4 <MX_TIM1_Init+0x13c>)
 80009de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009e0:	4b3f      	ldr	r3, [pc, #252]	; (8000ae0 <MX_TIM1_Init+0x138>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e6:	4b3e      	ldr	r3, [pc, #248]	; (8000ae0 <MX_TIM1_Init+0x138>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009ec:	4b3c      	ldr	r3, [pc, #240]	; (8000ae0 <MX_TIM1_Init+0x138>)
 80009ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b3a      	ldr	r3, [pc, #232]	; (8000ae0 <MX_TIM1_Init+0x138>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009fa:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <MX_TIM1_Init+0x138>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a00:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a06:	4836      	ldr	r0, [pc, #216]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000a08:	f002 f828 	bl	8002a5c <HAL_TIM_PWM_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a12:	f000 f937 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a26:	4619      	mov	r1, r3
 8000a28:	482d      	ldr	r0, [pc, #180]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000a2a:	f002 feaf 	bl	800378c <HAL_TIMEx_MasterConfigSynchronization>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a34:	f000 f926 	bl	8000c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a38:	2360      	movs	r3, #96	; 0x60
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a40:	2300      	movs	r3, #0
 8000a42:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a44:	2300      	movs	r3, #0
 8000a46:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4820      	ldr	r0, [pc, #128]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000a5e:	f002 f9d3 	bl	8002e08 <HAL_TIM_PWM_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a68:	f000 f90c 	bl	8000c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a70:	2204      	movs	r2, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	481a      	ldr	r0, [pc, #104]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000a76:	f002 f9c7 	bl	8002e08 <HAL_TIM_PWM_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000a80:	f000 f900 	bl	8000c84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000ac2:	f002 fee5 	bl	8003890 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000acc:	f000 f8da 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000ad2:	f000 f921 	bl	8000d18 <HAL_TIM_MspPostInit>

}
 8000ad6:	bf00      	nop
 8000ad8:	3760      	adds	r7, #96	; 0x60
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000124 	.word	0x20000124
 8000ae4:	40012c00 	.word	0x40012c00

08000ae8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aec:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <MX_USART2_UART_Init+0x90>)
 8000aee:	4a23      	ldr	r2, [pc, #140]	; (8000b7c <MX_USART2_UART_Init+0x94>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000af2:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <MX_USART2_UART_Init+0x90>)
 8000af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <MX_USART2_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b30:	4811      	ldr	r0, [pc, #68]	; (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b32:	f002 ff93 	bl	8003a5c <HAL_UART_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b3c:	f000 f8a2 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b40:	2100      	movs	r1, #0
 8000b42:	480d      	ldr	r0, [pc, #52]	; (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b44:	f004 ff05 	bl	8005952 <HAL_UARTEx_SetTxFifoThreshold>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b4e:	f000 f899 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b52:	2100      	movs	r1, #0
 8000b54:	4808      	ldr	r0, [pc, #32]	; (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b56:	f004 ff3a 	bl	80059ce <HAL_UARTEx_SetRxFifoThreshold>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b60:	f000 f890 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_USART2_UART_Init+0x90>)
 8000b66:	f004 febb 	bl	80058e0 <HAL_UARTEx_DisableFifoMode>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b70:	f000 f888 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000170 	.word	0x20000170
 8000b7c:	40004400 	.word	0x40004400

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <MX_GPIO_Init+0xac>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	4a24      	ldr	r2, [pc, #144]	; (8000c2c <MX_GPIO_Init+0xac>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba2:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <MX_GPIO_Init+0xac>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bae:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <MX_GPIO_Init+0xac>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <MX_GPIO_Init+0xac>)
 8000bb4:	f043 0320 	orr.w	r3, r3, #32
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <MX_GPIO_Init+0xac>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0320 	and.w	r3, r3, #32
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_GPIO_Init+0xac>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <MX_GPIO_Init+0xac>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_GPIO_Init+0xac>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2120      	movs	r1, #32
 8000be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be6:	f000 fe5b 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480b      	ldr	r0, [pc, #44]	; (8000c30 <MX_GPIO_Init+0xb0>)
 8000c02:	f000 fccb 	bl	800159c <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000c06:	2320      	movs	r3, #32
 8000c08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f000 fcbc 	bl	800159c <HAL_GPIO_Init>

}
 8000c24:	bf00      	nop
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	48000800 	.word	0x48000800

08000c34 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_UART_RxCpltCallback+0x20>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000c42:	2201      	movs	r2, #1
 8000c44:	4904      	ldr	r1, [pc, #16]	; (8000c58 <HAL_UART_RxCpltCallback+0x24>)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_UART_RxCpltCallback+0x28>)
 8000c48:	f002 ffee 	bl	8003c28 <HAL_UART_Receive_IT>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000200 	.word	0x20000200
 8000c58:	20000204 	.word	0x20000204
 8000c5c:	20000170 	.word	0x20000170

08000c60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d101      	bne.n	8000c76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c72:	f000 fab3 	bl	80011dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40001000 	.word	0x40001000

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>
	...

08000c90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_MspInit+0x44>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <HAL_MspInit+0x44>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_MspInit+0x44>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_TIM_PWM_MspInit+0x38>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d10b      	bne.n	8000d02 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cee:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40012c00 	.word	0x40012c00
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <HAL_TIM_MspPostInit+0x68>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d11d      	bne.n	8000d76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_TIM_MspPostInit+0x6c>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <HAL_TIM_MspPostInit+0x6c>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_TIM_MspPostInit+0x6c>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000d52:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000d56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d64:	2306      	movs	r3, #6
 8000d66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f000 fc13 	bl	800159c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3720      	adds	r7, #32
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40012c00 	.word	0x40012c00
 8000d84:	40021000 	.word	0x40021000

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b09a      	sub	sp, #104	; 0x68
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	2244      	movs	r2, #68	; 0x44
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 fecb 	bl	8005b44 <memset>
  if(huart->Instance==USART2)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a23      	ldr	r2, [pc, #140]	; (8000e40 <HAL_UART_MspInit+0xb8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d13e      	bne.n	8000e36 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fb8d 	bl	80024e4 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd0:	f7ff ff58 	bl	8000c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_UART_MspInit+0xbc>)
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd8:	4a1a      	ldr	r2, [pc, #104]	; (8000e44 <HAL_UART_MspInit+0xbc>)
 8000dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dde:	6593      	str	r3, [r2, #88]	; 0x58
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_UART_MspInit+0xbc>)
 8000de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_UART_MspInit+0xbc>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <HAL_UART_MspInit+0xbc>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_UART_MspInit+0xbc>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e04:	230c      	movs	r3, #12
 8000e06:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e14:	2307      	movs	r3, #7
 8000e16:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f000 fbbb 	bl	800159c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2026      	movs	r0, #38	; 0x26
 8000e2c:	f000 face 	bl	80013cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e30:	2026      	movs	r0, #38	; 0x26
 8000e32:	f000 fae5 	bl	8001400 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	3768      	adds	r7, #104	; 0x68
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40004400 	.word	0x40004400
 8000e44:	40021000 	.word	0x40021000

08000e48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	; 0x30
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <HAL_InitTick+0xcc>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	4a2c      	ldr	r2, [pc, #176]	; (8000f14 <HAL_InitTick+0xcc>)
 8000e64:	f043 0310 	orr.w	r3, r3, #16
 8000e68:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <HAL_InitTick+0xcc>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e76:	f107 020c 	add.w	r2, r7, #12
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fab7 	bl	80023f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e86:	f001 fa89 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8000e8a:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8e:	4a22      	ldr	r2, [pc, #136]	; (8000f18 <HAL_InitTick+0xd0>)
 8000e90:	fba2 2303 	umull	r2, r3, r2, r3
 8000e94:	0c9b      	lsrs	r3, r3, #18
 8000e96:	3b01      	subs	r3, #1
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <HAL_InitTick+0xd4>)
 8000e9c:	4a20      	ldr	r2, [pc, #128]	; (8000f20 <HAL_InitTick+0xd8>)
 8000e9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <HAL_InitTick+0xd4>)
 8000ea2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ea8:	4a1c      	ldr	r2, [pc, #112]	; (8000f1c <HAL_InitTick+0xd4>)
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <HAL_InitTick+0xd4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_InitTick+0xd4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000eba:	4818      	ldr	r0, [pc, #96]	; (8000f1c <HAL_InitTick+0xd4>)
 8000ebc:	f001 fd02 	bl	80028c4 <HAL_TIM_Base_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d11b      	bne.n	8000f06 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ece:	4813      	ldr	r0, [pc, #76]	; (8000f1c <HAL_InitTick+0xd4>)
 8000ed0:	f001 fd5a 	bl	8002988 <HAL_TIM_Base_Start_IT>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000eda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d111      	bne.n	8000f06 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ee2:	2036      	movs	r0, #54	; 0x36
 8000ee4:	f000 fa8c 	bl	8001400 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	d808      	bhi.n	8000f00 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	2036      	movs	r0, #54	; 0x36
 8000ef4:	f000 fa6a 	bl	80013cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_InitTick+0xdc>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e002      	b.n	8000f06 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3730      	adds	r7, #48	; 0x30
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	431bde83 	.word	0x431bde83
 8000f1c:	20000248 	.word	0x20000248
 8000f20:	40001000 	.word	0x40001000
 8000f24:	2000009c 	.word	0x2000009c

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <USART2_IRQHandler+0x10>)
 8000f86:	f002 fea5 	bl	8003cd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000170 	.word	0x20000170

08000f94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <TIM6_DAC_IRQHandler+0x10>)
 8000f9a:	f001 fdb6 	bl	8002b0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000248 	.word	0x20000248

08000fa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
	return 1;
 8000fac:	2301      	movs	r3, #1
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_kill>:

int _kill(int pid, int sig)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fc2:	f004 fd95 	bl	8005af0 <__errno>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2216      	movs	r2, #22
 8000fca:	601a      	str	r2, [r3, #0]
	return -1;
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_exit>:

void _exit (int status)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ffe7 	bl	8000fb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fea:	e7fe      	b.n	8000fea <_exit+0x12>

08000fec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e00a      	b.n	8001014 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ffe:	f3af 8000 	nop.w
 8001002:	4601      	mov	r1, r0
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	b2ca      	uxtb	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbf0      	blt.n	8000ffe <_read+0x12>
	}

return len;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e009      	b.n	800104c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	60ba      	str	r2, [r7, #8]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbf1      	blt.n	8001038 <_write+0x12>
	}
	return len;
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_close>:

int _close(int file)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
	return -1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001086:	605a      	str	r2, [r3, #4]
	return 0;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_isatty>:

int _isatty(int file)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
	return 1;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
	return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f004 fcfa 	bl	8005af0 <__errno>
 80010fc:	4603      	mov	r3, r0
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <_sbrk+0x64>)
 8001118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20008000 	.word	0x20008000
 8001128:	00000400 	.word	0x00000400
 800112c:	20000294 	.word	0x20000294
 8001130:	200002b0 	.word	0x200002b0

08001134 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800115a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <LoopForever+0x6>)
  ldr r1, =_edata
 800115e:	490e      	ldr	r1, [pc, #56]	; (8001198 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <LoopForever+0xe>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001174:	4c0b      	ldr	r4, [pc, #44]	; (80011a4 <LoopForever+0x16>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001182:	f7ff ffd7 	bl	8001134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001186:	f004 fcb9 	bl	8005afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800118a:	f7ff fa2b 	bl	80005e4 <main>

0800118e <LoopForever>:

LoopForever:
    b LoopForever
 800118e:	e7fe      	b.n	800118e <LoopForever>
  ldr   r0, =_estack
 8001190:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 800119c:	08007448 	.word	0x08007448
  ldr r2, =_sbss
 80011a0:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80011a4:	200002ac 	.word	0x200002ac

080011a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC1_2_IRQHandler>

080011aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 f8fe 	bl	80013b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ba:	200f      	movs	r0, #15
 80011bc:	f7ff fe44 	bl	8000e48 <HAL_InitTick>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	e001      	b.n	80011d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011cc:	f7ff fd60 	bl	8000c90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d0:	79fb      	ldrb	r3, [r7, #7]

}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_IncTick+0x1c>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_IncTick+0x20>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a03      	ldr	r2, [pc, #12]	; (80011f8 <HAL_IncTick+0x1c>)
 80011ec:	6013      	str	r3, [r2, #0]
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	20000298 	.word	0x20000298
 80011fc:	200000a0 	.word	0x200000a0

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000298 	.word	0x20000298

08001218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff ffee 	bl	8001200 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001230:	d004      	beq.n	800123c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_Delay+0x40>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123c:	bf00      	nop
 800123e:	f7ff ffdf 	bl	8001200 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	429a      	cmp	r2, r3
 800124c:	d8f7      	bhi.n	800123e <HAL_Delay+0x26>
  {
  }
}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200000a0 	.word	0x200000a0

0800125c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db0b      	blt.n	80012ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	4907      	ldr	r1, [pc, #28]	; (80012f8 <__NVIC_EnableIRQ+0x38>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2001      	movs	r0, #1
 80012e2:	fa00 f202 	lsl.w	r2, r0, r2
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ff4c 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013da:	f7ff ff63 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 80013de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	68b9      	ldr	r1, [r7, #8]
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	f7ff ffb3 	bl	8001350 <NVIC_EncodePriority>
 80013ea:	4602      	mov	r2, r0
 80013ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff82 	bl	80012fc <__NVIC_SetPriority>
}
 80013f8:	bf00      	nop
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff56 	bl	80012c0 <__NVIC_EnableIRQ>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d005      	beq.n	8001440 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2204      	movs	r2, #4
 8001438:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e037      	b.n	80014b0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 020e 	bic.w	r2, r2, #14
 800144e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800145e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0201 	bic.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	2101      	movs	r1, #1
 800147e:	fa01 f202 	lsl.w	r2, r1, r2
 8001482:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800148c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00c      	beq.n	80014b0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014a4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014ae:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d00d      	beq.n	8001502 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2204      	movs	r2, #4
 80014ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	e047      	b.n	8001592 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 020e 	bic.w	r2, r2, #14
 8001510:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0201 	bic.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001530:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f003 021f 	and.w	r2, r3, #31
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	2101      	movs	r1, #1
 8001540:	fa01 f202 	lsl.w	r2, r1, r2
 8001544:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800154e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00c      	beq.n	8001572 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001562:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001566:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001570:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	4798      	blx	r3
    }
  }
  return status;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015aa:	e15a      	b.n	8001862 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 814c 	beq.w	800185c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d005      	beq.n	80015dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d130      	bne.n	800163e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001612:	2201      	movs	r2, #1
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	f003 0201 	and.w	r2, r3, #1
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b03      	cmp	r3, #3
 8001648:	d017      	beq.n	800167a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	2203      	movs	r2, #3
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d123      	bne.n	80016ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	08da      	lsrs	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3208      	adds	r2, #8
 800168e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	220f      	movs	r2, #15
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	08da      	lsrs	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3208      	adds	r2, #8
 80016c8:	6939      	ldr	r1, [r7, #16]
 80016ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0203 	and.w	r2, r3, #3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80a6 	beq.w	800185c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001710:	4b5b      	ldr	r3, [pc, #364]	; (8001880 <HAL_GPIO_Init+0x2e4>)
 8001712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001714:	4a5a      	ldr	r2, [pc, #360]	; (8001880 <HAL_GPIO_Init+0x2e4>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6613      	str	r3, [r2, #96]	; 0x60
 800171c:	4b58      	ldr	r3, [pc, #352]	; (8001880 <HAL_GPIO_Init+0x2e4>)
 800171e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001728:	4a56      	ldr	r2, [pc, #344]	; (8001884 <HAL_GPIO_Init+0x2e8>)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	220f      	movs	r2, #15
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001752:	d01f      	beq.n	8001794 <HAL_GPIO_Init+0x1f8>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a4c      	ldr	r2, [pc, #304]	; (8001888 <HAL_GPIO_Init+0x2ec>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d019      	beq.n	8001790 <HAL_GPIO_Init+0x1f4>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a4b      	ldr	r2, [pc, #300]	; (800188c <HAL_GPIO_Init+0x2f0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d013      	beq.n	800178c <HAL_GPIO_Init+0x1f0>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a4a      	ldr	r2, [pc, #296]	; (8001890 <HAL_GPIO_Init+0x2f4>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d00d      	beq.n	8001788 <HAL_GPIO_Init+0x1ec>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a49      	ldr	r2, [pc, #292]	; (8001894 <HAL_GPIO_Init+0x2f8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d007      	beq.n	8001784 <HAL_GPIO_Init+0x1e8>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a48      	ldr	r2, [pc, #288]	; (8001898 <HAL_GPIO_Init+0x2fc>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d101      	bne.n	8001780 <HAL_GPIO_Init+0x1e4>
 800177c:	2305      	movs	r3, #5
 800177e:	e00a      	b.n	8001796 <HAL_GPIO_Init+0x1fa>
 8001780:	2306      	movs	r3, #6
 8001782:	e008      	b.n	8001796 <HAL_GPIO_Init+0x1fa>
 8001784:	2304      	movs	r3, #4
 8001786:	e006      	b.n	8001796 <HAL_GPIO_Init+0x1fa>
 8001788:	2303      	movs	r3, #3
 800178a:	e004      	b.n	8001796 <HAL_GPIO_Init+0x1fa>
 800178c:	2302      	movs	r3, #2
 800178e:	e002      	b.n	8001796 <HAL_GPIO_Init+0x1fa>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_GPIO_Init+0x1fa>
 8001794:	2300      	movs	r3, #0
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	f002 0203 	and.w	r2, r2, #3
 800179c:	0092      	lsls	r2, r2, #2
 800179e:	4093      	lsls	r3, r2
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a6:	4937      	ldr	r1, [pc, #220]	; (8001884 <HAL_GPIO_Init+0x2e8>)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017b4:	4b39      	ldr	r3, [pc, #228]	; (800189c <HAL_GPIO_Init+0x300>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017d8:	4a30      	ldr	r2, [pc, #192]	; (800189c <HAL_GPIO_Init+0x300>)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_GPIO_Init+0x300>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001802:	4a26      	ldr	r2, [pc, #152]	; (800189c <HAL_GPIO_Init+0x300>)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <HAL_GPIO_Init+0x300>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800182c:	4a1b      	ldr	r2, [pc, #108]	; (800189c <HAL_GPIO_Init+0x300>)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001832:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_GPIO_Init+0x300>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001856:	4a11      	ldr	r2, [pc, #68]	; (800189c <HAL_GPIO_Init+0x300>)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	f47f ae9d 	bne.w	80015ac <HAL_GPIO_Init+0x10>
  }
}
 8001872:	bf00      	nop
 8001874:	bf00      	nop
 8001876:	371c      	adds	r7, #28
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	40021000 	.word	0x40021000
 8001884:	40010000 	.word	0x40010000
 8001888:	48000400 	.word	0x48000400
 800188c:	48000800 	.word	0x48000800
 8001890:	48000c00 	.word	0x48000c00
 8001894:	48001000 	.word	0x48001000
 8001898:	48001400 	.word	0x48001400
 800189c:	40010400 	.word	0x40010400

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d141      	bne.n	8001962 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018de:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d131      	bne.n	8001950 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018ec:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f2:	4a46      	ldr	r2, [pc, #280]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018fc:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001904:	4a41      	ldr	r2, [pc, #260]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800190c:	4b40      	ldr	r3, [pc, #256]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2232      	movs	r2, #50	; 0x32
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	4a3f      	ldr	r2, [pc, #252]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	0c9b      	lsrs	r3, r3, #18
 800191e:	3301      	adds	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001922:	e002      	b.n	800192a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3b01      	subs	r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800192a:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001936:	d102      	bne.n	800193e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f2      	bne.n	8001924 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800193e:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194a:	d158      	bne.n	80019fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e057      	b.n	8001a00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001950:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001956:	4a2d      	ldr	r2, [pc, #180]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800195c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001960:	e04d      	b.n	80019fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001968:	d141      	bne.n	80019ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800196a:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001976:	d131      	bne.n	80019dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800197a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800197e:	4a23      	ldr	r2, [pc, #140]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001988:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001990:	4a1e      	ldr	r2, [pc, #120]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001996:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2232      	movs	r2, #50	; 0x32
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	4a1c      	ldr	r2, [pc, #112]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019a4:	fba2 2303 	umull	r2, r3, r2, r3
 80019a8:	0c9b      	lsrs	r3, r3, #18
 80019aa:	3301      	adds	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ae:	e002      	b.n	80019b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c2:	d102      	bne.n	80019ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f2      	bne.n	80019b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d6:	d112      	bne.n	80019fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e011      	b.n	8001a00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019ec:	e007      	b.n	80019fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	40007000 	.word	0x40007000
 8001a10:	20000098 	.word	0x20000098
 8001a14:	431bde83 	.word	0x431bde83

08001a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e306      	b.n	8002038 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d075      	beq.n	8001b22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a36:	4b97      	ldr	r3, [pc, #604]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a40:	4b94      	ldr	r3, [pc, #592]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b0c      	cmp	r3, #12
 8001a4e:	d102      	bne.n	8001a56 <HAL_RCC_OscConfig+0x3e>
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d002      	beq.n	8001a5c <HAL_RCC_OscConfig+0x44>
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d10b      	bne.n	8001a74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	4b8d      	ldr	r3, [pc, #564]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d05b      	beq.n	8001b20 <HAL_RCC_OscConfig+0x108>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d157      	bne.n	8001b20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e2e1      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7c:	d106      	bne.n	8001a8c <HAL_RCC_OscConfig+0x74>
 8001a7e:	4b85      	ldr	r3, [pc, #532]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a84      	ldr	r2, [pc, #528]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e01d      	b.n	8001ac8 <HAL_RCC_OscConfig+0xb0>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x98>
 8001a96:	4b7f      	ldr	r3, [pc, #508]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a7e      	ldr	r2, [pc, #504]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b7c      	ldr	r3, [pc, #496]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a7b      	ldr	r2, [pc, #492]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0xb0>
 8001ab0:	4b78      	ldr	r3, [pc, #480]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a77      	ldr	r2, [pc, #476]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b75      	ldr	r3, [pc, #468]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a74      	ldr	r2, [pc, #464]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d013      	beq.n	8001af8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fb96 	bl	8001200 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff fb92 	bl	8001200 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	; 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e2a6      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aea:	4b6a      	ldr	r3, [pc, #424]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0xc0>
 8001af6:	e014      	b.n	8001b22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff fb82 	bl	8001200 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff fb7e 	bl	8001200 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e292      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b12:	4b60      	ldr	r3, [pc, #384]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0xe8>
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d075      	beq.n	8001c1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b2e:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b38:	4b56      	ldr	r3, [pc, #344]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b0c      	cmp	r3, #12
 8001b46:	d102      	bne.n	8001b4e <HAL_RCC_OscConfig+0x136>
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d002      	beq.n	8001b54 <HAL_RCC_OscConfig+0x13c>
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d11f      	bne.n	8001b94 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b54:	4b4f      	ldr	r3, [pc, #316]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_OscConfig+0x154>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e265      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6c:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	061b      	lsls	r3, r3, #24
 8001b7a:	4946      	ldr	r1, [pc, #280]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b80:	4b45      	ldr	r3, [pc, #276]	; (8001c98 <HAL_RCC_OscConfig+0x280>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f95f 	bl	8000e48 <HAL_InitTick>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d043      	beq.n	8001c18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e251      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d023      	beq.n	8001be4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9c:	4b3d      	ldr	r3, [pc, #244]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a3c      	ldr	r2, [pc, #240]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fb2a 	bl	8001200 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fb26 	bl	8001200 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e23a      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc2:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bce:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	061b      	lsls	r3, r3, #24
 8001bdc:	492d      	ldr	r1, [pc, #180]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
 8001be2:	e01a      	b.n	8001c1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a2a      	ldr	r2, [pc, #168]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001bea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fb06 	bl	8001200 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fb02 	bl	8001200 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e216      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c0a:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x1e0>
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d041      	beq.n	8001caa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d01c      	beq.n	8001c68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c34:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3e:	f7ff fadf 	bl	8001200 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c46:	f7ff fadb 	bl	8001200 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e1ef      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0ef      	beq.n	8001c46 <HAL_RCC_OscConfig+0x22e>
 8001c66:	e020      	b.n	8001caa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c68:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6e:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c78:	f7ff fac2 	bl	8001200 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c7e:	e00d      	b.n	8001c9c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c80:	f7ff fabe 	bl	8001200 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d906      	bls.n	8001c9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1d2      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c9c:	4b8c      	ldr	r3, [pc, #560]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ea      	bne.n	8001c80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80a6 	beq.w	8001e04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cbc:	4b84      	ldr	r3, [pc, #528]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_OscConfig+0x2b4>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x2b6>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00d      	beq.n	8001cee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	4b7f      	ldr	r3, [pc, #508]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	4a7e      	ldr	r2, [pc, #504]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8001cde:	4b7c      	ldr	r3, [pc, #496]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cea:	2301      	movs	r3, #1
 8001cec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cee:	4b79      	ldr	r3, [pc, #484]	; (8001ed4 <HAL_RCC_OscConfig+0x4bc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d118      	bne.n	8001d2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cfa:	4b76      	ldr	r3, [pc, #472]	; (8001ed4 <HAL_RCC_OscConfig+0x4bc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a75      	ldr	r2, [pc, #468]	; (8001ed4 <HAL_RCC_OscConfig+0x4bc>)
 8001d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d06:	f7ff fa7b 	bl	8001200 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0e:	f7ff fa77 	bl	8001200 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e18b      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d20:	4b6c      	ldr	r3, [pc, #432]	; (8001ed4 <HAL_RCC_OscConfig+0x4bc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d108      	bne.n	8001d46 <HAL_RCC_OscConfig+0x32e>
 8001d34:	4b66      	ldr	r3, [pc, #408]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3a:	4a65      	ldr	r2, [pc, #404]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d44:	e024      	b.n	8001d90 <HAL_RCC_OscConfig+0x378>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d110      	bne.n	8001d70 <HAL_RCC_OscConfig+0x358>
 8001d4e:	4b60      	ldr	r3, [pc, #384]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d54:	4a5e      	ldr	r2, [pc, #376]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001d56:	f043 0304 	orr.w	r3, r3, #4
 8001d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d5e:	4b5c      	ldr	r3, [pc, #368]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d64:	4a5a      	ldr	r2, [pc, #360]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d6e:	e00f      	b.n	8001d90 <HAL_RCC_OscConfig+0x378>
 8001d70:	4b57      	ldr	r3, [pc, #348]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d76:	4a56      	ldr	r2, [pc, #344]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d80:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	4a52      	ldr	r2, [pc, #328]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001d88:	f023 0304 	bic.w	r3, r3, #4
 8001d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d016      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d98:	f7ff fa32 	bl	8001200 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f7ff fa2e 	bl	8001200 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e140      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db6:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ed      	beq.n	8001da0 <HAL_RCC_OscConfig+0x388>
 8001dc4:	e015      	b.n	8001df2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc6:	f7ff fa1b 	bl	8001200 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7ff fa17 	bl	8001200 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e129      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001de4:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ed      	bne.n	8001dce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001df2:	7ffb      	ldrb	r3, [r7, #31]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df8:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	4a34      	ldr	r2, [pc, #208]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0320 	and.w	r3, r3, #32
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d03c      	beq.n	8001e8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01c      	beq.n	8001e52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e18:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e1e:	4a2c      	ldr	r2, [pc, #176]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff f9ea 	bl	8001200 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e30:	f7ff f9e6 	bl	8001200 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e0fa      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e42:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ef      	beq.n	8001e30 <HAL_RCC_OscConfig+0x418>
 8001e50:	e01b      	b.n	8001e8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e52:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e58:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001e5a:	f023 0301 	bic.w	r3, r3, #1
 8001e5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e62:	f7ff f9cd 	bl	8001200 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e6a:	f7ff f9c9 	bl	8001200 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e0dd      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1ef      	bne.n	8001e6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80d1 	beq.w	8002036 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b0c      	cmp	r3, #12
 8001e9e:	f000 808b 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d15e      	bne.n	8001f68 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <HAL_RCC_OscConfig+0x4b8>)
 8001eb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7ff f9a3 	bl	8001200 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ebc:	e00c      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7ff f99f 	bl	8001200 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d905      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e0b3      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed8:	4b59      	ldr	r3, [pc, #356]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ec      	bne.n	8001ebe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee4:	4b56      	ldr	r3, [pc, #344]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	4b56      	ldr	r3, [pc, #344]	; (8002044 <HAL_RCC_OscConfig+0x62c>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6a11      	ldr	r1, [r2, #32]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ef4:	3a01      	subs	r2, #1
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	4311      	orrs	r1, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001efe:	0212      	lsls	r2, r2, #8
 8001f00:	4311      	orrs	r1, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f06:	0852      	lsrs	r2, r2, #1
 8001f08:	3a01      	subs	r2, #1
 8001f0a:	0552      	lsls	r2, r2, #21
 8001f0c:	4311      	orrs	r1, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f12:	0852      	lsrs	r2, r2, #1
 8001f14:	3a01      	subs	r2, #1
 8001f16:	0652      	lsls	r2, r2, #25
 8001f18:	4311      	orrs	r1, r2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f1e:	06d2      	lsls	r2, r2, #27
 8001f20:	430a      	orrs	r2, r1
 8001f22:	4947      	ldr	r1, [pc, #284]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f28:	4b45      	ldr	r3, [pc, #276]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a44      	ldr	r2, [pc, #272]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f34:	4b42      	ldr	r3, [pc, #264]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4a41      	ldr	r2, [pc, #260]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff f95e 	bl	8001200 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7ff f95a 	bl	8001200 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e06e      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5a:	4b39      	ldr	r3, [pc, #228]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x530>
 8001f66:	e066      	b.n	8002036 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f68:	4b35      	ldr	r3, [pc, #212]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a34      	ldr	r2, [pc, #208]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f72:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f74:	4b32      	ldr	r3, [pc, #200]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4a31      	ldr	r2, [pc, #196]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001f7a:	f023 0303 	bic.w	r3, r3, #3
 8001f7e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001f80:	4b2f      	ldr	r3, [pc, #188]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a2e      	ldr	r2, [pc, #184]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001f86:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff f936 	bl	8001200 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7ff f932 	bl	8001200 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e046      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001faa:	4b25      	ldr	r3, [pc, #148]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x580>
 8001fb6:	e03e      	b.n	8002036 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e039      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <HAL_RCC_OscConfig+0x628>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f003 0203 	and.w	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d12c      	bne.n	8002032 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d123      	bne.n	8002032 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d11b      	bne.n	8002032 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d113      	bne.n	8002032 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	085b      	lsrs	r3, r3, #1
 8002016:	3b01      	subs	r3, #1
 8002018:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d109      	bne.n	8002032 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	085b      	lsrs	r3, r3, #1
 800202a:	3b01      	subs	r3, #1
 800202c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3720      	adds	r7, #32
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	019f800c 	.word	0x019f800c

08002048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e11e      	b.n	800229e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002060:	4b91      	ldr	r3, [pc, #580]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d910      	bls.n	8002090 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b8e      	ldr	r3, [pc, #568]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 020f 	bic.w	r2, r3, #15
 8002076:	498c      	ldr	r1, [pc, #560]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b8a      	ldr	r3, [pc, #552]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e106      	b.n	800229e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d073      	beq.n	8002184 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d129      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a4:	4b81      	ldr	r3, [pc, #516]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0f4      	b.n	800229e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80020b4:	f000 f9d0 	bl	8002458 <RCC_GetSysClockFreqFromPLLSource>
 80020b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4a7c      	ldr	r2, [pc, #496]	; (80022b0 <HAL_RCC_ClockConfig+0x268>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d93f      	bls.n	8002142 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020c2:	4b7a      	ldr	r3, [pc, #488]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d033      	beq.n	8002142 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d12f      	bne.n	8002142 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020e2:	4b72      	ldr	r3, [pc, #456]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ea:	4a70      	ldr	r2, [pc, #448]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 80020ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	e024      	b.n	8002142 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d107      	bne.n	8002110 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002100:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d109      	bne.n	8002120 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0c6      	b.n	800229e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002110:	4b66      	ldr	r3, [pc, #408]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0be      	b.n	800229e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002120:	f000 f8ce 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 8002124:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4a61      	ldr	r2, [pc, #388]	; (80022b0 <HAL_RCC_ClockConfig+0x268>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d909      	bls.n	8002142 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800212e:	4b5f      	ldr	r3, [pc, #380]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002136:	4a5d      	ldr	r2, [pc, #372]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 8002138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800213c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002142:	4b5a      	ldr	r3, [pc, #360]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f023 0203 	bic.w	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4957      	ldr	r1, [pc, #348]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 8002150:	4313      	orrs	r3, r2
 8002152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002154:	f7ff f854 	bl	8001200 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	e00a      	b.n	8002172 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215c:	f7ff f850 	bl	8001200 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e095      	b.n	800229e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	4b4e      	ldr	r3, [pc, #312]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 020c 	and.w	r2, r3, #12
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	429a      	cmp	r2, r3
 8002182:	d1eb      	bne.n	800215c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d023      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800219c:	4b43      	ldr	r3, [pc, #268]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a42      	ldr	r2, [pc, #264]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 80021a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80021b4:	4b3d      	ldr	r3, [pc, #244]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80021bc:	4a3b      	ldr	r2, [pc, #236]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 80021be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c4:	4b39      	ldr	r3, [pc, #228]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4936      	ldr	r1, [pc, #216]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
 80021d6:	e008      	b.n	80021ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2b80      	cmp	r3, #128	; 0x80
 80021dc:	d105      	bne.n	80021ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80021de:	4b33      	ldr	r3, [pc, #204]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	4a32      	ldr	r2, [pc, #200]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 80021e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021ea:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d21d      	bcs.n	8002234 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 020f 	bic.w	r2, r3, #15
 8002200:	4929      	ldr	r1, [pc, #164]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002208:	f7fe fffa 	bl	8001200 <HAL_GetTick>
 800220c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	e00a      	b.n	8002226 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002210:	f7fe fff6 	bl	8001200 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e03b      	b.n	800229e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d1ed      	bne.n	8002210 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4917      	ldr	r1, [pc, #92]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	490f      	ldr	r1, [pc, #60]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002272:	f000 f825 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 8002276:	4602      	mov	r2, r0
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <HAL_RCC_ClockConfig+0x264>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	490c      	ldr	r1, [pc, #48]	; (80022b4 <HAL_RCC_ClockConfig+0x26c>)
 8002284:	5ccb      	ldrb	r3, [r1, r3]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <HAL_RCC_ClockConfig+0x270>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <HAL_RCC_ClockConfig+0x274>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fdd6 	bl	8000e48 <HAL_InitTick>
 800229c:	4603      	mov	r3, r0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40022000 	.word	0x40022000
 80022ac:	40021000 	.word	0x40021000
 80022b0:	04c4b400 	.word	0x04c4b400
 80022b4:	080071b0 	.word	0x080071b0
 80022b8:	20000098 	.word	0x20000098
 80022bc:	2000009c 	.word	0x2000009c

080022c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80022c6:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d102      	bne.n	80022d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022d2:	4b2a      	ldr	r3, [pc, #168]	; (800237c <HAL_RCC_GetSysClockFreq+0xbc>)
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	e047      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d102      	bne.n	80022ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022e4:	4b26      	ldr	r3, [pc, #152]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	e03e      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80022ea:	4b23      	ldr	r3, [pc, #140]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b0c      	cmp	r3, #12
 80022f4:	d136      	bne.n	8002364 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	3301      	adds	r3, #1
 800230c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d10c      	bne.n	800232e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002314:	4a1a      	ldr	r2, [pc, #104]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	fbb2 f3f3 	udiv	r3, r2, r3
 800231c:	4a16      	ldr	r2, [pc, #88]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800231e:	68d2      	ldr	r2, [r2, #12]
 8002320:	0a12      	lsrs	r2, r2, #8
 8002322:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002326:	fb02 f303 	mul.w	r3, r2, r3
 800232a:	617b      	str	r3, [r7, #20]
      break;
 800232c:	e00c      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800232e:	4a13      	ldr	r2, [pc, #76]	; (800237c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	4a10      	ldr	r2, [pc, #64]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002338:	68d2      	ldr	r2, [r2, #12]
 800233a:	0a12      	lsrs	r2, r2, #8
 800233c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002340:	fb02 f303 	mul.w	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]
      break;
 8002346:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0e5b      	lsrs	r3, r3, #25
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	3301      	adds	r3, #1
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	e001      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002368:	693b      	ldr	r3, [r7, #16]
}
 800236a:	4618      	mov	r0, r3
 800236c:	371c      	adds	r7, #28
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	00f42400 	.word	0x00f42400
 8002380:	016e3600 	.word	0x016e3600

08002384 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <HAL_RCC_GetHCLKFreq+0x14>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000098 	.word	0x20000098

0800239c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023a0:	f7ff fff0 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4904      	ldr	r1, [pc, #16]	; (80023c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40021000 	.word	0x40021000
 80023c4:	080071c0 	.word	0x080071c0

080023c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023cc:	f7ff ffda 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	0adb      	lsrs	r3, r3, #11
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	4904      	ldr	r1, [pc, #16]	; (80023f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023de:	5ccb      	ldrb	r3, [r1, r3]
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	080071c0 	.word	0x080071c0

080023f4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	220f      	movs	r2, #15
 8002402:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_RCC_GetClockConfig+0x5c>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0203 	and.w	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <HAL_RCC_GetClockConfig+0x5c>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <HAL_RCC_GetClockConfig+0x5c>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_RCC_GetClockConfig+0x5c>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	08db      	lsrs	r3, r3, #3
 800242e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002436:	4b07      	ldr	r3, [pc, #28]	; (8002454 <HAL_RCC_GetClockConfig+0x60>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 020f 	and.w	r2, r3, #15
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	601a      	str	r2, [r3, #0]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	40022000 	.word	0x40022000

08002458 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800245e:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	3301      	adds	r3, #1
 8002474:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d10c      	bne.n	8002496 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800247c:	4a17      	ldr	r2, [pc, #92]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002486:	68d2      	ldr	r2, [r2, #12]
 8002488:	0a12      	lsrs	r2, r2, #8
 800248a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800248e:	fb02 f303 	mul.w	r3, r2, r3
 8002492:	617b      	str	r3, [r7, #20]
    break;
 8002494:	e00c      	b.n	80024b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002496:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	fbb2 f3f3 	udiv	r3, r2, r3
 800249e:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024a0:	68d2      	ldr	r2, [r2, #12]
 80024a2:	0a12      	lsrs	r2, r2, #8
 80024a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024a8:	fb02 f303 	mul.w	r3, r2, r3
 80024ac:	617b      	str	r3, [r7, #20]
    break;
 80024ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	0e5b      	lsrs	r3, r3, #25
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	3301      	adds	r3, #1
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024ca:	687b      	ldr	r3, [r7, #4]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	40021000 	.word	0x40021000
 80024dc:	016e3600 	.word	0x016e3600
 80024e0:	00f42400 	.word	0x00f42400

080024e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024ec:	2300      	movs	r3, #0
 80024ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f0:	2300      	movs	r3, #0
 80024f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8098 	beq.w	8002632 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002506:	4b43      	ldr	r3, [pc, #268]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10d      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b40      	ldr	r3, [pc, #256]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	4a3f      	ldr	r2, [pc, #252]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	6593      	str	r3, [r2, #88]	; 0x58
 800251e:	4b3d      	ldr	r3, [pc, #244]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252a:	2301      	movs	r3, #1
 800252c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800252e:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a39      	ldr	r2, [pc, #228]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800253a:	f7fe fe61 	bl	8001200 <HAL_GetTick>
 800253e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002540:	e009      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002542:	f7fe fe5d 	bl	8001200 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d902      	bls.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	74fb      	strb	r3, [r7, #19]
        break;
 8002554:	e005      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002556:	4b30      	ldr	r3, [pc, #192]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0ef      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002562:	7cfb      	ldrb	r3, [r7, #19]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d159      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002568:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002572:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01e      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	429a      	cmp	r2, r3
 8002582:	d019      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002584:	4b23      	ldr	r3, [pc, #140]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002590:	4b20      	ldr	r3, [pc, #128]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	4a1f      	ldr	r2, [pc, #124]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	4a1b      	ldr	r2, [pc, #108]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025b0:	4a18      	ldr	r2, [pc, #96]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7fe fe1d 	bl	8001200 <HAL_GetTick>
 80025c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c8:	e00b      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe fe19 	bl	8001200 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d902      	bls.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	74fb      	strb	r3, [r7, #19]
            break;
 80025e0:	e006      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ec      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	4903      	ldr	r1, [pc, #12]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800260c:	e008      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	74bb      	strb	r3, [r7, #18]
 8002612:	e005      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002614:	40021000 	.word	0x40021000
 8002618:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002620:	7c7b      	ldrb	r3, [r7, #17]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d105      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002626:	4ba6      	ldr	r3, [pc, #664]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	4aa5      	ldr	r2, [pc, #660]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002630:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800263e:	4ba0      	ldr	r3, [pc, #640]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002644:	f023 0203 	bic.w	r2, r3, #3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	499c      	ldr	r1, [pc, #624]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002660:	4b97      	ldr	r3, [pc, #604]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	f023 020c 	bic.w	r2, r3, #12
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	4994      	ldr	r1, [pc, #592]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002682:	4b8f      	ldr	r3, [pc, #572]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002688:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	498b      	ldr	r1, [pc, #556]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026a4:	4b86      	ldr	r3, [pc, #536]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	4983      	ldr	r1, [pc, #524]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026c6:	4b7e      	ldr	r3, [pc, #504]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	497a      	ldr	r1, [pc, #488]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026e8:	4b75      	ldr	r3, [pc, #468]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	4972      	ldr	r1, [pc, #456]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800270a:	4b6d      	ldr	r3, [pc, #436]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002710:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	4969      	ldr	r1, [pc, #420]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800272c:	4b64      	ldr	r3, [pc, #400]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4961      	ldr	r1, [pc, #388]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800274e:	4b5c      	ldr	r3, [pc, #368]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	4958      	ldr	r1, [pc, #352]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d015      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002770:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	4950      	ldr	r1, [pc, #320]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800278e:	d105      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002790:	4b4b      	ldr	r3, [pc, #300]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4a4a      	ldr	r2, [pc, #296]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800279a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d015      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027a8:	4b45      	ldr	r3, [pc, #276]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	4942      	ldr	r1, [pc, #264]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027c6:	d105      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c8:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4a3c      	ldr	r2, [pc, #240]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d015      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027e0:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4934      	ldr	r1, [pc, #208]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027fe:	d105      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002800:	4b2f      	ldr	r3, [pc, #188]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4a2e      	ldr	r2, [pc, #184]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800280a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d015      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002818:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	4926      	ldr	r1, [pc, #152]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002836:	d105      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002838:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002842:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d015      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	4918      	ldr	r1, [pc, #96]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800286e:	d105      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002870:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800287a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002888:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	490a      	ldr	r1, [pc, #40]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028a6:	d105      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000

080028c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e049      	b.n	800296a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f841 	bl	8002972 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3304      	adds	r3, #4
 8002900:	4619      	mov	r1, r3
 8002902:	4610      	mov	r0, r2
 8002904:	f000 fbbc 	bl	8003080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d001      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e04a      	b.n	8002a36 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a21      	ldr	r2, [pc, #132]	; (8002a44 <HAL_TIM_Base_Start_IT+0xbc>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d018      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x6c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ca:	d013      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x6c>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <HAL_TIM_Base_Start_IT+0xc0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00e      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x6c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <HAL_TIM_Base_Start_IT+0xc4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d009      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x6c>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <HAL_TIM_Base_Start_IT+0xc8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x6c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_TIM_Base_Start_IT+0xcc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d115      	bne.n	8002a20 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <HAL_TIM_Base_Start_IT+0xd0>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b06      	cmp	r3, #6
 8002a04:	d015      	beq.n	8002a32 <HAL_TIM_Base_Start_IT+0xaa>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0c:	d011      	beq.n	8002a32 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0201 	orr.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1e:	e008      	b.n	8002a32 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e000      	b.n	8002a34 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	40000400 	.word	0x40000400
 8002a4c:	40000800 	.word	0x40000800
 8002a50:	40013400 	.word	0x40013400
 8002a54:	40014000 	.word	0x40014000
 8002a58:	00010007 	.word	0x00010007

08002a5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e049      	b.n	8002b02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fe f928 	bl	8000cd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f000 faf0 	bl	8003080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d122      	bne.n	8002b66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d11b      	bne.n	8002b66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f06f 0202 	mvn.w	r2, #2
 8002b36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fa79 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 8002b52:	e005      	b.n	8002b60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fa6b 	bl	8003030 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fa7c 	bl	8003058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d122      	bne.n	8002bba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d11b      	bne.n	8002bba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f06f 0204 	mvn.w	r2, #4
 8002b8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fa4f 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 8002ba6:	e005      	b.n	8002bb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fa41 	bl	8003030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fa52 	bl	8003058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d122      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d11b      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f06f 0208 	mvn.w	r2, #8
 8002bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2204      	movs	r2, #4
 8002be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fa25 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 8002bfa:	e005      	b.n	8002c08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fa17 	bl	8003030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa28 	bl	8003058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b10      	cmp	r3, #16
 8002c1a:	d122      	bne.n	8002c62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d11b      	bne.n	8002c62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f06f 0210 	mvn.w	r2, #16
 8002c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2208      	movs	r2, #8
 8002c38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f9fb 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 8002c4e:	e005      	b.n	8002c5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f9ed 	bl	8003030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f9fe 	bl	8003058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d10e      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d107      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f06f 0201 	mvn.w	r2, #1
 8002c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7fd ffe9 	bl	8000c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c98:	2b80      	cmp	r3, #128	; 0x80
 8002c9a:	d10e      	bne.n	8002cba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	2b80      	cmp	r3, #128	; 0x80
 8002ca8:	d107      	bne.n	8002cba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fe95 	bl	80039e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd4:	2b80      	cmp	r3, #128	; 0x80
 8002cd6:	d107      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fe88 	bl	80039f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b40      	cmp	r3, #64	; 0x40
 8002cf4:	d10e      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b40      	cmp	r3, #64	; 0x40
 8002d02:	d107      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f9ac 	bl	800306c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d10e      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d107      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0220 	mvn.w	r2, #32
 8002d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fe48 	bl	80039d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4e:	d10f      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d5e:	d107      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fe4e 	bl	8003a0c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d7e:	d10f      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d8e:	d107      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fe40 	bl	8003a20 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dae:	d10f      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dbe:	d107      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fe32 	bl	8003a34 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dde:	d10f      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dee:	d107      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fe24 	bl	8003a48 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e0ff      	b.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b14      	cmp	r3, #20
 8002e32:	f200 80f0 	bhi.w	8003016 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002e36:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3c:	08002e91 	.word	0x08002e91
 8002e40:	08003017 	.word	0x08003017
 8002e44:	08003017 	.word	0x08003017
 8002e48:	08003017 	.word	0x08003017
 8002e4c:	08002ed1 	.word	0x08002ed1
 8002e50:	08003017 	.word	0x08003017
 8002e54:	08003017 	.word	0x08003017
 8002e58:	08003017 	.word	0x08003017
 8002e5c:	08002f13 	.word	0x08002f13
 8002e60:	08003017 	.word	0x08003017
 8002e64:	08003017 	.word	0x08003017
 8002e68:	08003017 	.word	0x08003017
 8002e6c:	08002f53 	.word	0x08002f53
 8002e70:	08003017 	.word	0x08003017
 8002e74:	08003017 	.word	0x08003017
 8002e78:	08003017 	.word	0x08003017
 8002e7c:	08002f95 	.word	0x08002f95
 8002e80:	08003017 	.word	0x08003017
 8002e84:	08003017 	.word	0x08003017
 8002e88:	08003017 	.word	0x08003017
 8002e8c:	08002fd5 	.word	0x08002fd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f982 	bl	80031a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0208 	orr.w	r2, r2, #8
 8002eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0204 	bic.w	r2, r2, #4
 8002eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6999      	ldr	r1, [r3, #24]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	619a      	str	r2, [r3, #24]
      break;
 8002ece:	e0a5      	b.n	800301c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f9f2 	bl	80032c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6999      	ldr	r1, [r3, #24]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	021a      	lsls	r2, r3, #8
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	619a      	str	r2, [r3, #24]
      break;
 8002f10:	e084      	b.n	800301c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 fa5b 	bl	80033d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0208 	orr.w	r2, r2, #8
 8002f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0204 	bic.w	r2, r2, #4
 8002f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69d9      	ldr	r1, [r3, #28]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	61da      	str	r2, [r3, #28]
      break;
 8002f50:	e064      	b.n	800301c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fac3 	bl	80034e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69d9      	ldr	r1, [r3, #28]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	021a      	lsls	r2, r3, #8
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	61da      	str	r2, [r3, #28]
      break;
 8002f92:	e043      	b.n	800301c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fb2c 	bl	80035f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0208 	orr.w	r2, r2, #8
 8002fae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0204 	bic.w	r2, r2, #4
 8002fbe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002fd2:	e023      	b.n	800301c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fb70 	bl	80036c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	021a      	lsls	r2, r3, #8
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003014:	e002      	b.n	800301c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	75fb      	strb	r3, [r7, #23]
      break;
 800301a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003024:	7dfb      	ldrb	r3, [r7, #23]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop

08003030 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a3c      	ldr	r2, [pc, #240]	; (8003184 <TIM_Base_SetConfig+0x104>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00f      	beq.n	80030b8 <TIM_Base_SetConfig+0x38>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309e:	d00b      	beq.n	80030b8 <TIM_Base_SetConfig+0x38>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a39      	ldr	r2, [pc, #228]	; (8003188 <TIM_Base_SetConfig+0x108>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d007      	beq.n	80030b8 <TIM_Base_SetConfig+0x38>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a38      	ldr	r2, [pc, #224]	; (800318c <TIM_Base_SetConfig+0x10c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d003      	beq.n	80030b8 <TIM_Base_SetConfig+0x38>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a37      	ldr	r2, [pc, #220]	; (8003190 <TIM_Base_SetConfig+0x110>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d108      	bne.n	80030ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a2d      	ldr	r2, [pc, #180]	; (8003184 <TIM_Base_SetConfig+0x104>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01b      	beq.n	800310a <TIM_Base_SetConfig+0x8a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d8:	d017      	beq.n	800310a <TIM_Base_SetConfig+0x8a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a2a      	ldr	r2, [pc, #168]	; (8003188 <TIM_Base_SetConfig+0x108>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <TIM_Base_SetConfig+0x8a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a29      	ldr	r2, [pc, #164]	; (800318c <TIM_Base_SetConfig+0x10c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00f      	beq.n	800310a <TIM_Base_SetConfig+0x8a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a28      	ldr	r2, [pc, #160]	; (8003190 <TIM_Base_SetConfig+0x110>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00b      	beq.n	800310a <TIM_Base_SetConfig+0x8a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a27      	ldr	r2, [pc, #156]	; (8003194 <TIM_Base_SetConfig+0x114>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <TIM_Base_SetConfig+0x8a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a26      	ldr	r2, [pc, #152]	; (8003198 <TIM_Base_SetConfig+0x118>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d003      	beq.n	800310a <TIM_Base_SetConfig+0x8a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a25      	ldr	r2, [pc, #148]	; (800319c <TIM_Base_SetConfig+0x11c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d108      	bne.n	800311c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4313      	orrs	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a10      	ldr	r2, [pc, #64]	; (8003184 <TIM_Base_SetConfig+0x104>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00f      	beq.n	8003168 <TIM_Base_SetConfig+0xe8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a11      	ldr	r2, [pc, #68]	; (8003190 <TIM_Base_SetConfig+0x110>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00b      	beq.n	8003168 <TIM_Base_SetConfig+0xe8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a10      	ldr	r2, [pc, #64]	; (8003194 <TIM_Base_SetConfig+0x114>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d007      	beq.n	8003168 <TIM_Base_SetConfig+0xe8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a0f      	ldr	r2, [pc, #60]	; (8003198 <TIM_Base_SetConfig+0x118>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_Base_SetConfig+0xe8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a0e      	ldr	r2, [pc, #56]	; (800319c <TIM_Base_SetConfig+0x11c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d103      	bne.n	8003170 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	615a      	str	r2, [r3, #20]
}
 8003176:	bf00      	nop
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40012c00 	.word	0x40012c00
 8003188:	40000400 	.word	0x40000400
 800318c:	40000800 	.word	0x40000800
 8003190:	40013400 	.word	0x40013400
 8003194:	40014000 	.word	0x40014000
 8003198:	40014400 	.word	0x40014400
 800319c:	40014800 	.word	0x40014800

080031a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f023 0201 	bic.w	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f023 0302 	bic.w	r3, r3, #2
 80031ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a2c      	ldr	r2, [pc, #176]	; (80032ac <TIM_OC1_SetConfig+0x10c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00f      	beq.n	8003220 <TIM_OC1_SetConfig+0x80>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a2b      	ldr	r2, [pc, #172]	; (80032b0 <TIM_OC1_SetConfig+0x110>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00b      	beq.n	8003220 <TIM_OC1_SetConfig+0x80>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a2a      	ldr	r2, [pc, #168]	; (80032b4 <TIM_OC1_SetConfig+0x114>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d007      	beq.n	8003220 <TIM_OC1_SetConfig+0x80>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <TIM_OC1_SetConfig+0x118>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d003      	beq.n	8003220 <TIM_OC1_SetConfig+0x80>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a28      	ldr	r2, [pc, #160]	; (80032bc <TIM_OC1_SetConfig+0x11c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d10c      	bne.n	800323a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f023 0308 	bic.w	r3, r3, #8
 8003226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f023 0304 	bic.w	r3, r3, #4
 8003238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1b      	ldr	r2, [pc, #108]	; (80032ac <TIM_OC1_SetConfig+0x10c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00f      	beq.n	8003262 <TIM_OC1_SetConfig+0xc2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a1a      	ldr	r2, [pc, #104]	; (80032b0 <TIM_OC1_SetConfig+0x110>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00b      	beq.n	8003262 <TIM_OC1_SetConfig+0xc2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a19      	ldr	r2, [pc, #100]	; (80032b4 <TIM_OC1_SetConfig+0x114>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d007      	beq.n	8003262 <TIM_OC1_SetConfig+0xc2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <TIM_OC1_SetConfig+0x118>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d003      	beq.n	8003262 <TIM_OC1_SetConfig+0xc2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a17      	ldr	r2, [pc, #92]	; (80032bc <TIM_OC1_SetConfig+0x11c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d111      	bne.n	8003286 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	621a      	str	r2, [r3, #32]
}
 80032a0:	bf00      	nop
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	40013400 	.word	0x40013400
 80032b4:	40014000 	.word	0x40014000
 80032b8:	40014400 	.word	0x40014400
 80032bc:	40014800 	.word	0x40014800

080032c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f023 0210 	bic.w	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0320 	bic.w	r3, r3, #32
 800330e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a28      	ldr	r2, [pc, #160]	; (80033c0 <TIM_OC2_SetConfig+0x100>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <TIM_OC2_SetConfig+0x6c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a27      	ldr	r2, [pc, #156]	; (80033c4 <TIM_OC2_SetConfig+0x104>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d10d      	bne.n	8003348 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003346:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <TIM_OC2_SetConfig+0x100>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00f      	beq.n	8003370 <TIM_OC2_SetConfig+0xb0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a1c      	ldr	r2, [pc, #112]	; (80033c4 <TIM_OC2_SetConfig+0x104>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00b      	beq.n	8003370 <TIM_OC2_SetConfig+0xb0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a1b      	ldr	r2, [pc, #108]	; (80033c8 <TIM_OC2_SetConfig+0x108>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <TIM_OC2_SetConfig+0xb0>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a1a      	ldr	r2, [pc, #104]	; (80033cc <TIM_OC2_SetConfig+0x10c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_OC2_SetConfig+0xb0>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a19      	ldr	r2, [pc, #100]	; (80033d0 <TIM_OC2_SetConfig+0x110>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d113      	bne.n	8003398 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003376:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800337e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40013400 	.word	0x40013400
 80033c8:	40014000 	.word	0x40014000
 80033cc:	40014400 	.word	0x40014400
 80033d0:	40014800 	.word	0x40014800

080033d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0303 	bic.w	r3, r3, #3
 800340e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <TIM_OC3_SetConfig+0xfc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <TIM_OC3_SetConfig+0x6a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <TIM_OC3_SetConfig+0x100>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d10d      	bne.n	800345a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	021b      	lsls	r3, r3, #8
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <TIM_OC3_SetConfig+0xfc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00f      	beq.n	8003482 <TIM_OC3_SetConfig+0xae>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1b      	ldr	r2, [pc, #108]	; (80034d4 <TIM_OC3_SetConfig+0x100>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00b      	beq.n	8003482 <TIM_OC3_SetConfig+0xae>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1a      	ldr	r2, [pc, #104]	; (80034d8 <TIM_OC3_SetConfig+0x104>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d007      	beq.n	8003482 <TIM_OC3_SetConfig+0xae>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a19      	ldr	r2, [pc, #100]	; (80034dc <TIM_OC3_SetConfig+0x108>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d003      	beq.n	8003482 <TIM_OC3_SetConfig+0xae>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a18      	ldr	r2, [pc, #96]	; (80034e0 <TIM_OC3_SetConfig+0x10c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d113      	bne.n	80034aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	621a      	str	r2, [r3, #32]
}
 80034c4:	bf00      	nop
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	40013400 	.word	0x40013400
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40014800 	.word	0x40014800

080034e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003532:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	031b      	lsls	r3, r3, #12
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a28      	ldr	r2, [pc, #160]	; (80035e4 <TIM_OC4_SetConfig+0x100>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d003      	beq.n	8003550 <TIM_OC4_SetConfig+0x6c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a27      	ldr	r2, [pc, #156]	; (80035e8 <TIM_OC4_SetConfig+0x104>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d10d      	bne.n	800356c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	031b      	lsls	r3, r3, #12
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800356a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <TIM_OC4_SetConfig+0x100>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00f      	beq.n	8003594 <TIM_OC4_SetConfig+0xb0>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <TIM_OC4_SetConfig+0x104>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00b      	beq.n	8003594 <TIM_OC4_SetConfig+0xb0>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a1b      	ldr	r2, [pc, #108]	; (80035ec <TIM_OC4_SetConfig+0x108>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d007      	beq.n	8003594 <TIM_OC4_SetConfig+0xb0>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a1a      	ldr	r2, [pc, #104]	; (80035f0 <TIM_OC4_SetConfig+0x10c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d003      	beq.n	8003594 <TIM_OC4_SetConfig+0xb0>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <TIM_OC4_SetConfig+0x110>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d113      	bne.n	80035bc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800359a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	019b      	lsls	r3, r3, #6
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	019b      	lsls	r3, r3, #6
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40013400 	.word	0x40013400
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800

080035f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800363c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	041b      	lsls	r3, r3, #16
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a17      	ldr	r2, [pc, #92]	; (80036ac <TIM_OC5_SetConfig+0xb4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00f      	beq.n	8003672 <TIM_OC5_SetConfig+0x7a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <TIM_OC5_SetConfig+0xb8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00b      	beq.n	8003672 <TIM_OC5_SetConfig+0x7a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <TIM_OC5_SetConfig+0xbc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d007      	beq.n	8003672 <TIM_OC5_SetConfig+0x7a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a14      	ldr	r2, [pc, #80]	; (80036b8 <TIM_OC5_SetConfig+0xc0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d003      	beq.n	8003672 <TIM_OC5_SetConfig+0x7a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a13      	ldr	r2, [pc, #76]	; (80036bc <TIM_OC5_SetConfig+0xc4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d109      	bne.n	8003686 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003678:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	621a      	str	r2, [r3, #32]
}
 80036a0:	bf00      	nop
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40013400 	.word	0x40013400
 80036b4:	40014000 	.word	0x40014000
 80036b8:	40014400 	.word	0x40014400
 80036bc:	40014800 	.word	0x40014800

080036c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	021b      	lsls	r3, r3, #8
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	051b      	lsls	r3, r3, #20
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a18      	ldr	r2, [pc, #96]	; (8003778 <TIM_OC6_SetConfig+0xb8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00f      	beq.n	800373c <TIM_OC6_SetConfig+0x7c>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a17      	ldr	r2, [pc, #92]	; (800377c <TIM_OC6_SetConfig+0xbc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00b      	beq.n	800373c <TIM_OC6_SetConfig+0x7c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a16      	ldr	r2, [pc, #88]	; (8003780 <TIM_OC6_SetConfig+0xc0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d007      	beq.n	800373c <TIM_OC6_SetConfig+0x7c>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a15      	ldr	r2, [pc, #84]	; (8003784 <TIM_OC6_SetConfig+0xc4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <TIM_OC6_SetConfig+0x7c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a14      	ldr	r2, [pc, #80]	; (8003788 <TIM_OC6_SetConfig+0xc8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d109      	bne.n	8003750 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003742:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	029b      	lsls	r3, r3, #10
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40013400 	.word	0x40013400
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800

0800378c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e065      	b.n	8003870 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a2c      	ldr	r2, [pc, #176]	; (800387c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2b      	ldr	r2, [pc, #172]	; (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d108      	bne.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80037f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a1b      	ldr	r2, [pc, #108]	; (800387c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d018      	beq.n	8003844 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381a:	d013      	beq.n	8003844 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a18      	ldr	r2, [pc, #96]	; (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00e      	beq.n	8003844 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a17      	ldr	r2, [pc, #92]	; (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d009      	beq.n	8003844 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a12      	ldr	r2, [pc, #72]	; (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a13      	ldr	r2, [pc, #76]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d10c      	bne.n	800385e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800384a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	4313      	orrs	r3, r2
 8003854:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40013400 	.word	0x40013400
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800
 800388c:	40014000 	.word	0x40014000

08003890 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e087      	b.n	80039bc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	041b      	lsls	r3, r3, #16
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a27      	ldr	r2, [pc, #156]	; (80039c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a25      	ldr	r2, [pc, #148]	; (80039cc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d106      	bne.n	8003948 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1e      	ldr	r2, [pc, #120]	; (80039c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d126      	bne.n	80039aa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003966:	051b      	lsls	r3, r3, #20
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0e      	ldr	r2, [pc, #56]	; (80039c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d004      	beq.n	800399c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a0d      	ldr	r2, [pc, #52]	; (80039cc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d106      	bne.n	80039aa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40013400 	.word	0x40013400

080039d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e042      	b.n	8003af4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d106      	bne.n	8003a86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7fd f981 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2224      	movs	r2, #36	; 0x24
 8003a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0201 	bic.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fc50 	bl	8004344 <UART_SetConfig>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e022      	b.n	8003af4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 ff10 	bl	80048dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 ff97 	bl	8004a20 <UART_CheckIdleState>
 8003af2:	4603      	mov	r3, r0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	; 0x28
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	f040 8083 	bne.w	8003c1e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_UART_Transmit+0x28>
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e07b      	b.n	8003c20 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d101      	bne.n	8003b36 <HAL_UART_Transmit+0x3a>
 8003b32:	2302      	movs	r3, #2
 8003b34:	e074      	b.n	8003c20 <HAL_UART_Transmit+0x124>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2221      	movs	r2, #33	; 0x21
 8003b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b4e:	f7fd fb57 	bl	8001200 <HAL_GetTick>
 8003b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	88fa      	ldrh	r2, [r7, #6]
 8003b60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6c:	d108      	bne.n	8003b80 <HAL_UART_Transmit+0x84>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	e003      	b.n	8003b88 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003b90:	e02c      	b.n	8003bec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2180      	movs	r1, #128	; 0x80
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 ff8a 	bl	8004ab6 <UART_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e039      	b.n	8003c20 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10b      	bne.n	8003bca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	e007      	b.n	8003bda <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	781a      	ldrb	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1cc      	bne.n	8003b92 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2140      	movs	r1, #64	; 0x40
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 ff57 	bl	8004ab6 <UART_WaitOnFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e006      	b.n	8003c20 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e000      	b.n	8003c20 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
  }
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	; 0x28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d142      	bne.n	8003cc6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_UART_Receive_IT+0x24>
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e03b      	b.n	8003cc8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_UART_Receive_IT+0x36>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e034      	b.n	8003cc8 <HAL_UART_Receive_IT+0xa0>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a17      	ldr	r2, [pc, #92]	; (8003cd0 <HAL_UART_Receive_IT+0xa8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d01f      	beq.n	8003cb6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d018      	beq.n	8003cb6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	613b      	str	r3, [r7, #16]
   return(result);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	623b      	str	r3, [r7, #32]
 8003ca4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	69f9      	ldr	r1, [r7, #28]
 8003ca8:	6a3a      	ldr	r2, [r7, #32]
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e6      	bne.n	8003c84 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 ffc3 	bl	8004c48 <UART_Start_Receive_IT>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	e000      	b.n	8003cc8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003cc6:	2302      	movs	r3, #2
  }
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3728      	adds	r7, #40	; 0x28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40008000 	.word	0x40008000

08003cd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b0ba      	sub	sp, #232	; 0xe8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003cfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003cfe:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d02:	4013      	ands	r3, r2
 8003d04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003d08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d11b      	bne.n	8003d48 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d015      	beq.n	8003d48 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d105      	bne.n	8003d34 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d009      	beq.n	8003d48 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 82d6 	beq.w	80042ea <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	4798      	blx	r3
      }
      return;
 8003d46:	e2d0      	b.n	80042ea <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 811f 	beq.w	8003f90 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d52:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003d56:	4b8b      	ldr	r3, [pc, #556]	; (8003f84 <HAL_UART_IRQHandler+0x2b0>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003d5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d62:	4b89      	ldr	r3, [pc, #548]	; (8003f88 <HAL_UART_IRQHandler+0x2b4>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8112 	beq.w	8003f90 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d011      	beq.n	8003d9c <HAL_UART_IRQHandler+0xc8>
 8003d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d92:	f043 0201 	orr.w	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d011      	beq.n	8003dcc <HAL_UART_IRQHandler+0xf8>
 8003da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00b      	beq.n	8003dcc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2202      	movs	r2, #2
 8003dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dc2:	f043 0204 	orr.w	r2, r3, #4
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d011      	beq.n	8003dfc <HAL_UART_IRQHandler+0x128>
 8003dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2204      	movs	r2, #4
 8003dea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df2:	f043 0202 	orr.w	r2, r3, #2
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d017      	beq.n	8003e38 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003e14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003e18:	4b5a      	ldr	r3, [pc, #360]	; (8003f84 <HAL_UART_IRQHandler+0x2b0>)
 8003e1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00b      	beq.n	8003e38 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2208      	movs	r2, #8
 8003e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e2e:	f043 0208 	orr.w	r2, r3, #8
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d012      	beq.n	8003e6a <HAL_UART_IRQHandler+0x196>
 8003e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00c      	beq.n	8003e6a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e60:	f043 0220 	orr.w	r2, r3, #32
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 823c 	beq.w	80042ee <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d013      	beq.n	8003eaa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d105      	bne.n	8003e9a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b40      	cmp	r3, #64	; 0x40
 8003ec0:	d005      	beq.n	8003ece <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ec6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d04f      	beq.n	8003f6e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 ffe4 	bl	8004e9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d141      	bne.n	8003f66 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3308      	adds	r3, #8
 8003f0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1d9      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d013      	beq.n	8003f5e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3a:	4a14      	ldr	r2, [pc, #80]	; (8003f8c <HAL_UART_IRQHandler+0x2b8>)
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fd fac3 	bl	80014ce <HAL_DMA_Abort_IT>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d017      	beq.n	8003f7e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	e00f      	b.n	8003f7e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f9da 	bl	8004318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	e00b      	b.n	8003f7e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f9d6 	bl	8004318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6c:	e007      	b.n	8003f7e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f9d2 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003f7c:	e1b7      	b.n	80042ee <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7e:	bf00      	nop
    return;
 8003f80:	e1b5      	b.n	80042ee <HAL_UART_IRQHandler+0x61a>
 8003f82:	bf00      	nop
 8003f84:	10000001 	.word	0x10000001
 8003f88:	04000120 	.word	0x04000120
 8003f8c:	08004f69 	.word	0x08004f69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	f040 814a 	bne.w	800422e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8143 	beq.w	800422e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 813c 	beq.w	800422e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2210      	movs	r2, #16
 8003fbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc8:	2b40      	cmp	r3, #64	; 0x40
 8003fca:	f040 80b5 	bne.w	8004138 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 8187 	beq.w	80042f2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	f080 817f 	bcs.w	80042f2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ffa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 8086 	bne.w	800411c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800402c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800403a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800403e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004046:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004052:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1da      	bne.n	8004010 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3308      	adds	r3, #8
 8004060:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800406a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800406c:	f023 0301 	bic.w	r3, r3, #1
 8004070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3308      	adds	r3, #8
 800407a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800407e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004082:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004086:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e1      	bne.n	800405a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3308      	adds	r3, #8
 800409c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3308      	adds	r3, #8
 80040b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e3      	bne.n	8004096 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ec:	f023 0310 	bic.w	r3, r3, #16
 80040f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004100:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004104:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800410c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e4      	bne.n	80040dc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004116:	4618      	mov	r0, r3
 8004118:	f7fd f980 	bl	800141c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004128:	b29b      	uxth	r3, r3
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	b29b      	uxth	r3, r3
 800412e:	4619      	mov	r1, r3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f8fb 	bl	800432c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004136:	e0dc      	b.n	80042f2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004144:	b29b      	uxth	r3, r3
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80ce 	beq.w	80042f6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800415a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 80c9 	beq.w	80042f6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004178:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004186:	647b      	str	r3, [r7, #68]	; 0x44
 8004188:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800418c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e4      	bne.n	8004164 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3308      	adds	r3, #8
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	623b      	str	r3, [r7, #32]
   return(result);
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3308      	adds	r3, #8
 80041be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041c2:	633a      	str	r2, [r7, #48]	; 0x30
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e1      	bne.n	800419a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2220      	movs	r2, #32
 80041da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0310 	bic.w	r3, r3, #16
 80041fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	69b9      	ldr	r1, [r7, #24]
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	617b      	str	r3, [r7, #20]
   return(result);
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e4      	bne.n	80041ea <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004220:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004224:	4619      	mov	r1, r3
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f880 	bl	800432c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800422c:	e063      	b.n	80042f6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800422e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00e      	beq.n	8004258 <HAL_UART_IRQHandler+0x584>
 800423a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800423e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800424e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f001 fb27 	bl	80058a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004256:	e051      	b.n	80042fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004260:	2b00      	cmp	r3, #0
 8004262:	d014      	beq.n	800428e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d105      	bne.n	800427c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004280:	2b00      	cmp	r3, #0
 8004282:	d03a      	beq.n	80042fa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
    }
    return;
 800428c:	e035      	b.n	80042fa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800428e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <HAL_UART_IRQHandler+0x5da>
 800429a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fe74 	bl	8004f94 <UART_EndTransmit_IT>
    return;
 80042ac:	e026      	b.n	80042fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80042ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d009      	beq.n	80042ce <HAL_UART_IRQHandler+0x5fa>
 80042ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f001 fb00 	bl	80058cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042cc:	e016      	b.n	80042fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80042ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d010      	beq.n	80042fc <HAL_UART_IRQHandler+0x628>
 80042da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	da0c      	bge.n	80042fc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f001 fae8 	bl	80058b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042e8:	e008      	b.n	80042fc <HAL_UART_IRQHandler+0x628>
      return;
 80042ea:	bf00      	nop
 80042ec:	e006      	b.n	80042fc <HAL_UART_IRQHandler+0x628>
    return;
 80042ee:	bf00      	nop
 80042f0:	e004      	b.n	80042fc <HAL_UART_IRQHandler+0x628>
      return;
 80042f2:	bf00      	nop
 80042f4:	e002      	b.n	80042fc <HAL_UART_IRQHandler+0x628>
      return;
 80042f6:	bf00      	nop
 80042f8:	e000      	b.n	80042fc <HAL_UART_IRQHandler+0x628>
    return;
 80042fa:	bf00      	nop
  }
}
 80042fc:	37e8      	adds	r7, #232	; 0xe8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop

08004304 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004348:	b08c      	sub	sp, #48	; 0x30
 800434a:	af00      	add	r7, sp, #0
 800434c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	431a      	orrs	r2, r3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	431a      	orrs	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	4313      	orrs	r3, r2
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4bab      	ldr	r3, [pc, #684]	; (8004620 <UART_SetConfig+0x2dc>)
 8004374:	4013      	ands	r3, r2
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800437c:	430b      	orrs	r3, r1
 800437e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4aa0      	ldr	r2, [pc, #640]	; (8004624 <UART_SetConfig+0x2e0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043ac:	4313      	orrs	r3, r2
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80043ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	6812      	ldr	r2, [r2, #0]
 80043c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043c4:	430b      	orrs	r3, r1
 80043c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	f023 010f 	bic.w	r1, r3, #15
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a91      	ldr	r2, [pc, #580]	; (8004628 <UART_SetConfig+0x2e4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d125      	bne.n	8004434 <UART_SetConfig+0xf0>
 80043e8:	4b90      	ldr	r3, [pc, #576]	; (800462c <UART_SetConfig+0x2e8>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d81a      	bhi.n	800442c <UART_SetConfig+0xe8>
 80043f6:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <UART_SetConfig+0xb8>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	0800440d 	.word	0x0800440d
 8004400:	0800441d 	.word	0x0800441d
 8004404:	08004415 	.word	0x08004415
 8004408:	08004425 	.word	0x08004425
 800440c:	2301      	movs	r3, #1
 800440e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004412:	e0d6      	b.n	80045c2 <UART_SetConfig+0x27e>
 8004414:	2302      	movs	r3, #2
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800441a:	e0d2      	b.n	80045c2 <UART_SetConfig+0x27e>
 800441c:	2304      	movs	r3, #4
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004422:	e0ce      	b.n	80045c2 <UART_SetConfig+0x27e>
 8004424:	2308      	movs	r3, #8
 8004426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800442a:	e0ca      	b.n	80045c2 <UART_SetConfig+0x27e>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004432:	e0c6      	b.n	80045c2 <UART_SetConfig+0x27e>
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a7d      	ldr	r2, [pc, #500]	; (8004630 <UART_SetConfig+0x2ec>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d138      	bne.n	80044b0 <UART_SetConfig+0x16c>
 800443e:	4b7b      	ldr	r3, [pc, #492]	; (800462c <UART_SetConfig+0x2e8>)
 8004440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004444:	f003 030c 	and.w	r3, r3, #12
 8004448:	2b0c      	cmp	r3, #12
 800444a:	d82d      	bhi.n	80044a8 <UART_SetConfig+0x164>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <UART_SetConfig+0x110>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	08004489 	.word	0x08004489
 8004458:	080044a9 	.word	0x080044a9
 800445c:	080044a9 	.word	0x080044a9
 8004460:	080044a9 	.word	0x080044a9
 8004464:	08004499 	.word	0x08004499
 8004468:	080044a9 	.word	0x080044a9
 800446c:	080044a9 	.word	0x080044a9
 8004470:	080044a9 	.word	0x080044a9
 8004474:	08004491 	.word	0x08004491
 8004478:	080044a9 	.word	0x080044a9
 800447c:	080044a9 	.word	0x080044a9
 8004480:	080044a9 	.word	0x080044a9
 8004484:	080044a1 	.word	0x080044a1
 8004488:	2300      	movs	r3, #0
 800448a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800448e:	e098      	b.n	80045c2 <UART_SetConfig+0x27e>
 8004490:	2302      	movs	r3, #2
 8004492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004496:	e094      	b.n	80045c2 <UART_SetConfig+0x27e>
 8004498:	2304      	movs	r3, #4
 800449a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800449e:	e090      	b.n	80045c2 <UART_SetConfig+0x27e>
 80044a0:	2308      	movs	r3, #8
 80044a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044a6:	e08c      	b.n	80045c2 <UART_SetConfig+0x27e>
 80044a8:	2310      	movs	r3, #16
 80044aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ae:	e088      	b.n	80045c2 <UART_SetConfig+0x27e>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a5f      	ldr	r2, [pc, #380]	; (8004634 <UART_SetConfig+0x2f0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d125      	bne.n	8004506 <UART_SetConfig+0x1c2>
 80044ba:	4b5c      	ldr	r3, [pc, #368]	; (800462c <UART_SetConfig+0x2e8>)
 80044bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044c4:	2b30      	cmp	r3, #48	; 0x30
 80044c6:	d016      	beq.n	80044f6 <UART_SetConfig+0x1b2>
 80044c8:	2b30      	cmp	r3, #48	; 0x30
 80044ca:	d818      	bhi.n	80044fe <UART_SetConfig+0x1ba>
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d00a      	beq.n	80044e6 <UART_SetConfig+0x1a2>
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d814      	bhi.n	80044fe <UART_SetConfig+0x1ba>
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <UART_SetConfig+0x19a>
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d008      	beq.n	80044ee <UART_SetConfig+0x1aa>
 80044dc:	e00f      	b.n	80044fe <UART_SetConfig+0x1ba>
 80044de:	2300      	movs	r3, #0
 80044e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044e4:	e06d      	b.n	80045c2 <UART_SetConfig+0x27e>
 80044e6:	2302      	movs	r3, #2
 80044e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ec:	e069      	b.n	80045c2 <UART_SetConfig+0x27e>
 80044ee:	2304      	movs	r3, #4
 80044f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044f4:	e065      	b.n	80045c2 <UART_SetConfig+0x27e>
 80044f6:	2308      	movs	r3, #8
 80044f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044fc:	e061      	b.n	80045c2 <UART_SetConfig+0x27e>
 80044fe:	2310      	movs	r3, #16
 8004500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004504:	e05d      	b.n	80045c2 <UART_SetConfig+0x27e>
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a4b      	ldr	r2, [pc, #300]	; (8004638 <UART_SetConfig+0x2f4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d125      	bne.n	800455c <UART_SetConfig+0x218>
 8004510:	4b46      	ldr	r3, [pc, #280]	; (800462c <UART_SetConfig+0x2e8>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800451a:	2bc0      	cmp	r3, #192	; 0xc0
 800451c:	d016      	beq.n	800454c <UART_SetConfig+0x208>
 800451e:	2bc0      	cmp	r3, #192	; 0xc0
 8004520:	d818      	bhi.n	8004554 <UART_SetConfig+0x210>
 8004522:	2b80      	cmp	r3, #128	; 0x80
 8004524:	d00a      	beq.n	800453c <UART_SetConfig+0x1f8>
 8004526:	2b80      	cmp	r3, #128	; 0x80
 8004528:	d814      	bhi.n	8004554 <UART_SetConfig+0x210>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <UART_SetConfig+0x1f0>
 800452e:	2b40      	cmp	r3, #64	; 0x40
 8004530:	d008      	beq.n	8004544 <UART_SetConfig+0x200>
 8004532:	e00f      	b.n	8004554 <UART_SetConfig+0x210>
 8004534:	2300      	movs	r3, #0
 8004536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800453a:	e042      	b.n	80045c2 <UART_SetConfig+0x27e>
 800453c:	2302      	movs	r3, #2
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004542:	e03e      	b.n	80045c2 <UART_SetConfig+0x27e>
 8004544:	2304      	movs	r3, #4
 8004546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800454a:	e03a      	b.n	80045c2 <UART_SetConfig+0x27e>
 800454c:	2308      	movs	r3, #8
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004552:	e036      	b.n	80045c2 <UART_SetConfig+0x27e>
 8004554:	2310      	movs	r3, #16
 8004556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800455a:	e032      	b.n	80045c2 <UART_SetConfig+0x27e>
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a30      	ldr	r2, [pc, #192]	; (8004624 <UART_SetConfig+0x2e0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d12a      	bne.n	80045bc <UART_SetConfig+0x278>
 8004566:	4b31      	ldr	r3, [pc, #196]	; (800462c <UART_SetConfig+0x2e8>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004570:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004574:	d01a      	beq.n	80045ac <UART_SetConfig+0x268>
 8004576:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800457a:	d81b      	bhi.n	80045b4 <UART_SetConfig+0x270>
 800457c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004580:	d00c      	beq.n	800459c <UART_SetConfig+0x258>
 8004582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004586:	d815      	bhi.n	80045b4 <UART_SetConfig+0x270>
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <UART_SetConfig+0x250>
 800458c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004590:	d008      	beq.n	80045a4 <UART_SetConfig+0x260>
 8004592:	e00f      	b.n	80045b4 <UART_SetConfig+0x270>
 8004594:	2300      	movs	r3, #0
 8004596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800459a:	e012      	b.n	80045c2 <UART_SetConfig+0x27e>
 800459c:	2302      	movs	r3, #2
 800459e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045a2:	e00e      	b.n	80045c2 <UART_SetConfig+0x27e>
 80045a4:	2304      	movs	r3, #4
 80045a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045aa:	e00a      	b.n	80045c2 <UART_SetConfig+0x27e>
 80045ac:	2308      	movs	r3, #8
 80045ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045b2:	e006      	b.n	80045c2 <UART_SetConfig+0x27e>
 80045b4:	2310      	movs	r3, #16
 80045b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ba:	e002      	b.n	80045c2 <UART_SetConfig+0x27e>
 80045bc:	2310      	movs	r3, #16
 80045be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a17      	ldr	r2, [pc, #92]	; (8004624 <UART_SetConfig+0x2e0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	f040 80a8 	bne.w	800471e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d834      	bhi.n	8004640 <UART_SetConfig+0x2fc>
 80045d6:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <UART_SetConfig+0x298>)
 80045d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045dc:	08004601 	.word	0x08004601
 80045e0:	08004641 	.word	0x08004641
 80045e4:	08004609 	.word	0x08004609
 80045e8:	08004641 	.word	0x08004641
 80045ec:	0800460f 	.word	0x0800460f
 80045f0:	08004641 	.word	0x08004641
 80045f4:	08004641 	.word	0x08004641
 80045f8:	08004641 	.word	0x08004641
 80045fc:	08004617 	.word	0x08004617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004600:	f7fd fecc 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8004604:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004606:	e021      	b.n	800464c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <UART_SetConfig+0x2f8>)
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800460c:	e01e      	b.n	800464c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460e:	f7fd fe57 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 8004612:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004614:	e01a      	b.n	800464c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800461c:	e016      	b.n	800464c <UART_SetConfig+0x308>
 800461e:	bf00      	nop
 8004620:	cfff69f3 	.word	0xcfff69f3
 8004624:	40008000 	.word	0x40008000
 8004628:	40013800 	.word	0x40013800
 800462c:	40021000 	.word	0x40021000
 8004630:	40004400 	.word	0x40004400
 8004634:	40004800 	.word	0x40004800
 8004638:	40004c00 	.word	0x40004c00
 800463c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800464a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 812a 	beq.w	80048a8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	4a9e      	ldr	r2, [pc, #632]	; (80048d4 <UART_SetConfig+0x590>)
 800465a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800465e:	461a      	mov	r2, r3
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	fbb3 f3f2 	udiv	r3, r3, r2
 8004666:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4413      	add	r3, r2
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	429a      	cmp	r2, r3
 8004676:	d305      	bcc.n	8004684 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	429a      	cmp	r2, r3
 8004682:	d903      	bls.n	800468c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800468a:	e10d      	b.n	80048a8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	2200      	movs	r2, #0
 8004690:	60bb      	str	r3, [r7, #8]
 8004692:	60fa      	str	r2, [r7, #12]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	4a8e      	ldr	r2, [pc, #568]	; (80048d4 <UART_SetConfig+0x590>)
 800469a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2200      	movs	r2, #0
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	607a      	str	r2, [r7, #4]
 80046a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046ae:	f7fb fe17 	bl	80002e0 <__aeabi_uldivmod>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4610      	mov	r0, r2
 80046b8:	4619      	mov	r1, r3
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	020b      	lsls	r3, r1, #8
 80046c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046c8:	0202      	lsls	r2, r0, #8
 80046ca:	6979      	ldr	r1, [r7, #20]
 80046cc:	6849      	ldr	r1, [r1, #4]
 80046ce:	0849      	lsrs	r1, r1, #1
 80046d0:	2000      	movs	r0, #0
 80046d2:	460c      	mov	r4, r1
 80046d4:	4605      	mov	r5, r0
 80046d6:	eb12 0804 	adds.w	r8, r2, r4
 80046da:	eb43 0905 	adc.w	r9, r3, r5
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	469a      	mov	sl, r3
 80046e6:	4693      	mov	fp, r2
 80046e8:	4652      	mov	r2, sl
 80046ea:	465b      	mov	r3, fp
 80046ec:	4640      	mov	r0, r8
 80046ee:	4649      	mov	r1, r9
 80046f0:	f7fb fdf6 	bl	80002e0 <__aeabi_uldivmod>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4613      	mov	r3, r2
 80046fa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004702:	d308      	bcc.n	8004716 <UART_SetConfig+0x3d2>
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800470a:	d204      	bcs.n	8004716 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6a3a      	ldr	r2, [r7, #32]
 8004712:	60da      	str	r2, [r3, #12]
 8004714:	e0c8      	b.n	80048a8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800471c:	e0c4      	b.n	80048a8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004726:	d167      	bne.n	80047f8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004728:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800472c:	2b08      	cmp	r3, #8
 800472e:	d828      	bhi.n	8004782 <UART_SetConfig+0x43e>
 8004730:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <UART_SetConfig+0x3f4>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	0800475d 	.word	0x0800475d
 800473c:	08004765 	.word	0x08004765
 8004740:	0800476d 	.word	0x0800476d
 8004744:	08004783 	.word	0x08004783
 8004748:	08004773 	.word	0x08004773
 800474c:	08004783 	.word	0x08004783
 8004750:	08004783 	.word	0x08004783
 8004754:	08004783 	.word	0x08004783
 8004758:	0800477b 	.word	0x0800477b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800475c:	f7fd fe1e 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8004760:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004762:	e014      	b.n	800478e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004764:	f7fd fe30 	bl	80023c8 <HAL_RCC_GetPCLK2Freq>
 8004768:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800476a:	e010      	b.n	800478e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800476c:	4b5a      	ldr	r3, [pc, #360]	; (80048d8 <UART_SetConfig+0x594>)
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004770:	e00d      	b.n	800478e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004772:	f7fd fda5 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 8004776:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004778:	e009      	b.n	800478e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800477a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004780:	e005      	b.n	800478e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800478c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8089 	beq.w	80048a8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	4a4e      	ldr	r2, [pc, #312]	; (80048d4 <UART_SetConfig+0x590>)
 800479c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047a0:	461a      	mov	r2, r3
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80047a8:	005a      	lsls	r2, r3, #1
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	085b      	lsrs	r3, r3, #1
 80047b0:	441a      	add	r2, r3
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	2b0f      	cmp	r3, #15
 80047c0:	d916      	bls.n	80047f0 <UART_SetConfig+0x4ac>
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c8:	d212      	bcs.n	80047f0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f023 030f 	bic.w	r3, r3, #15
 80047d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	085b      	lsrs	r3, r3, #1
 80047d8:	b29b      	uxth	r3, r3
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	b29a      	uxth	r2, r3
 80047e0:	8bfb      	ldrh	r3, [r7, #30]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	8bfa      	ldrh	r2, [r7, #30]
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	e05b      	b.n	80048a8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047f6:	e057      	b.n	80048a8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d828      	bhi.n	8004852 <UART_SetConfig+0x50e>
 8004800:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <UART_SetConfig+0x4c4>)
 8004802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004806:	bf00      	nop
 8004808:	0800482d 	.word	0x0800482d
 800480c:	08004835 	.word	0x08004835
 8004810:	0800483d 	.word	0x0800483d
 8004814:	08004853 	.word	0x08004853
 8004818:	08004843 	.word	0x08004843
 800481c:	08004853 	.word	0x08004853
 8004820:	08004853 	.word	0x08004853
 8004824:	08004853 	.word	0x08004853
 8004828:	0800484b 	.word	0x0800484b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800482c:	f7fd fdb6 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8004830:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004832:	e014      	b.n	800485e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004834:	f7fd fdc8 	bl	80023c8 <HAL_RCC_GetPCLK2Freq>
 8004838:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800483a:	e010      	b.n	800485e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800483c:	4b26      	ldr	r3, [pc, #152]	; (80048d8 <UART_SetConfig+0x594>)
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004840:	e00d      	b.n	800485e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004842:	f7fd fd3d 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 8004846:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004848:	e009      	b.n	800485e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004850:	e005      	b.n	800485e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800485c:	bf00      	nop
    }

    if (pclk != 0U)
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	2b00      	cmp	r3, #0
 8004862:	d021      	beq.n	80048a8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	4a1a      	ldr	r2, [pc, #104]	; (80048d4 <UART_SetConfig+0x590>)
 800486a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800486e:	461a      	mov	r2, r3
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	fbb3 f2f2 	udiv	r2, r3, r2
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	085b      	lsrs	r3, r3, #1
 800487c:	441a      	add	r2, r3
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	fbb2 f3f3 	udiv	r3, r2, r3
 8004886:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	2b0f      	cmp	r3, #15
 800488c:	d909      	bls.n	80048a2 <UART_SetConfig+0x55e>
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004894:	d205      	bcs.n	80048a2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	b29a      	uxth	r2, r3
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60da      	str	r2, [r3, #12]
 80048a0:	e002      	b.n	80048a8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2200      	movs	r2, #0
 80048bc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2200      	movs	r2, #0
 80048c2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80048c4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3730      	adds	r7, #48	; 0x30
 80048cc:	46bd      	mov	sp, r7
 80048ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d2:	bf00      	nop
 80048d4:	080071c8 	.word	0x080071c8
 80048d8:	00f42400 	.word	0x00f42400

080048dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01a      	beq.n	80049f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049da:	d10a      	bne.n	80049f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a30:	f7fc fbe6 	bl	8001200 <HAL_GetTick>
 8004a34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d10e      	bne.n	8004a62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f82f 	bl	8004ab6 <UART_WaitOnFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e025      	b.n	8004aae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d10e      	bne.n	8004a8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f819 	bl	8004ab6 <UART_WaitOnFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e00f      	b.n	8004aae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b09c      	sub	sp, #112	; 0x70
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac6:	e0a9      	b.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ace:	f000 80a5 	beq.w	8004c1c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad2:	f7fc fb95 	bl	8001200 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d302      	bcc.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d140      	bne.n	8004b6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004afc:	667b      	str	r3, [r7, #100]	; 0x64
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e6      	bne.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3308      	adds	r3, #8
 8004b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	663b      	str	r3, [r7, #96]	; 0x60
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3308      	adds	r3, #8
 8004b38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e5      	bne.n	8004b1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e069      	b.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d051      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b86:	d149      	bne.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e6      	bne.n	8004b92 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3308      	adds	r3, #8
 8004bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3308      	adds	r3, #8
 8004be2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004be4:	623a      	str	r2, [r7, #32]
 8004be6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	69f9      	ldr	r1, [r7, #28]
 8004bea:	6a3a      	ldr	r2, [r7, #32]
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e010      	b.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69da      	ldr	r2, [r3, #28]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	4013      	ands	r3, r2
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	f43f af46 	beq.w	8004ac8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3770      	adds	r7, #112	; 0x70
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
	...

08004c48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b0a3      	sub	sp, #140	; 0x8c
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	4613      	mov	r3, r2
 8004c54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	88fa      	ldrh	r2, [r7, #6]
 8004c60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7a:	d10e      	bne.n	8004c9a <UART_Start_Receive_IT+0x52>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <UART_Start_Receive_IT+0x48>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c8e:	e02d      	b.n	8004cec <UART_Start_Receive_IT+0xa4>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	22ff      	movs	r2, #255	; 0xff
 8004c94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c98:	e028      	b.n	8004cec <UART_Start_Receive_IT+0xa4>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10d      	bne.n	8004cbe <UART_Start_Receive_IT+0x76>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d104      	bne.n	8004cb4 <UART_Start_Receive_IT+0x6c>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	22ff      	movs	r2, #255	; 0xff
 8004cae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cb2:	e01b      	b.n	8004cec <UART_Start_Receive_IT+0xa4>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	227f      	movs	r2, #127	; 0x7f
 8004cb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cbc:	e016      	b.n	8004cec <UART_Start_Receive_IT+0xa4>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cc6:	d10d      	bne.n	8004ce4 <UART_Start_Receive_IT+0x9c>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d104      	bne.n	8004cda <UART_Start_Receive_IT+0x92>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	227f      	movs	r2, #127	; 0x7f
 8004cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cd8:	e008      	b.n	8004cec <UART_Start_Receive_IT+0xa4>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	223f      	movs	r2, #63	; 0x3f
 8004cde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ce2:	e003      	b.n	8004cec <UART_Start_Receive_IT+0xa4>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2222      	movs	r2, #34	; 0x22
 8004cf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3308      	adds	r3, #8
 8004d02:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004d20:	673a      	str	r2, [r7, #112]	; 0x70
 8004d22:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004d26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e3      	bne.n	8004cfc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d3c:	d153      	bne.n	8004de6 <UART_Start_Receive_IT+0x19e>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004d44:	88fa      	ldrh	r2, [r7, #6]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d34d      	bcc.n	8004de6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d52:	d107      	bne.n	8004d64 <UART_Start_Receive_IT+0x11c>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a4b      	ldr	r2, [pc, #300]	; (8004e8c <UART_Start_Receive_IT+0x244>)
 8004d60:	671a      	str	r2, [r3, #112]	; 0x70
 8004d62:	e002      	b.n	8004d6a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4a4a      	ldr	r2, [pc, #296]	; (8004e90 <UART_Start_Receive_IT+0x248>)
 8004d68:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d01a      	beq.n	8004db0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d9e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004da2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e4      	bne.n	8004d7a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3308      	adds	r3, #8
 8004db6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3308      	adds	r3, #8
 8004dce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004dd0:	64ba      	str	r2, [r7, #72]	; 0x48
 8004dd2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e5      	bne.n	8004db0 <UART_Start_Receive_IT+0x168>
 8004de4:	e04a      	b.n	8004e7c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	d107      	bne.n	8004e00 <UART_Start_Receive_IT+0x1b8>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d103      	bne.n	8004e00 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4a26      	ldr	r2, [pc, #152]	; (8004e94 <UART_Start_Receive_IT+0x24c>)
 8004dfc:	671a      	str	r2, [r3, #112]	; 0x70
 8004dfe:	e002      	b.n	8004e06 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4a25      	ldr	r2, [pc, #148]	; (8004e98 <UART_Start_Receive_IT+0x250>)
 8004e04:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d019      	beq.n	8004e4a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004e2a:	677b      	str	r3, [r7, #116]	; 0x74
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e34:	637b      	str	r3, [r7, #52]	; 0x34
 8004e36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e6      	bne.n	8004e16 <UART_Start_Receive_IT+0x1ce>
 8004e48:	e018      	b.n	8004e7c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	613b      	str	r3, [r7, #16]
   return(result);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f043 0320 	orr.w	r3, r3, #32
 8004e5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e68:	623b      	str	r3, [r7, #32]
 8004e6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	69f9      	ldr	r1, [r7, #28]
 8004e6e:	6a3a      	ldr	r2, [r7, #32]
 8004e70:	e841 2300 	strex	r3, r2, [r1]
 8004e74:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e6      	bne.n	8004e4a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	378c      	adds	r7, #140	; 0x8c
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	080055a5 	.word	0x080055a5
 8004e90:	080052ad 	.word	0x080052ad
 8004e94:	0800514b 	.word	0x0800514b
 8004e98:	08004feb 	.word	0x08004feb

08004e9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b095      	sub	sp, #84	; 0x54
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ec4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e6      	bne.n	8004ea4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3308      	adds	r3, #8
 8004edc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004efa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e3      	bne.n	8004ed6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d118      	bne.n	8004f48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f023 0310 	bic.w	r3, r3, #16
 8004f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6979      	ldr	r1, [r7, #20]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	613b      	str	r3, [r7, #16]
   return(result);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e6      	bne.n	8004f16 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004f5c:	bf00      	nop
 8004f5e:	3754      	adds	r7, #84	; 0x54
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7ff f9c6 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f8c:	bf00      	nop
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	61bb      	str	r3, [r7, #24]
 8004fbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	6979      	ldr	r1, [r7, #20]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e6      	bne.n	8004f9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff f991 	bl	8004304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fe2:	bf00      	nop
 8004fe4:	3720      	adds	r7, #32
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b096      	sub	sp, #88	; 0x58
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004ff8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	2b22      	cmp	r3, #34	; 0x22
 8005004:	f040 8095 	bne.w	8005132 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005012:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005016:	b2d9      	uxtb	r1, r3
 8005018:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800501c:	b2da      	uxtb	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005022:	400a      	ands	r2, r1
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d178      	bne.n	8005142 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800505e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005060:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005064:	653b      	str	r3, [r7, #80]	; 0x50
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800506e:	647b      	str	r3, [r7, #68]	; 0x44
 8005070:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005074:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800507c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e6      	bne.n	8005050 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	623b      	str	r3, [r7, #32]
   return(result);
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	64fb      	str	r3, [r7, #76]	; 0x4c
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3308      	adds	r3, #8
 80050a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050a2:	633a      	str	r2, [r7, #48]	; 0x30
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e5      	bne.n	8005082 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d12e      	bne.n	800512a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	60fb      	str	r3, [r7, #12]
   return(result);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0310 	bic.w	r3, r3, #16
 80050e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	69b9      	ldr	r1, [r7, #24]
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	617b      	str	r3, [r7, #20]
   return(result);
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e6      	bne.n	80050d2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	2b10      	cmp	r3, #16
 8005110:	d103      	bne.n	800511a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2210      	movs	r2, #16
 8005118:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff f902 	bl	800432c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005128:	e00b      	b.n	8005142 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fb fd82 	bl	8000c34 <HAL_UART_RxCpltCallback>
}
 8005130:	e007      	b.n	8005142 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699a      	ldr	r2, [r3, #24]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0208 	orr.w	r2, r2, #8
 8005140:	619a      	str	r2, [r3, #24]
}
 8005142:	bf00      	nop
 8005144:	3758      	adds	r7, #88	; 0x58
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b096      	sub	sp, #88	; 0x58
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005158:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005162:	2b22      	cmp	r3, #34	; 0x22
 8005164:	f040 8095 	bne.w	8005292 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005176:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005178:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800517c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005180:	4013      	ands	r3, r2
 8005182:	b29a      	uxth	r2, r3
 8005184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005186:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518c:	1c9a      	adds	r2, r3, #2
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d178      	bne.n	80052a2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ce:	643b      	str	r3, [r7, #64]	; 0x40
 80051d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e6      	bne.n	80051b0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3308      	adds	r3, #8
 80051e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f023 0301 	bic.w	r3, r3, #1
 80051f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3308      	adds	r3, #8
 8005200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005202:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005204:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e5      	bne.n	80051e2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005228:	2b01      	cmp	r3, #1
 800522a:	d12e      	bne.n	800528a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f023 0310 	bic.w	r3, r3, #16
 8005246:	647b      	str	r3, [r7, #68]	; 0x44
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	6979      	ldr	r1, [r7, #20]
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	613b      	str	r3, [r7, #16]
   return(result);
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e6      	bne.n	8005232 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	f003 0310 	and.w	r3, r3, #16
 800526e:	2b10      	cmp	r3, #16
 8005270:	d103      	bne.n	800527a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2210      	movs	r2, #16
 8005278:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005280:	4619      	mov	r1, r3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff f852 	bl	800432c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005288:	e00b      	b.n	80052a2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fb fcd2 	bl	8000c34 <HAL_UART_RxCpltCallback>
}
 8005290:	e007      	b.n	80052a2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699a      	ldr	r2, [r3, #24]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0208 	orr.w	r2, r2, #8
 80052a0:	619a      	str	r2, [r3, #24]
}
 80052a2:	bf00      	nop
 80052a4:	3758      	adds	r7, #88	; 0x58
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b0a6      	sub	sp, #152	; 0x98
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80052ba:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e2:	2b22      	cmp	r3, #34	; 0x22
 80052e4:	f040 814f 	bne.w	8005586 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80052ee:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80052f2:	e0f6      	b.n	80054e2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052fe:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005302:	b2d9      	uxtb	r1, r3
 8005304:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005308:	b2da      	uxtb	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530e:	400a      	ands	r2, r1
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800533a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	2b00      	cmp	r3, #0
 8005344:	d053      	beq.n	80053ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005346:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d011      	beq.n	8005376 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00b      	beq.n	8005376 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2201      	movs	r2, #1
 8005364:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800536c:	f043 0201 	orr.w	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005376:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d011      	beq.n	80053a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005382:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2202      	movs	r2, #2
 8005394:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800539c:	f043 0204 	orr.w	r2, r3, #4
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d011      	beq.n	80053d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80053b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00b      	beq.n	80053d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2204      	movs	r2, #4
 80053c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053cc:	f043 0202 	orr.w	r2, r3, #2
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d006      	beq.n	80053ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7fe ff99 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d173      	bne.n	80054e2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800540a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800540e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800541c:	66bb      	str	r3, [r7, #104]	; 0x68
 800541e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005422:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800542a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e4      	bne.n	80053fa <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3308      	adds	r3, #8
 8005452:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005454:	657a      	str	r2, [r7, #84]	; 0x54
 8005456:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800545a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e3      	bne.n	8005430 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800547a:	2b01      	cmp	r3, #1
 800547c:	d12e      	bne.n	80054dc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	f023 0310 	bic.w	r3, r3, #16
 8005498:	67bb      	str	r3, [r7, #120]	; 0x78
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054a2:	643b      	str	r3, [r7, #64]	; 0x40
 80054a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054aa:	e841 2300 	strex	r3, r2, [r1]
 80054ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1e6      	bne.n	8005484 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d103      	bne.n	80054cc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2210      	movs	r2, #16
 80054ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7fe ff29 	bl	800432c <HAL_UARTEx_RxEventCallback>
 80054da:	e002      	b.n	80054e2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7fb fba9 	bl	8000c34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80054e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d006      	beq.n	80054f8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80054ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f47f aefe 	bne.w	80052f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005502:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005506:	2b00      	cmp	r3, #0
 8005508:	d045      	beq.n	8005596 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005510:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005514:	429a      	cmp	r2, r3
 8005516:	d23e      	bcs.n	8005596 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3308      	adds	r3, #8
 800551e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	e853 3f00 	ldrex	r3, [r3]
 8005526:	61fb      	str	r3, [r7, #28]
   return(result);
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800552e:	673b      	str	r3, [r7, #112]	; 0x70
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3308      	adds	r3, #8
 8005536:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005538:	62fa      	str	r2, [r7, #44]	; 0x2c
 800553a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800553e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005540:	e841 2300 	strex	r3, r2, [r1]
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e5      	bne.n	8005518 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a14      	ldr	r2, [pc, #80]	; (80055a0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005550:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f043 0320 	orr.w	r3, r3, #32
 8005566:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	6979      	ldr	r1, [r7, #20]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	613b      	str	r3, [r7, #16]
   return(result);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e6      	bne.n	8005552 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005584:	e007      	b.n	8005596 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699a      	ldr	r2, [r3, #24]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0208 	orr.w	r2, r2, #8
 8005594:	619a      	str	r2, [r3, #24]
}
 8005596:	bf00      	nop
 8005598:	3798      	adds	r7, #152	; 0x98
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	08004feb 	.word	0x08004feb

080055a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b0a8      	sub	sp, #160	; 0xa0
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80055b2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055da:	2b22      	cmp	r3, #34	; 0x22
 80055dc:	f040 8153 	bne.w	8005886 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80055e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80055ea:	e0fa      	b.n	80057e2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80055fe:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005602:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005606:	4013      	ands	r3, r2
 8005608:	b29a      	uxth	r2, r3
 800560a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800560e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005614:	1c9a      	adds	r2, r3, #2
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005636:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	2b00      	cmp	r3, #0
 8005640:	d053      	beq.n	80056ea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005642:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d011      	beq.n	8005672 <UART_RxISR_16BIT_FIFOEN+0xce>
 800564e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00b      	beq.n	8005672 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2201      	movs	r2, #1
 8005660:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005668:	f043 0201 	orr.w	r2, r3, #1
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005672:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d011      	beq.n	80056a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800567e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00b      	beq.n	80056a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2202      	movs	r2, #2
 8005690:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005698:	f043 0204 	orr.w	r2, r3, #4
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d011      	beq.n	80056d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80056ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00b      	beq.n	80056d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2204      	movs	r2, #4
 80056c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056c8:	f043 0202 	orr.w	r2, r3, #2
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d006      	beq.n	80056ea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7fe fe1b 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d175      	bne.n	80057e2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800570a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005718:	66fb      	str	r3, [r7, #108]	; 0x6c
 800571a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800571e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005726:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e4      	bne.n	80056f6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3308      	adds	r3, #8
 8005732:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800573c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800573e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005742:	f023 0301 	bic.w	r3, r3, #1
 8005746:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005754:	65ba      	str	r2, [r7, #88]	; 0x58
 8005756:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800575a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800575c:	e841 2300 	strex	r3, r2, [r1]
 8005760:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1e1      	bne.n	800572c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2220      	movs	r2, #32
 800576c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d12e      	bne.n	80057dc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005794:	f023 0310 	bic.w	r3, r3, #16
 8005798:	67fb      	str	r3, [r7, #124]	; 0x7c
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057a2:	647b      	str	r3, [r7, #68]	; 0x44
 80057a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e6      	bne.n	8005784 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b10      	cmp	r3, #16
 80057c2:	d103      	bne.n	80057cc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2210      	movs	r2, #16
 80057ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7fe fda9 	bl	800432c <HAL_UARTEx_RxEventCallback>
 80057da:	e002      	b.n	80057e2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7fb fa29 	bl	8000c34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057e2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d006      	beq.n	80057f8 <UART_RxISR_16BIT_FIFOEN+0x254>
 80057ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f47f aefa 	bne.w	80055ec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057fe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005802:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005806:	2b00      	cmp	r3, #0
 8005808:	d045      	beq.n	8005896 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005810:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005814:	429a      	cmp	r2, r3
 8005816:	d23e      	bcs.n	8005896 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3308      	adds	r3, #8
 800581e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	623b      	str	r3, [r7, #32]
   return(result);
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800582e:	677b      	str	r3, [r7, #116]	; 0x74
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3308      	adds	r3, #8
 8005836:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005838:	633a      	str	r2, [r7, #48]	; 0x30
 800583a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800583e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e5      	bne.n	8005818 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a14      	ldr	r2, [pc, #80]	; (80058a0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8005850:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f043 0320 	orr.w	r3, r3, #32
 8005866:	673b      	str	r3, [r7, #112]	; 0x70
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	69b9      	ldr	r1, [r7, #24]
 8005876:	69fa      	ldr	r2, [r7, #28]
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	617b      	str	r3, [r7, #20]
   return(result);
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e6      	bne.n	8005852 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005884:	e007      	b.n	8005896 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0208 	orr.w	r2, r2, #8
 8005894:	619a      	str	r2, [r3, #24]
}
 8005896:	bf00      	nop
 8005898:	37a0      	adds	r7, #160	; 0xa0
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	0800514b 	.word	0x0800514b

080058a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80058f2:	2302      	movs	r3, #2
 80058f4:	e027      	b.n	8005946 <HAL_UARTEx_DisableFifoMode+0x66>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2224      	movs	r2, #36	; 0x24
 8005902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0201 	bic.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005924:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b084      	sub	sp, #16
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005966:	2302      	movs	r3, #2
 8005968:	e02d      	b.n	80059c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2224      	movs	r2, #36	; 0x24
 8005976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0201 	bic.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f850 	bl	8005a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059e2:	2302      	movs	r3, #2
 80059e4:	e02d      	b.n	8005a42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2224      	movs	r2, #36	; 0x24
 80059f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0201 	bic.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f812 	bl	8005a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d108      	bne.n	8005a6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a6c:	e031      	b.n	8005ad2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a6e:	2308      	movs	r3, #8
 8005a70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a72:	2308      	movs	r3, #8
 8005a74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	0e5b      	lsrs	r3, r3, #25
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	0f5b      	lsrs	r3, r3, #29
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a96:	7bbb      	ldrb	r3, [r7, #14]
 8005a98:	7b3a      	ldrb	r2, [r7, #12]
 8005a9a:	4911      	ldr	r1, [pc, #68]	; (8005ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8005a9c:	5c8a      	ldrb	r2, [r1, r2]
 8005a9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005aa2:	7b3a      	ldrb	r2, [r7, #12]
 8005aa4:	490f      	ldr	r1, [pc, #60]	; (8005ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8005aa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	7b7a      	ldrb	r2, [r7, #13]
 8005ab8:	4909      	ldr	r1, [pc, #36]	; (8005ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8005aba:	5c8a      	ldrb	r2, [r1, r2]
 8005abc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ac0:	7b7a      	ldrb	r2, [r7, #13]
 8005ac2:	4908      	ldr	r1, [pc, #32]	; (8005ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8005ac4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ad2:	bf00      	nop
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	080071e0 	.word	0x080071e0
 8005ae4:	080071e8 	.word	0x080071e8

08005ae8 <atoi>:
 8005ae8:	220a      	movs	r2, #10
 8005aea:	2100      	movs	r1, #0
 8005aec:	f000 b930 	b.w	8005d50 <strtol>

08005af0 <__errno>:
 8005af0:	4b01      	ldr	r3, [pc, #4]	; (8005af8 <__errno+0x8>)
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	200000a4 	.word	0x200000a4

08005afc <__libc_init_array>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	4d0d      	ldr	r5, [pc, #52]	; (8005b34 <__libc_init_array+0x38>)
 8005b00:	4c0d      	ldr	r4, [pc, #52]	; (8005b38 <__libc_init_array+0x3c>)
 8005b02:	1b64      	subs	r4, r4, r5
 8005b04:	10a4      	asrs	r4, r4, #2
 8005b06:	2600      	movs	r6, #0
 8005b08:	42a6      	cmp	r6, r4
 8005b0a:	d109      	bne.n	8005b20 <__libc_init_array+0x24>
 8005b0c:	4d0b      	ldr	r5, [pc, #44]	; (8005b3c <__libc_init_array+0x40>)
 8005b0e:	4c0c      	ldr	r4, [pc, #48]	; (8005b40 <__libc_init_array+0x44>)
 8005b10:	f001 fade 	bl	80070d0 <_init>
 8005b14:	1b64      	subs	r4, r4, r5
 8005b16:	10a4      	asrs	r4, r4, #2
 8005b18:	2600      	movs	r6, #0
 8005b1a:	42a6      	cmp	r6, r4
 8005b1c:	d105      	bne.n	8005b2a <__libc_init_array+0x2e>
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b24:	4798      	blx	r3
 8005b26:	3601      	adds	r6, #1
 8005b28:	e7ee      	b.n	8005b08 <__libc_init_array+0xc>
 8005b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2e:	4798      	blx	r3
 8005b30:	3601      	adds	r6, #1
 8005b32:	e7f2      	b.n	8005b1a <__libc_init_array+0x1e>
 8005b34:	08007440 	.word	0x08007440
 8005b38:	08007440 	.word	0x08007440
 8005b3c:	08007440 	.word	0x08007440
 8005b40:	08007444 	.word	0x08007444

08005b44 <memset>:
 8005b44:	4402      	add	r2, r0
 8005b46:	4603      	mov	r3, r0
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d100      	bne.n	8005b4e <memset+0xa>
 8005b4c:	4770      	bx	lr
 8005b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b52:	e7f9      	b.n	8005b48 <memset+0x4>

08005b54 <siprintf>:
 8005b54:	b40e      	push	{r1, r2, r3}
 8005b56:	b500      	push	{lr}
 8005b58:	b09c      	sub	sp, #112	; 0x70
 8005b5a:	ab1d      	add	r3, sp, #116	; 0x74
 8005b5c:	9002      	str	r0, [sp, #8]
 8005b5e:	9006      	str	r0, [sp, #24]
 8005b60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b64:	4809      	ldr	r0, [pc, #36]	; (8005b8c <siprintf+0x38>)
 8005b66:	9107      	str	r1, [sp, #28]
 8005b68:	9104      	str	r1, [sp, #16]
 8005b6a:	4909      	ldr	r1, [pc, #36]	; (8005b90 <siprintf+0x3c>)
 8005b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b70:	9105      	str	r1, [sp, #20]
 8005b72:	6800      	ldr	r0, [r0, #0]
 8005b74:	9301      	str	r3, [sp, #4]
 8005b76:	a902      	add	r1, sp, #8
 8005b78:	f000 fa68 	bl	800604c <_svfiprintf_r>
 8005b7c:	9b02      	ldr	r3, [sp, #8]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	b01c      	add	sp, #112	; 0x70
 8005b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b88:	b003      	add	sp, #12
 8005b8a:	4770      	bx	lr
 8005b8c:	200000a4 	.word	0x200000a4
 8005b90:	ffff0208 	.word	0xffff0208

08005b94 <strtok>:
 8005b94:	4b16      	ldr	r3, [pc, #88]	; (8005bf0 <strtok+0x5c>)
 8005b96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b98:	681e      	ldr	r6, [r3, #0]
 8005b9a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	b9fc      	cbnz	r4, 8005be0 <strtok+0x4c>
 8005ba0:	2050      	movs	r0, #80	; 0x50
 8005ba2:	9101      	str	r1, [sp, #4]
 8005ba4:	f000 f90e 	bl	8005dc4 <malloc>
 8005ba8:	9901      	ldr	r1, [sp, #4]
 8005baa:	65b0      	str	r0, [r6, #88]	; 0x58
 8005bac:	4602      	mov	r2, r0
 8005bae:	b920      	cbnz	r0, 8005bba <strtok+0x26>
 8005bb0:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <strtok+0x60>)
 8005bb2:	4811      	ldr	r0, [pc, #68]	; (8005bf8 <strtok+0x64>)
 8005bb4:	2157      	movs	r1, #87	; 0x57
 8005bb6:	f000 f8d5 	bl	8005d64 <__assert_func>
 8005bba:	e9c0 4400 	strd	r4, r4, [r0]
 8005bbe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005bc2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005bc6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005bca:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005bce:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005bd2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005bd6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005bda:	6184      	str	r4, [r0, #24]
 8005bdc:	7704      	strb	r4, [r0, #28]
 8005bde:	6244      	str	r4, [r0, #36]	; 0x24
 8005be0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005be2:	2301      	movs	r3, #1
 8005be4:	4628      	mov	r0, r5
 8005be6:	b002      	add	sp, #8
 8005be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005bec:	f000 b806 	b.w	8005bfc <__strtok_r>
 8005bf0:	200000a4 	.word	0x200000a4
 8005bf4:	080071f4 	.word	0x080071f4
 8005bf8:	0800720b 	.word	0x0800720b

08005bfc <__strtok_r>:
 8005bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bfe:	b908      	cbnz	r0, 8005c04 <__strtok_r+0x8>
 8005c00:	6810      	ldr	r0, [r2, #0]
 8005c02:	b188      	cbz	r0, 8005c28 <__strtok_r+0x2c>
 8005c04:	4604      	mov	r4, r0
 8005c06:	4620      	mov	r0, r4
 8005c08:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005c0c:	460f      	mov	r7, r1
 8005c0e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005c12:	b91e      	cbnz	r6, 8005c1c <__strtok_r+0x20>
 8005c14:	b965      	cbnz	r5, 8005c30 <__strtok_r+0x34>
 8005c16:	6015      	str	r5, [r2, #0]
 8005c18:	4628      	mov	r0, r5
 8005c1a:	e005      	b.n	8005c28 <__strtok_r+0x2c>
 8005c1c:	42b5      	cmp	r5, r6
 8005c1e:	d1f6      	bne.n	8005c0e <__strtok_r+0x12>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1f0      	bne.n	8005c06 <__strtok_r+0xa>
 8005c24:	6014      	str	r4, [r2, #0]
 8005c26:	7003      	strb	r3, [r0, #0]
 8005c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c2a:	461c      	mov	r4, r3
 8005c2c:	e00c      	b.n	8005c48 <__strtok_r+0x4c>
 8005c2e:	b915      	cbnz	r5, 8005c36 <__strtok_r+0x3a>
 8005c30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c34:	460e      	mov	r6, r1
 8005c36:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005c3a:	42ab      	cmp	r3, r5
 8005c3c:	d1f7      	bne.n	8005c2e <__strtok_r+0x32>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f3      	beq.n	8005c2a <__strtok_r+0x2e>
 8005c42:	2300      	movs	r3, #0
 8005c44:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005c48:	6014      	str	r4, [r2, #0]
 8005c4a:	e7ed      	b.n	8005c28 <__strtok_r+0x2c>

08005c4c <_strtol_l.constprop.0>:
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c52:	d001      	beq.n	8005c58 <_strtol_l.constprop.0+0xc>
 8005c54:	2b24      	cmp	r3, #36	; 0x24
 8005c56:	d906      	bls.n	8005c66 <_strtol_l.constprop.0+0x1a>
 8005c58:	f7ff ff4a 	bl	8005af0 <__errno>
 8005c5c:	2316      	movs	r3, #22
 8005c5e:	6003      	str	r3, [r0, #0]
 8005c60:	2000      	movs	r0, #0
 8005c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005d4c <_strtol_l.constprop.0+0x100>
 8005c6a:	460d      	mov	r5, r1
 8005c6c:	462e      	mov	r6, r5
 8005c6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c72:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005c76:	f017 0708 	ands.w	r7, r7, #8
 8005c7a:	d1f7      	bne.n	8005c6c <_strtol_l.constprop.0+0x20>
 8005c7c:	2c2d      	cmp	r4, #45	; 0x2d
 8005c7e:	d132      	bne.n	8005ce6 <_strtol_l.constprop.0+0x9a>
 8005c80:	782c      	ldrb	r4, [r5, #0]
 8005c82:	2701      	movs	r7, #1
 8005c84:	1cb5      	adds	r5, r6, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d05b      	beq.n	8005d42 <_strtol_l.constprop.0+0xf6>
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d109      	bne.n	8005ca2 <_strtol_l.constprop.0+0x56>
 8005c8e:	2c30      	cmp	r4, #48	; 0x30
 8005c90:	d107      	bne.n	8005ca2 <_strtol_l.constprop.0+0x56>
 8005c92:	782c      	ldrb	r4, [r5, #0]
 8005c94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005c98:	2c58      	cmp	r4, #88	; 0x58
 8005c9a:	d14d      	bne.n	8005d38 <_strtol_l.constprop.0+0xec>
 8005c9c:	786c      	ldrb	r4, [r5, #1]
 8005c9e:	2310      	movs	r3, #16
 8005ca0:	3502      	adds	r5, #2
 8005ca2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005ca6:	f108 38ff 	add.w	r8, r8, #4294967295
 8005caa:	f04f 0c00 	mov.w	ip, #0
 8005cae:	fbb8 f9f3 	udiv	r9, r8, r3
 8005cb2:	4666      	mov	r6, ip
 8005cb4:	fb03 8a19 	mls	sl, r3, r9, r8
 8005cb8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005cbc:	f1be 0f09 	cmp.w	lr, #9
 8005cc0:	d816      	bhi.n	8005cf0 <_strtol_l.constprop.0+0xa4>
 8005cc2:	4674      	mov	r4, lr
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	dd24      	ble.n	8005d12 <_strtol_l.constprop.0+0xc6>
 8005cc8:	f1bc 0f00 	cmp.w	ip, #0
 8005ccc:	db1e      	blt.n	8005d0c <_strtol_l.constprop.0+0xc0>
 8005cce:	45b1      	cmp	r9, r6
 8005cd0:	d31c      	bcc.n	8005d0c <_strtol_l.constprop.0+0xc0>
 8005cd2:	d101      	bne.n	8005cd8 <_strtol_l.constprop.0+0x8c>
 8005cd4:	45a2      	cmp	sl, r4
 8005cd6:	db19      	blt.n	8005d0c <_strtol_l.constprop.0+0xc0>
 8005cd8:	fb06 4603 	mla	r6, r6, r3, r4
 8005cdc:	f04f 0c01 	mov.w	ip, #1
 8005ce0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ce4:	e7e8      	b.n	8005cb8 <_strtol_l.constprop.0+0x6c>
 8005ce6:	2c2b      	cmp	r4, #43	; 0x2b
 8005ce8:	bf04      	itt	eq
 8005cea:	782c      	ldrbeq	r4, [r5, #0]
 8005cec:	1cb5      	addeq	r5, r6, #2
 8005cee:	e7ca      	b.n	8005c86 <_strtol_l.constprop.0+0x3a>
 8005cf0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005cf4:	f1be 0f19 	cmp.w	lr, #25
 8005cf8:	d801      	bhi.n	8005cfe <_strtol_l.constprop.0+0xb2>
 8005cfa:	3c37      	subs	r4, #55	; 0x37
 8005cfc:	e7e2      	b.n	8005cc4 <_strtol_l.constprop.0+0x78>
 8005cfe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005d02:	f1be 0f19 	cmp.w	lr, #25
 8005d06:	d804      	bhi.n	8005d12 <_strtol_l.constprop.0+0xc6>
 8005d08:	3c57      	subs	r4, #87	; 0x57
 8005d0a:	e7db      	b.n	8005cc4 <_strtol_l.constprop.0+0x78>
 8005d0c:	f04f 3cff 	mov.w	ip, #4294967295
 8005d10:	e7e6      	b.n	8005ce0 <_strtol_l.constprop.0+0x94>
 8005d12:	f1bc 0f00 	cmp.w	ip, #0
 8005d16:	da05      	bge.n	8005d24 <_strtol_l.constprop.0+0xd8>
 8005d18:	2322      	movs	r3, #34	; 0x22
 8005d1a:	6003      	str	r3, [r0, #0]
 8005d1c:	4646      	mov	r6, r8
 8005d1e:	b942      	cbnz	r2, 8005d32 <_strtol_l.constprop.0+0xe6>
 8005d20:	4630      	mov	r0, r6
 8005d22:	e79e      	b.n	8005c62 <_strtol_l.constprop.0+0x16>
 8005d24:	b107      	cbz	r7, 8005d28 <_strtol_l.constprop.0+0xdc>
 8005d26:	4276      	negs	r6, r6
 8005d28:	2a00      	cmp	r2, #0
 8005d2a:	d0f9      	beq.n	8005d20 <_strtol_l.constprop.0+0xd4>
 8005d2c:	f1bc 0f00 	cmp.w	ip, #0
 8005d30:	d000      	beq.n	8005d34 <_strtol_l.constprop.0+0xe8>
 8005d32:	1e69      	subs	r1, r5, #1
 8005d34:	6011      	str	r1, [r2, #0]
 8005d36:	e7f3      	b.n	8005d20 <_strtol_l.constprop.0+0xd4>
 8005d38:	2430      	movs	r4, #48	; 0x30
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1b1      	bne.n	8005ca2 <_strtol_l.constprop.0+0x56>
 8005d3e:	2308      	movs	r3, #8
 8005d40:	e7af      	b.n	8005ca2 <_strtol_l.constprop.0+0x56>
 8005d42:	2c30      	cmp	r4, #48	; 0x30
 8005d44:	d0a5      	beq.n	8005c92 <_strtol_l.constprop.0+0x46>
 8005d46:	230a      	movs	r3, #10
 8005d48:	e7ab      	b.n	8005ca2 <_strtol_l.constprop.0+0x56>
 8005d4a:	bf00      	nop
 8005d4c:	080072a5 	.word	0x080072a5

08005d50 <strtol>:
 8005d50:	4613      	mov	r3, r2
 8005d52:	460a      	mov	r2, r1
 8005d54:	4601      	mov	r1, r0
 8005d56:	4802      	ldr	r0, [pc, #8]	; (8005d60 <strtol+0x10>)
 8005d58:	6800      	ldr	r0, [r0, #0]
 8005d5a:	f7ff bf77 	b.w	8005c4c <_strtol_l.constprop.0>
 8005d5e:	bf00      	nop
 8005d60:	200000a4 	.word	0x200000a4

08005d64 <__assert_func>:
 8005d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d66:	4614      	mov	r4, r2
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <__assert_func+0x2c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4605      	mov	r5, r0
 8005d70:	68d8      	ldr	r0, [r3, #12]
 8005d72:	b14c      	cbz	r4, 8005d88 <__assert_func+0x24>
 8005d74:	4b07      	ldr	r3, [pc, #28]	; (8005d94 <__assert_func+0x30>)
 8005d76:	9100      	str	r1, [sp, #0]
 8005d78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d7c:	4906      	ldr	r1, [pc, #24]	; (8005d98 <__assert_func+0x34>)
 8005d7e:	462b      	mov	r3, r5
 8005d80:	f000 f80e 	bl	8005da0 <fiprintf>
 8005d84:	f000 fe20 	bl	80069c8 <abort>
 8005d88:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <__assert_func+0x38>)
 8005d8a:	461c      	mov	r4, r3
 8005d8c:	e7f3      	b.n	8005d76 <__assert_func+0x12>
 8005d8e:	bf00      	nop
 8005d90:	200000a4 	.word	0x200000a4
 8005d94:	08007268 	.word	0x08007268
 8005d98:	08007275 	.word	0x08007275
 8005d9c:	080072a3 	.word	0x080072a3

08005da0 <fiprintf>:
 8005da0:	b40e      	push	{r1, r2, r3}
 8005da2:	b503      	push	{r0, r1, lr}
 8005da4:	4601      	mov	r1, r0
 8005da6:	ab03      	add	r3, sp, #12
 8005da8:	4805      	ldr	r0, [pc, #20]	; (8005dc0 <fiprintf+0x20>)
 8005daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dae:	6800      	ldr	r0, [r0, #0]
 8005db0:	9301      	str	r3, [sp, #4]
 8005db2:	f000 fa75 	bl	80062a0 <_vfiprintf_r>
 8005db6:	b002      	add	sp, #8
 8005db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dbc:	b003      	add	sp, #12
 8005dbe:	4770      	bx	lr
 8005dc0:	200000a4 	.word	0x200000a4

08005dc4 <malloc>:
 8005dc4:	4b02      	ldr	r3, [pc, #8]	; (8005dd0 <malloc+0xc>)
 8005dc6:	4601      	mov	r1, r0
 8005dc8:	6818      	ldr	r0, [r3, #0]
 8005dca:	f000 b86f 	b.w	8005eac <_malloc_r>
 8005dce:	bf00      	nop
 8005dd0:	200000a4 	.word	0x200000a4

08005dd4 <_free_r>:
 8005dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dd6:	2900      	cmp	r1, #0
 8005dd8:	d044      	beq.n	8005e64 <_free_r+0x90>
 8005dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dde:	9001      	str	r0, [sp, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f1a1 0404 	sub.w	r4, r1, #4
 8005de6:	bfb8      	it	lt
 8005de8:	18e4      	addlt	r4, r4, r3
 8005dea:	f001 f83d 	bl	8006e68 <__malloc_lock>
 8005dee:	4a1e      	ldr	r2, [pc, #120]	; (8005e68 <_free_r+0x94>)
 8005df0:	9801      	ldr	r0, [sp, #4]
 8005df2:	6813      	ldr	r3, [r2, #0]
 8005df4:	b933      	cbnz	r3, 8005e04 <_free_r+0x30>
 8005df6:	6063      	str	r3, [r4, #4]
 8005df8:	6014      	str	r4, [r2, #0]
 8005dfa:	b003      	add	sp, #12
 8005dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e00:	f001 b838 	b.w	8006e74 <__malloc_unlock>
 8005e04:	42a3      	cmp	r3, r4
 8005e06:	d908      	bls.n	8005e1a <_free_r+0x46>
 8005e08:	6825      	ldr	r5, [r4, #0]
 8005e0a:	1961      	adds	r1, r4, r5
 8005e0c:	428b      	cmp	r3, r1
 8005e0e:	bf01      	itttt	eq
 8005e10:	6819      	ldreq	r1, [r3, #0]
 8005e12:	685b      	ldreq	r3, [r3, #4]
 8005e14:	1949      	addeq	r1, r1, r5
 8005e16:	6021      	streq	r1, [r4, #0]
 8005e18:	e7ed      	b.n	8005df6 <_free_r+0x22>
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	b10b      	cbz	r3, 8005e24 <_free_r+0x50>
 8005e20:	42a3      	cmp	r3, r4
 8005e22:	d9fa      	bls.n	8005e1a <_free_r+0x46>
 8005e24:	6811      	ldr	r1, [r2, #0]
 8005e26:	1855      	adds	r5, r2, r1
 8005e28:	42a5      	cmp	r5, r4
 8005e2a:	d10b      	bne.n	8005e44 <_free_r+0x70>
 8005e2c:	6824      	ldr	r4, [r4, #0]
 8005e2e:	4421      	add	r1, r4
 8005e30:	1854      	adds	r4, r2, r1
 8005e32:	42a3      	cmp	r3, r4
 8005e34:	6011      	str	r1, [r2, #0]
 8005e36:	d1e0      	bne.n	8005dfa <_free_r+0x26>
 8005e38:	681c      	ldr	r4, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	6053      	str	r3, [r2, #4]
 8005e3e:	4421      	add	r1, r4
 8005e40:	6011      	str	r1, [r2, #0]
 8005e42:	e7da      	b.n	8005dfa <_free_r+0x26>
 8005e44:	d902      	bls.n	8005e4c <_free_r+0x78>
 8005e46:	230c      	movs	r3, #12
 8005e48:	6003      	str	r3, [r0, #0]
 8005e4a:	e7d6      	b.n	8005dfa <_free_r+0x26>
 8005e4c:	6825      	ldr	r5, [r4, #0]
 8005e4e:	1961      	adds	r1, r4, r5
 8005e50:	428b      	cmp	r3, r1
 8005e52:	bf04      	itt	eq
 8005e54:	6819      	ldreq	r1, [r3, #0]
 8005e56:	685b      	ldreq	r3, [r3, #4]
 8005e58:	6063      	str	r3, [r4, #4]
 8005e5a:	bf04      	itt	eq
 8005e5c:	1949      	addeq	r1, r1, r5
 8005e5e:	6021      	streq	r1, [r4, #0]
 8005e60:	6054      	str	r4, [r2, #4]
 8005e62:	e7ca      	b.n	8005dfa <_free_r+0x26>
 8005e64:	b003      	add	sp, #12
 8005e66:	bd30      	pop	{r4, r5, pc}
 8005e68:	2000029c 	.word	0x2000029c

08005e6c <sbrk_aligned>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	4e0e      	ldr	r6, [pc, #56]	; (8005ea8 <sbrk_aligned+0x3c>)
 8005e70:	460c      	mov	r4, r1
 8005e72:	6831      	ldr	r1, [r6, #0]
 8005e74:	4605      	mov	r5, r0
 8005e76:	b911      	cbnz	r1, 8005e7e <sbrk_aligned+0x12>
 8005e78:	f000 fcd6 	bl	8006828 <_sbrk_r>
 8005e7c:	6030      	str	r0, [r6, #0]
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4628      	mov	r0, r5
 8005e82:	f000 fcd1 	bl	8006828 <_sbrk_r>
 8005e86:	1c43      	adds	r3, r0, #1
 8005e88:	d00a      	beq.n	8005ea0 <sbrk_aligned+0x34>
 8005e8a:	1cc4      	adds	r4, r0, #3
 8005e8c:	f024 0403 	bic.w	r4, r4, #3
 8005e90:	42a0      	cmp	r0, r4
 8005e92:	d007      	beq.n	8005ea4 <sbrk_aligned+0x38>
 8005e94:	1a21      	subs	r1, r4, r0
 8005e96:	4628      	mov	r0, r5
 8005e98:	f000 fcc6 	bl	8006828 <_sbrk_r>
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d101      	bne.n	8005ea4 <sbrk_aligned+0x38>
 8005ea0:	f04f 34ff 	mov.w	r4, #4294967295
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}
 8005ea8:	200002a0 	.word	0x200002a0

08005eac <_malloc_r>:
 8005eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb0:	1ccd      	adds	r5, r1, #3
 8005eb2:	f025 0503 	bic.w	r5, r5, #3
 8005eb6:	3508      	adds	r5, #8
 8005eb8:	2d0c      	cmp	r5, #12
 8005eba:	bf38      	it	cc
 8005ebc:	250c      	movcc	r5, #12
 8005ebe:	2d00      	cmp	r5, #0
 8005ec0:	4607      	mov	r7, r0
 8005ec2:	db01      	blt.n	8005ec8 <_malloc_r+0x1c>
 8005ec4:	42a9      	cmp	r1, r5
 8005ec6:	d905      	bls.n	8005ed4 <_malloc_r+0x28>
 8005ec8:	230c      	movs	r3, #12
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	2600      	movs	r6, #0
 8005ece:	4630      	mov	r0, r6
 8005ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed4:	4e2e      	ldr	r6, [pc, #184]	; (8005f90 <_malloc_r+0xe4>)
 8005ed6:	f000 ffc7 	bl	8006e68 <__malloc_lock>
 8005eda:	6833      	ldr	r3, [r6, #0]
 8005edc:	461c      	mov	r4, r3
 8005ede:	bb34      	cbnz	r4, 8005f2e <_malloc_r+0x82>
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	f7ff ffc2 	bl	8005e6c <sbrk_aligned>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	4604      	mov	r4, r0
 8005eec:	d14d      	bne.n	8005f8a <_malloc_r+0xde>
 8005eee:	6834      	ldr	r4, [r6, #0]
 8005ef0:	4626      	mov	r6, r4
 8005ef2:	2e00      	cmp	r6, #0
 8005ef4:	d140      	bne.n	8005f78 <_malloc_r+0xcc>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	4631      	mov	r1, r6
 8005efa:	4638      	mov	r0, r7
 8005efc:	eb04 0803 	add.w	r8, r4, r3
 8005f00:	f000 fc92 	bl	8006828 <_sbrk_r>
 8005f04:	4580      	cmp	r8, r0
 8005f06:	d13a      	bne.n	8005f7e <_malloc_r+0xd2>
 8005f08:	6821      	ldr	r1, [r4, #0]
 8005f0a:	3503      	adds	r5, #3
 8005f0c:	1a6d      	subs	r5, r5, r1
 8005f0e:	f025 0503 	bic.w	r5, r5, #3
 8005f12:	3508      	adds	r5, #8
 8005f14:	2d0c      	cmp	r5, #12
 8005f16:	bf38      	it	cc
 8005f18:	250c      	movcc	r5, #12
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	4638      	mov	r0, r7
 8005f1e:	f7ff ffa5 	bl	8005e6c <sbrk_aligned>
 8005f22:	3001      	adds	r0, #1
 8005f24:	d02b      	beq.n	8005f7e <_malloc_r+0xd2>
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	442b      	add	r3, r5
 8005f2a:	6023      	str	r3, [r4, #0]
 8005f2c:	e00e      	b.n	8005f4c <_malloc_r+0xa0>
 8005f2e:	6822      	ldr	r2, [r4, #0]
 8005f30:	1b52      	subs	r2, r2, r5
 8005f32:	d41e      	bmi.n	8005f72 <_malloc_r+0xc6>
 8005f34:	2a0b      	cmp	r2, #11
 8005f36:	d916      	bls.n	8005f66 <_malloc_r+0xba>
 8005f38:	1961      	adds	r1, r4, r5
 8005f3a:	42a3      	cmp	r3, r4
 8005f3c:	6025      	str	r5, [r4, #0]
 8005f3e:	bf18      	it	ne
 8005f40:	6059      	strne	r1, [r3, #4]
 8005f42:	6863      	ldr	r3, [r4, #4]
 8005f44:	bf08      	it	eq
 8005f46:	6031      	streq	r1, [r6, #0]
 8005f48:	5162      	str	r2, [r4, r5]
 8005f4a:	604b      	str	r3, [r1, #4]
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	f104 060b 	add.w	r6, r4, #11
 8005f52:	f000 ff8f 	bl	8006e74 <__malloc_unlock>
 8005f56:	f026 0607 	bic.w	r6, r6, #7
 8005f5a:	1d23      	adds	r3, r4, #4
 8005f5c:	1af2      	subs	r2, r6, r3
 8005f5e:	d0b6      	beq.n	8005ece <_malloc_r+0x22>
 8005f60:	1b9b      	subs	r3, r3, r6
 8005f62:	50a3      	str	r3, [r4, r2]
 8005f64:	e7b3      	b.n	8005ece <_malloc_r+0x22>
 8005f66:	6862      	ldr	r2, [r4, #4]
 8005f68:	42a3      	cmp	r3, r4
 8005f6a:	bf0c      	ite	eq
 8005f6c:	6032      	streq	r2, [r6, #0]
 8005f6e:	605a      	strne	r2, [r3, #4]
 8005f70:	e7ec      	b.n	8005f4c <_malloc_r+0xa0>
 8005f72:	4623      	mov	r3, r4
 8005f74:	6864      	ldr	r4, [r4, #4]
 8005f76:	e7b2      	b.n	8005ede <_malloc_r+0x32>
 8005f78:	4634      	mov	r4, r6
 8005f7a:	6876      	ldr	r6, [r6, #4]
 8005f7c:	e7b9      	b.n	8005ef2 <_malloc_r+0x46>
 8005f7e:	230c      	movs	r3, #12
 8005f80:	603b      	str	r3, [r7, #0]
 8005f82:	4638      	mov	r0, r7
 8005f84:	f000 ff76 	bl	8006e74 <__malloc_unlock>
 8005f88:	e7a1      	b.n	8005ece <_malloc_r+0x22>
 8005f8a:	6025      	str	r5, [r4, #0]
 8005f8c:	e7de      	b.n	8005f4c <_malloc_r+0xa0>
 8005f8e:	bf00      	nop
 8005f90:	2000029c 	.word	0x2000029c

08005f94 <__ssputs_r>:
 8005f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f98:	688e      	ldr	r6, [r1, #8]
 8005f9a:	429e      	cmp	r6, r3
 8005f9c:	4682      	mov	sl, r0
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	4690      	mov	r8, r2
 8005fa2:	461f      	mov	r7, r3
 8005fa4:	d838      	bhi.n	8006018 <__ssputs_r+0x84>
 8005fa6:	898a      	ldrh	r2, [r1, #12]
 8005fa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fac:	d032      	beq.n	8006014 <__ssputs_r+0x80>
 8005fae:	6825      	ldr	r5, [r4, #0]
 8005fb0:	6909      	ldr	r1, [r1, #16]
 8005fb2:	eba5 0901 	sub.w	r9, r5, r1
 8005fb6:	6965      	ldr	r5, [r4, #20]
 8005fb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	444b      	add	r3, r9
 8005fc4:	106d      	asrs	r5, r5, #1
 8005fc6:	429d      	cmp	r5, r3
 8005fc8:	bf38      	it	cc
 8005fca:	461d      	movcc	r5, r3
 8005fcc:	0553      	lsls	r3, r2, #21
 8005fce:	d531      	bpl.n	8006034 <__ssputs_r+0xa0>
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	f7ff ff6b 	bl	8005eac <_malloc_r>
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	b950      	cbnz	r0, 8005ff0 <__ssputs_r+0x5c>
 8005fda:	230c      	movs	r3, #12
 8005fdc:	f8ca 3000 	str.w	r3, [sl]
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe6:	81a3      	strh	r3, [r4, #12]
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff0:	6921      	ldr	r1, [r4, #16]
 8005ff2:	464a      	mov	r2, r9
 8005ff4:	f000 ff10 	bl	8006e18 <memcpy>
 8005ff8:	89a3      	ldrh	r3, [r4, #12]
 8005ffa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006002:	81a3      	strh	r3, [r4, #12]
 8006004:	6126      	str	r6, [r4, #16]
 8006006:	6165      	str	r5, [r4, #20]
 8006008:	444e      	add	r6, r9
 800600a:	eba5 0509 	sub.w	r5, r5, r9
 800600e:	6026      	str	r6, [r4, #0]
 8006010:	60a5      	str	r5, [r4, #8]
 8006012:	463e      	mov	r6, r7
 8006014:	42be      	cmp	r6, r7
 8006016:	d900      	bls.n	800601a <__ssputs_r+0x86>
 8006018:	463e      	mov	r6, r7
 800601a:	6820      	ldr	r0, [r4, #0]
 800601c:	4632      	mov	r2, r6
 800601e:	4641      	mov	r1, r8
 8006020:	f000 ff08 	bl	8006e34 <memmove>
 8006024:	68a3      	ldr	r3, [r4, #8]
 8006026:	1b9b      	subs	r3, r3, r6
 8006028:	60a3      	str	r3, [r4, #8]
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	4433      	add	r3, r6
 800602e:	6023      	str	r3, [r4, #0]
 8006030:	2000      	movs	r0, #0
 8006032:	e7db      	b.n	8005fec <__ssputs_r+0x58>
 8006034:	462a      	mov	r2, r5
 8006036:	f000 ff23 	bl	8006e80 <_realloc_r>
 800603a:	4606      	mov	r6, r0
 800603c:	2800      	cmp	r0, #0
 800603e:	d1e1      	bne.n	8006004 <__ssputs_r+0x70>
 8006040:	6921      	ldr	r1, [r4, #16]
 8006042:	4650      	mov	r0, sl
 8006044:	f7ff fec6 	bl	8005dd4 <_free_r>
 8006048:	e7c7      	b.n	8005fda <__ssputs_r+0x46>
	...

0800604c <_svfiprintf_r>:
 800604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006050:	4698      	mov	r8, r3
 8006052:	898b      	ldrh	r3, [r1, #12]
 8006054:	061b      	lsls	r3, r3, #24
 8006056:	b09d      	sub	sp, #116	; 0x74
 8006058:	4607      	mov	r7, r0
 800605a:	460d      	mov	r5, r1
 800605c:	4614      	mov	r4, r2
 800605e:	d50e      	bpl.n	800607e <_svfiprintf_r+0x32>
 8006060:	690b      	ldr	r3, [r1, #16]
 8006062:	b963      	cbnz	r3, 800607e <_svfiprintf_r+0x32>
 8006064:	2140      	movs	r1, #64	; 0x40
 8006066:	f7ff ff21 	bl	8005eac <_malloc_r>
 800606a:	6028      	str	r0, [r5, #0]
 800606c:	6128      	str	r0, [r5, #16]
 800606e:	b920      	cbnz	r0, 800607a <_svfiprintf_r+0x2e>
 8006070:	230c      	movs	r3, #12
 8006072:	603b      	str	r3, [r7, #0]
 8006074:	f04f 30ff 	mov.w	r0, #4294967295
 8006078:	e0d1      	b.n	800621e <_svfiprintf_r+0x1d2>
 800607a:	2340      	movs	r3, #64	; 0x40
 800607c:	616b      	str	r3, [r5, #20]
 800607e:	2300      	movs	r3, #0
 8006080:	9309      	str	r3, [sp, #36]	; 0x24
 8006082:	2320      	movs	r3, #32
 8006084:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006088:	f8cd 800c 	str.w	r8, [sp, #12]
 800608c:	2330      	movs	r3, #48	; 0x30
 800608e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006238 <_svfiprintf_r+0x1ec>
 8006092:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006096:	f04f 0901 	mov.w	r9, #1
 800609a:	4623      	mov	r3, r4
 800609c:	469a      	mov	sl, r3
 800609e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060a2:	b10a      	cbz	r2, 80060a8 <_svfiprintf_r+0x5c>
 80060a4:	2a25      	cmp	r2, #37	; 0x25
 80060a6:	d1f9      	bne.n	800609c <_svfiprintf_r+0x50>
 80060a8:	ebba 0b04 	subs.w	fp, sl, r4
 80060ac:	d00b      	beq.n	80060c6 <_svfiprintf_r+0x7a>
 80060ae:	465b      	mov	r3, fp
 80060b0:	4622      	mov	r2, r4
 80060b2:	4629      	mov	r1, r5
 80060b4:	4638      	mov	r0, r7
 80060b6:	f7ff ff6d 	bl	8005f94 <__ssputs_r>
 80060ba:	3001      	adds	r0, #1
 80060bc:	f000 80aa 	beq.w	8006214 <_svfiprintf_r+0x1c8>
 80060c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060c2:	445a      	add	r2, fp
 80060c4:	9209      	str	r2, [sp, #36]	; 0x24
 80060c6:	f89a 3000 	ldrb.w	r3, [sl]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 80a2 	beq.w	8006214 <_svfiprintf_r+0x1c8>
 80060d0:	2300      	movs	r3, #0
 80060d2:	f04f 32ff 	mov.w	r2, #4294967295
 80060d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060da:	f10a 0a01 	add.w	sl, sl, #1
 80060de:	9304      	str	r3, [sp, #16]
 80060e0:	9307      	str	r3, [sp, #28]
 80060e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060e6:	931a      	str	r3, [sp, #104]	; 0x68
 80060e8:	4654      	mov	r4, sl
 80060ea:	2205      	movs	r2, #5
 80060ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060f0:	4851      	ldr	r0, [pc, #324]	; (8006238 <_svfiprintf_r+0x1ec>)
 80060f2:	f7fa f8a5 	bl	8000240 <memchr>
 80060f6:	9a04      	ldr	r2, [sp, #16]
 80060f8:	b9d8      	cbnz	r0, 8006132 <_svfiprintf_r+0xe6>
 80060fa:	06d0      	lsls	r0, r2, #27
 80060fc:	bf44      	itt	mi
 80060fe:	2320      	movmi	r3, #32
 8006100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006104:	0711      	lsls	r1, r2, #28
 8006106:	bf44      	itt	mi
 8006108:	232b      	movmi	r3, #43	; 0x2b
 800610a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800610e:	f89a 3000 	ldrb.w	r3, [sl]
 8006112:	2b2a      	cmp	r3, #42	; 0x2a
 8006114:	d015      	beq.n	8006142 <_svfiprintf_r+0xf6>
 8006116:	9a07      	ldr	r2, [sp, #28]
 8006118:	4654      	mov	r4, sl
 800611a:	2000      	movs	r0, #0
 800611c:	f04f 0c0a 	mov.w	ip, #10
 8006120:	4621      	mov	r1, r4
 8006122:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006126:	3b30      	subs	r3, #48	; 0x30
 8006128:	2b09      	cmp	r3, #9
 800612a:	d94e      	bls.n	80061ca <_svfiprintf_r+0x17e>
 800612c:	b1b0      	cbz	r0, 800615c <_svfiprintf_r+0x110>
 800612e:	9207      	str	r2, [sp, #28]
 8006130:	e014      	b.n	800615c <_svfiprintf_r+0x110>
 8006132:	eba0 0308 	sub.w	r3, r0, r8
 8006136:	fa09 f303 	lsl.w	r3, r9, r3
 800613a:	4313      	orrs	r3, r2
 800613c:	9304      	str	r3, [sp, #16]
 800613e:	46a2      	mov	sl, r4
 8006140:	e7d2      	b.n	80060e8 <_svfiprintf_r+0x9c>
 8006142:	9b03      	ldr	r3, [sp, #12]
 8006144:	1d19      	adds	r1, r3, #4
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	9103      	str	r1, [sp, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	bfbb      	ittet	lt
 800614e:	425b      	neglt	r3, r3
 8006150:	f042 0202 	orrlt.w	r2, r2, #2
 8006154:	9307      	strge	r3, [sp, #28]
 8006156:	9307      	strlt	r3, [sp, #28]
 8006158:	bfb8      	it	lt
 800615a:	9204      	strlt	r2, [sp, #16]
 800615c:	7823      	ldrb	r3, [r4, #0]
 800615e:	2b2e      	cmp	r3, #46	; 0x2e
 8006160:	d10c      	bne.n	800617c <_svfiprintf_r+0x130>
 8006162:	7863      	ldrb	r3, [r4, #1]
 8006164:	2b2a      	cmp	r3, #42	; 0x2a
 8006166:	d135      	bne.n	80061d4 <_svfiprintf_r+0x188>
 8006168:	9b03      	ldr	r3, [sp, #12]
 800616a:	1d1a      	adds	r2, r3, #4
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	9203      	str	r2, [sp, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	bfb8      	it	lt
 8006174:	f04f 33ff 	movlt.w	r3, #4294967295
 8006178:	3402      	adds	r4, #2
 800617a:	9305      	str	r3, [sp, #20]
 800617c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006248 <_svfiprintf_r+0x1fc>
 8006180:	7821      	ldrb	r1, [r4, #0]
 8006182:	2203      	movs	r2, #3
 8006184:	4650      	mov	r0, sl
 8006186:	f7fa f85b 	bl	8000240 <memchr>
 800618a:	b140      	cbz	r0, 800619e <_svfiprintf_r+0x152>
 800618c:	2340      	movs	r3, #64	; 0x40
 800618e:	eba0 000a 	sub.w	r0, r0, sl
 8006192:	fa03 f000 	lsl.w	r0, r3, r0
 8006196:	9b04      	ldr	r3, [sp, #16]
 8006198:	4303      	orrs	r3, r0
 800619a:	3401      	adds	r4, #1
 800619c:	9304      	str	r3, [sp, #16]
 800619e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061a2:	4826      	ldr	r0, [pc, #152]	; (800623c <_svfiprintf_r+0x1f0>)
 80061a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061a8:	2206      	movs	r2, #6
 80061aa:	f7fa f849 	bl	8000240 <memchr>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d038      	beq.n	8006224 <_svfiprintf_r+0x1d8>
 80061b2:	4b23      	ldr	r3, [pc, #140]	; (8006240 <_svfiprintf_r+0x1f4>)
 80061b4:	bb1b      	cbnz	r3, 80061fe <_svfiprintf_r+0x1b2>
 80061b6:	9b03      	ldr	r3, [sp, #12]
 80061b8:	3307      	adds	r3, #7
 80061ba:	f023 0307 	bic.w	r3, r3, #7
 80061be:	3308      	adds	r3, #8
 80061c0:	9303      	str	r3, [sp, #12]
 80061c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c4:	4433      	add	r3, r6
 80061c6:	9309      	str	r3, [sp, #36]	; 0x24
 80061c8:	e767      	b.n	800609a <_svfiprintf_r+0x4e>
 80061ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80061ce:	460c      	mov	r4, r1
 80061d0:	2001      	movs	r0, #1
 80061d2:	e7a5      	b.n	8006120 <_svfiprintf_r+0xd4>
 80061d4:	2300      	movs	r3, #0
 80061d6:	3401      	adds	r4, #1
 80061d8:	9305      	str	r3, [sp, #20]
 80061da:	4619      	mov	r1, r3
 80061dc:	f04f 0c0a 	mov.w	ip, #10
 80061e0:	4620      	mov	r0, r4
 80061e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061e6:	3a30      	subs	r2, #48	; 0x30
 80061e8:	2a09      	cmp	r2, #9
 80061ea:	d903      	bls.n	80061f4 <_svfiprintf_r+0x1a8>
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0c5      	beq.n	800617c <_svfiprintf_r+0x130>
 80061f0:	9105      	str	r1, [sp, #20]
 80061f2:	e7c3      	b.n	800617c <_svfiprintf_r+0x130>
 80061f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80061f8:	4604      	mov	r4, r0
 80061fa:	2301      	movs	r3, #1
 80061fc:	e7f0      	b.n	80061e0 <_svfiprintf_r+0x194>
 80061fe:	ab03      	add	r3, sp, #12
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	462a      	mov	r2, r5
 8006204:	4b0f      	ldr	r3, [pc, #60]	; (8006244 <_svfiprintf_r+0x1f8>)
 8006206:	a904      	add	r1, sp, #16
 8006208:	4638      	mov	r0, r7
 800620a:	f3af 8000 	nop.w
 800620e:	1c42      	adds	r2, r0, #1
 8006210:	4606      	mov	r6, r0
 8006212:	d1d6      	bne.n	80061c2 <_svfiprintf_r+0x176>
 8006214:	89ab      	ldrh	r3, [r5, #12]
 8006216:	065b      	lsls	r3, r3, #25
 8006218:	f53f af2c 	bmi.w	8006074 <_svfiprintf_r+0x28>
 800621c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800621e:	b01d      	add	sp, #116	; 0x74
 8006220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006224:	ab03      	add	r3, sp, #12
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	462a      	mov	r2, r5
 800622a:	4b06      	ldr	r3, [pc, #24]	; (8006244 <_svfiprintf_r+0x1f8>)
 800622c:	a904      	add	r1, sp, #16
 800622e:	4638      	mov	r0, r7
 8006230:	f000 f9d4 	bl	80065dc <_printf_i>
 8006234:	e7eb      	b.n	800620e <_svfiprintf_r+0x1c2>
 8006236:	bf00      	nop
 8006238:	080073a5 	.word	0x080073a5
 800623c:	080073af 	.word	0x080073af
 8006240:	00000000 	.word	0x00000000
 8006244:	08005f95 	.word	0x08005f95
 8006248:	080073ab 	.word	0x080073ab

0800624c <__sfputc_r>:
 800624c:	6893      	ldr	r3, [r2, #8]
 800624e:	3b01      	subs	r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	b410      	push	{r4}
 8006254:	6093      	str	r3, [r2, #8]
 8006256:	da08      	bge.n	800626a <__sfputc_r+0x1e>
 8006258:	6994      	ldr	r4, [r2, #24]
 800625a:	42a3      	cmp	r3, r4
 800625c:	db01      	blt.n	8006262 <__sfputc_r+0x16>
 800625e:	290a      	cmp	r1, #10
 8006260:	d103      	bne.n	800626a <__sfputc_r+0x1e>
 8006262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006266:	f000 baef 	b.w	8006848 <__swbuf_r>
 800626a:	6813      	ldr	r3, [r2, #0]
 800626c:	1c58      	adds	r0, r3, #1
 800626e:	6010      	str	r0, [r2, #0]
 8006270:	7019      	strb	r1, [r3, #0]
 8006272:	4608      	mov	r0, r1
 8006274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006278:	4770      	bx	lr

0800627a <__sfputs_r>:
 800627a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627c:	4606      	mov	r6, r0
 800627e:	460f      	mov	r7, r1
 8006280:	4614      	mov	r4, r2
 8006282:	18d5      	adds	r5, r2, r3
 8006284:	42ac      	cmp	r4, r5
 8006286:	d101      	bne.n	800628c <__sfputs_r+0x12>
 8006288:	2000      	movs	r0, #0
 800628a:	e007      	b.n	800629c <__sfputs_r+0x22>
 800628c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006290:	463a      	mov	r2, r7
 8006292:	4630      	mov	r0, r6
 8006294:	f7ff ffda 	bl	800624c <__sfputc_r>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d1f3      	bne.n	8006284 <__sfputs_r+0xa>
 800629c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062a0 <_vfiprintf_r>:
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	460d      	mov	r5, r1
 80062a6:	b09d      	sub	sp, #116	; 0x74
 80062a8:	4614      	mov	r4, r2
 80062aa:	4698      	mov	r8, r3
 80062ac:	4606      	mov	r6, r0
 80062ae:	b118      	cbz	r0, 80062b8 <_vfiprintf_r+0x18>
 80062b0:	6983      	ldr	r3, [r0, #24]
 80062b2:	b90b      	cbnz	r3, 80062b8 <_vfiprintf_r+0x18>
 80062b4:	f000 fcaa 	bl	8006c0c <__sinit>
 80062b8:	4b89      	ldr	r3, [pc, #548]	; (80064e0 <_vfiprintf_r+0x240>)
 80062ba:	429d      	cmp	r5, r3
 80062bc:	d11b      	bne.n	80062f6 <_vfiprintf_r+0x56>
 80062be:	6875      	ldr	r5, [r6, #4]
 80062c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062c2:	07d9      	lsls	r1, r3, #31
 80062c4:	d405      	bmi.n	80062d2 <_vfiprintf_r+0x32>
 80062c6:	89ab      	ldrh	r3, [r5, #12]
 80062c8:	059a      	lsls	r2, r3, #22
 80062ca:	d402      	bmi.n	80062d2 <_vfiprintf_r+0x32>
 80062cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ce:	f000 fd3b 	bl	8006d48 <__retarget_lock_acquire_recursive>
 80062d2:	89ab      	ldrh	r3, [r5, #12]
 80062d4:	071b      	lsls	r3, r3, #28
 80062d6:	d501      	bpl.n	80062dc <_vfiprintf_r+0x3c>
 80062d8:	692b      	ldr	r3, [r5, #16]
 80062da:	b9eb      	cbnz	r3, 8006318 <_vfiprintf_r+0x78>
 80062dc:	4629      	mov	r1, r5
 80062de:	4630      	mov	r0, r6
 80062e0:	f000 fb04 	bl	80068ec <__swsetup_r>
 80062e4:	b1c0      	cbz	r0, 8006318 <_vfiprintf_r+0x78>
 80062e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062e8:	07dc      	lsls	r4, r3, #31
 80062ea:	d50e      	bpl.n	800630a <_vfiprintf_r+0x6a>
 80062ec:	f04f 30ff 	mov.w	r0, #4294967295
 80062f0:	b01d      	add	sp, #116	; 0x74
 80062f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f6:	4b7b      	ldr	r3, [pc, #492]	; (80064e4 <_vfiprintf_r+0x244>)
 80062f8:	429d      	cmp	r5, r3
 80062fa:	d101      	bne.n	8006300 <_vfiprintf_r+0x60>
 80062fc:	68b5      	ldr	r5, [r6, #8]
 80062fe:	e7df      	b.n	80062c0 <_vfiprintf_r+0x20>
 8006300:	4b79      	ldr	r3, [pc, #484]	; (80064e8 <_vfiprintf_r+0x248>)
 8006302:	429d      	cmp	r5, r3
 8006304:	bf08      	it	eq
 8006306:	68f5      	ldreq	r5, [r6, #12]
 8006308:	e7da      	b.n	80062c0 <_vfiprintf_r+0x20>
 800630a:	89ab      	ldrh	r3, [r5, #12]
 800630c:	0598      	lsls	r0, r3, #22
 800630e:	d4ed      	bmi.n	80062ec <_vfiprintf_r+0x4c>
 8006310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006312:	f000 fd1a 	bl	8006d4a <__retarget_lock_release_recursive>
 8006316:	e7e9      	b.n	80062ec <_vfiprintf_r+0x4c>
 8006318:	2300      	movs	r3, #0
 800631a:	9309      	str	r3, [sp, #36]	; 0x24
 800631c:	2320      	movs	r3, #32
 800631e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006322:	f8cd 800c 	str.w	r8, [sp, #12]
 8006326:	2330      	movs	r3, #48	; 0x30
 8006328:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80064ec <_vfiprintf_r+0x24c>
 800632c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006330:	f04f 0901 	mov.w	r9, #1
 8006334:	4623      	mov	r3, r4
 8006336:	469a      	mov	sl, r3
 8006338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800633c:	b10a      	cbz	r2, 8006342 <_vfiprintf_r+0xa2>
 800633e:	2a25      	cmp	r2, #37	; 0x25
 8006340:	d1f9      	bne.n	8006336 <_vfiprintf_r+0x96>
 8006342:	ebba 0b04 	subs.w	fp, sl, r4
 8006346:	d00b      	beq.n	8006360 <_vfiprintf_r+0xc0>
 8006348:	465b      	mov	r3, fp
 800634a:	4622      	mov	r2, r4
 800634c:	4629      	mov	r1, r5
 800634e:	4630      	mov	r0, r6
 8006350:	f7ff ff93 	bl	800627a <__sfputs_r>
 8006354:	3001      	adds	r0, #1
 8006356:	f000 80aa 	beq.w	80064ae <_vfiprintf_r+0x20e>
 800635a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800635c:	445a      	add	r2, fp
 800635e:	9209      	str	r2, [sp, #36]	; 0x24
 8006360:	f89a 3000 	ldrb.w	r3, [sl]
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 80a2 	beq.w	80064ae <_vfiprintf_r+0x20e>
 800636a:	2300      	movs	r3, #0
 800636c:	f04f 32ff 	mov.w	r2, #4294967295
 8006370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006374:	f10a 0a01 	add.w	sl, sl, #1
 8006378:	9304      	str	r3, [sp, #16]
 800637a:	9307      	str	r3, [sp, #28]
 800637c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006380:	931a      	str	r3, [sp, #104]	; 0x68
 8006382:	4654      	mov	r4, sl
 8006384:	2205      	movs	r2, #5
 8006386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800638a:	4858      	ldr	r0, [pc, #352]	; (80064ec <_vfiprintf_r+0x24c>)
 800638c:	f7f9 ff58 	bl	8000240 <memchr>
 8006390:	9a04      	ldr	r2, [sp, #16]
 8006392:	b9d8      	cbnz	r0, 80063cc <_vfiprintf_r+0x12c>
 8006394:	06d1      	lsls	r1, r2, #27
 8006396:	bf44      	itt	mi
 8006398:	2320      	movmi	r3, #32
 800639a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800639e:	0713      	lsls	r3, r2, #28
 80063a0:	bf44      	itt	mi
 80063a2:	232b      	movmi	r3, #43	; 0x2b
 80063a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063a8:	f89a 3000 	ldrb.w	r3, [sl]
 80063ac:	2b2a      	cmp	r3, #42	; 0x2a
 80063ae:	d015      	beq.n	80063dc <_vfiprintf_r+0x13c>
 80063b0:	9a07      	ldr	r2, [sp, #28]
 80063b2:	4654      	mov	r4, sl
 80063b4:	2000      	movs	r0, #0
 80063b6:	f04f 0c0a 	mov.w	ip, #10
 80063ba:	4621      	mov	r1, r4
 80063bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063c0:	3b30      	subs	r3, #48	; 0x30
 80063c2:	2b09      	cmp	r3, #9
 80063c4:	d94e      	bls.n	8006464 <_vfiprintf_r+0x1c4>
 80063c6:	b1b0      	cbz	r0, 80063f6 <_vfiprintf_r+0x156>
 80063c8:	9207      	str	r2, [sp, #28]
 80063ca:	e014      	b.n	80063f6 <_vfiprintf_r+0x156>
 80063cc:	eba0 0308 	sub.w	r3, r0, r8
 80063d0:	fa09 f303 	lsl.w	r3, r9, r3
 80063d4:	4313      	orrs	r3, r2
 80063d6:	9304      	str	r3, [sp, #16]
 80063d8:	46a2      	mov	sl, r4
 80063da:	e7d2      	b.n	8006382 <_vfiprintf_r+0xe2>
 80063dc:	9b03      	ldr	r3, [sp, #12]
 80063de:	1d19      	adds	r1, r3, #4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	9103      	str	r1, [sp, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	bfbb      	ittet	lt
 80063e8:	425b      	neglt	r3, r3
 80063ea:	f042 0202 	orrlt.w	r2, r2, #2
 80063ee:	9307      	strge	r3, [sp, #28]
 80063f0:	9307      	strlt	r3, [sp, #28]
 80063f2:	bfb8      	it	lt
 80063f4:	9204      	strlt	r2, [sp, #16]
 80063f6:	7823      	ldrb	r3, [r4, #0]
 80063f8:	2b2e      	cmp	r3, #46	; 0x2e
 80063fa:	d10c      	bne.n	8006416 <_vfiprintf_r+0x176>
 80063fc:	7863      	ldrb	r3, [r4, #1]
 80063fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006400:	d135      	bne.n	800646e <_vfiprintf_r+0x1ce>
 8006402:	9b03      	ldr	r3, [sp, #12]
 8006404:	1d1a      	adds	r2, r3, #4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	9203      	str	r2, [sp, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	bfb8      	it	lt
 800640e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006412:	3402      	adds	r4, #2
 8006414:	9305      	str	r3, [sp, #20]
 8006416:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80064fc <_vfiprintf_r+0x25c>
 800641a:	7821      	ldrb	r1, [r4, #0]
 800641c:	2203      	movs	r2, #3
 800641e:	4650      	mov	r0, sl
 8006420:	f7f9 ff0e 	bl	8000240 <memchr>
 8006424:	b140      	cbz	r0, 8006438 <_vfiprintf_r+0x198>
 8006426:	2340      	movs	r3, #64	; 0x40
 8006428:	eba0 000a 	sub.w	r0, r0, sl
 800642c:	fa03 f000 	lsl.w	r0, r3, r0
 8006430:	9b04      	ldr	r3, [sp, #16]
 8006432:	4303      	orrs	r3, r0
 8006434:	3401      	adds	r4, #1
 8006436:	9304      	str	r3, [sp, #16]
 8006438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800643c:	482c      	ldr	r0, [pc, #176]	; (80064f0 <_vfiprintf_r+0x250>)
 800643e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006442:	2206      	movs	r2, #6
 8006444:	f7f9 fefc 	bl	8000240 <memchr>
 8006448:	2800      	cmp	r0, #0
 800644a:	d03f      	beq.n	80064cc <_vfiprintf_r+0x22c>
 800644c:	4b29      	ldr	r3, [pc, #164]	; (80064f4 <_vfiprintf_r+0x254>)
 800644e:	bb1b      	cbnz	r3, 8006498 <_vfiprintf_r+0x1f8>
 8006450:	9b03      	ldr	r3, [sp, #12]
 8006452:	3307      	adds	r3, #7
 8006454:	f023 0307 	bic.w	r3, r3, #7
 8006458:	3308      	adds	r3, #8
 800645a:	9303      	str	r3, [sp, #12]
 800645c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645e:	443b      	add	r3, r7
 8006460:	9309      	str	r3, [sp, #36]	; 0x24
 8006462:	e767      	b.n	8006334 <_vfiprintf_r+0x94>
 8006464:	fb0c 3202 	mla	r2, ip, r2, r3
 8006468:	460c      	mov	r4, r1
 800646a:	2001      	movs	r0, #1
 800646c:	e7a5      	b.n	80063ba <_vfiprintf_r+0x11a>
 800646e:	2300      	movs	r3, #0
 8006470:	3401      	adds	r4, #1
 8006472:	9305      	str	r3, [sp, #20]
 8006474:	4619      	mov	r1, r3
 8006476:	f04f 0c0a 	mov.w	ip, #10
 800647a:	4620      	mov	r0, r4
 800647c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006480:	3a30      	subs	r2, #48	; 0x30
 8006482:	2a09      	cmp	r2, #9
 8006484:	d903      	bls.n	800648e <_vfiprintf_r+0x1ee>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0c5      	beq.n	8006416 <_vfiprintf_r+0x176>
 800648a:	9105      	str	r1, [sp, #20]
 800648c:	e7c3      	b.n	8006416 <_vfiprintf_r+0x176>
 800648e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006492:	4604      	mov	r4, r0
 8006494:	2301      	movs	r3, #1
 8006496:	e7f0      	b.n	800647a <_vfiprintf_r+0x1da>
 8006498:	ab03      	add	r3, sp, #12
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	462a      	mov	r2, r5
 800649e:	4b16      	ldr	r3, [pc, #88]	; (80064f8 <_vfiprintf_r+0x258>)
 80064a0:	a904      	add	r1, sp, #16
 80064a2:	4630      	mov	r0, r6
 80064a4:	f3af 8000 	nop.w
 80064a8:	4607      	mov	r7, r0
 80064aa:	1c78      	adds	r0, r7, #1
 80064ac:	d1d6      	bne.n	800645c <_vfiprintf_r+0x1bc>
 80064ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064b0:	07d9      	lsls	r1, r3, #31
 80064b2:	d405      	bmi.n	80064c0 <_vfiprintf_r+0x220>
 80064b4:	89ab      	ldrh	r3, [r5, #12]
 80064b6:	059a      	lsls	r2, r3, #22
 80064b8:	d402      	bmi.n	80064c0 <_vfiprintf_r+0x220>
 80064ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064bc:	f000 fc45 	bl	8006d4a <__retarget_lock_release_recursive>
 80064c0:	89ab      	ldrh	r3, [r5, #12]
 80064c2:	065b      	lsls	r3, r3, #25
 80064c4:	f53f af12 	bmi.w	80062ec <_vfiprintf_r+0x4c>
 80064c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064ca:	e711      	b.n	80062f0 <_vfiprintf_r+0x50>
 80064cc:	ab03      	add	r3, sp, #12
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	462a      	mov	r2, r5
 80064d2:	4b09      	ldr	r3, [pc, #36]	; (80064f8 <_vfiprintf_r+0x258>)
 80064d4:	a904      	add	r1, sp, #16
 80064d6:	4630      	mov	r0, r6
 80064d8:	f000 f880 	bl	80065dc <_printf_i>
 80064dc:	e7e4      	b.n	80064a8 <_vfiprintf_r+0x208>
 80064de:	bf00      	nop
 80064e0:	080073f8 	.word	0x080073f8
 80064e4:	08007418 	.word	0x08007418
 80064e8:	080073d8 	.word	0x080073d8
 80064ec:	080073a5 	.word	0x080073a5
 80064f0:	080073af 	.word	0x080073af
 80064f4:	00000000 	.word	0x00000000
 80064f8:	0800627b 	.word	0x0800627b
 80064fc:	080073ab 	.word	0x080073ab

08006500 <_printf_common>:
 8006500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006504:	4616      	mov	r6, r2
 8006506:	4699      	mov	r9, r3
 8006508:	688a      	ldr	r2, [r1, #8]
 800650a:	690b      	ldr	r3, [r1, #16]
 800650c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006510:	4293      	cmp	r3, r2
 8006512:	bfb8      	it	lt
 8006514:	4613      	movlt	r3, r2
 8006516:	6033      	str	r3, [r6, #0]
 8006518:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800651c:	4607      	mov	r7, r0
 800651e:	460c      	mov	r4, r1
 8006520:	b10a      	cbz	r2, 8006526 <_printf_common+0x26>
 8006522:	3301      	adds	r3, #1
 8006524:	6033      	str	r3, [r6, #0]
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	0699      	lsls	r1, r3, #26
 800652a:	bf42      	ittt	mi
 800652c:	6833      	ldrmi	r3, [r6, #0]
 800652e:	3302      	addmi	r3, #2
 8006530:	6033      	strmi	r3, [r6, #0]
 8006532:	6825      	ldr	r5, [r4, #0]
 8006534:	f015 0506 	ands.w	r5, r5, #6
 8006538:	d106      	bne.n	8006548 <_printf_common+0x48>
 800653a:	f104 0a19 	add.w	sl, r4, #25
 800653e:	68e3      	ldr	r3, [r4, #12]
 8006540:	6832      	ldr	r2, [r6, #0]
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	42ab      	cmp	r3, r5
 8006546:	dc26      	bgt.n	8006596 <_printf_common+0x96>
 8006548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800654c:	1e13      	subs	r3, r2, #0
 800654e:	6822      	ldr	r2, [r4, #0]
 8006550:	bf18      	it	ne
 8006552:	2301      	movne	r3, #1
 8006554:	0692      	lsls	r2, r2, #26
 8006556:	d42b      	bmi.n	80065b0 <_printf_common+0xb0>
 8006558:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800655c:	4649      	mov	r1, r9
 800655e:	4638      	mov	r0, r7
 8006560:	47c0      	blx	r8
 8006562:	3001      	adds	r0, #1
 8006564:	d01e      	beq.n	80065a4 <_printf_common+0xa4>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	68e5      	ldr	r5, [r4, #12]
 800656a:	6832      	ldr	r2, [r6, #0]
 800656c:	f003 0306 	and.w	r3, r3, #6
 8006570:	2b04      	cmp	r3, #4
 8006572:	bf08      	it	eq
 8006574:	1aad      	subeq	r5, r5, r2
 8006576:	68a3      	ldr	r3, [r4, #8]
 8006578:	6922      	ldr	r2, [r4, #16]
 800657a:	bf0c      	ite	eq
 800657c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006580:	2500      	movne	r5, #0
 8006582:	4293      	cmp	r3, r2
 8006584:	bfc4      	itt	gt
 8006586:	1a9b      	subgt	r3, r3, r2
 8006588:	18ed      	addgt	r5, r5, r3
 800658a:	2600      	movs	r6, #0
 800658c:	341a      	adds	r4, #26
 800658e:	42b5      	cmp	r5, r6
 8006590:	d11a      	bne.n	80065c8 <_printf_common+0xc8>
 8006592:	2000      	movs	r0, #0
 8006594:	e008      	b.n	80065a8 <_printf_common+0xa8>
 8006596:	2301      	movs	r3, #1
 8006598:	4652      	mov	r2, sl
 800659a:	4649      	mov	r1, r9
 800659c:	4638      	mov	r0, r7
 800659e:	47c0      	blx	r8
 80065a0:	3001      	adds	r0, #1
 80065a2:	d103      	bne.n	80065ac <_printf_common+0xac>
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ac:	3501      	adds	r5, #1
 80065ae:	e7c6      	b.n	800653e <_printf_common+0x3e>
 80065b0:	18e1      	adds	r1, r4, r3
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	2030      	movs	r0, #48	; 0x30
 80065b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ba:	4422      	add	r2, r4
 80065bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065c4:	3302      	adds	r3, #2
 80065c6:	e7c7      	b.n	8006558 <_printf_common+0x58>
 80065c8:	2301      	movs	r3, #1
 80065ca:	4622      	mov	r2, r4
 80065cc:	4649      	mov	r1, r9
 80065ce:	4638      	mov	r0, r7
 80065d0:	47c0      	blx	r8
 80065d2:	3001      	adds	r0, #1
 80065d4:	d0e6      	beq.n	80065a4 <_printf_common+0xa4>
 80065d6:	3601      	adds	r6, #1
 80065d8:	e7d9      	b.n	800658e <_printf_common+0x8e>
	...

080065dc <_printf_i>:
 80065dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e0:	7e0f      	ldrb	r7, [r1, #24]
 80065e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065e4:	2f78      	cmp	r7, #120	; 0x78
 80065e6:	4691      	mov	r9, r2
 80065e8:	4680      	mov	r8, r0
 80065ea:	460c      	mov	r4, r1
 80065ec:	469a      	mov	sl, r3
 80065ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065f2:	d807      	bhi.n	8006604 <_printf_i+0x28>
 80065f4:	2f62      	cmp	r7, #98	; 0x62
 80065f6:	d80a      	bhi.n	800660e <_printf_i+0x32>
 80065f8:	2f00      	cmp	r7, #0
 80065fa:	f000 80d8 	beq.w	80067ae <_printf_i+0x1d2>
 80065fe:	2f58      	cmp	r7, #88	; 0x58
 8006600:	f000 80a3 	beq.w	800674a <_printf_i+0x16e>
 8006604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006608:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800660c:	e03a      	b.n	8006684 <_printf_i+0xa8>
 800660e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006612:	2b15      	cmp	r3, #21
 8006614:	d8f6      	bhi.n	8006604 <_printf_i+0x28>
 8006616:	a101      	add	r1, pc, #4	; (adr r1, 800661c <_printf_i+0x40>)
 8006618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800661c:	08006675 	.word	0x08006675
 8006620:	08006689 	.word	0x08006689
 8006624:	08006605 	.word	0x08006605
 8006628:	08006605 	.word	0x08006605
 800662c:	08006605 	.word	0x08006605
 8006630:	08006605 	.word	0x08006605
 8006634:	08006689 	.word	0x08006689
 8006638:	08006605 	.word	0x08006605
 800663c:	08006605 	.word	0x08006605
 8006640:	08006605 	.word	0x08006605
 8006644:	08006605 	.word	0x08006605
 8006648:	08006795 	.word	0x08006795
 800664c:	080066b9 	.word	0x080066b9
 8006650:	08006777 	.word	0x08006777
 8006654:	08006605 	.word	0x08006605
 8006658:	08006605 	.word	0x08006605
 800665c:	080067b7 	.word	0x080067b7
 8006660:	08006605 	.word	0x08006605
 8006664:	080066b9 	.word	0x080066b9
 8006668:	08006605 	.word	0x08006605
 800666c:	08006605 	.word	0x08006605
 8006670:	0800677f 	.word	0x0800677f
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	1d1a      	adds	r2, r3, #4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	602a      	str	r2, [r5, #0]
 800667c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006680:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006684:	2301      	movs	r3, #1
 8006686:	e0a3      	b.n	80067d0 <_printf_i+0x1f4>
 8006688:	6820      	ldr	r0, [r4, #0]
 800668a:	6829      	ldr	r1, [r5, #0]
 800668c:	0606      	lsls	r6, r0, #24
 800668e:	f101 0304 	add.w	r3, r1, #4
 8006692:	d50a      	bpl.n	80066aa <_printf_i+0xce>
 8006694:	680e      	ldr	r6, [r1, #0]
 8006696:	602b      	str	r3, [r5, #0]
 8006698:	2e00      	cmp	r6, #0
 800669a:	da03      	bge.n	80066a4 <_printf_i+0xc8>
 800669c:	232d      	movs	r3, #45	; 0x2d
 800669e:	4276      	negs	r6, r6
 80066a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a4:	485e      	ldr	r0, [pc, #376]	; (8006820 <_printf_i+0x244>)
 80066a6:	230a      	movs	r3, #10
 80066a8:	e019      	b.n	80066de <_printf_i+0x102>
 80066aa:	680e      	ldr	r6, [r1, #0]
 80066ac:	602b      	str	r3, [r5, #0]
 80066ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066b2:	bf18      	it	ne
 80066b4:	b236      	sxthne	r6, r6
 80066b6:	e7ef      	b.n	8006698 <_printf_i+0xbc>
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	6820      	ldr	r0, [r4, #0]
 80066bc:	1d19      	adds	r1, r3, #4
 80066be:	6029      	str	r1, [r5, #0]
 80066c0:	0601      	lsls	r1, r0, #24
 80066c2:	d501      	bpl.n	80066c8 <_printf_i+0xec>
 80066c4:	681e      	ldr	r6, [r3, #0]
 80066c6:	e002      	b.n	80066ce <_printf_i+0xf2>
 80066c8:	0646      	lsls	r6, r0, #25
 80066ca:	d5fb      	bpl.n	80066c4 <_printf_i+0xe8>
 80066cc:	881e      	ldrh	r6, [r3, #0]
 80066ce:	4854      	ldr	r0, [pc, #336]	; (8006820 <_printf_i+0x244>)
 80066d0:	2f6f      	cmp	r7, #111	; 0x6f
 80066d2:	bf0c      	ite	eq
 80066d4:	2308      	moveq	r3, #8
 80066d6:	230a      	movne	r3, #10
 80066d8:	2100      	movs	r1, #0
 80066da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066de:	6865      	ldr	r5, [r4, #4]
 80066e0:	60a5      	str	r5, [r4, #8]
 80066e2:	2d00      	cmp	r5, #0
 80066e4:	bfa2      	ittt	ge
 80066e6:	6821      	ldrge	r1, [r4, #0]
 80066e8:	f021 0104 	bicge.w	r1, r1, #4
 80066ec:	6021      	strge	r1, [r4, #0]
 80066ee:	b90e      	cbnz	r6, 80066f4 <_printf_i+0x118>
 80066f0:	2d00      	cmp	r5, #0
 80066f2:	d04d      	beq.n	8006790 <_printf_i+0x1b4>
 80066f4:	4615      	mov	r5, r2
 80066f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80066fa:	fb03 6711 	mls	r7, r3, r1, r6
 80066fe:	5dc7      	ldrb	r7, [r0, r7]
 8006700:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006704:	4637      	mov	r7, r6
 8006706:	42bb      	cmp	r3, r7
 8006708:	460e      	mov	r6, r1
 800670a:	d9f4      	bls.n	80066f6 <_printf_i+0x11a>
 800670c:	2b08      	cmp	r3, #8
 800670e:	d10b      	bne.n	8006728 <_printf_i+0x14c>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	07de      	lsls	r6, r3, #31
 8006714:	d508      	bpl.n	8006728 <_printf_i+0x14c>
 8006716:	6923      	ldr	r3, [r4, #16]
 8006718:	6861      	ldr	r1, [r4, #4]
 800671a:	4299      	cmp	r1, r3
 800671c:	bfde      	ittt	le
 800671e:	2330      	movle	r3, #48	; 0x30
 8006720:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006724:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006728:	1b52      	subs	r2, r2, r5
 800672a:	6122      	str	r2, [r4, #16]
 800672c:	f8cd a000 	str.w	sl, [sp]
 8006730:	464b      	mov	r3, r9
 8006732:	aa03      	add	r2, sp, #12
 8006734:	4621      	mov	r1, r4
 8006736:	4640      	mov	r0, r8
 8006738:	f7ff fee2 	bl	8006500 <_printf_common>
 800673c:	3001      	adds	r0, #1
 800673e:	d14c      	bne.n	80067da <_printf_i+0x1fe>
 8006740:	f04f 30ff 	mov.w	r0, #4294967295
 8006744:	b004      	add	sp, #16
 8006746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800674a:	4835      	ldr	r0, [pc, #212]	; (8006820 <_printf_i+0x244>)
 800674c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006750:	6829      	ldr	r1, [r5, #0]
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	f851 6b04 	ldr.w	r6, [r1], #4
 8006758:	6029      	str	r1, [r5, #0]
 800675a:	061d      	lsls	r5, r3, #24
 800675c:	d514      	bpl.n	8006788 <_printf_i+0x1ac>
 800675e:	07df      	lsls	r7, r3, #31
 8006760:	bf44      	itt	mi
 8006762:	f043 0320 	orrmi.w	r3, r3, #32
 8006766:	6023      	strmi	r3, [r4, #0]
 8006768:	b91e      	cbnz	r6, 8006772 <_printf_i+0x196>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	f023 0320 	bic.w	r3, r3, #32
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	2310      	movs	r3, #16
 8006774:	e7b0      	b.n	80066d8 <_printf_i+0xfc>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	f043 0320 	orr.w	r3, r3, #32
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	2378      	movs	r3, #120	; 0x78
 8006780:	4828      	ldr	r0, [pc, #160]	; (8006824 <_printf_i+0x248>)
 8006782:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006786:	e7e3      	b.n	8006750 <_printf_i+0x174>
 8006788:	0659      	lsls	r1, r3, #25
 800678a:	bf48      	it	mi
 800678c:	b2b6      	uxthmi	r6, r6
 800678e:	e7e6      	b.n	800675e <_printf_i+0x182>
 8006790:	4615      	mov	r5, r2
 8006792:	e7bb      	b.n	800670c <_printf_i+0x130>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	6826      	ldr	r6, [r4, #0]
 8006798:	6961      	ldr	r1, [r4, #20]
 800679a:	1d18      	adds	r0, r3, #4
 800679c:	6028      	str	r0, [r5, #0]
 800679e:	0635      	lsls	r5, r6, #24
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	d501      	bpl.n	80067a8 <_printf_i+0x1cc>
 80067a4:	6019      	str	r1, [r3, #0]
 80067a6:	e002      	b.n	80067ae <_printf_i+0x1d2>
 80067a8:	0670      	lsls	r0, r6, #25
 80067aa:	d5fb      	bpl.n	80067a4 <_printf_i+0x1c8>
 80067ac:	8019      	strh	r1, [r3, #0]
 80067ae:	2300      	movs	r3, #0
 80067b0:	6123      	str	r3, [r4, #16]
 80067b2:	4615      	mov	r5, r2
 80067b4:	e7ba      	b.n	800672c <_printf_i+0x150>
 80067b6:	682b      	ldr	r3, [r5, #0]
 80067b8:	1d1a      	adds	r2, r3, #4
 80067ba:	602a      	str	r2, [r5, #0]
 80067bc:	681d      	ldr	r5, [r3, #0]
 80067be:	6862      	ldr	r2, [r4, #4]
 80067c0:	2100      	movs	r1, #0
 80067c2:	4628      	mov	r0, r5
 80067c4:	f7f9 fd3c 	bl	8000240 <memchr>
 80067c8:	b108      	cbz	r0, 80067ce <_printf_i+0x1f2>
 80067ca:	1b40      	subs	r0, r0, r5
 80067cc:	6060      	str	r0, [r4, #4]
 80067ce:	6863      	ldr	r3, [r4, #4]
 80067d0:	6123      	str	r3, [r4, #16]
 80067d2:	2300      	movs	r3, #0
 80067d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067d8:	e7a8      	b.n	800672c <_printf_i+0x150>
 80067da:	6923      	ldr	r3, [r4, #16]
 80067dc:	462a      	mov	r2, r5
 80067de:	4649      	mov	r1, r9
 80067e0:	4640      	mov	r0, r8
 80067e2:	47d0      	blx	sl
 80067e4:	3001      	adds	r0, #1
 80067e6:	d0ab      	beq.n	8006740 <_printf_i+0x164>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	079b      	lsls	r3, r3, #30
 80067ec:	d413      	bmi.n	8006816 <_printf_i+0x23a>
 80067ee:	68e0      	ldr	r0, [r4, #12]
 80067f0:	9b03      	ldr	r3, [sp, #12]
 80067f2:	4298      	cmp	r0, r3
 80067f4:	bfb8      	it	lt
 80067f6:	4618      	movlt	r0, r3
 80067f8:	e7a4      	b.n	8006744 <_printf_i+0x168>
 80067fa:	2301      	movs	r3, #1
 80067fc:	4632      	mov	r2, r6
 80067fe:	4649      	mov	r1, r9
 8006800:	4640      	mov	r0, r8
 8006802:	47d0      	blx	sl
 8006804:	3001      	adds	r0, #1
 8006806:	d09b      	beq.n	8006740 <_printf_i+0x164>
 8006808:	3501      	adds	r5, #1
 800680a:	68e3      	ldr	r3, [r4, #12]
 800680c:	9903      	ldr	r1, [sp, #12]
 800680e:	1a5b      	subs	r3, r3, r1
 8006810:	42ab      	cmp	r3, r5
 8006812:	dcf2      	bgt.n	80067fa <_printf_i+0x21e>
 8006814:	e7eb      	b.n	80067ee <_printf_i+0x212>
 8006816:	2500      	movs	r5, #0
 8006818:	f104 0619 	add.w	r6, r4, #25
 800681c:	e7f5      	b.n	800680a <_printf_i+0x22e>
 800681e:	bf00      	nop
 8006820:	080073b6 	.word	0x080073b6
 8006824:	080073c7 	.word	0x080073c7

08006828 <_sbrk_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4d06      	ldr	r5, [pc, #24]	; (8006844 <_sbrk_r+0x1c>)
 800682c:	2300      	movs	r3, #0
 800682e:	4604      	mov	r4, r0
 8006830:	4608      	mov	r0, r1
 8006832:	602b      	str	r3, [r5, #0]
 8006834:	f7fa fc48 	bl	80010c8 <_sbrk>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d102      	bne.n	8006842 <_sbrk_r+0x1a>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	b103      	cbz	r3, 8006842 <_sbrk_r+0x1a>
 8006840:	6023      	str	r3, [r4, #0]
 8006842:	bd38      	pop	{r3, r4, r5, pc}
 8006844:	200002a8 	.word	0x200002a8

08006848 <__swbuf_r>:
 8006848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684a:	460e      	mov	r6, r1
 800684c:	4614      	mov	r4, r2
 800684e:	4605      	mov	r5, r0
 8006850:	b118      	cbz	r0, 800685a <__swbuf_r+0x12>
 8006852:	6983      	ldr	r3, [r0, #24]
 8006854:	b90b      	cbnz	r3, 800685a <__swbuf_r+0x12>
 8006856:	f000 f9d9 	bl	8006c0c <__sinit>
 800685a:	4b21      	ldr	r3, [pc, #132]	; (80068e0 <__swbuf_r+0x98>)
 800685c:	429c      	cmp	r4, r3
 800685e:	d12b      	bne.n	80068b8 <__swbuf_r+0x70>
 8006860:	686c      	ldr	r4, [r5, #4]
 8006862:	69a3      	ldr	r3, [r4, #24]
 8006864:	60a3      	str	r3, [r4, #8]
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	071a      	lsls	r2, r3, #28
 800686a:	d52f      	bpl.n	80068cc <__swbuf_r+0x84>
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	b36b      	cbz	r3, 80068cc <__swbuf_r+0x84>
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	6820      	ldr	r0, [r4, #0]
 8006874:	1ac0      	subs	r0, r0, r3
 8006876:	6963      	ldr	r3, [r4, #20]
 8006878:	b2f6      	uxtb	r6, r6
 800687a:	4283      	cmp	r3, r0
 800687c:	4637      	mov	r7, r6
 800687e:	dc04      	bgt.n	800688a <__swbuf_r+0x42>
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	f000 f92e 	bl	8006ae4 <_fflush_r>
 8006888:	bb30      	cbnz	r0, 80068d8 <__swbuf_r+0x90>
 800688a:	68a3      	ldr	r3, [r4, #8]
 800688c:	3b01      	subs	r3, #1
 800688e:	60a3      	str	r3, [r4, #8]
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	6022      	str	r2, [r4, #0]
 8006896:	701e      	strb	r6, [r3, #0]
 8006898:	6963      	ldr	r3, [r4, #20]
 800689a:	3001      	adds	r0, #1
 800689c:	4283      	cmp	r3, r0
 800689e:	d004      	beq.n	80068aa <__swbuf_r+0x62>
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	07db      	lsls	r3, r3, #31
 80068a4:	d506      	bpl.n	80068b4 <__swbuf_r+0x6c>
 80068a6:	2e0a      	cmp	r6, #10
 80068a8:	d104      	bne.n	80068b4 <__swbuf_r+0x6c>
 80068aa:	4621      	mov	r1, r4
 80068ac:	4628      	mov	r0, r5
 80068ae:	f000 f919 	bl	8006ae4 <_fflush_r>
 80068b2:	b988      	cbnz	r0, 80068d8 <__swbuf_r+0x90>
 80068b4:	4638      	mov	r0, r7
 80068b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b8:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <__swbuf_r+0x9c>)
 80068ba:	429c      	cmp	r4, r3
 80068bc:	d101      	bne.n	80068c2 <__swbuf_r+0x7a>
 80068be:	68ac      	ldr	r4, [r5, #8]
 80068c0:	e7cf      	b.n	8006862 <__swbuf_r+0x1a>
 80068c2:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <__swbuf_r+0xa0>)
 80068c4:	429c      	cmp	r4, r3
 80068c6:	bf08      	it	eq
 80068c8:	68ec      	ldreq	r4, [r5, #12]
 80068ca:	e7ca      	b.n	8006862 <__swbuf_r+0x1a>
 80068cc:	4621      	mov	r1, r4
 80068ce:	4628      	mov	r0, r5
 80068d0:	f000 f80c 	bl	80068ec <__swsetup_r>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d0cb      	beq.n	8006870 <__swbuf_r+0x28>
 80068d8:	f04f 37ff 	mov.w	r7, #4294967295
 80068dc:	e7ea      	b.n	80068b4 <__swbuf_r+0x6c>
 80068de:	bf00      	nop
 80068e0:	080073f8 	.word	0x080073f8
 80068e4:	08007418 	.word	0x08007418
 80068e8:	080073d8 	.word	0x080073d8

080068ec <__swsetup_r>:
 80068ec:	4b32      	ldr	r3, [pc, #200]	; (80069b8 <__swsetup_r+0xcc>)
 80068ee:	b570      	push	{r4, r5, r6, lr}
 80068f0:	681d      	ldr	r5, [r3, #0]
 80068f2:	4606      	mov	r6, r0
 80068f4:	460c      	mov	r4, r1
 80068f6:	b125      	cbz	r5, 8006902 <__swsetup_r+0x16>
 80068f8:	69ab      	ldr	r3, [r5, #24]
 80068fa:	b913      	cbnz	r3, 8006902 <__swsetup_r+0x16>
 80068fc:	4628      	mov	r0, r5
 80068fe:	f000 f985 	bl	8006c0c <__sinit>
 8006902:	4b2e      	ldr	r3, [pc, #184]	; (80069bc <__swsetup_r+0xd0>)
 8006904:	429c      	cmp	r4, r3
 8006906:	d10f      	bne.n	8006928 <__swsetup_r+0x3c>
 8006908:	686c      	ldr	r4, [r5, #4]
 800690a:	89a3      	ldrh	r3, [r4, #12]
 800690c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006910:	0719      	lsls	r1, r3, #28
 8006912:	d42c      	bmi.n	800696e <__swsetup_r+0x82>
 8006914:	06dd      	lsls	r5, r3, #27
 8006916:	d411      	bmi.n	800693c <__swsetup_r+0x50>
 8006918:	2309      	movs	r3, #9
 800691a:	6033      	str	r3, [r6, #0]
 800691c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006920:	81a3      	strh	r3, [r4, #12]
 8006922:	f04f 30ff 	mov.w	r0, #4294967295
 8006926:	e03e      	b.n	80069a6 <__swsetup_r+0xba>
 8006928:	4b25      	ldr	r3, [pc, #148]	; (80069c0 <__swsetup_r+0xd4>)
 800692a:	429c      	cmp	r4, r3
 800692c:	d101      	bne.n	8006932 <__swsetup_r+0x46>
 800692e:	68ac      	ldr	r4, [r5, #8]
 8006930:	e7eb      	b.n	800690a <__swsetup_r+0x1e>
 8006932:	4b24      	ldr	r3, [pc, #144]	; (80069c4 <__swsetup_r+0xd8>)
 8006934:	429c      	cmp	r4, r3
 8006936:	bf08      	it	eq
 8006938:	68ec      	ldreq	r4, [r5, #12]
 800693a:	e7e6      	b.n	800690a <__swsetup_r+0x1e>
 800693c:	0758      	lsls	r0, r3, #29
 800693e:	d512      	bpl.n	8006966 <__swsetup_r+0x7a>
 8006940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006942:	b141      	cbz	r1, 8006956 <__swsetup_r+0x6a>
 8006944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006948:	4299      	cmp	r1, r3
 800694a:	d002      	beq.n	8006952 <__swsetup_r+0x66>
 800694c:	4630      	mov	r0, r6
 800694e:	f7ff fa41 	bl	8005dd4 <_free_r>
 8006952:	2300      	movs	r3, #0
 8006954:	6363      	str	r3, [r4, #52]	; 0x34
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800695c:	81a3      	strh	r3, [r4, #12]
 800695e:	2300      	movs	r3, #0
 8006960:	6063      	str	r3, [r4, #4]
 8006962:	6923      	ldr	r3, [r4, #16]
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	f043 0308 	orr.w	r3, r3, #8
 800696c:	81a3      	strh	r3, [r4, #12]
 800696e:	6923      	ldr	r3, [r4, #16]
 8006970:	b94b      	cbnz	r3, 8006986 <__swsetup_r+0x9a>
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800697c:	d003      	beq.n	8006986 <__swsetup_r+0x9a>
 800697e:	4621      	mov	r1, r4
 8006980:	4630      	mov	r0, r6
 8006982:	f000 fa09 	bl	8006d98 <__smakebuf_r>
 8006986:	89a0      	ldrh	r0, [r4, #12]
 8006988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800698c:	f010 0301 	ands.w	r3, r0, #1
 8006990:	d00a      	beq.n	80069a8 <__swsetup_r+0xbc>
 8006992:	2300      	movs	r3, #0
 8006994:	60a3      	str	r3, [r4, #8]
 8006996:	6963      	ldr	r3, [r4, #20]
 8006998:	425b      	negs	r3, r3
 800699a:	61a3      	str	r3, [r4, #24]
 800699c:	6923      	ldr	r3, [r4, #16]
 800699e:	b943      	cbnz	r3, 80069b2 <__swsetup_r+0xc6>
 80069a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069a4:	d1ba      	bne.n	800691c <__swsetup_r+0x30>
 80069a6:	bd70      	pop	{r4, r5, r6, pc}
 80069a8:	0781      	lsls	r1, r0, #30
 80069aa:	bf58      	it	pl
 80069ac:	6963      	ldrpl	r3, [r4, #20]
 80069ae:	60a3      	str	r3, [r4, #8]
 80069b0:	e7f4      	b.n	800699c <__swsetup_r+0xb0>
 80069b2:	2000      	movs	r0, #0
 80069b4:	e7f7      	b.n	80069a6 <__swsetup_r+0xba>
 80069b6:	bf00      	nop
 80069b8:	200000a4 	.word	0x200000a4
 80069bc:	080073f8 	.word	0x080073f8
 80069c0:	08007418 	.word	0x08007418
 80069c4:	080073d8 	.word	0x080073d8

080069c8 <abort>:
 80069c8:	b508      	push	{r3, lr}
 80069ca:	2006      	movs	r0, #6
 80069cc:	f000 fab0 	bl	8006f30 <raise>
 80069d0:	2001      	movs	r0, #1
 80069d2:	f7fa fb01 	bl	8000fd8 <_exit>
	...

080069d8 <__sflush_r>:
 80069d8:	898a      	ldrh	r2, [r1, #12]
 80069da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069de:	4605      	mov	r5, r0
 80069e0:	0710      	lsls	r0, r2, #28
 80069e2:	460c      	mov	r4, r1
 80069e4:	d458      	bmi.n	8006a98 <__sflush_r+0xc0>
 80069e6:	684b      	ldr	r3, [r1, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	dc05      	bgt.n	80069f8 <__sflush_r+0x20>
 80069ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	dc02      	bgt.n	80069f8 <__sflush_r+0x20>
 80069f2:	2000      	movs	r0, #0
 80069f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069fa:	2e00      	cmp	r6, #0
 80069fc:	d0f9      	beq.n	80069f2 <__sflush_r+0x1a>
 80069fe:	2300      	movs	r3, #0
 8006a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a04:	682f      	ldr	r7, [r5, #0]
 8006a06:	602b      	str	r3, [r5, #0]
 8006a08:	d032      	beq.n	8006a70 <__sflush_r+0x98>
 8006a0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a0c:	89a3      	ldrh	r3, [r4, #12]
 8006a0e:	075a      	lsls	r2, r3, #29
 8006a10:	d505      	bpl.n	8006a1e <__sflush_r+0x46>
 8006a12:	6863      	ldr	r3, [r4, #4]
 8006a14:	1ac0      	subs	r0, r0, r3
 8006a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a18:	b10b      	cbz	r3, 8006a1e <__sflush_r+0x46>
 8006a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a1c:	1ac0      	subs	r0, r0, r3
 8006a1e:	2300      	movs	r3, #0
 8006a20:	4602      	mov	r2, r0
 8006a22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a24:	6a21      	ldr	r1, [r4, #32]
 8006a26:	4628      	mov	r0, r5
 8006a28:	47b0      	blx	r6
 8006a2a:	1c43      	adds	r3, r0, #1
 8006a2c:	89a3      	ldrh	r3, [r4, #12]
 8006a2e:	d106      	bne.n	8006a3e <__sflush_r+0x66>
 8006a30:	6829      	ldr	r1, [r5, #0]
 8006a32:	291d      	cmp	r1, #29
 8006a34:	d82c      	bhi.n	8006a90 <__sflush_r+0xb8>
 8006a36:	4a2a      	ldr	r2, [pc, #168]	; (8006ae0 <__sflush_r+0x108>)
 8006a38:	40ca      	lsrs	r2, r1
 8006a3a:	07d6      	lsls	r6, r2, #31
 8006a3c:	d528      	bpl.n	8006a90 <__sflush_r+0xb8>
 8006a3e:	2200      	movs	r2, #0
 8006a40:	6062      	str	r2, [r4, #4]
 8006a42:	04d9      	lsls	r1, r3, #19
 8006a44:	6922      	ldr	r2, [r4, #16]
 8006a46:	6022      	str	r2, [r4, #0]
 8006a48:	d504      	bpl.n	8006a54 <__sflush_r+0x7c>
 8006a4a:	1c42      	adds	r2, r0, #1
 8006a4c:	d101      	bne.n	8006a52 <__sflush_r+0x7a>
 8006a4e:	682b      	ldr	r3, [r5, #0]
 8006a50:	b903      	cbnz	r3, 8006a54 <__sflush_r+0x7c>
 8006a52:	6560      	str	r0, [r4, #84]	; 0x54
 8006a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a56:	602f      	str	r7, [r5, #0]
 8006a58:	2900      	cmp	r1, #0
 8006a5a:	d0ca      	beq.n	80069f2 <__sflush_r+0x1a>
 8006a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a60:	4299      	cmp	r1, r3
 8006a62:	d002      	beq.n	8006a6a <__sflush_r+0x92>
 8006a64:	4628      	mov	r0, r5
 8006a66:	f7ff f9b5 	bl	8005dd4 <_free_r>
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a6e:	e7c1      	b.n	80069f4 <__sflush_r+0x1c>
 8006a70:	6a21      	ldr	r1, [r4, #32]
 8006a72:	2301      	movs	r3, #1
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b0      	blx	r6
 8006a78:	1c41      	adds	r1, r0, #1
 8006a7a:	d1c7      	bne.n	8006a0c <__sflush_r+0x34>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0c4      	beq.n	8006a0c <__sflush_r+0x34>
 8006a82:	2b1d      	cmp	r3, #29
 8006a84:	d001      	beq.n	8006a8a <__sflush_r+0xb2>
 8006a86:	2b16      	cmp	r3, #22
 8006a88:	d101      	bne.n	8006a8e <__sflush_r+0xb6>
 8006a8a:	602f      	str	r7, [r5, #0]
 8006a8c:	e7b1      	b.n	80069f2 <__sflush_r+0x1a>
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	e7ad      	b.n	80069f4 <__sflush_r+0x1c>
 8006a98:	690f      	ldr	r7, [r1, #16]
 8006a9a:	2f00      	cmp	r7, #0
 8006a9c:	d0a9      	beq.n	80069f2 <__sflush_r+0x1a>
 8006a9e:	0793      	lsls	r3, r2, #30
 8006aa0:	680e      	ldr	r6, [r1, #0]
 8006aa2:	bf08      	it	eq
 8006aa4:	694b      	ldreq	r3, [r1, #20]
 8006aa6:	600f      	str	r7, [r1, #0]
 8006aa8:	bf18      	it	ne
 8006aaa:	2300      	movne	r3, #0
 8006aac:	eba6 0807 	sub.w	r8, r6, r7
 8006ab0:	608b      	str	r3, [r1, #8]
 8006ab2:	f1b8 0f00 	cmp.w	r8, #0
 8006ab6:	dd9c      	ble.n	80069f2 <__sflush_r+0x1a>
 8006ab8:	6a21      	ldr	r1, [r4, #32]
 8006aba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006abc:	4643      	mov	r3, r8
 8006abe:	463a      	mov	r2, r7
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	47b0      	blx	r6
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	dc06      	bgt.n	8006ad6 <__sflush_r+0xfe>
 8006ac8:	89a3      	ldrh	r3, [r4, #12]
 8006aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ace:	81a3      	strh	r3, [r4, #12]
 8006ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad4:	e78e      	b.n	80069f4 <__sflush_r+0x1c>
 8006ad6:	4407      	add	r7, r0
 8006ad8:	eba8 0800 	sub.w	r8, r8, r0
 8006adc:	e7e9      	b.n	8006ab2 <__sflush_r+0xda>
 8006ade:	bf00      	nop
 8006ae0:	20400001 	.word	0x20400001

08006ae4 <_fflush_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	690b      	ldr	r3, [r1, #16]
 8006ae8:	4605      	mov	r5, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	b913      	cbnz	r3, 8006af4 <_fflush_r+0x10>
 8006aee:	2500      	movs	r5, #0
 8006af0:	4628      	mov	r0, r5
 8006af2:	bd38      	pop	{r3, r4, r5, pc}
 8006af4:	b118      	cbz	r0, 8006afe <_fflush_r+0x1a>
 8006af6:	6983      	ldr	r3, [r0, #24]
 8006af8:	b90b      	cbnz	r3, 8006afe <_fflush_r+0x1a>
 8006afa:	f000 f887 	bl	8006c0c <__sinit>
 8006afe:	4b14      	ldr	r3, [pc, #80]	; (8006b50 <_fflush_r+0x6c>)
 8006b00:	429c      	cmp	r4, r3
 8006b02:	d11b      	bne.n	8006b3c <_fflush_r+0x58>
 8006b04:	686c      	ldr	r4, [r5, #4]
 8006b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0ef      	beq.n	8006aee <_fflush_r+0xa>
 8006b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b10:	07d0      	lsls	r0, r2, #31
 8006b12:	d404      	bmi.n	8006b1e <_fflush_r+0x3a>
 8006b14:	0599      	lsls	r1, r3, #22
 8006b16:	d402      	bmi.n	8006b1e <_fflush_r+0x3a>
 8006b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b1a:	f000 f915 	bl	8006d48 <__retarget_lock_acquire_recursive>
 8006b1e:	4628      	mov	r0, r5
 8006b20:	4621      	mov	r1, r4
 8006b22:	f7ff ff59 	bl	80069d8 <__sflush_r>
 8006b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b28:	07da      	lsls	r2, r3, #31
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	d4e0      	bmi.n	8006af0 <_fflush_r+0xc>
 8006b2e:	89a3      	ldrh	r3, [r4, #12]
 8006b30:	059b      	lsls	r3, r3, #22
 8006b32:	d4dd      	bmi.n	8006af0 <_fflush_r+0xc>
 8006b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b36:	f000 f908 	bl	8006d4a <__retarget_lock_release_recursive>
 8006b3a:	e7d9      	b.n	8006af0 <_fflush_r+0xc>
 8006b3c:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <_fflush_r+0x70>)
 8006b3e:	429c      	cmp	r4, r3
 8006b40:	d101      	bne.n	8006b46 <_fflush_r+0x62>
 8006b42:	68ac      	ldr	r4, [r5, #8]
 8006b44:	e7df      	b.n	8006b06 <_fflush_r+0x22>
 8006b46:	4b04      	ldr	r3, [pc, #16]	; (8006b58 <_fflush_r+0x74>)
 8006b48:	429c      	cmp	r4, r3
 8006b4a:	bf08      	it	eq
 8006b4c:	68ec      	ldreq	r4, [r5, #12]
 8006b4e:	e7da      	b.n	8006b06 <_fflush_r+0x22>
 8006b50:	080073f8 	.word	0x080073f8
 8006b54:	08007418 	.word	0x08007418
 8006b58:	080073d8 	.word	0x080073d8

08006b5c <std>:
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	b510      	push	{r4, lr}
 8006b60:	4604      	mov	r4, r0
 8006b62:	e9c0 3300 	strd	r3, r3, [r0]
 8006b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b6a:	6083      	str	r3, [r0, #8]
 8006b6c:	8181      	strh	r1, [r0, #12]
 8006b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b70:	81c2      	strh	r2, [r0, #14]
 8006b72:	6183      	str	r3, [r0, #24]
 8006b74:	4619      	mov	r1, r3
 8006b76:	2208      	movs	r2, #8
 8006b78:	305c      	adds	r0, #92	; 0x5c
 8006b7a:	f7fe ffe3 	bl	8005b44 <memset>
 8006b7e:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <std+0x38>)
 8006b80:	6263      	str	r3, [r4, #36]	; 0x24
 8006b82:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <std+0x3c>)
 8006b84:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b86:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <std+0x40>)
 8006b88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b8a:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <std+0x44>)
 8006b8c:	6224      	str	r4, [r4, #32]
 8006b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8006b90:	bd10      	pop	{r4, pc}
 8006b92:	bf00      	nop
 8006b94:	08006f69 	.word	0x08006f69
 8006b98:	08006f8b 	.word	0x08006f8b
 8006b9c:	08006fc3 	.word	0x08006fc3
 8006ba0:	08006fe7 	.word	0x08006fe7

08006ba4 <_cleanup_r>:
 8006ba4:	4901      	ldr	r1, [pc, #4]	; (8006bac <_cleanup_r+0x8>)
 8006ba6:	f000 b8af 	b.w	8006d08 <_fwalk_reent>
 8006baa:	bf00      	nop
 8006bac:	08006ae5 	.word	0x08006ae5

08006bb0 <__sfmoreglue>:
 8006bb0:	b570      	push	{r4, r5, r6, lr}
 8006bb2:	2268      	movs	r2, #104	; 0x68
 8006bb4:	1e4d      	subs	r5, r1, #1
 8006bb6:	4355      	muls	r5, r2
 8006bb8:	460e      	mov	r6, r1
 8006bba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006bbe:	f7ff f975 	bl	8005eac <_malloc_r>
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	b140      	cbz	r0, 8006bd8 <__sfmoreglue+0x28>
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	e9c0 1600 	strd	r1, r6, [r0]
 8006bcc:	300c      	adds	r0, #12
 8006bce:	60a0      	str	r0, [r4, #8]
 8006bd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006bd4:	f7fe ffb6 	bl	8005b44 <memset>
 8006bd8:	4620      	mov	r0, r4
 8006bda:	bd70      	pop	{r4, r5, r6, pc}

08006bdc <__sfp_lock_acquire>:
 8006bdc:	4801      	ldr	r0, [pc, #4]	; (8006be4 <__sfp_lock_acquire+0x8>)
 8006bde:	f000 b8b3 	b.w	8006d48 <__retarget_lock_acquire_recursive>
 8006be2:	bf00      	nop
 8006be4:	200002a5 	.word	0x200002a5

08006be8 <__sfp_lock_release>:
 8006be8:	4801      	ldr	r0, [pc, #4]	; (8006bf0 <__sfp_lock_release+0x8>)
 8006bea:	f000 b8ae 	b.w	8006d4a <__retarget_lock_release_recursive>
 8006bee:	bf00      	nop
 8006bf0:	200002a5 	.word	0x200002a5

08006bf4 <__sinit_lock_acquire>:
 8006bf4:	4801      	ldr	r0, [pc, #4]	; (8006bfc <__sinit_lock_acquire+0x8>)
 8006bf6:	f000 b8a7 	b.w	8006d48 <__retarget_lock_acquire_recursive>
 8006bfa:	bf00      	nop
 8006bfc:	200002a6 	.word	0x200002a6

08006c00 <__sinit_lock_release>:
 8006c00:	4801      	ldr	r0, [pc, #4]	; (8006c08 <__sinit_lock_release+0x8>)
 8006c02:	f000 b8a2 	b.w	8006d4a <__retarget_lock_release_recursive>
 8006c06:	bf00      	nop
 8006c08:	200002a6 	.word	0x200002a6

08006c0c <__sinit>:
 8006c0c:	b510      	push	{r4, lr}
 8006c0e:	4604      	mov	r4, r0
 8006c10:	f7ff fff0 	bl	8006bf4 <__sinit_lock_acquire>
 8006c14:	69a3      	ldr	r3, [r4, #24]
 8006c16:	b11b      	cbz	r3, 8006c20 <__sinit+0x14>
 8006c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c1c:	f7ff bff0 	b.w	8006c00 <__sinit_lock_release>
 8006c20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c24:	6523      	str	r3, [r4, #80]	; 0x50
 8006c26:	4b13      	ldr	r3, [pc, #76]	; (8006c74 <__sinit+0x68>)
 8006c28:	4a13      	ldr	r2, [pc, #76]	; (8006c78 <__sinit+0x6c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c2e:	42a3      	cmp	r3, r4
 8006c30:	bf04      	itt	eq
 8006c32:	2301      	moveq	r3, #1
 8006c34:	61a3      	streq	r3, [r4, #24]
 8006c36:	4620      	mov	r0, r4
 8006c38:	f000 f820 	bl	8006c7c <__sfp>
 8006c3c:	6060      	str	r0, [r4, #4]
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 f81c 	bl	8006c7c <__sfp>
 8006c44:	60a0      	str	r0, [r4, #8]
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 f818 	bl	8006c7c <__sfp>
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	60e0      	str	r0, [r4, #12]
 8006c50:	2104      	movs	r1, #4
 8006c52:	6860      	ldr	r0, [r4, #4]
 8006c54:	f7ff ff82 	bl	8006b5c <std>
 8006c58:	68a0      	ldr	r0, [r4, #8]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	2109      	movs	r1, #9
 8006c5e:	f7ff ff7d 	bl	8006b5c <std>
 8006c62:	68e0      	ldr	r0, [r4, #12]
 8006c64:	2202      	movs	r2, #2
 8006c66:	2112      	movs	r1, #18
 8006c68:	f7ff ff78 	bl	8006b5c <std>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	61a3      	str	r3, [r4, #24]
 8006c70:	e7d2      	b.n	8006c18 <__sinit+0xc>
 8006c72:	bf00      	nop
 8006c74:	080071f0 	.word	0x080071f0
 8006c78:	08006ba5 	.word	0x08006ba5

08006c7c <__sfp>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	4607      	mov	r7, r0
 8006c80:	f7ff ffac 	bl	8006bdc <__sfp_lock_acquire>
 8006c84:	4b1e      	ldr	r3, [pc, #120]	; (8006d00 <__sfp+0x84>)
 8006c86:	681e      	ldr	r6, [r3, #0]
 8006c88:	69b3      	ldr	r3, [r6, #24]
 8006c8a:	b913      	cbnz	r3, 8006c92 <__sfp+0x16>
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	f7ff ffbd 	bl	8006c0c <__sinit>
 8006c92:	3648      	adds	r6, #72	; 0x48
 8006c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	d503      	bpl.n	8006ca4 <__sfp+0x28>
 8006c9c:	6833      	ldr	r3, [r6, #0]
 8006c9e:	b30b      	cbz	r3, 8006ce4 <__sfp+0x68>
 8006ca0:	6836      	ldr	r6, [r6, #0]
 8006ca2:	e7f7      	b.n	8006c94 <__sfp+0x18>
 8006ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ca8:	b9d5      	cbnz	r5, 8006ce0 <__sfp+0x64>
 8006caa:	4b16      	ldr	r3, [pc, #88]	; (8006d04 <__sfp+0x88>)
 8006cac:	60e3      	str	r3, [r4, #12]
 8006cae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cb2:	6665      	str	r5, [r4, #100]	; 0x64
 8006cb4:	f000 f847 	bl	8006d46 <__retarget_lock_init_recursive>
 8006cb8:	f7ff ff96 	bl	8006be8 <__sfp_lock_release>
 8006cbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006cc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006cc4:	6025      	str	r5, [r4, #0]
 8006cc6:	61a5      	str	r5, [r4, #24]
 8006cc8:	2208      	movs	r2, #8
 8006cca:	4629      	mov	r1, r5
 8006ccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cd0:	f7fe ff38 	bl	8005b44 <memset>
 8006cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cdc:	4620      	mov	r0, r4
 8006cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce0:	3468      	adds	r4, #104	; 0x68
 8006ce2:	e7d9      	b.n	8006c98 <__sfp+0x1c>
 8006ce4:	2104      	movs	r1, #4
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	f7ff ff62 	bl	8006bb0 <__sfmoreglue>
 8006cec:	4604      	mov	r4, r0
 8006cee:	6030      	str	r0, [r6, #0]
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d1d5      	bne.n	8006ca0 <__sfp+0x24>
 8006cf4:	f7ff ff78 	bl	8006be8 <__sfp_lock_release>
 8006cf8:	230c      	movs	r3, #12
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	e7ee      	b.n	8006cdc <__sfp+0x60>
 8006cfe:	bf00      	nop
 8006d00:	080071f0 	.word	0x080071f0
 8006d04:	ffff0001 	.word	0xffff0001

08006d08 <_fwalk_reent>:
 8006d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d0c:	4606      	mov	r6, r0
 8006d0e:	4688      	mov	r8, r1
 8006d10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d14:	2700      	movs	r7, #0
 8006d16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d1a:	f1b9 0901 	subs.w	r9, r9, #1
 8006d1e:	d505      	bpl.n	8006d2c <_fwalk_reent+0x24>
 8006d20:	6824      	ldr	r4, [r4, #0]
 8006d22:	2c00      	cmp	r4, #0
 8006d24:	d1f7      	bne.n	8006d16 <_fwalk_reent+0xe>
 8006d26:	4638      	mov	r0, r7
 8006d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d2c:	89ab      	ldrh	r3, [r5, #12]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d907      	bls.n	8006d42 <_fwalk_reent+0x3a>
 8006d32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d36:	3301      	adds	r3, #1
 8006d38:	d003      	beq.n	8006d42 <_fwalk_reent+0x3a>
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	47c0      	blx	r8
 8006d40:	4307      	orrs	r7, r0
 8006d42:	3568      	adds	r5, #104	; 0x68
 8006d44:	e7e9      	b.n	8006d1a <_fwalk_reent+0x12>

08006d46 <__retarget_lock_init_recursive>:
 8006d46:	4770      	bx	lr

08006d48 <__retarget_lock_acquire_recursive>:
 8006d48:	4770      	bx	lr

08006d4a <__retarget_lock_release_recursive>:
 8006d4a:	4770      	bx	lr

08006d4c <__swhatbuf_r>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	460e      	mov	r6, r1
 8006d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d54:	2900      	cmp	r1, #0
 8006d56:	b096      	sub	sp, #88	; 0x58
 8006d58:	4614      	mov	r4, r2
 8006d5a:	461d      	mov	r5, r3
 8006d5c:	da08      	bge.n	8006d70 <__swhatbuf_r+0x24>
 8006d5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	602a      	str	r2, [r5, #0]
 8006d66:	061a      	lsls	r2, r3, #24
 8006d68:	d410      	bmi.n	8006d8c <__swhatbuf_r+0x40>
 8006d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d6e:	e00e      	b.n	8006d8e <__swhatbuf_r+0x42>
 8006d70:	466a      	mov	r2, sp
 8006d72:	f000 f95f 	bl	8007034 <_fstat_r>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	dbf1      	blt.n	8006d5e <__swhatbuf_r+0x12>
 8006d7a:	9a01      	ldr	r2, [sp, #4]
 8006d7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d84:	425a      	negs	r2, r3
 8006d86:	415a      	adcs	r2, r3
 8006d88:	602a      	str	r2, [r5, #0]
 8006d8a:	e7ee      	b.n	8006d6a <__swhatbuf_r+0x1e>
 8006d8c:	2340      	movs	r3, #64	; 0x40
 8006d8e:	2000      	movs	r0, #0
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	b016      	add	sp, #88	; 0x58
 8006d94:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d98 <__smakebuf_r>:
 8006d98:	898b      	ldrh	r3, [r1, #12]
 8006d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d9c:	079d      	lsls	r5, r3, #30
 8006d9e:	4606      	mov	r6, r0
 8006da0:	460c      	mov	r4, r1
 8006da2:	d507      	bpl.n	8006db4 <__smakebuf_r+0x1c>
 8006da4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	6123      	str	r3, [r4, #16]
 8006dac:	2301      	movs	r3, #1
 8006dae:	6163      	str	r3, [r4, #20]
 8006db0:	b002      	add	sp, #8
 8006db2:	bd70      	pop	{r4, r5, r6, pc}
 8006db4:	ab01      	add	r3, sp, #4
 8006db6:	466a      	mov	r2, sp
 8006db8:	f7ff ffc8 	bl	8006d4c <__swhatbuf_r>
 8006dbc:	9900      	ldr	r1, [sp, #0]
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f7ff f873 	bl	8005eac <_malloc_r>
 8006dc6:	b948      	cbnz	r0, 8006ddc <__smakebuf_r+0x44>
 8006dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dcc:	059a      	lsls	r2, r3, #22
 8006dce:	d4ef      	bmi.n	8006db0 <__smakebuf_r+0x18>
 8006dd0:	f023 0303 	bic.w	r3, r3, #3
 8006dd4:	f043 0302 	orr.w	r3, r3, #2
 8006dd8:	81a3      	strh	r3, [r4, #12]
 8006dda:	e7e3      	b.n	8006da4 <__smakebuf_r+0xc>
 8006ddc:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <__smakebuf_r+0x7c>)
 8006dde:	62b3      	str	r3, [r6, #40]	; 0x28
 8006de0:	89a3      	ldrh	r3, [r4, #12]
 8006de2:	6020      	str	r0, [r4, #0]
 8006de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de8:	81a3      	strh	r3, [r4, #12]
 8006dea:	9b00      	ldr	r3, [sp, #0]
 8006dec:	6163      	str	r3, [r4, #20]
 8006dee:	9b01      	ldr	r3, [sp, #4]
 8006df0:	6120      	str	r0, [r4, #16]
 8006df2:	b15b      	cbz	r3, 8006e0c <__smakebuf_r+0x74>
 8006df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006df8:	4630      	mov	r0, r6
 8006dfa:	f000 f92d 	bl	8007058 <_isatty_r>
 8006dfe:	b128      	cbz	r0, 8006e0c <__smakebuf_r+0x74>
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	f023 0303 	bic.w	r3, r3, #3
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	81a3      	strh	r3, [r4, #12]
 8006e0c:	89a0      	ldrh	r0, [r4, #12]
 8006e0e:	4305      	orrs	r5, r0
 8006e10:	81a5      	strh	r5, [r4, #12]
 8006e12:	e7cd      	b.n	8006db0 <__smakebuf_r+0x18>
 8006e14:	08006ba5 	.word	0x08006ba5

08006e18 <memcpy>:
 8006e18:	440a      	add	r2, r1
 8006e1a:	4291      	cmp	r1, r2
 8006e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e20:	d100      	bne.n	8006e24 <memcpy+0xc>
 8006e22:	4770      	bx	lr
 8006e24:	b510      	push	{r4, lr}
 8006e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e2e:	4291      	cmp	r1, r2
 8006e30:	d1f9      	bne.n	8006e26 <memcpy+0xe>
 8006e32:	bd10      	pop	{r4, pc}

08006e34 <memmove>:
 8006e34:	4288      	cmp	r0, r1
 8006e36:	b510      	push	{r4, lr}
 8006e38:	eb01 0402 	add.w	r4, r1, r2
 8006e3c:	d902      	bls.n	8006e44 <memmove+0x10>
 8006e3e:	4284      	cmp	r4, r0
 8006e40:	4623      	mov	r3, r4
 8006e42:	d807      	bhi.n	8006e54 <memmove+0x20>
 8006e44:	1e43      	subs	r3, r0, #1
 8006e46:	42a1      	cmp	r1, r4
 8006e48:	d008      	beq.n	8006e5c <memmove+0x28>
 8006e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e52:	e7f8      	b.n	8006e46 <memmove+0x12>
 8006e54:	4402      	add	r2, r0
 8006e56:	4601      	mov	r1, r0
 8006e58:	428a      	cmp	r2, r1
 8006e5a:	d100      	bne.n	8006e5e <memmove+0x2a>
 8006e5c:	bd10      	pop	{r4, pc}
 8006e5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e66:	e7f7      	b.n	8006e58 <memmove+0x24>

08006e68 <__malloc_lock>:
 8006e68:	4801      	ldr	r0, [pc, #4]	; (8006e70 <__malloc_lock+0x8>)
 8006e6a:	f7ff bf6d 	b.w	8006d48 <__retarget_lock_acquire_recursive>
 8006e6e:	bf00      	nop
 8006e70:	200002a4 	.word	0x200002a4

08006e74 <__malloc_unlock>:
 8006e74:	4801      	ldr	r0, [pc, #4]	; (8006e7c <__malloc_unlock+0x8>)
 8006e76:	f7ff bf68 	b.w	8006d4a <__retarget_lock_release_recursive>
 8006e7a:	bf00      	nop
 8006e7c:	200002a4 	.word	0x200002a4

08006e80 <_realloc_r>:
 8006e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e84:	4680      	mov	r8, r0
 8006e86:	4614      	mov	r4, r2
 8006e88:	460e      	mov	r6, r1
 8006e8a:	b921      	cbnz	r1, 8006e96 <_realloc_r+0x16>
 8006e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e90:	4611      	mov	r1, r2
 8006e92:	f7ff b80b 	b.w	8005eac <_malloc_r>
 8006e96:	b92a      	cbnz	r2, 8006ea4 <_realloc_r+0x24>
 8006e98:	f7fe ff9c 	bl	8005dd4 <_free_r>
 8006e9c:	4625      	mov	r5, r4
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea4:	f000 f8fa 	bl	800709c <_malloc_usable_size_r>
 8006ea8:	4284      	cmp	r4, r0
 8006eaa:	4607      	mov	r7, r0
 8006eac:	d802      	bhi.n	8006eb4 <_realloc_r+0x34>
 8006eae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006eb2:	d812      	bhi.n	8006eda <_realloc_r+0x5a>
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	f7fe fff8 	bl	8005eac <_malloc_r>
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d0ed      	beq.n	8006e9e <_realloc_r+0x1e>
 8006ec2:	42bc      	cmp	r4, r7
 8006ec4:	4622      	mov	r2, r4
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	bf28      	it	cs
 8006eca:	463a      	movcs	r2, r7
 8006ecc:	f7ff ffa4 	bl	8006e18 <memcpy>
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	f7fe ff7e 	bl	8005dd4 <_free_r>
 8006ed8:	e7e1      	b.n	8006e9e <_realloc_r+0x1e>
 8006eda:	4635      	mov	r5, r6
 8006edc:	e7df      	b.n	8006e9e <_realloc_r+0x1e>

08006ede <_raise_r>:
 8006ede:	291f      	cmp	r1, #31
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	460d      	mov	r5, r1
 8006ee6:	d904      	bls.n	8006ef2 <_raise_r+0x14>
 8006ee8:	2316      	movs	r3, #22
 8006eea:	6003      	str	r3, [r0, #0]
 8006eec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef0:	bd38      	pop	{r3, r4, r5, pc}
 8006ef2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ef4:	b112      	cbz	r2, 8006efc <_raise_r+0x1e>
 8006ef6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006efa:	b94b      	cbnz	r3, 8006f10 <_raise_r+0x32>
 8006efc:	4620      	mov	r0, r4
 8006efe:	f000 f831 	bl	8006f64 <_getpid_r>
 8006f02:	462a      	mov	r2, r5
 8006f04:	4601      	mov	r1, r0
 8006f06:	4620      	mov	r0, r4
 8006f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f0c:	f000 b818 	b.w	8006f40 <_kill_r>
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d00a      	beq.n	8006f2a <_raise_r+0x4c>
 8006f14:	1c59      	adds	r1, r3, #1
 8006f16:	d103      	bne.n	8006f20 <_raise_r+0x42>
 8006f18:	2316      	movs	r3, #22
 8006f1a:	6003      	str	r3, [r0, #0]
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	e7e7      	b.n	8006ef0 <_raise_r+0x12>
 8006f20:	2400      	movs	r4, #0
 8006f22:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f26:	4628      	mov	r0, r5
 8006f28:	4798      	blx	r3
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	e7e0      	b.n	8006ef0 <_raise_r+0x12>
	...

08006f30 <raise>:
 8006f30:	4b02      	ldr	r3, [pc, #8]	; (8006f3c <raise+0xc>)
 8006f32:	4601      	mov	r1, r0
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	f7ff bfd2 	b.w	8006ede <_raise_r>
 8006f3a:	bf00      	nop
 8006f3c:	200000a4 	.word	0x200000a4

08006f40 <_kill_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4d07      	ldr	r5, [pc, #28]	; (8006f60 <_kill_r+0x20>)
 8006f44:	2300      	movs	r3, #0
 8006f46:	4604      	mov	r4, r0
 8006f48:	4608      	mov	r0, r1
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	602b      	str	r3, [r5, #0]
 8006f4e:	f7fa f833 	bl	8000fb8 <_kill>
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	d102      	bne.n	8006f5c <_kill_r+0x1c>
 8006f56:	682b      	ldr	r3, [r5, #0]
 8006f58:	b103      	cbz	r3, 8006f5c <_kill_r+0x1c>
 8006f5a:	6023      	str	r3, [r4, #0]
 8006f5c:	bd38      	pop	{r3, r4, r5, pc}
 8006f5e:	bf00      	nop
 8006f60:	200002a8 	.word	0x200002a8

08006f64 <_getpid_r>:
 8006f64:	f7fa b820 	b.w	8000fa8 <_getpid>

08006f68 <__sread>:
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f70:	f000 f89c 	bl	80070ac <_read_r>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	bfab      	itete	ge
 8006f78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f7c:	181b      	addge	r3, r3, r0
 8006f7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f82:	bfac      	ite	ge
 8006f84:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f86:	81a3      	strhlt	r3, [r4, #12]
 8006f88:	bd10      	pop	{r4, pc}

08006f8a <__swrite>:
 8006f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8e:	461f      	mov	r7, r3
 8006f90:	898b      	ldrh	r3, [r1, #12]
 8006f92:	05db      	lsls	r3, r3, #23
 8006f94:	4605      	mov	r5, r0
 8006f96:	460c      	mov	r4, r1
 8006f98:	4616      	mov	r6, r2
 8006f9a:	d505      	bpl.n	8006fa8 <__swrite+0x1e>
 8006f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f000 f868 	bl	8007078 <_lseek_r>
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fb2:	81a3      	strh	r3, [r4, #12]
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	4628      	mov	r0, r5
 8006fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbe:	f000 b817 	b.w	8006ff0 <_write_r>

08006fc2 <__sseek>:
 8006fc2:	b510      	push	{r4, lr}
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fca:	f000 f855 	bl	8007078 <_lseek_r>
 8006fce:	1c43      	adds	r3, r0, #1
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	bf15      	itete	ne
 8006fd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fde:	81a3      	strheq	r3, [r4, #12]
 8006fe0:	bf18      	it	ne
 8006fe2:	81a3      	strhne	r3, [r4, #12]
 8006fe4:	bd10      	pop	{r4, pc}

08006fe6 <__sclose>:
 8006fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fea:	f000 b813 	b.w	8007014 <_close_r>
	...

08006ff0 <_write_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d07      	ldr	r5, [pc, #28]	; (8007010 <_write_r+0x20>)
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	4608      	mov	r0, r1
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	602a      	str	r2, [r5, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	f7fa f811 	bl	8001026 <_write>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_write_r+0x1e>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_write_r+0x1e>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	200002a8 	.word	0x200002a8

08007014 <_close_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d06      	ldr	r5, [pc, #24]	; (8007030 <_close_r+0x1c>)
 8007018:	2300      	movs	r3, #0
 800701a:	4604      	mov	r4, r0
 800701c:	4608      	mov	r0, r1
 800701e:	602b      	str	r3, [r5, #0]
 8007020:	f7fa f81d 	bl	800105e <_close>
 8007024:	1c43      	adds	r3, r0, #1
 8007026:	d102      	bne.n	800702e <_close_r+0x1a>
 8007028:	682b      	ldr	r3, [r5, #0]
 800702a:	b103      	cbz	r3, 800702e <_close_r+0x1a>
 800702c:	6023      	str	r3, [r4, #0]
 800702e:	bd38      	pop	{r3, r4, r5, pc}
 8007030:	200002a8 	.word	0x200002a8

08007034 <_fstat_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4d07      	ldr	r5, [pc, #28]	; (8007054 <_fstat_r+0x20>)
 8007038:	2300      	movs	r3, #0
 800703a:	4604      	mov	r4, r0
 800703c:	4608      	mov	r0, r1
 800703e:	4611      	mov	r1, r2
 8007040:	602b      	str	r3, [r5, #0]
 8007042:	f7fa f818 	bl	8001076 <_fstat>
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	d102      	bne.n	8007050 <_fstat_r+0x1c>
 800704a:	682b      	ldr	r3, [r5, #0]
 800704c:	b103      	cbz	r3, 8007050 <_fstat_r+0x1c>
 800704e:	6023      	str	r3, [r4, #0]
 8007050:	bd38      	pop	{r3, r4, r5, pc}
 8007052:	bf00      	nop
 8007054:	200002a8 	.word	0x200002a8

08007058 <_isatty_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4d06      	ldr	r5, [pc, #24]	; (8007074 <_isatty_r+0x1c>)
 800705c:	2300      	movs	r3, #0
 800705e:	4604      	mov	r4, r0
 8007060:	4608      	mov	r0, r1
 8007062:	602b      	str	r3, [r5, #0]
 8007064:	f7fa f817 	bl	8001096 <_isatty>
 8007068:	1c43      	adds	r3, r0, #1
 800706a:	d102      	bne.n	8007072 <_isatty_r+0x1a>
 800706c:	682b      	ldr	r3, [r5, #0]
 800706e:	b103      	cbz	r3, 8007072 <_isatty_r+0x1a>
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	bd38      	pop	{r3, r4, r5, pc}
 8007074:	200002a8 	.word	0x200002a8

08007078 <_lseek_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4d07      	ldr	r5, [pc, #28]	; (8007098 <_lseek_r+0x20>)
 800707c:	4604      	mov	r4, r0
 800707e:	4608      	mov	r0, r1
 8007080:	4611      	mov	r1, r2
 8007082:	2200      	movs	r2, #0
 8007084:	602a      	str	r2, [r5, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	f7fa f810 	bl	80010ac <_lseek>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d102      	bne.n	8007096 <_lseek_r+0x1e>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	b103      	cbz	r3, 8007096 <_lseek_r+0x1e>
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	200002a8 	.word	0x200002a8

0800709c <_malloc_usable_size_r>:
 800709c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070a0:	1f18      	subs	r0, r3, #4
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	bfbc      	itt	lt
 80070a6:	580b      	ldrlt	r3, [r1, r0]
 80070a8:	18c0      	addlt	r0, r0, r3
 80070aa:	4770      	bx	lr

080070ac <_read_r>:
 80070ac:	b538      	push	{r3, r4, r5, lr}
 80070ae:	4d07      	ldr	r5, [pc, #28]	; (80070cc <_read_r+0x20>)
 80070b0:	4604      	mov	r4, r0
 80070b2:	4608      	mov	r0, r1
 80070b4:	4611      	mov	r1, r2
 80070b6:	2200      	movs	r2, #0
 80070b8:	602a      	str	r2, [r5, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	f7f9 ff96 	bl	8000fec <_read>
 80070c0:	1c43      	adds	r3, r0, #1
 80070c2:	d102      	bne.n	80070ca <_read_r+0x1e>
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	b103      	cbz	r3, 80070ca <_read_r+0x1e>
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	200002a8 	.word	0x200002a8

080070d0 <_init>:
 80070d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d2:	bf00      	nop
 80070d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d6:	bc08      	pop	{r3}
 80070d8:	469e      	mov	lr, r3
 80070da:	4770      	bx	lr

080070dc <_fini>:
 80070dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070de:	bf00      	nop
 80070e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e2:	bc08      	pop	{r3}
 80070e4:	469e      	mov	lr, r3
 80070e6:	4770      	bx	lr
