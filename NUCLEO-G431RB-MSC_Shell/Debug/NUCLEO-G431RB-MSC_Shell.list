
NUCLEO-G431RB-MSC_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c548  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800c728  0800c728  0001c728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd50  0800cd50  00020274  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd50  0800cd50  0001cd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd58  0800cd58  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd58  0800cd58  0001cd58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd5c  0800cd5c  0001cd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800cd60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000274  0800cfd4  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  0800cfd4  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019db0  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd4  00000000  00000000  0003a054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0003ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001460  00000000  00000000  0003e3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214f5  00000000  00000000  0003f800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178a6  00000000  00000000  00060cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcdbb  00000000  00000000  0007859b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155356  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ff0  00000000  00000000  001553a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000274 	.word	0x20000274
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c710 	.word	0x0800c710

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000278 	.word	0x20000278
 800021c:	0800c710 	.word	0x0800c710

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	0000      	movs	r0, r0
	...

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0a8      	sub	sp, #160	; 0xa0
 8000fc4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	char*		token;
	int 		newCmdReady = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int 		alpha = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int 		sortie_ADC_numerique = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int 		moyenne_sortie_ADC_numerique =0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	673b      	str	r3, [r7, #112]	; 0x70
	float 		tension_sortie_hacheur = 0;
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
	float 		courant = 0;
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f001 f946 	bl	800227e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 fb13 	bl	800161c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f000 fd3b 	bl	8001a70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ffa:	f000 fd0f 	bl	8001a1c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ffe:	f000 fcc1 	bl	8001984 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001002:	f000 fbd1 	bl	80017a8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001006:	f000 fb55 	bl	80016b4 <MX_ADC1_Init>
  MX_TIM2_Init();
 800100a:	f000 fc6d 	bl	80018e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // POUR LE SHELL
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2224      	movs	r2, #36	; 0x24
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f008 fb1d 	bl	8009654 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 800101a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101e:	2240      	movs	r2, #64	; 0x40
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f008 fb16 	bl	8009654 <memset>
 8001028:	4bb4      	ldr	r3, [pc, #720]	; (80012fc <main+0x33c>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 800102e:	2240      	movs	r2, #64	; 0x40
 8001030:	2100      	movs	r1, #0
 8001032:	48b3      	ldr	r0, [pc, #716]	; (8001300 <main+0x340>)
 8001034:	f008 fb0e 	bl	8009654 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001038:	2201      	movs	r2, #1
 800103a:	49b0      	ldr	r1, [pc, #704]	; (80012fc <main+0x33c>)
 800103c:	48b1      	ldr	r0, [pc, #708]	; (8001304 <main+0x344>)
 800103e:	f006 fb7b 	bl	8007738 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8001042:	200a      	movs	r0, #10
 8001044:	f001 f952 	bl	80022ec <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	2266      	movs	r2, #102	; 0x66
 800104e:	49ae      	ldr	r1, [pc, #696]	; (8001308 <main+0x348>)
 8001050:	48ac      	ldr	r0, [pc, #688]	; (8001304 <main+0x344>)
 8001052:	f006 fada 	bl	800760a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	2218      	movs	r2, #24
 800105c:	49ab      	ldr	r1, [pc, #684]	; (800130c <main+0x34c>)
 800105e:	48a9      	ldr	r0, [pc, #676]	; (8001304 <main+0x344>)
 8001060:	f006 fad3 	bl	800760a <HAL_UART_Transmit>
 // FIN POUR LE SHELL

 // init PWM

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001064:	2100      	movs	r1, #0
 8001066:	48aa      	ldr	r0, [pc, #680]	; (8001310 <main+0x350>)
 8001068:	f004 fe4c 	bl	8005d04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800106c:	2104      	movs	r1, #4
 800106e:	48a8      	ldr	r0, [pc, #672]	; (8001310 <main+0x350>)
 8001070:	f004 fe48 	bl	8005d04 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001074:	2100      	movs	r1, #0
 8001076:	48a6      	ldr	r0, [pc, #664]	; (8001310 <main+0x350>)
 8001078:	f005 ffd8 	bl	800702c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800107c:	2104      	movs	r1, #4
 800107e:	48a4      	ldr	r0, [pc, #656]	; (8001310 <main+0x350>)
 8001080:	f005 ffd4 	bl	800702c <HAL_TIMEx_PWMN_Start>

 // initialisation de l'ADC pour la mesure du courant sur la phase RED

	if(HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED))
 8001084:	217f      	movs	r1, #127	; 0x7f
 8001086:	48a3      	ldr	r0, [pc, #652]	; (8001314 <main+0x354>)
 8001088:	f002 fdca 	bl	8003c20 <HAL_ADCEx_Calibration_Start>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <main+0xd8>
		printf("probleme avec la calibration de l'ADC \r\n");
 8001092:	48a1      	ldr	r0, [pc, #644]	; (8001318 <main+0x358>)
 8001094:	f008 ffbe 	bl	800a014 <puts>

	if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, ADC_Buffer, ADC_BUF_SIZE))
 8001098:	2214      	movs	r2, #20
 800109a:	49a0      	ldr	r1, [pc, #640]	; (800131c <main+0x35c>)
 800109c:	489d      	ldr	r0, [pc, #628]	; (8001314 <main+0x354>)
 800109e:	f001 fd3b 	bl	8002b18 <HAL_ADC_Start_DMA>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <main+0xee>
		printf("probleme avec le demarrage du DMA \r\n");
 80010a8:	489d      	ldr	r0, [pc, #628]	; (8001320 <main+0x360>)
 80010aa:	f008 ffb3 	bl	800a014 <puts>

	if(HAL_OK != HAL_TIM_Base_Start(&htim2))
 80010ae:	489d      	ldr	r0, [pc, #628]	; (8001324 <main+0x364>)
 80010b0:	f004 fd04 	bl	8005abc <HAL_TIM_Base_Start>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <main+0x100>
		printf("probleme avec l'initialisation du Timer 2 \r\n");
 80010ba:	489b      	ldr	r0, [pc, #620]	; (8001328 <main+0x368>)
 80010bc:	f008 ffaa 	bl	800a014 <puts>
	{

/******************** BEGIN SHELL **************************/

		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 80010c0:	4b9a      	ldr	r3, [pc, #616]	; (800132c <main+0x36c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d064      	beq.n	8001192 <main+0x1d2>
			switch(uartRxBuffer[0]){
 80010c8:	4b8c      	ldr	r3, [pc, #560]	; (80012fc <main+0x33c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b0d      	cmp	r3, #13
 80010ce:	d002      	beq.n	80010d6 <main+0x116>
 80010d0:	2b7f      	cmp	r3, #127	; 0x7f
 80010d2:	d037      	beq.n	8001144 <main+0x184>
 80010d4:	e048      	b.n	8001168 <main+0x1a8>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	2203      	movs	r2, #3
 80010dc:	4994      	ldr	r1, [pc, #592]	; (8001330 <main+0x370>)
 80010de:	4889      	ldr	r0, [pc, #548]	; (8001304 <main+0x344>)
 80010e0:	f006 fa93 	bl	800760a <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 80010e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010ec:	4413      	add	r3, r2
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
				argc = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				token = strtok(cmdBuffer, " ");
 80010f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fc:	498d      	ldr	r1, [pc, #564]	; (8001334 <main+0x374>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f008 ffc4 	bl	800a08c <strtok>
 8001104:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
				while(token!=NULL){
 8001108:	e011      	b.n	800112e <main+0x16e>
					argv[argc++] = token;
 800110a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	3398      	adds	r3, #152	; 0x98
 8001118:	443b      	add	r3, r7
 800111a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800111e:	f843 2c94 	str.w	r2, [r3, #-148]
					token = strtok(NULL, " ");
 8001122:	4984      	ldr	r1, [pc, #528]	; (8001334 <main+0x374>)
 8001124:	2000      	movs	r0, #0
 8001126:	f008 ffb1 	bl	800a08c <strtok>
 800112a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
				while(token!=NULL){
 800112e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1e9      	bne.n	800110a <main+0x14a>
				}
				idx_cmd = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				newCmdReady = 1;
 800113c:	2301      	movs	r3, #1
 800113e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				break;
 8001142:	e023      	b.n	800118c <main+0x1cc>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 8001144:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001148:	1e5a      	subs	r2, r3, #1
 800114a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800114e:	3398      	adds	r3, #152	; 0x98
 8001150:	443b      	add	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	f803 2c70 	strb.w	r2, [r3, #-112]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
 800115c:	2201      	movs	r2, #1
 800115e:	4967      	ldr	r1, [pc, #412]	; (80012fc <main+0x33c>)
 8001160:	4868      	ldr	r0, [pc, #416]	; (8001304 <main+0x344>)
 8001162:	f006 fa52 	bl	800760a <HAL_UART_Transmit>
				break;
 8001166:	e011      	b.n	800118c <main+0x1cc>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001168:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001172:	4a62      	ldr	r2, [pc, #392]	; (80012fc <main+0x33c>)
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	3398      	adds	r3, #152	; 0x98
 8001178:	443b      	add	r3, r7
 800117a:	f803 2c70 	strb.w	r2, [r3, #-112]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	2201      	movs	r2, #1
 8001184:	495d      	ldr	r1, [pc, #372]	; (80012fc <main+0x33c>)
 8001186:	485f      	ldr	r0, [pc, #380]	; (8001304 <main+0x344>)
 8001188:	f006 fa3f 	bl	800760a <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 800118c:	4b67      	ldr	r3, [pc, #412]	; (800132c <main+0x36c>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8001192:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8207 	beq.w	80015aa <main+0x5ea>
			if(strcmp(argv[0],"set")==0){
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4966      	ldr	r1, [pc, #408]	; (8001338 <main+0x378>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f83d 	bl	8000220 <strcmp>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d133      	bne.n	8001214 <main+0x254>
				if(strcmp(argv[1],"PA5")==0){
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	4963      	ldr	r1, [pc, #396]	; (800133c <main+0x37c>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f835 	bl	8000220 <strcmp>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d123      	bne.n	8001204 <main+0x244>
					HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4618      	mov	r0, r3
 80011c0:	f008 fa1a 	bl	80095f8 <atoi>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	2120      	movs	r1, #32
 80011cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d0:	f003 fbf2 	bl	80049b8 <HAL_GPIO_WritePin>
					stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f008 fa0e 	bl	80095f8 <atoi>
 80011dc:	4603      	mov	r3, r0
 80011de:	4a58      	ldr	r2, [pc, #352]	; (8001340 <main+0x380>)
 80011e0:	2140      	movs	r1, #64	; 0x40
 80011e2:	4847      	ldr	r0, [pc, #284]	; (8001300 <main+0x340>)
 80011e4:	f008 ff1e 	bl	800a024 <sniprintf>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b55      	ldr	r3, [pc, #340]	; (8001344 <main+0x384>)
 80011ee:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 80011f0:	4b54      	ldr	r3, [pc, #336]	; (8001344 <main+0x384>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	4941      	ldr	r1, [pc, #260]	; (8001300 <main+0x340>)
 80011fc:	4841      	ldr	r0, [pc, #260]	; (8001304 <main+0x344>)
 80011fe:	f006 fa04 	bl	800760a <HAL_UART_Transmit>
 8001202:	e1c8      	b.n	8001596 <main+0x5d6>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	2214      	movs	r2, #20
 800120a:	494f      	ldr	r1, [pc, #316]	; (8001348 <main+0x388>)
 800120c:	483d      	ldr	r0, [pc, #244]	; (8001304 <main+0x344>)
 800120e:	f006 f9fc 	bl	800760a <HAL_UART_Transmit>
 8001212:	e1c0      	b.n	8001596 <main+0x5d6>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	494d      	ldr	r1, [pc, #308]	; (800134c <main+0x38c>)
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f801 	bl	8000220 <strcmp>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d107      	bne.n	8001234 <main+0x274>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	2214      	movs	r2, #20
 800122a:	4947      	ldr	r1, [pc, #284]	; (8001348 <main+0x388>)
 800122c:	4835      	ldr	r0, [pc, #212]	; (8001304 <main+0x344>)
 800122e:	f006 f9ec 	bl	800760a <HAL_UART_Transmit>
 8001232:	e1b0      	b.n	8001596 <main+0x5d6>
			}
			else if (strcmp(argv[0],"help")==0){
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4946      	ldr	r1, [pc, #280]	; (8001350 <main+0x390>)
 8001238:	4618      	mov	r0, r3
 800123a:	f7fe fff1 	bl	8000220 <strcmp>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d120      	bne.n	8001286 <main+0x2c6>
				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE," set PA5\r\n get\r\n start\r\n stop\r\n pinout\r\n");
 8001244:	4a43      	ldr	r2, [pc, #268]	; (8001354 <main+0x394>)
 8001246:	2140      	movs	r1, #64	; 0x40
 8001248:	482d      	ldr	r0, [pc, #180]	; (8001300 <main+0x340>)
 800124a:	f008 feeb 	bl	800a024 <sniprintf>
 800124e:	4603      	mov	r3, r0
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <main+0x384>)
 8001254:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <main+0x384>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b29a      	uxth	r2, r3
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	4927      	ldr	r1, [pc, #156]	; (8001300 <main+0x340>)
 8001262:	4828      	ldr	r0, [pc, #160]	; (8001304 <main+0x344>)
 8001264:	f006 f9d1 	bl	800760a <HAL_UART_Transmit>
				for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 8001268:	2300      	movs	r3, #0
 800126a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800126c:	e007      	b.n	800127e <main+0x2be>
					uartTxBuffer[i]=0;
 800126e:	4a24      	ldr	r2, [pc, #144]	; (8001300 <main+0x340>)
 8001270:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001272:	4413      	add	r3, r2
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
				for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 8001278:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800127a:	3301      	adds	r3, #1
 800127c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800127e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001280:	2b3f      	cmp	r3, #63	; 0x3f
 8001282:	ddf4      	ble.n	800126e <main+0x2ae>
 8001284:	e187      	b.n	8001596 <main+0x5d6>
				}

			}
			else if (strcmp(argv[0],"pinout")==0){
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4933      	ldr	r1, [pc, #204]	; (8001358 <main+0x398>)
 800128a:	4618      	mov	r0, r3
 800128c:	f7fe ffc8 	bl	8000220 <strcmp>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d166      	bne.n	8001364 <main+0x3a4>
				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE, " PA2:UART TX\r\n PA3:UART RX\r\n PA5:LED\r\n PA8:TIM1_CH1\r\n");
 8001296:	4a31      	ldr	r2, [pc, #196]	; (800135c <main+0x39c>)
 8001298:	2140      	movs	r1, #64	; 0x40
 800129a:	4819      	ldr	r0, [pc, #100]	; (8001300 <main+0x340>)
 800129c:	f008 fec2 	bl	800a024 <sniprintf>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <main+0x384>)
 80012a6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <main+0x384>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	4913      	ldr	r1, [pc, #76]	; (8001300 <main+0x340>)
 80012b4:	4813      	ldr	r0, [pc, #76]	; (8001304 <main+0x344>)
 80012b6:	f006 f9a8 	bl	800760a <HAL_UART_Transmit>
				for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 80012ba:	2300      	movs	r3, #0
 80012bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80012be:	e007      	b.n	80012d0 <main+0x310>
					uartTxBuffer[i]=0;
 80012c0:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <main+0x340>)
 80012c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80012c4:	4413      	add	r3, r2
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
				for (int i=0;i<UART_TX_BUFFER_SIZE;i++){
 80012ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80012cc:	3301      	adds	r3, #1
 80012ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80012d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80012d2:	2b3f      	cmp	r3, #63	; 0x3f
 80012d4:	ddf4      	ble.n	80012c0 <main+0x300>
				}
				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE," PA9:TIM1_CH2\r\n PA11:TIM1_CH1N\r\n PA12:TIM1_CH2N\r\n");
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <main+0x3a0>)
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	4809      	ldr	r0, [pc, #36]	; (8001300 <main+0x340>)
 80012dc:	f008 fea2 	bl	800a024 <sniprintf>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <main+0x384>)
 80012e6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <main+0x384>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	4903      	ldr	r1, [pc, #12]	; (8001300 <main+0x340>)
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <main+0x344>)
 80012f6:	f006 f988 	bl	800760a <HAL_UART_Transmit>
 80012fa:	e14c      	b.n	8001596 <main+0x5d6>
 80012fc:	20000488 	.word	0x20000488
 8001300:	2000048c 	.word	0x2000048c
 8001304:	200003f4 	.word	0x200003f4
 8001308:	20000018 	.word	0x20000018
 800130c:	20000000 	.word	0x20000000
 8001310:	2000035c 	.word	0x2000035c
 8001314:	20000290 	.word	0x20000290
 8001318:	0800c728 	.word	0x0800c728
 800131c:	200004d0 	.word	0x200004d0
 8001320:	0800c750 	.word	0x0800c750
 8001324:	200003a8 	.word	0x200003a8
 8001328:	0800c774 	.word	0x0800c774
 800132c:	20000484 	.word	0x20000484
 8001330:	20000080 	.word	0x20000080
 8001334:	0800c7a0 	.word	0x0800c7a0
 8001338:	0800c7a4 	.word	0x0800c7a4
 800133c:	0800c7a8 	.word	0x0800c7a8
 8001340:	0800c7ac 	.word	0x0800c7ac
 8001344:	200004cc 	.word	0x200004cc
 8001348:	20000084 	.word	0x20000084
 800134c:	0800c7c8 	.word	0x0800c7c8
 8001350:	0800c7cc 	.word	0x0800c7cc
 8001354:	0800c7d4 	.word	0x0800c7d4
 8001358:	0800c800 	.word	0x0800c800
 800135c:	0800c808 	.word	0x0800c808
 8001360:	0800c840 	.word	0x0800c840

			}
			else if (strcmp(argv[0],"start")==0){
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	499a      	ldr	r1, [pc, #616]	; (80015d0 <main+0x610>)
 8001368:	4618      	mov	r0, r3
 800136a:	f7fe ff59 	bl	8000220 <strcmp>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d13c      	bne.n	80013ee <main+0x42e>

				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001374:	2100      	movs	r1, #0
 8001376:	4897      	ldr	r0, [pc, #604]	; (80015d4 <main+0x614>)
 8001378:	f004 fcc4 	bl	8005d04 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800137c:	2104      	movs	r1, #4
 800137e:	4895      	ldr	r0, [pc, #596]	; (80015d4 <main+0x614>)
 8001380:	f004 fcc0 	bl	8005d04 <HAL_TIM_PWM_Start>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001384:	2100      	movs	r1, #0
 8001386:	4893      	ldr	r0, [pc, #588]	; (80015d4 <main+0x614>)
 8001388:	f005 fe50 	bl	800702c <HAL_TIMEx_PWMN_Start>
				HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800138c:	2104      	movs	r1, #4
 800138e:	4891      	ldr	r0, [pc, #580]	; (80015d4 <main+0x614>)
 8001390:	f005 fe4c 	bl	800702c <HAL_TIMEx_PWMN_Start>

				// on met le rapport cyclique à 50 à chaque lancement (le moteur ne tourne pas)
				TIM1->CCR1=2656;
 8001394:	4b90      	ldr	r3, [pc, #576]	; (80015d8 <main+0x618>)
 8001396:	f44f 6226 	mov.w	r2, #2656	; 0xa60
 800139a:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2=2656;
 800139c:	4b8e      	ldr	r3, [pc, #568]	; (80015d8 <main+0x618>)
 800139e:	f44f 6226 	mov.w	r2, #2656	; 0xa60
 80013a2:	639a      	str	r2, [r3, #56]	; 0x38

				// Activation du GPIO pour l'allumage du hacheur (pin 33)
				// GPIOC Pin 0 à 1 pendant au moins 2micro s d'après la doc
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2101      	movs	r1, #1
 80013a8:	488c      	ldr	r0, [pc, #560]	; (80015dc <main+0x61c>)
 80013aa:	f003 fb05 	bl	80049b8 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f000 ff9c 	bl	80022ec <HAL_Delay>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2101      	movs	r1, #1
 80013b8:	4888      	ldr	r0, [pc, #544]	; (80015dc <main+0x61c>)
 80013ba:	f003 fafd 	bl	80049b8 <HAL_GPIO_WritePin>


				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE,"Power ON\r\n",atoi(argv[2]));
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f008 f919 	bl	80095f8 <atoi>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a85      	ldr	r2, [pc, #532]	; (80015e0 <main+0x620>)
 80013ca:	2140      	movs	r1, #64	; 0x40
 80013cc:	4885      	ldr	r0, [pc, #532]	; (80015e4 <main+0x624>)
 80013ce:	f008 fe29 	bl	800a024 <sniprintf>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b84      	ldr	r3, [pc, #528]	; (80015e8 <main+0x628>)
 80013d8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 80013da:	4b83      	ldr	r3, [pc, #524]	; (80015e8 <main+0x628>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	497f      	ldr	r1, [pc, #508]	; (80015e4 <main+0x624>)
 80013e6:	4881      	ldr	r0, [pc, #516]	; (80015ec <main+0x62c>)
 80013e8:	f006 f90f 	bl	800760a <HAL_UART_Transmit>
 80013ec:	e0d3      	b.n	8001596 <main+0x5d6>
			}
			else if (strcmp(argv[0],"stop")==0){
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	497f      	ldr	r1, [pc, #508]	; (80015f0 <main+0x630>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe ff14 	bl	8000220 <strcmp>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d127      	bne.n	800144e <main+0x48e>

				// On stoppe les PWM
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80013fe:	2100      	movs	r1, #0
 8001400:	4874      	ldr	r0, [pc, #464]	; (80015d4 <main+0x614>)
 8001402:	f004 fd7f 	bl	8005f04 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001406:	2104      	movs	r1, #4
 8001408:	4872      	ldr	r0, [pc, #456]	; (80015d4 <main+0x614>)
 800140a:	f004 fd7b 	bl	8005f04 <HAL_TIM_PWM_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800140e:	2100      	movs	r1, #0
 8001410:	4870      	ldr	r0, [pc, #448]	; (80015d4 <main+0x614>)
 8001412:	f005 febf 	bl	8007194 <HAL_TIMEx_PWMN_Stop>
				HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001416:	2104      	movs	r1, #4
 8001418:	486e      	ldr	r0, [pc, #440]	; (80015d4 <main+0x614>)
 800141a:	f005 febb 	bl	8007194 <HAL_TIMEx_PWMN_Stop>

				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE,"Power OFF\r\n",atoi(argv[2]));
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4618      	mov	r0, r3
 8001422:	f008 f8e9 	bl	80095f8 <atoi>
 8001426:	4603      	mov	r3, r0
 8001428:	4a72      	ldr	r2, [pc, #456]	; (80015f4 <main+0x634>)
 800142a:	2140      	movs	r1, #64	; 0x40
 800142c:	486d      	ldr	r0, [pc, #436]	; (80015e4 <main+0x624>)
 800142e:	f008 fdf9 	bl	800a024 <sniprintf>
 8001432:	4603      	mov	r3, r0
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b6c      	ldr	r3, [pc, #432]	; (80015e8 <main+0x628>)
 8001438:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 800143a:	4b6b      	ldr	r3, [pc, #428]	; (80015e8 <main+0x628>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b29a      	uxth	r2, r3
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	4967      	ldr	r1, [pc, #412]	; (80015e4 <main+0x624>)
 8001446:	4869      	ldr	r0, [pc, #420]	; (80015ec <main+0x62c>)
 8001448:	f006 f8df 	bl	800760a <HAL_UART_Transmit>
 800144c:	e0a3      	b.n	8001596 <main+0x5d6>
			}
			else if(strcmp(argv[0],"alpha")==0){
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4969      	ldr	r1, [pc, #420]	; (80015f8 <main+0x638>)
 8001452:	4618      	mov	r0, r3
 8001454:	f7fe fee4 	bl	8000220 <strcmp>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d121      	bne.n	80014a2 <main+0x4e2>
				alpha = atoi(argv[1]);
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	4618      	mov	r0, r3
 8001462:	f008 f8c9 	bl	80095f8 <atoi>
 8001466:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
				if (alpha > 100){
 800146a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	dd02      	ble.n	8001478 <main+0x4b8>
					alpha = 100;
 8001472:	2364      	movs	r3, #100	; 0x64
 8001474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				}
				TIM1->CCR1=(5312*alpha)/100;
 8001478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800147c:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8001480:	fb02 f303 	mul.w	r3, r2, r3
 8001484:	4a5d      	ldr	r2, [pc, #372]	; (80015fc <main+0x63c>)
 8001486:	fb82 1203 	smull	r1, r2, r2, r3
 800148a:	1152      	asrs	r2, r2, #5
 800148c:	17db      	asrs	r3, r3, #31
 800148e:	1ad2      	subs	r2, r2, r3
 8001490:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <main+0x618>)
 8001492:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2=(5312-TIM1->CCR1);
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <main+0x618>)
 8001496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001498:	4a4f      	ldr	r2, [pc, #316]	; (80015d8 <main+0x618>)
 800149a:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 800149e:	6393      	str	r3, [r2, #56]	; 0x38
 80014a0:	e079      	b.n	8001596 <main+0x5d6>
			}
			else if(strcmp(argv[0],"ADC")==0){
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4956      	ldr	r1, [pc, #344]	; (8001600 <main+0x640>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe feba 	bl	8000220 <strcmp>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d16a      	bne.n	8001588 <main+0x5c8>

				for(int i=0;i<20;i++){
 80014b2:	2300      	movs	r3, #0
 80014b4:	677b      	str	r3, [r7, #116]	; 0x74
 80014b6:	e00c      	b.n	80014d2 <main+0x512>
					sortie_ADC_numerique = sortie_ADC_numerique + (int)(ADC_Buffer[i]);
 80014b8:	4a52      	ldr	r2, [pc, #328]	; (8001604 <main+0x644>)
 80014ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014c0:	461a      	mov	r2, r3
 80014c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014c6:	4413      	add	r3, r2
 80014c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for(int i=0;i<20;i++){
 80014cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014ce:	3301      	adds	r3, #1
 80014d0:	677b      	str	r3, [r7, #116]	; 0x74
 80014d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014d4:	2b13      	cmp	r3, #19
 80014d6:	ddef      	ble.n	80014b8 <main+0x4f8>
				}
				moyenne_sortie_ADC_numerique = sortie_ADC_numerique/20;
 80014d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014dc:	4a4a      	ldr	r2, [pc, #296]	; (8001608 <main+0x648>)
 80014de:	fb82 1203 	smull	r1, r2, r2, r3
 80014e2:	10d2      	asrs	r2, r2, #3
 80014e4:	17db      	asrs	r3, r3, #31
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	673b      	str	r3, [r7, #112]	; 0x70
				tension_sortie_hacheur = moyenne_sortie_ADC_numerique * 3.3 / 4095;
 80014ea:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80014ec:	f7ff f852 	bl	8000594 <__aeabi_i2d>
 80014f0:	a331      	add	r3, pc, #196	; (adr r3, 80015b8 <main+0x5f8>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f8b7 	bl	8000668 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	a32f      	add	r3, pc, #188	; (adr r3, 80015c0 <main+0x600>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f9d8 	bl	80008bc <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb80 	bl	8000c18 <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	66fb      	str	r3, [r7, #108]	; 0x6c
				courant = (tension_sortie_hacheur -2.53)*12;
 800151c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800151e:	f7ff f84b 	bl	80005b8 <__aeabi_f2d>
 8001522:	a329      	add	r3, pc, #164	; (adr r3, 80015c8 <main+0x608>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7fe fee6 	bl	80002f8 <__aeabi_dsub>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <main+0x64c>)
 800153a:	f7ff f895 	bl	8000668 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fb67 	bl	8000c18 <__aeabi_d2f>
 800154a:	4603      	mov	r3, r0
 800154c:	66bb      	str	r3, [r7, #104]	; 0x68

				stringSize = snprintf(uartTxBuffer, UART_TX_BUFFER_SIZE,"Le courant dans la phase RED vaut : %.2f A \r\n", courant);
 800154e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001550:	f7ff f832 	bl	80005b8 <__aeabi_f2d>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	e9cd 2300 	strd	r2, r3, [sp]
 800155c:	4a2c      	ldr	r2, [pc, #176]	; (8001610 <main+0x650>)
 800155e:	2140      	movs	r1, #64	; 0x40
 8001560:	4820      	ldr	r0, [pc, #128]	; (80015e4 <main+0x624>)
 8001562:	f008 fd5f 	bl	800a024 <sniprintf>
 8001566:	4603      	mov	r3, r0
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <main+0x628>)
 800156c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <main+0x628>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b29a      	uxth	r2, r3
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	491a      	ldr	r1, [pc, #104]	; (80015e4 <main+0x624>)
 800157a:	481c      	ldr	r0, [pc, #112]	; (80015ec <main+0x62c>)
 800157c:	f006 f845 	bl	800760a <HAL_UART_Transmit>

				sortie_ADC_numerique =0;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001586:	e006      	b.n	8001596 <main+0x5d6>

			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001588:	f04f 33ff 	mov.w	r3, #4294967295
 800158c:	2214      	movs	r2, #20
 800158e:	4921      	ldr	r1, [pc, #132]	; (8001614 <main+0x654>)
 8001590:	4816      	ldr	r0, [pc, #88]	; (80015ec <main+0x62c>)
 8001592:	f006 f83a 	bl	800760a <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	2218      	movs	r2, #24
 800159c:	491e      	ldr	r1, [pc, #120]	; (8001618 <main+0x658>)
 800159e:	4813      	ldr	r0, [pc, #76]	; (80015ec <main+0x62c>)
 80015a0:	f006 f833 	bl	800760a <HAL_UART_Transmit>
			newCmdReady = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		/*********************** END SHELL *****************************/


		/****************** BEGIN BLUE_BUTTON HACHEUR ******************/

		HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80015aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015ae:	f003 fa1b 	bl	80049e8 <HAL_GPIO_EXTI_IRQHandler>
		if(uartRxReceived){
 80015b2:	e585      	b.n	80010c0 <main+0x100>
 80015b4:	f3af 8000 	nop.w
 80015b8:	66666666 	.word	0x66666666
 80015bc:	400a6666 	.word	0x400a6666
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40affe00 	.word	0x40affe00
 80015c8:	a3d70a3d 	.word	0xa3d70a3d
 80015cc:	40043d70 	.word	0x40043d70
 80015d0:	0800c874 	.word	0x0800c874
 80015d4:	2000035c 	.word	0x2000035c
 80015d8:	40012c00 	.word	0x40012c00
 80015dc:	48000800 	.word	0x48000800
 80015e0:	0800c87c 	.word	0x0800c87c
 80015e4:	2000048c 	.word	0x2000048c
 80015e8:	200004cc 	.word	0x200004cc
 80015ec:	200003f4 	.word	0x200003f4
 80015f0:	0800c888 	.word	0x0800c888
 80015f4:	0800c890 	.word	0x0800c890
 80015f8:	0800c89c 	.word	0x0800c89c
 80015fc:	51eb851f 	.word	0x51eb851f
 8001600:	0800c8a4 	.word	0x0800c8a4
 8001604:	200004d0 	.word	0x200004d0
 8001608:	66666667 	.word	0x66666667
 800160c:	40280000 	.word	0x40280000
 8001610:	0800c8a8 	.word	0x0800c8a8
 8001614:	20000084 	.word	0x20000084
 8001618:	20000000 	.word	0x20000000

0800161c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b094      	sub	sp, #80	; 0x50
 8001620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001622:	f107 0318 	add.w	r3, r7, #24
 8001626:	2238      	movs	r2, #56	; 0x38
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f008 f812 	bl	8009654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800163e:	2000      	movs	r0, #0
 8001640:	f003 f9ea 	bl	8004a18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800164e:	2340      	movs	r3, #64	; 0x40
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001652:	2302      	movs	r3, #2
 8001654:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001656:	2302      	movs	r3, #2
 8001658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800165a:	2304      	movs	r3, #4
 800165c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800165e:	2355      	movs	r3, #85	; 0x55
 8001660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001662:	2302      	movs	r3, #2
 8001664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001666:	2302      	movs	r3, #2
 8001668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800166a:	2302      	movs	r3, #2
 800166c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166e:	f107 0318 	add.w	r3, r7, #24
 8001672:	4618      	mov	r0, r3
 8001674:	f003 fa74 	bl	8004b60 <HAL_RCC_OscConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800167e:	f000 faaf 	bl	8001be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001682:	230f      	movs	r3, #15
 8001684:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001686:	2303      	movs	r3, #3
 8001688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2104      	movs	r1, #4
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fd78 	bl	8005190 <HAL_RCC_ClockConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80016a6:	f000 fa9b 	bl	8001be0 <Error_Handler>
  }
}
 80016aa:	bf00      	nop
 80016ac:	3750      	adds	r7, #80	; 0x50
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	; 0x30
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80016ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2220      	movs	r2, #32
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f007 ffc1 	bl	8009654 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016d2:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <MX_ADC1_Init+0xec>)
 80016d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <MX_ADC1_Init+0xec>)
 80016dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016e2:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <MX_ADC1_Init+0xec>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016e8:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <MX_ADC1_Init+0xec>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80016ee:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <MX_ADC1_Init+0xec>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016f4:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <MX_ADC1_Init+0xec>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <MX_ADC1_Init+0xec>)
 80016fc:	2204      	movs	r2, #4
 80016fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <MX_ADC1_Init+0xec>)
 8001702:	2200      	movs	r2, #0
 8001704:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001706:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <MX_ADC1_Init+0xec>)
 8001708:	2200      	movs	r2, #0
 800170a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <MX_ADC1_Init+0xec>)
 800170e:	2201      	movs	r2, #1
 8001710:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <MX_ADC1_Init+0xec>)
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <MX_ADC1_Init+0xec>)
 800171c:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001720:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <MX_ADC1_Init+0xec>)
 8001724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001728:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <MX_ADC1_Init+0xec>)
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <MX_ADC1_Init+0xec>)
 8001734:	2200      	movs	r2, #0
 8001736:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_ADC1_Init+0xec>)
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001740:	4817      	ldr	r0, [pc, #92]	; (80017a0 <MX_ADC1_Init+0xec>)
 8001742:	f001 f85f 	bl	8002804 <HAL_ADC_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800174c:	f000 fa48 	bl	8001be0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	4811      	ldr	r0, [pc, #68]	; (80017a0 <MX_ADC1_Init+0xec>)
 800175c:	f002 faf4 	bl	8003d48 <HAL_ADCEx_MultiModeConfigChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001766:	f000 fa3b 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_ADC1_Init+0xf0>)
 800176c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800176e:	2306      	movs	r3, #6
 8001770:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001776:	237f      	movs	r3, #127	; 0x7f
 8001778:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800177a:	2304      	movs	r3, #4
 800177c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_ADC1_Init+0xec>)
 8001788:	f001 fcb2 	bl	80030f0 <HAL_ADC_ConfigChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001792:	f000 fa25 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3730      	adds	r7, #48	; 0x30
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000290 	.word	0x20000290
 80017a4:	04300002 	.word	0x04300002

080017a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b098      	sub	sp, #96	; 0x60
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	615a      	str	r2, [r3, #20]
 80017cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2234      	movs	r2, #52	; 0x34
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f007 ff3d 	bl	8009654 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017da:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <MX_TIM1_Init+0x138>)
 80017dc:	4a41      	ldr	r2, [pc, #260]	; (80018e4 <MX_TIM1_Init+0x13c>)
 80017de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017e0:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <MX_TIM1_Init+0x138>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80017e6:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <MX_TIM1_Init+0x138>)
 80017e8:	2220      	movs	r2, #32
 80017ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5311;
 80017ec:	4b3c      	ldr	r3, [pc, #240]	; (80018e0 <MX_TIM1_Init+0x138>)
 80017ee:	f241 42bf 	movw	r2, #5311	; 0x14bf
 80017f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f4:	4b3a      	ldr	r3, [pc, #232]	; (80018e0 <MX_TIM1_Init+0x138>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017fa:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <MX_TIM1_Init+0x138>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001800:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <MX_TIM1_Init+0x138>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001806:	4836      	ldr	r0, [pc, #216]	; (80018e0 <MX_TIM1_Init+0x138>)
 8001808:	f004 fa24 	bl	8005c54 <HAL_TIM_PWM_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001812:	f000 f9e5 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001822:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001826:	4619      	mov	r1, r3
 8001828:	482d      	ldr	r0, [pc, #180]	; (80018e0 <MX_TIM1_Init+0x138>)
 800182a:	f005 fd11 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001834:	f000 f9d4 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001838:	2360      	movs	r3, #96	; 0x60
 800183a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 800183c:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 8001840:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001842:	2300      	movs	r3, #0
 8001844:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001846:	2300      	movs	r3, #0
 8001848:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001856:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800185a:	2200      	movs	r2, #0
 800185c:	4619      	mov	r1, r3
 800185e:	4820      	ldr	r0, [pc, #128]	; (80018e0 <MX_TIM1_Init+0x138>)
 8001860:	f004 fd66 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800186a:	f000 f9b9 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800186e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001872:	2204      	movs	r2, #4
 8001874:	4619      	mov	r1, r3
 8001876:	481a      	ldr	r0, [pc, #104]	; (80018e0 <MX_TIM1_Init+0x138>)
 8001878:	f004 fd5a 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001882:	f000 f9ad 	bl	8001be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 207;
 8001892:	23cf      	movs	r3, #207	; 0xcf
 8001894:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800189a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800189e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	4619      	mov	r1, r3
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <MX_TIM1_Init+0x138>)
 80018c4:	f005 fd46 	bl	8007354 <HAL_TIMEx_ConfigBreakDeadTime>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80018ce:	f000 f987 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018d2:	4803      	ldr	r0, [pc, #12]	; (80018e0 <MX_TIM1_Init+0x138>)
 80018d4:	f000 fa76 	bl	8001dc4 <HAL_TIM_MspPostInit>

}
 80018d8:	bf00      	nop
 80018da:	3760      	adds	r7, #96	; 0x60
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	2000035c 	.word	0x2000035c
 80018e4:	40012c00 	.word	0x40012c00

080018e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001906:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <MX_TIM2_Init+0x98>)
 8001908:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <MX_TIM2_Init+0x98>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_TIM2_Init+0x98>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 531;
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <MX_TIM2_Init+0x98>)
 800191c:	f240 2213 	movw	r2, #531	; 0x213
 8001920:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <MX_TIM2_Init+0x98>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <MX_TIM2_Init+0x98>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800192e:	4814      	ldr	r0, [pc, #80]	; (8001980 <MX_TIM2_Init+0x98>)
 8001930:	f004 f86c 	bl	8005a0c <HAL_TIM_Base_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800193a:	f000 f951 	bl	8001be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001942:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	4619      	mov	r1, r3
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <MX_TIM2_Init+0x98>)
 800194c:	f004 fe04 	bl	8006558 <HAL_TIM_ConfigClockSource>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001956:	f000 f943 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800195a:	2320      	movs	r3, #32
 800195c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4619      	mov	r1, r3
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <MX_TIM2_Init+0x98>)
 8001968:	f005 fc72 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001972:	f000 f935 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	3720      	adds	r7, #32
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200003a8 	.word	0x200003a8

08001984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001988:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <MX_USART2_UART_Init+0x90>)
 800198a:	4a23      	ldr	r2, [pc, #140]	; (8001a18 <MX_USART2_UART_Init+0x94>)
 800198c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800198e:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <MX_USART2_UART_Init+0x90>)
 8001990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <MX_USART2_UART_Init+0x90>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800199c:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <MX_USART2_UART_Init+0x90>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <MX_USART2_UART_Init+0x90>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019a8:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <MX_USART2_UART_Init+0x90>)
 80019aa:	220c      	movs	r2, #12
 80019ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ae:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <MX_USART2_UART_Init+0x90>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b4:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <MX_USART2_UART_Init+0x90>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ba:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <MX_USART2_UART_Init+0x90>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <MX_USART2_UART_Init+0x90>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <MX_USART2_UART_Init+0x90>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019cc:	4811      	ldr	r0, [pc, #68]	; (8001a14 <MX_USART2_UART_Init+0x90>)
 80019ce:	f005 fdcc 	bl	800756a <HAL_UART_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80019d8:	f000 f902 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019dc:	2100      	movs	r1, #0
 80019de:	480d      	ldr	r0, [pc, #52]	; (8001a14 <MX_USART2_UART_Init+0x90>)
 80019e0:	f007 fd3f 	bl	8009462 <HAL_UARTEx_SetTxFifoThreshold>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80019ea:	f000 f8f9 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ee:	2100      	movs	r1, #0
 80019f0:	4808      	ldr	r0, [pc, #32]	; (8001a14 <MX_USART2_UART_Init+0x90>)
 80019f2:	f007 fd74 	bl	80094de <HAL_UARTEx_SetRxFifoThreshold>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80019fc:	f000 f8f0 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <MX_USART2_UART_Init+0x90>)
 8001a02:	f007 fcf5 	bl	80093f0 <HAL_UARTEx_DisableFifoMode>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a0c:	f000 f8e8 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200003f4 	.word	0x200003f4
 8001a18:	40004400 	.word	0x40004400

08001a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <MX_DMA_Init+0x50>)
 8001a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a26:	4a11      	ldr	r2, [pc, #68]	; (8001a6c <MX_DMA_Init+0x50>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	6493      	str	r3, [r2, #72]	; 0x48
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_DMA_Init+0x50>)
 8001a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_DMA_Init+0x50>)
 8001a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <MX_DMA_Init+0x50>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6493      	str	r3, [r2, #72]	; 0x48
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_DMA_Init+0x50>)
 8001a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	200b      	movs	r0, #11
 8001a58:	f002 fad2 	bl	8004000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a5c:	200b      	movs	r0, #11
 8001a5e:	f002 fae9 	bl	8004034 <HAL_NVIC_EnableIRQ>

}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000

08001a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a86:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	4a2e      	ldr	r2, [pc, #184]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a92:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001aa4:	f043 0320 	orr.w	r3, r3, #32
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0320 	and.w	r3, r3, #32
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	4a22      	ldr	r2, [pc, #136]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <MX_GPIO_Init+0xd4>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	481d      	ldr	r0, [pc, #116]	; (8001b48 <MX_GPIO_Init+0xd8>)
 8001ad4:	f002 ff70 	bl	80049b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2120      	movs	r1, #32
 8001adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae0:	f002 ff6a 	bl	80049b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8001ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4619      	mov	r1, r3
 8001afa:	4813      	ldr	r0, [pc, #76]	; (8001b48 <MX_GPIO_Init+0xd8>)
 8001afc:	f002 fdda 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b00:	2301      	movs	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	4619      	mov	r1, r3
 8001b16:	480c      	ldr	r0, [pc, #48]	; (8001b48 <MX_GPIO_Init+0xd8>)
 8001b18:	f002 fdcc 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	4619      	mov	r1, r3
 8001b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b36:	f002 fdbd 	bl	80046b4 <HAL_GPIO_Init>

}
 8001b3a:	bf00      	nop
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	48000800 	.word	0x48000800

08001b4c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_UART_RxCpltCallback+0x20>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4904      	ldr	r1, [pc, #16]	; (8001b70 <HAL_UART_RxCpltCallback+0x24>)
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <HAL_UART_RxCpltCallback+0x28>)
 8001b60:	f005 fdea 	bl	8007738 <HAL_UART_Receive_IT>
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000484 	.word	0x20000484
 8001b70:	20000488 	.word	0x20000488
 8001b74:	200003f4 	.word	0x200003f4

08001b78 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001b82:	2201      	movs	r2, #1
 8001b84:	2101      	movs	r1, #1
 8001b86:	4807      	ldr	r0, [pc, #28]	; (8001ba4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001b88:	f002 ff16 	bl	80049b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f000 fbad 	bl	80022ec <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2101      	movs	r1, #1
 8001b96:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001b98:	f002 ff0e 	bl	80049b8 <HAL_GPIO_WritePin>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	48000800 	.word	0x48000800

08001ba8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bce:	f000 fb6f 	bl	80022b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40001000 	.word	0x40001000

08001be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be4:	b672      	cpsid	i
}
 8001be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001be8:	e7fe      	b.n	8001be8 <Error_Handler+0x8>
	...

08001bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_MspInit+0x44>)
 8001bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <HAL_MspInit+0x44>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <HAL_MspInit+0x44>)
 8001c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_MspInit+0x44>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <HAL_MspInit+0x44>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	6593      	str	r3, [r2, #88]	; 0x58
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_MspInit+0x44>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000

08001c34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b09a      	sub	sp, #104	; 0x68
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	2244      	movs	r2, #68	; 0x44
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f007 fcfd 	bl	8009654 <memset>
  if(hadc->Instance==ADC1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c62:	d167      	bne.n	8001d34 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c68:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c6a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 fcd9 	bl	800562c <HAL_RCCEx_PeriphCLKConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001c80:	f7ff ffae 	bl	8001be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_ADC_MspInit+0x108>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	4a2c      	ldr	r2, [pc, #176]	; (8001d3c <HAL_ADC_MspInit+0x108>)
 8001c8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <HAL_ADC_MspInit+0x108>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9c:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_ADC_MspInit+0x108>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	4a26      	ldr	r2, [pc, #152]	; (8001d3c <HAL_ADC_MspInit+0x108>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_ADC_MspInit+0x108>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cca:	f002 fcf3 	bl	80046b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <HAL_ADC_MspInit+0x10c>)
 8001cd0:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <HAL_ADC_MspInit+0x110>)
 8001cd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <HAL_ADC_MspInit+0x10c>)
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_ADC_MspInit+0x10c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_ADC_MspInit+0x10c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ce6:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <HAL_ADC_MspInit+0x10c>)
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <HAL_ADC_MspInit+0x10c>)
 8001cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cf2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_ADC_MspInit+0x10c>)
 8001cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cfa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_ADC_MspInit+0x10c>)
 8001cfe:	2220      	movs	r2, #32
 8001d00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_ADC_MspInit+0x10c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d08:	480d      	ldr	r0, [pc, #52]	; (8001d40 <HAL_ADC_MspInit+0x10c>)
 8001d0a:	f002 f9a1 	bl	8004050 <HAL_DMA_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001d14:	f7ff ff64 	bl	8001be0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <HAL_ADC_MspInit+0x10c>)
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_ADC_MspInit+0x10c>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	2012      	movs	r0, #18
 8001d2a:	f002 f969 	bl	8004000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d2e:	2012      	movs	r0, #18
 8001d30:	f002 f980 	bl	8004034 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d34:	bf00      	nop
 8001d36:	3768      	adds	r7, #104	; 0x68
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	200002fc 	.word	0x200002fc
 8001d44:	40020008 	.word	0x40020008

08001d48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_TIM_PWM_MspInit+0x38>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10b      	bne.n	8001d72 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d64:	6613      	str	r3, [r2, #96]	; 0x60
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d72:	bf00      	nop
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40012c00 	.word	0x40012c00
 8001d84:	40021000 	.word	0x40021000

08001d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d98:	d10b      	bne.n	8001db2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_TIM_Base_MspInit+0x38>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <HAL_TIM_Base_MspInit+0x38>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6593      	str	r3, [r2, #88]	; 0x58
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_TIM_Base_MspInit+0x38>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000

08001dc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <HAL_TIM_MspPostInit+0x68>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d11d      	bne.n	8001e22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_TIM_MspPostInit+0x6c>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <HAL_TIM_MspPostInit+0x6c>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_TIM_MspPostInit+0x6c>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001dfe:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001e02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e10:	2306      	movs	r3, #6
 8001e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1e:	f002 fc49 	bl	80046b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e22:	bf00      	nop
 8001e24:	3720      	adds	r7, #32
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40012c00 	.word	0x40012c00
 8001e30:	40021000 	.word	0x40021000

08001e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b09a      	sub	sp, #104	; 0x68
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	2244      	movs	r2, #68	; 0x44
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f007 fbfd 	bl	8009654 <memset>
  if(huart->Instance==USART2)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a23      	ldr	r2, [pc, #140]	; (8001eec <HAL_UART_MspInit+0xb8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d13e      	bne.n	8001ee2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e64:	2302      	movs	r3, #2
 8001e66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 fbdb 	bl	800562c <HAL_RCCEx_PeriphCLKConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e7c:	f7ff feb0 	bl	8001be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_UART_MspInit+0xbc>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	4a1a      	ldr	r2, [pc, #104]	; (8001ef0 <HAL_UART_MspInit+0xbc>)
 8001e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8c:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <HAL_UART_MspInit+0xbc>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_UART_MspInit+0xbc>)
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9c:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <HAL_UART_MspInit+0xbc>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_UART_MspInit+0xbc>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ec0:	2307      	movs	r3, #7
 8001ec2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ece:	f002 fbf1 	bl	80046b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	2026      	movs	r0, #38	; 0x26
 8001ed8:	f002 f892 	bl	8004000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001edc:	2026      	movs	r0, #38	; 0x26
 8001ede:	f002 f8a9 	bl	8004034 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3768      	adds	r7, #104	; 0x68
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40004400 	.word	0x40004400
 8001ef0:	40021000 	.word	0x40021000

08001ef4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08c      	sub	sp, #48	; 0x30
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <HAL_InitTick+0xcc>)
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0e:	4a2c      	ldr	r2, [pc, #176]	; (8001fc0 <HAL_InitTick+0xcc>)
 8001f10:	f043 0310 	orr.w	r3, r3, #16
 8001f14:	6593      	str	r3, [r2, #88]	; 0x58
 8001f16:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_InitTick+0xcc>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f22:	f107 020c 	add.w	r2, r7, #12
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 fb05 	bl	800553c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f32:	f003 fad7 	bl	80054e4 <HAL_RCC_GetPCLK1Freq>
 8001f36:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3a:	4a22      	ldr	r2, [pc, #136]	; (8001fc4 <HAL_InitTick+0xd0>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	0c9b      	lsrs	r3, r3, #18
 8001f42:	3b01      	subs	r3, #1
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_InitTick+0xd4>)
 8001f48:	4a20      	ldr	r2, [pc, #128]	; (8001fcc <HAL_InitTick+0xd8>)
 8001f4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <HAL_InitTick+0xd4>)
 8001f4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f52:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f54:	4a1c      	ldr	r2, [pc, #112]	; (8001fc8 <HAL_InitTick+0xd4>)
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_InitTick+0xd4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_InitTick+0xd4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001f66:	4818      	ldr	r0, [pc, #96]	; (8001fc8 <HAL_InitTick+0xd4>)
 8001f68:	f003 fd50 	bl	8005a0c <HAL_TIM_Base_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001f72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d11b      	bne.n	8001fb2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f7a:	4813      	ldr	r0, [pc, #76]	; (8001fc8 <HAL_InitTick+0xd4>)
 8001f7c:	f003 fe00 	bl	8005b80 <HAL_TIM_Base_Start_IT>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001f86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d111      	bne.n	8001fb2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f8e:	2036      	movs	r0, #54	; 0x36
 8001f90:	f002 f850 	bl	8004034 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b0f      	cmp	r3, #15
 8001f98:	d808      	bhi.n	8001fac <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	2036      	movs	r0, #54	; 0x36
 8001fa0:	f002 f82e 	bl	8004000 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <HAL_InitTick+0xdc>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e002      	b.n	8001fb2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3730      	adds	r7, #48	; 0x30
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	431bde83 	.word	0x431bde83
 8001fc8:	200004f8 	.word	0x200004f8
 8001fcc:	40001000 	.word	0x40001000
 8001fd0:	2000009c 	.word	0x2000009c

08001fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <NMI_Handler+0x4>

08001fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fde:	e7fe      	b.n	8001fde <HardFault_Handler+0x4>

08001fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <MemManage_Handler+0x4>

08001fe6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <BusFault_Handler+0x4>

08001fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <UsageFault_Handler+0x4>

08001ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <DMA1_Channel1_IRQHandler+0x10>)
 8002032:	f002 f9f0 	bl	8004416 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200002fc 	.word	0x200002fc

08002040 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <ADC1_2_IRQHandler+0x10>)
 8002046:	f000 fe1b 	bl	8002c80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000290 	.word	0x20000290

08002054 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <USART2_IRQHandler+0x10>)
 800205a:	f005 fbc3 	bl	80077e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200003f4 	.word	0x200003f4

08002068 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <TIM6_DAC_IRQHandler+0x10>)
 800206e:	f003 ffdf 	bl	8006030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200004f8 	.word	0x200004f8

0800207c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
	return 1;
 8002080:	2301      	movs	r3, #1
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_kill>:

int _kill(int pid, int sig)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002096:	f007 fab3 	bl	8009600 <__errno>
 800209a:	4603      	mov	r3, r0
 800209c:	2216      	movs	r2, #22
 800209e:	601a      	str	r2, [r3, #0]
	return -1;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_exit>:

void _exit (int status)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ffe7 	bl	800208c <_kill>
	while (1) {}		/* Make sure we hang here */
 80020be:	e7fe      	b.n	80020be <_exit+0x12>

080020c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e00a      	b.n	80020e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020d2:	f3af 8000 	nop.w
 80020d6:	4601      	mov	r1, r0
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	60ba      	str	r2, [r7, #8]
 80020de:	b2ca      	uxtb	r2, r1
 80020e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	dbf0      	blt.n	80020d2 <_read+0x12>
	}

return len;
 80020f0:	687b      	ldr	r3, [r7, #4]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e009      	b.n	8002120 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	60ba      	str	r2, [r7, #8]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	3301      	adds	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	429a      	cmp	r2, r3
 8002126:	dbf1      	blt.n	800210c <_write+0x12>
	}
	return len;
 8002128:	687b      	ldr	r3, [r7, #4]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_close>:

int _close(int file)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
	return -1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800215a:	605a      	str	r2, [r3, #4]
	return 0;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <_isatty>:

int _isatty(int file)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
	return 1;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
	return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <_sbrk+0x5c>)
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <_sbrk+0x60>)
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <_sbrk+0x64>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <_sbrk+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d207      	bcs.n	80021dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021cc:	f007 fa18 	bl	8009600 <__errno>
 80021d0:	4603      	mov	r3, r0
 80021d2:	220c      	movs	r2, #12
 80021d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
 80021da:	e009      	b.n	80021f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <_sbrk+0x64>)
 80021ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20008000 	.word	0x20008000
 80021fc:	00000400 	.word	0x00000400
 8002200:	20000544 	.word	0x20000544
 8002204:	20000560 	.word	0x20000560

08002208 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <SystemInit+0x20>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	4a05      	ldr	r2, [pc, #20]	; (8002228 <SystemInit+0x20>)
 8002214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800222e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002230:	480d      	ldr	r0, [pc, #52]	; (8002268 <LoopForever+0x6>)
  ldr r1, =_edata
 8002232:	490e      	ldr	r1, [pc, #56]	; (800226c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002234:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <LoopForever+0xe>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002238:	e002      	b.n	8002240 <LoopCopyDataInit>

0800223a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800223c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223e:	3304      	adds	r3, #4

08002240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002244:	d3f9      	bcc.n	800223a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002246:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002248:	4c0b      	ldr	r4, [pc, #44]	; (8002278 <LoopForever+0x16>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800224c:	e001      	b.n	8002252 <LoopFillZerobss>

0800224e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002250:	3204      	adds	r2, #4

08002252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002254:	d3fb      	bcc.n	800224e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002256:	f7ff ffd7 	bl	8002208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800225a:	f007 f9d7 	bl	800960c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800225e:	f7fe feaf 	bl	8000fc0 <main>

08002262 <LoopForever>:

LoopForever:
    b LoopForever
 8002262:	e7fe      	b.n	8002262 <LoopForever>
  ldr   r0, =_estack
 8002264:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800226c:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8002270:	0800cd60 	.word	0x0800cd60
  ldr r2, =_sbss
 8002274:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 8002278:	2000055c 	.word	0x2000055c

0800227c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800227c:	e7fe      	b.n	800227c <COMP1_2_3_IRQHandler>

0800227e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002288:	2003      	movs	r0, #3
 800228a:	f001 feae 	bl	8003fea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800228e:	200f      	movs	r0, #15
 8002290:	f7ff fe30 	bl	8001ef4 <HAL_InitTick>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	71fb      	strb	r3, [r7, #7]
 800229e:	e001      	b.n	80022a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022a0:	f7ff fca4 	bl	8001bec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022a4:	79fb      	ldrb	r3, [r7, #7]

}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_IncTick+0x1c>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_IncTick+0x20>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	4a03      	ldr	r2, [pc, #12]	; (80022cc <HAL_IncTick+0x1c>)
 80022c0:	6013      	str	r3, [r2, #0]
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	20000548 	.word	0x20000548
 80022d0:	200000a0 	.word	0x200000a0

080022d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return uwTick;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_GetTick+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000548 	.word	0x20000548

080022ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f4:	f7ff ffee 	bl	80022d4 <HAL_GetTick>
 80022f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d004      	beq.n	8002310 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_Delay+0x40>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4413      	add	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002310:	bf00      	nop
 8002312:	f7ff ffdf 	bl	80022d4 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	429a      	cmp	r2, r3
 8002320:	d8f7      	bhi.n	8002312 <HAL_Delay+0x26>
  {
  }
}
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	200000a0 	.word	0x200000a0

08002330 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	609a      	str	r2, [r3, #8]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	609a      	str	r2, [r3, #8]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3360      	adds	r3, #96	; 0x60
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <LL_ADC_SetOffset+0x44>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	03fff000 	.word	0x03fff000

080023e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3360      	adds	r3, #96	; 0x60
 80023ee:	461a      	mov	r2, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3360      	adds	r3, #96	; 0x60
 800241c:	461a      	mov	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	431a      	orrs	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002436:	bf00      	nop
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002442:	b480      	push	{r7}
 8002444:	b087      	sub	sp, #28
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3360      	adds	r3, #96	; 0x60
 8002452:	461a      	mov	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	431a      	orrs	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800246c:	bf00      	nop
 800246e:	371c      	adds	r7, #28
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3360      	adds	r3, #96	; 0x60
 8002488:	461a      	mov	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	431a      	orrs	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80024a2:	bf00      	nop
 80024a4:	371c      	adds	r7, #28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	615a      	str	r2, [r3, #20]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b087      	sub	sp, #28
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	3330      	adds	r3, #48	; 0x30
 800250a:	461a      	mov	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	4413      	add	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	211f      	movs	r1, #31
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	401a      	ands	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 011f 	and.w	r1, r3, #31
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	431a      	orrs	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3314      	adds	r3, #20
 8002588:	461a      	mov	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	0e5b      	lsrs	r3, r3, #25
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	4413      	add	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	0d1b      	lsrs	r3, r3, #20
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	2107      	movs	r1, #7
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	401a      	ands	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	0d1b      	lsrs	r3, r3, #20
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	431a      	orrs	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a0f      	ldr	r2, [pc, #60]	; (800261c <LL_ADC_SetChannelSingleDiff+0x4c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d10a      	bne.n	80025fa <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f0:	431a      	orrs	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80025f8:	e00a      	b.n	8002610 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002606:	43db      	mvns	r3, r3
 8002608:	401a      	ands	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	407f0000 	.word	0x407f0000

08002620 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 031f 	and.w	r3, r3, #31
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002668:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6093      	str	r3, [r2, #8]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800268c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002690:	d101      	bne.n	8002696 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026e0:	d101      	bne.n	80026e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002704:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800272c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002730:	f043 0202 	orr.w	r2, r3, #2
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <LL_ADC_IsEnabled+0x18>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <LL_ADC_IsEnabled+0x1a>
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b02      	cmp	r3, #2
 800277c:	d101      	bne.n	8002782 <LL_ADC_IsDisableOngoing+0x18>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <LL_ADC_IsDisableOngoing+0x1a>
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d101      	bne.n	80027d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d101      	bne.n	80027f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e177      	b.n	8002b0e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff fa01 	bl	8001c34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff19 	bl	800267c <LL_ADC_IsDeepPowerDownEnabled>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff feff 	bl	8002658 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ff34 	bl	80026cc <LL_ADC_IsInternalRegulatorEnabled>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d115      	bne.n	8002896 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff18 	bl	80026a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002874:	4b9c      	ldr	r3, [pc, #624]	; (8002ae8 <HAL_ADC_Init+0x2e4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	099b      	lsrs	r3, r3, #6
 800287a:	4a9c      	ldr	r2, [pc, #624]	; (8002aec <HAL_ADC_Init+0x2e8>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	3301      	adds	r3, #1
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002888:	e002      	b.n	8002890 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	3b01      	subs	r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f9      	bne.n	800288a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff ff16 	bl	80026cc <LL_ADC_IsInternalRegulatorEnabled>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10d      	bne.n	80028c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	f043 0210 	orr.w	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b6:	f043 0201 	orr.w	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ff76 	bl	80027b8 <LL_ADC_REG_IsConversionOngoing>
 80028cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f040 8110 	bne.w	8002afc <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 810c 	bne.w	8002afc <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028ec:	f043 0202 	orr.w	r2, r3, #2
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff23 	bl	8002744 <LL_ADC_IsEnabled>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d111      	bne.n	8002928 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002904:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002908:	f7ff ff1c 	bl	8002744 <LL_ADC_IsEnabled>
 800290c:	4604      	mov	r4, r0
 800290e:	4878      	ldr	r0, [pc, #480]	; (8002af0 <HAL_ADC_Init+0x2ec>)
 8002910:	f7ff ff18 	bl	8002744 <LL_ADC_IsEnabled>
 8002914:	4603      	mov	r3, r0
 8002916:	4323      	orrs	r3, r4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d105      	bne.n	8002928 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4619      	mov	r1, r3
 8002922:	4874      	ldr	r0, [pc, #464]	; (8002af4 <HAL_ADC_Init+0x2f0>)
 8002924:	f7ff fd04 	bl	8002330 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7f5b      	ldrb	r3, [r3, #29]
 800292c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002932:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002938:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800293e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002946:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002952:	2b01      	cmp	r3, #1
 8002954:	d106      	bne.n	8002964 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	3b01      	subs	r3, #1
 800295c:	045b      	lsls	r3, r3, #17
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d009      	beq.n	8002980 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	4b5c      	ldr	r3, [pc, #368]	; (8002af8 <HAL_ADC_Init+0x2f4>)
 8002988:	4013      	ands	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	69b9      	ldr	r1, [r7, #24]
 8002990:	430b      	orrs	r3, r1
 8002992:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff02 	bl	80027b8 <LL_ADC_REG_IsConversionOngoing>
 80029b4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff0f 	bl	80027de <LL_ADC_INJ_IsConversionOngoing>
 80029c0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d16d      	bne.n	8002aa4 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d16a      	bne.n	8002aa4 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029d2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029da:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ea:	f023 0302 	bic.w	r3, r3, #2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	69b9      	ldr	r1, [r7, #24]
 80029f4:	430b      	orrs	r3, r1
 80029f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d017      	beq.n	8002a30 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a18:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6911      	ldr	r1, [r2, #16]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002a2e:	e013      	b.n	8002a58 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a54:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d118      	bne.n	8002a94 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a6c:	f023 0304 	bic.w	r3, r3, #4
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a78:	4311      	orrs	r1, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a7e:	4311      	orrs	r1, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a84:	430a      	orrs	r2, r1
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0201 	orr.w	r2, r2, #1
 8002a90:	611a      	str	r2, [r3, #16]
 8002a92:	e007      	b.n	8002aa4 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d10c      	bne.n	8002ac6 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f023 010f 	bic.w	r1, r3, #15
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	1e5a      	subs	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ac4:	e007      	b.n	8002ad6 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 020f 	bic.w	r2, r2, #15
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	f043 0201 	orr.w	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ae6:	e011      	b.n	8002b0c <HAL_ADC_Init+0x308>
 8002ae8:	20000098 	.word	0x20000098
 8002aec:	053e2d63 	.word	0x053e2d63
 8002af0:	50000100 	.word	0x50000100
 8002af4:	50000300 	.word	0x50000300
 8002af8:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	f043 0210 	orr.w	r2, r3, #16
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3724      	adds	r7, #36	; 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd90      	pop	{r4, r7, pc}
 8002b16:	bf00      	nop

08002b18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b24:	4851      	ldr	r0, [pc, #324]	; (8002c6c <HAL_ADC_Start_DMA+0x154>)
 8002b26:	f7ff fd7b 	bl	8002620 <LL_ADC_GetMultimode>
 8002b2a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fe41 	bl	80027b8 <LL_ADC_REG_IsConversionOngoing>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f040 808f 	bne.w	8002c5c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_Start_DMA+0x34>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e08a      	b.n	8002c62 <HAL_ADC_Start_DMA+0x14a>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b05      	cmp	r3, #5
 8002b5e:	d002      	beq.n	8002b66 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2b09      	cmp	r3, #9
 8002b64:	d173      	bne.n	8002c4e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 feb2 	bl	80038d0 <ADC_Enable>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d166      	bne.n	8002c44 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a38      	ldr	r2, [pc, #224]	; (8002c70 <HAL_ADC_Start_DMA+0x158>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d002      	beq.n	8002b9a <HAL_ADC_Start_DMA+0x82>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	e001      	b.n	8002b9e <HAL_ADC_Start_DMA+0x86>
 8002b9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d002      	beq.n	8002bac <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d105      	bne.n	8002bb8 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d006      	beq.n	8002bd2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc8:	f023 0206 	bic.w	r2, r3, #6
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	661a      	str	r2, [r3, #96]	; 0x60
 8002bd0:	e002      	b.n	8002bd8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bdc:	4a25      	ldr	r2, [pc, #148]	; (8002c74 <HAL_ADC_Start_DMA+0x15c>)
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	4a24      	ldr	r2, [pc, #144]	; (8002c78 <HAL_ADC_Start_DMA+0x160>)
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bec:	4a23      	ldr	r2, [pc, #140]	; (8002c7c <HAL_ADC_Start_DMA+0x164>)
 8002bee:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	221c      	movs	r2, #28
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0210 	orr.w	r2, r2, #16
 8002c0e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3340      	adds	r3, #64	; 0x40
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f001 fab6 	bl	80041a0 <HAL_DMA_Start_IT>
 8002c34:	4603      	mov	r3, r0
 8002c36:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fda7 	bl	8002790 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c42:	e00d      	b.n	8002c60 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002c4c:	e008      	b.n	8002c60 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002c5a:	e001      	b.n	8002c60 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	50000300 	.word	0x50000300
 8002c70:	50000100 	.word	0x50000100
 8002c74:	08003a53 	.word	0x08003a53
 8002c78:	08003b2b 	.word	0x08003b2b
 8002c7c:	08003b47 	.word	0x08003b47

08002c80 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	; 0x28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c88:	2300      	movs	r3, #0
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c9c:	4883      	ldr	r0, [pc, #524]	; (8002eac <HAL_ADC_IRQHandler+0x22c>)
 8002c9e:	f7ff fcbf 	bl	8002620 <LL_ADC_GetMultimode>
 8002ca2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d017      	beq.n	8002cde <HAL_ADC_IRQHandler+0x5e>
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d012      	beq.n	8002cde <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f001 f82f 	bl	8003d34 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <HAL_ADC_IRQHandler+0x72>
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10a      	bne.n	8002d08 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8085 	beq.w	8002e08 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d07f      	beq.n	8002e08 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fbd5 	bl	80024d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d064      	beq.n	8002dfa <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a5e      	ldr	r2, [pc, #376]	; (8002eb0 <HAL_ADC_IRQHandler+0x230>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d002      	beq.n	8002d40 <HAL_ADC_IRQHandler+0xc0>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	e001      	b.n	8002d44 <HAL_ADC_IRQHandler+0xc4>
 8002d40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d008      	beq.n	8002d5e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d002      	beq.n	8002d5e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2b09      	cmp	r3, #9
 8002d5c:	d104      	bne.n	8002d68 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	623b      	str	r3, [r7, #32]
 8002d66:	e00d      	b.n	8002d84 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a50      	ldr	r2, [pc, #320]	; (8002eb0 <HAL_ADC_IRQHandler+0x230>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d002      	beq.n	8002d78 <HAL_ADC_IRQHandler+0xf8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	e001      	b.n	8002d7c <HAL_ADC_IRQHandler+0xfc>
 8002d78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d7c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d135      	bne.n	8002dfa <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d12e      	bne.n	8002dfa <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fd09 	bl	80027b8 <LL_ADC_REG_IsConversionOngoing>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d11a      	bne.n	8002de2 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 020c 	bic.w	r2, r2, #12
 8002dba:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d112      	bne.n	8002dfa <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	65da      	str	r2, [r3, #92]	; 0x5c
 8002de0:	e00b      	b.n	8002dfa <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de6:	f043 0210 	orr.w	r2, r3, #16
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df2:	f043 0201 	orr.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe fed4 	bl	8001ba8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	220c      	movs	r2, #12
 8002e06:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <HAL_ADC_IRQHandler+0x19c>
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 809e 	beq.w	8002f64 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8098 	beq.w	8002f64 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d105      	bne.n	8002e4c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fb7e 	bl	8002552 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002e56:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fb39 	bl	80024d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e62:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a11      	ldr	r2, [pc, #68]	; (8002eb0 <HAL_ADC_IRQHandler+0x230>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d002      	beq.n	8002e74 <HAL_ADC_IRQHandler+0x1f4>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	e001      	b.n	8002e78 <HAL_ADC_IRQHandler+0x1f8>
 8002e74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d008      	beq.n	8002e92 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b06      	cmp	r3, #6
 8002e8a:	d002      	beq.n	8002e92 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b07      	cmp	r3, #7
 8002e90:	d104      	bne.n	8002e9c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	623b      	str	r3, [r7, #32]
 8002e9a:	e011      	b.n	8002ec0 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a03      	ldr	r2, [pc, #12]	; (8002eb0 <HAL_ADC_IRQHandler+0x230>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d006      	beq.n	8002eb4 <HAL_ADC_IRQHandler+0x234>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	e005      	b.n	8002eb8 <HAL_ADC_IRQHandler+0x238>
 8002eac:	50000300 	.word	0x50000300
 8002eb0:	50000100 	.word	0x50000100
 8002eb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002eb8:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d047      	beq.n	8002f56 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d007      	beq.n	8002ee0 <HAL_ADC_IRQHandler+0x260>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d03f      	beq.n	8002f56 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d13a      	bne.n	8002f56 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d133      	bne.n	8002f56 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d12e      	bne.n	8002f56 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fc6e 	bl	80027de <LL_ADC_INJ_IsConversionOngoing>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d11a      	bne.n	8002f3e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f16:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d112      	bne.n	8002f56 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f3c:	e00b      	b.n	8002f56 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f42:	f043 0210 	orr.w	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4e:	f043 0201 	orr.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fec4 	bl	8003ce4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2260      	movs	r2, #96	; 0x60
 8002f62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d011      	beq.n	8002f92 <HAL_ADC_IRQHandler+0x312>
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00c      	beq.n	8002f92 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f89f 	bl	80030c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2280      	movs	r2, #128	; 0x80
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d012      	beq.n	8002fc2 <HAL_ADC_IRQHandler+0x342>
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 feaa 	bl	8003d0c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fc0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d012      	beq.n	8002ff2 <HAL_ADC_IRQHandler+0x372>
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fe9c 	bl	8003d20 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d036      	beq.n	800306a <HAL_ADC_IRQHandler+0x3ea>
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b00      	cmp	r3, #0
 8003004:	d031      	beq.n	800306a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800300e:	2301      	movs	r3, #1
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
 8003012:	e014      	b.n	800303e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800301a:	4825      	ldr	r0, [pc, #148]	; (80030b0 <HAL_ADC_IRQHandler+0x430>)
 800301c:	f7ff fb0e 	bl	800263c <LL_ADC_GetMultiDMATransfer>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003026:	2301      	movs	r3, #1
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	e008      	b.n	800303e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800303a:	2301      	movs	r3, #1
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	2b01      	cmp	r3, #1
 8003042:	d10e      	bne.n	8003062 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003048:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003054:	f043 0202 	orr.w	r2, r3, #2
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f83d 	bl	80030dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2210      	movs	r2, #16
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d018      	beq.n	80030a6 <HAL_ADC_IRQHandler+0x426>
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307a:	2b00      	cmp	r3, #0
 800307c:	d013      	beq.n	80030a6 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308e:	f043 0208 	orr.w	r2, r3, #8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800309e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fe29 	bl	8003cf8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80030a6:	bf00      	nop
 80030a8:	3728      	adds	r7, #40	; 0x28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	50000300 	.word	0x50000300

080030b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b0b6      	sub	sp, #216	; 0xd8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x22>
 800310e:	2302      	movs	r3, #2
 8003110:	e3c8      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x7b4>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fb4a 	bl	80027b8 <LL_ADC_REG_IsConversionOngoing>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 83ad 	bne.w	8003886 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	f7ff f9de 	bl	80024fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fb38 	bl	80027b8 <LL_ADC_REG_IsConversionOngoing>
 8003148:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fb44 	bl	80027de <LL_ADC_INJ_IsConversionOngoing>
 8003156:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800315a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 81d9 	bne.w	8003516 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003164:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003168:	2b00      	cmp	r3, #0
 800316a:	f040 81d4 	bne.w	8003516 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003176:	d10f      	bne.n	8003198 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2200      	movs	r2, #0
 8003182:	4619      	mov	r1, r3
 8003184:	f7ff f9f8 	bl	8002578 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff f98c 	bl	80024ae <LL_ADC_SetSamplingTimeCommonConfig>
 8003196:	e00e      	b.n	80031b6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6819      	ldr	r1, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	461a      	mov	r2, r3
 80031a6:	f7ff f9e7 	bl	8002578 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff f97c 	bl	80024ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	08db      	lsrs	r3, r3, #3
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d022      	beq.n	800321e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6919      	ldr	r1, [r3, #16]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031e8:	f7ff f8d6 	bl	8002398 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	6919      	ldr	r1, [r3, #16]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	461a      	mov	r2, r3
 80031fa:	f7ff f922 	bl	8002442 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6919      	ldr	r1, [r3, #16]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	7f1b      	ldrb	r3, [r3, #28]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d102      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x124>
 800320e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003212:	e000      	b.n	8003216 <HAL_ADC_ConfigChannel+0x126>
 8003214:	2300      	movs	r3, #0
 8003216:	461a      	mov	r2, r3
 8003218:	f7ff f92e 	bl	8002478 <LL_ADC_SetOffsetSaturation>
 800321c:	e17b      	b.n	8003516 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff f8db 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 800322a:	4603      	mov	r3, r0
 800322c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <HAL_ADC_ConfigChannel+0x15a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff f8d0 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 8003240:	4603      	mov	r3, r0
 8003242:	0e9b      	lsrs	r3, r3, #26
 8003244:	f003 021f 	and.w	r2, r3, #31
 8003248:	e01e      	b.n	8003288 <HAL_ADC_ConfigChannel+0x198>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff f8c5 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 8003256:	4603      	mov	r3, r0
 8003258:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003268:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800326c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003278:	2320      	movs	r3, #32
 800327a:	e004      	b.n	8003286 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800327c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003280:	fab3 f383 	clz	r3, r3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003290:	2b00      	cmp	r3, #0
 8003292:	d105      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x1b0>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	0e9b      	lsrs	r3, r3, #26
 800329a:	f003 031f 	and.w	r3, r3, #31
 800329e:	e018      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x1e2>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032ac:	fa93 f3a3 	rbit	r3, r3
 80032b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80032b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80032bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80032c4:	2320      	movs	r3, #32
 80032c6:	e004      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80032c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032cc:	fab3 f383 	clz	r3, r3
 80032d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d106      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2200      	movs	r2, #0
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff f894 	bl	800240c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2101      	movs	r1, #1
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff f878 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x220>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2101      	movs	r1, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff f86d 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 8003306:	4603      	mov	r3, r0
 8003308:	0e9b      	lsrs	r3, r3, #26
 800330a:	f003 021f 	and.w	r2, r3, #31
 800330e:	e01e      	b.n	800334e <HAL_ADC_ConfigChannel+0x25e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2101      	movs	r1, #1
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff f862 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 800331c:	4603      	mov	r3, r0
 800331e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003326:	fa93 f3a3 	rbit	r3, r3
 800332a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800332e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003332:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800333e:	2320      	movs	r3, #32
 8003340:	e004      	b.n	800334c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003356:	2b00      	cmp	r3, #0
 8003358:	d105      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x276>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	0e9b      	lsrs	r3, r3, #26
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	e018      	b.n	8003398 <HAL_ADC_ConfigChannel+0x2a8>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800337a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800337e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003382:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800338a:	2320      	movs	r3, #32
 800338c:	e004      	b.n	8003398 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800338e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003398:	429a      	cmp	r2, r3
 800339a:	d106      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2200      	movs	r2, #0
 80033a2:	2101      	movs	r1, #1
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff f831 	bl	800240c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2102      	movs	r1, #2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff f815 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x2e6>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2102      	movs	r1, #2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff f80a 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 80033cc:	4603      	mov	r3, r0
 80033ce:	0e9b      	lsrs	r3, r3, #26
 80033d0:	f003 021f 	and.w	r2, r3, #31
 80033d4:	e01e      	b.n	8003414 <HAL_ADC_ConfigChannel+0x324>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2102      	movs	r1, #2
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe ffff 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003404:	2320      	movs	r3, #32
 8003406:	e004      	b.n	8003412 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003408:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341c:	2b00      	cmp	r3, #0
 800341e:	d105      	bne.n	800342c <HAL_ADC_ConfigChannel+0x33c>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	0e9b      	lsrs	r3, r3, #26
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	e016      	b.n	800345a <HAL_ADC_ConfigChannel+0x36a>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003438:	fa93 f3a3 	rbit	r3, r3
 800343c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800343e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003444:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800344c:	2320      	movs	r3, #32
 800344e:	e004      	b.n	800345a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003450:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800345a:	429a      	cmp	r2, r3
 800345c:	d106      	bne.n	800346c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2200      	movs	r2, #0
 8003464:	2102      	movs	r1, #2
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe ffd0 	bl	800240c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2103      	movs	r1, #3
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe ffb4 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 8003478:	4603      	mov	r3, r0
 800347a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x3a8>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2103      	movs	r1, #3
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe ffa9 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 800348e:	4603      	mov	r3, r0
 8003490:	0e9b      	lsrs	r3, r3, #26
 8003492:	f003 021f 	and.w	r2, r3, #31
 8003496:	e017      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x3d8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2103      	movs	r1, #3
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fe ff9e 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 80034a4:	4603      	mov	r3, r0
 80034a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80034b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034b2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80034b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80034ba:	2320      	movs	r3, #32
 80034bc:	e003      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80034be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d105      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x3f0>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	0e9b      	lsrs	r3, r3, #26
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	e011      	b.n	8003504 <HAL_ADC_ConfigChannel+0x414>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80034f8:	2320      	movs	r3, #32
 80034fa:	e003      	b.n	8003504 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80034fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fe:	fab3 f383 	clz	r3, r3
 8003502:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003504:	429a      	cmp	r2, r3
 8003506:	d106      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2200      	movs	r2, #0
 800350e:	2103      	movs	r1, #3
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe ff7b 	bl	800240c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff f912 	bl	8002744 <LL_ADC_IsEnabled>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	f040 8140 	bne.w	80037a8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	6819      	ldr	r1, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	461a      	mov	r2, r3
 8003536:	f7ff f84b 	bl	80025d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	4a8f      	ldr	r2, [pc, #572]	; (800377c <HAL_ADC_ConfigChannel+0x68c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	f040 8131 	bne.w	80037a8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <HAL_ADC_ConfigChannel+0x47e>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	0e9b      	lsrs	r3, r3, #26
 800355c:	3301      	adds	r3, #1
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2b09      	cmp	r3, #9
 8003564:	bf94      	ite	ls
 8003566:	2301      	movls	r3, #1
 8003568:	2300      	movhi	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	e019      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x4b2>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800357c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800357e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003586:	2320      	movs	r3, #32
 8003588:	e003      	b.n	8003592 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800358a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800358c:	fab3 f383 	clz	r3, r3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	3301      	adds	r3, #1
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	2b09      	cmp	r3, #9
 800359a:	bf94      	ite	ls
 800359c:	2301      	movls	r3, #1
 800359e:	2300      	movhi	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d079      	beq.n	800369a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x4d2>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	0e9b      	lsrs	r3, r3, #26
 80035b8:	3301      	adds	r3, #1
 80035ba:	069b      	lsls	r3, r3, #26
 80035bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035c0:	e015      	b.n	80035ee <HAL_ADC_ConfigChannel+0x4fe>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80035d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80035da:	2320      	movs	r3, #32
 80035dc:	e003      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80035de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e0:	fab3 f383 	clz	r3, r3
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	069b      	lsls	r3, r3, #26
 80035ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_ADC_ConfigChannel+0x51e>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0e9b      	lsrs	r3, r3, #26
 8003600:	3301      	adds	r3, #1
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	2101      	movs	r1, #1
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	e017      	b.n	800363e <HAL_ADC_ConfigChannel+0x54e>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800361c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800361e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003626:	2320      	movs	r3, #32
 8003628:	e003      	b.n	8003632 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800362a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	3301      	adds	r3, #1
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2101      	movs	r1, #1
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	ea42 0103 	orr.w	r1, r2, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x574>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	0e9b      	lsrs	r3, r3, #26
 8003654:	3301      	adds	r3, #1
 8003656:	f003 021f 	and.w	r2, r3, #31
 800365a:	4613      	mov	r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4413      	add	r3, r2
 8003660:	051b      	lsls	r3, r3, #20
 8003662:	e018      	b.n	8003696 <HAL_ADC_ConfigChannel+0x5a6>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003674:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800367c:	2320      	movs	r3, #32
 800367e:	e003      	b.n	8003688 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	3301      	adds	r3, #1
 800368a:	f003 021f 	and.w	r2, r3, #31
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003696:	430b      	orrs	r3, r1
 8003698:	e081      	b.n	800379e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d107      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x5c6>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	0e9b      	lsrs	r3, r3, #26
 80036ac:	3301      	adds	r3, #1
 80036ae:	069b      	lsls	r3, r3, #26
 80036b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b4:	e015      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x5f2>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80036ce:	2320      	movs	r3, #32
 80036d0:	e003      	b.n	80036da <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	3301      	adds	r3, #1
 80036dc:	069b      	lsls	r3, r3, #26
 80036de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x612>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	0e9b      	lsrs	r3, r3, #26
 80036f4:	3301      	adds	r3, #1
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	2101      	movs	r1, #1
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	e017      	b.n	8003732 <HAL_ADC_ConfigChannel+0x642>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	61fb      	str	r3, [r7, #28]
  return result;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800371a:	2320      	movs	r3, #32
 800371c:	e003      	b.n	8003726 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	fab3 f383 	clz	r3, r3
 8003724:	b2db      	uxtb	r3, r3
 8003726:	3301      	adds	r3, #1
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2101      	movs	r1, #1
 800372e:	fa01 f303 	lsl.w	r3, r1, r3
 8003732:	ea42 0103 	orr.w	r1, r2, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10d      	bne.n	800375e <HAL_ADC_ConfigChannel+0x66e>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	0e9b      	lsrs	r3, r3, #26
 8003748:	3301      	adds	r3, #1
 800374a:	f003 021f 	and.w	r2, r3, #31
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	3b1e      	subs	r3, #30
 8003756:	051b      	lsls	r3, r3, #20
 8003758:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800375c:	e01e      	b.n	800379c <HAL_ADC_ConfigChannel+0x6ac>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	613b      	str	r3, [r7, #16]
  return result;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003776:	2320      	movs	r3, #32
 8003778:	e006      	b.n	8003788 <HAL_ADC_ConfigChannel+0x698>
 800377a:	bf00      	nop
 800377c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	3301      	adds	r3, #1
 800378a:	f003 021f 	and.w	r2, r3, #31
 800378e:	4613      	mov	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	3b1e      	subs	r3, #30
 8003796:	051b      	lsls	r3, r3, #20
 8003798:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800379c:	430b      	orrs	r3, r1
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	6892      	ldr	r2, [r2, #8]
 80037a2:	4619      	mov	r1, r3
 80037a4:	f7fe fee8 	bl	8002578 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b3f      	ldr	r3, [pc, #252]	; (80038ac <HAL_ADC_ConfigChannel+0x7bc>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d071      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037b4:	483e      	ldr	r0, [pc, #248]	; (80038b0 <HAL_ADC_ConfigChannel+0x7c0>)
 80037b6:	f7fe fde1 	bl	800237c <LL_ADC_GetCommonPathInternalCh>
 80037ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a3c      	ldr	r2, [pc, #240]	; (80038b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_ADC_ConfigChannel+0x6e2>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a3a      	ldr	r2, [pc, #232]	; (80038b8 <HAL_ADC_ConfigChannel+0x7c8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d127      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d121      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037e6:	d157      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037f0:	4619      	mov	r1, r3
 80037f2:	482f      	ldr	r0, [pc, #188]	; (80038b0 <HAL_ADC_ConfigChannel+0x7c0>)
 80037f4:	f7fe fdaf 	bl	8002356 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037f8:	4b30      	ldr	r3, [pc, #192]	; (80038bc <HAL_ADC_ConfigChannel+0x7cc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	099b      	lsrs	r3, r3, #6
 80037fe:	4a30      	ldr	r2, [pc, #192]	; (80038c0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	099b      	lsrs	r3, r3, #6
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	4613      	mov	r3, r2
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003812:	e002      	b.n	800381a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3b01      	subs	r3, #1
 8003818:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f9      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003820:	e03a      	b.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a27      	ldr	r2, [pc, #156]	; (80038c4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d113      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x764>
 800382c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10d      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <HAL_ADC_ConfigChannel+0x7d8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d02a      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384a:	4619      	mov	r1, r3
 800384c:	4818      	ldr	r0, [pc, #96]	; (80038b0 <HAL_ADC_ConfigChannel+0x7c0>)
 800384e:	f7fe fd82 	bl	8002356 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003852:	e021      	b.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <HAL_ADC_ConfigChannel+0x7dc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d11c      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800385e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d116      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a16      	ldr	r2, [pc, #88]	; (80038c8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d011      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003874:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003878:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800387c:	4619      	mov	r1, r3
 800387e:	480c      	ldr	r0, [pc, #48]	; (80038b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003880:	f7fe fd69 	bl	8002356 <LL_ADC_SetCommonPathInternalCh>
 8003884:	e008      	b.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80038a0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	37d8      	adds	r7, #216	; 0xd8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	80080000 	.word	0x80080000
 80038b0:	50000300 	.word	0x50000300
 80038b4:	c3210000 	.word	0xc3210000
 80038b8:	90c00010 	.word	0x90c00010
 80038bc:	20000098 	.word	0x20000098
 80038c0:	053e2d63 	.word	0x053e2d63
 80038c4:	c7520000 	.word	0xc7520000
 80038c8:	50000100 	.word	0x50000100
 80038cc:	cb840000 	.word	0xcb840000

080038d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe ff31 	bl	8002744 <LL_ADC_IsEnabled>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d14d      	bne.n	8003984 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	4b28      	ldr	r3, [pc, #160]	; (8003990 <ADC_Enable+0xc0>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00d      	beq.n	8003912 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	f043 0210 	orr.w	r2, r3, #16
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003906:	f043 0201 	orr.w	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e039      	b.n	8003986 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe feec 	bl	80026f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800391c:	f7fe fcda 	bl	80022d4 <HAL_GetTick>
 8003920:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003922:	e028      	b.n	8003976 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe ff0b 	bl	8002744 <LL_ADC_IsEnabled>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d104      	bne.n	800393e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7fe fedb 	bl	80026f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800393e:	f7fe fcc9 	bl	80022d4 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d914      	bls.n	8003976 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b01      	cmp	r3, #1
 8003958:	d00d      	beq.n	8003976 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	f043 0210 	orr.w	r2, r3, #16
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396a:	f043 0201 	orr.w	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e007      	b.n	8003986 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d1cf      	bne.n	8003924 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	8000003f 	.word	0x8000003f

08003994 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe fee2 	bl	800276a <LL_ADC_IsDisableOngoing>
 80039a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe fec9 	bl	8002744 <LL_ADC_IsEnabled>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d047      	beq.n	8003a48 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d144      	bne.n	8003a48 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 030d 	and.w	r3, r3, #13
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d10c      	bne.n	80039e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fe fea3 	bl	800271c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2203      	movs	r2, #3
 80039dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039de:	f7fe fc79 	bl	80022d4 <HAL_GetTick>
 80039e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039e4:	e029      	b.n	8003a3a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	f043 0210 	orr.w	r2, r3, #16
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f6:	f043 0201 	orr.w	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e023      	b.n	8003a4a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a02:	f7fe fc67 	bl	80022d4 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d914      	bls.n	8003a3a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a22:	f043 0210 	orr.w	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e007      	b.n	8003a4a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1dc      	bne.n	8003a02 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d14b      	bne.n	8003b04 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d021      	beq.n	8003aca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fd22 	bl	80024d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d032      	beq.n	8003afc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d12b      	bne.n	8003afc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d11f      	bne.n	8003afc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	f043 0201 	orr.w	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ac8:	e018      	b.n	8003afc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d111      	bne.n	8003afc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d105      	bne.n	8003afc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	f043 0201 	orr.w	r2, r3, #1
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7fe f853 	bl	8001ba8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b02:	e00e      	b.n	8003b22 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f7ff fae3 	bl	80030dc <HAL_ADC_ErrorCallback>
}
 8003b16:	e004      	b.n	8003b22 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	4798      	blx	r3
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff fabb 	bl	80030b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b64:	f043 0204 	orr.w	r2, r3, #4
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f7ff fab5 	bl	80030dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <LL_ADC_IsEnabled>:
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <LL_ADC_IsEnabled+0x18>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <LL_ADC_IsEnabled+0x1a>
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_ADC_StartCalibration>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003bb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	609a      	str	r2, [r3, #8]
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_ADC_IsCalibrationOnGoing>:
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be6:	d101      	bne.n	8003bec <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <LL_ADC_REG_IsConversionOngoing>:
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d101      	bne.n	8003c12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_ADCEx_Calibration_Start+0x1c>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e04d      	b.n	8003cd8 <HAL_ADCEx_Calibration_Start+0xb8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff fea5 	bl	8003994 <ADC_Disable>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d136      	bne.n	8003cc2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c5c:	f023 0302 	bic.w	r3, r3, #2
 8003c60:	f043 0202 	orr.w	r2, r3, #2
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6839      	ldr	r1, [r7, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff ff96 	bl	8003ba0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c74:	e014      	b.n	8003ca0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4a18      	ldr	r2, [pc, #96]	; (8003ce0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d90d      	bls.n	8003ca0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c88:	f023 0312 	bic.w	r3, r3, #18
 8003c8c:	f043 0210 	orr.w	r2, r3, #16
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e01b      	b.n	8003cd8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff ff94 	bl	8003bd2 <LL_ADC_IsCalibrationOnGoing>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e2      	bne.n	8003c76 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb4:	f023 0303 	bic.w	r3, r3, #3
 8003cb8:	f043 0201 	orr.w	r2, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cc0:	e005      	b.n	8003cce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc6:	f043 0210 	orr.w	r2, r3, #16
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	0004de01 	.word	0x0004de01

08003ce4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b0a1      	sub	sp, #132	; 0x84
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e08b      	b.n	8003e7e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003d72:	2300      	movs	r3, #0
 8003d74:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d7e:	d102      	bne.n	8003d86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d80:	4b41      	ldr	r3, [pc, #260]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	e001      	b.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e06a      	b.n	8003e7e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff ff25 	bl	8003bfa <LL_ADC_REG_IsConversionOngoing>
 8003db0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff ff1f 	bl	8003bfa <LL_ADC_REG_IsConversionOngoing>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d14c      	bne.n	8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d149      	bne.n	8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003dc8:	4b30      	ldr	r3, [pc, #192]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003dca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d028      	beq.n	8003e26 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003de6:	035b      	lsls	r3, r3, #13
 8003de8:	430b      	orrs	r3, r1
 8003dea:	431a      	orrs	r2, r3
 8003dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003df0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003df4:	f7ff fec1 	bl	8003b7a <LL_ADC_IsEnabled>
 8003df8:	4604      	mov	r4, r0
 8003dfa:	4823      	ldr	r0, [pc, #140]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003dfc:	f7ff febd 	bl	8003b7a <LL_ADC_IsEnabled>
 8003e00:	4603      	mov	r3, r0
 8003e02:	4323      	orrs	r3, r4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d133      	bne.n	8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e10:	f023 030f 	bic.w	r3, r3, #15
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	6811      	ldr	r1, [r2, #0]
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	6892      	ldr	r2, [r2, #8]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e22:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e24:	e024      	b.n	8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e30:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e32:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e36:	f7ff fea0 	bl	8003b7a <LL_ADC_IsEnabled>
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4812      	ldr	r0, [pc, #72]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003e3e:	f7ff fe9c 	bl	8003b7a <LL_ADC_IsEnabled>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4323      	orrs	r3, r4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d112      	bne.n	8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e52:	f023 030f 	bic.w	r3, r3, #15
 8003e56:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e58:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e5a:	e009      	b.n	8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	f043 0220 	orr.w	r2, r3, #32
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e6e:	e000      	b.n	8003e72 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e70:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3784      	adds	r7, #132	; 0x84
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd90      	pop	{r4, r7, pc}
 8003e86:	bf00      	nop
 8003e88:	50000100 	.word	0x50000100
 8003e8c:	50000300 	.word	0x50000300

08003e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eac:	4013      	ands	r3, r2
 8003eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ec2:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	60d3      	str	r3, [r2, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	0a1b      	lsrs	r3, r3, #8
 8003ee2:	f003 0307 	and.w	r3, r3, #7
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	db0b      	blt.n	8003f1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	f003 021f 	and.w	r2, r3, #31
 8003f0c:	4907      	ldr	r1, [pc, #28]	; (8003f2c <__NVIC_EnableIRQ+0x38>)
 8003f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	2001      	movs	r0, #1
 8003f16:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	e000e100 	.word	0xe000e100

08003f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	6039      	str	r1, [r7, #0]
 8003f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	db0a      	blt.n	8003f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	490c      	ldr	r1, [pc, #48]	; (8003f7c <__NVIC_SetPriority+0x4c>)
 8003f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4e:	0112      	lsls	r2, r2, #4
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	440b      	add	r3, r1
 8003f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f58:	e00a      	b.n	8003f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	4908      	ldr	r1, [pc, #32]	; (8003f80 <__NVIC_SetPriority+0x50>)
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	3b04      	subs	r3, #4
 8003f68:	0112      	lsls	r2, r2, #4
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	761a      	strb	r2, [r3, #24]
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	e000e100 	.word	0xe000e100
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b089      	sub	sp, #36	; 0x24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f1c3 0307 	rsb	r3, r3, #7
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	bf28      	it	cs
 8003fa2:	2304      	movcs	r3, #4
 8003fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	2b06      	cmp	r3, #6
 8003fac:	d902      	bls.n	8003fb4 <NVIC_EncodePriority+0x30>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3b03      	subs	r3, #3
 8003fb2:	e000      	b.n	8003fb6 <NVIC_EncodePriority+0x32>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43da      	mvns	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd6:	43d9      	mvns	r1, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fdc:	4313      	orrs	r3, r2
         );
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3724      	adds	r7, #36	; 0x24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff ff4c 	bl	8003e90 <__NVIC_SetPriorityGrouping>
}
 8003ff8:	bf00      	nop
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800400e:	f7ff ff63 	bl	8003ed8 <__NVIC_GetPriorityGrouping>
 8004012:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68b9      	ldr	r1, [r7, #8]
 8004018:	6978      	ldr	r0, [r7, #20]
 800401a:	f7ff ffb3 	bl	8003f84 <NVIC_EncodePriority>
 800401e:	4602      	mov	r2, r0
 8004020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ff82 	bl	8003f30 <__NVIC_SetPriority>
}
 800402c:	bf00      	nop
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ff56 	bl	8003ef4 <__NVIC_EnableIRQ>
}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e08d      	b.n	800417e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	4b47      	ldr	r3, [pc, #284]	; (8004188 <HAL_DMA_Init+0x138>)
 800406a:	429a      	cmp	r2, r3
 800406c:	d80f      	bhi.n	800408e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	4b45      	ldr	r3, [pc, #276]	; (800418c <HAL_DMA_Init+0x13c>)
 8004076:	4413      	add	r3, r2
 8004078:	4a45      	ldr	r2, [pc, #276]	; (8004190 <HAL_DMA_Init+0x140>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	009a      	lsls	r2, r3, #2
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a42      	ldr	r2, [pc, #264]	; (8004194 <HAL_DMA_Init+0x144>)
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
 800408c:	e00e      	b.n	80040ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	4b40      	ldr	r3, [pc, #256]	; (8004198 <HAL_DMA_Init+0x148>)
 8004096:	4413      	add	r3, r2
 8004098:	4a3d      	ldr	r2, [pc, #244]	; (8004190 <HAL_DMA_Init+0x140>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	009a      	lsls	r2, r3, #2
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a3c      	ldr	r2, [pc, #240]	; (800419c <HAL_DMA_Init+0x14c>)
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fa76 	bl	80045f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800410c:	d102      	bne.n	8004114 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004128:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d010      	beq.n	8004154 <HAL_DMA_Init+0x104>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b04      	cmp	r3, #4
 8004138:	d80c      	bhi.n	8004154 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fa96 	bl	800466c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	e008      	b.n	8004166 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40020407 	.word	0x40020407
 800418c:	bffdfff8 	.word	0xbffdfff8
 8004190:	cccccccd 	.word	0xcccccccd
 8004194:	40020000 	.word	0x40020000
 8004198:	bffdfbf8 	.word	0xbffdfbf8
 800419c:	40020400 	.word	0x40020400

080041a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_DMA_Start_IT+0x20>
 80041bc:	2302      	movs	r3, #2
 80041be:	e066      	b.n	800428e <HAL_DMA_Start_IT+0xee>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d155      	bne.n	8004280 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f9bb 	bl	8004574 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 020e 	orr.w	r2, r2, #14
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e00f      	b.n	8004238 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 020a 	orr.w	r2, r2, #10
 8004236:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004254:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0201 	orr.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e005      	b.n	800428c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004288:	2302      	movs	r3, #2
 800428a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800428c:	7dfb      	ldrb	r3, [r7, #23]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d005      	beq.n	80042ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2204      	movs	r2, #4
 80042b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
 80042b8:	e037      	b.n	800432a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 020e 	bic.w	r2, r2, #14
 80042c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f003 021f 	and.w	r2, r3, #31
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2101      	movs	r1, #1
 80042f8:	fa01 f202 	lsl.w	r2, r1, r2
 80042fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004306:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00c      	beq.n	800432a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800431e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004328:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800433a:	7bfb      	ldrb	r3, [r7, #15]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d00d      	beq.n	800437c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2204      	movs	r2, #4
 8004364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
 800437a:	e047      	b.n	800440c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 020e 	bic.w	r2, r2, #14
 800438a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	f003 021f 	and.w	r2, r3, #31
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	2101      	movs	r1, #1
 80043ba:	fa01 f202 	lsl.w	r2, r1, r2
 80043be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00c      	beq.n	80043ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
    }
  }
  return status;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	f003 031f 	and.w	r3, r3, #31
 8004436:	2204      	movs	r2, #4
 8004438:	409a      	lsls	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4013      	ands	r3, r2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d026      	beq.n	8004490 <HAL_DMA_IRQHandler+0x7a>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d021      	beq.n	8004490 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b00      	cmp	r3, #0
 8004458:	d107      	bne.n	800446a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0204 	bic.w	r2, r2, #4
 8004468:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	f003 021f 	and.w	r2, r3, #31
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	2104      	movs	r1, #4
 8004478:	fa01 f202 	lsl.w	r2, r1, r2
 800447c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	2b00      	cmp	r3, #0
 8004484:	d071      	beq.n	800456a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800448e:	e06c      	b.n	800456a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	2202      	movs	r2, #2
 800449a:	409a      	lsls	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d02e      	beq.n	8004502 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d029      	beq.n	8004502 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10b      	bne.n	80044d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 020a 	bic.w	r2, r2, #10
 80044ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d8:	f003 021f 	and.w	r2, r3, #31
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	2102      	movs	r1, #2
 80044e2:	fa01 f202 	lsl.w	r2, r1, r2
 80044e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d038      	beq.n	800456a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004500:	e033      	b.n	800456a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	2208      	movs	r2, #8
 800450c:	409a      	lsls	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d02a      	beq.n	800456c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d025      	beq.n	800456c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 020e 	bic.w	r2, r2, #14
 800452e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004534:	f003 021f 	and.w	r2, r3, #31
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	2101      	movs	r1, #1
 800453e:	fa01 f202 	lsl.w	r2, r1, r2
 8004542:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455e:	2b00      	cmp	r3, #0
 8004560:	d004      	beq.n	800456c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800456a:	bf00      	nop
 800456c:	bf00      	nop
}
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800458a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004590:	2b00      	cmp	r3, #0
 8004592:	d004      	beq.n	800459e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800459c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	f003 021f 	and.w	r2, r3, #31
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	2101      	movs	r1, #1
 80045ac:	fa01 f202 	lsl.w	r2, r1, r2
 80045b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d108      	bne.n	80045d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045d2:	e007      	b.n	80045e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	60da      	str	r2, [r3, #12]
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	4b16      	ldr	r3, [pc, #88]	; (8004658 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004600:	429a      	cmp	r2, r3
 8004602:	d802      	bhi.n	800460a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004604:	4b15      	ldr	r3, [pc, #84]	; (800465c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	e001      	b.n	800460e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800460a:	4b15      	ldr	r3, [pc, #84]	; (8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800460c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	3b08      	subs	r3, #8
 800461a:	4a12      	ldr	r2, [pc, #72]	; (8004664 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	091b      	lsrs	r3, r3, #4
 8004622:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004628:	089b      	lsrs	r3, r3, #2
 800462a:	009a      	lsls	r2, r3, #2
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4413      	add	r3, r2
 8004630:	461a      	mov	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a0b      	ldr	r2, [pc, #44]	; (8004668 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800463a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	2201      	movs	r2, #1
 8004644:	409a      	lsls	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	651a      	str	r2, [r3, #80]	; 0x50
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40020407 	.word	0x40020407
 800465c:	40020800 	.word	0x40020800
 8004660:	40020820 	.word	0x40020820
 8004664:	cccccccd 	.word	0xcccccccd
 8004668:	40020880 	.word	0x40020880

0800466c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	461a      	mov	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800468e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3b01      	subs	r3, #1
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	2201      	movs	r2, #1
 800469a:	409a      	lsls	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	1000823f 	.word	0x1000823f
 80046b0:	40020940 	.word	0x40020940

080046b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046c2:	e15a      	b.n	800497a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	2101      	movs	r1, #1
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	fa01 f303 	lsl.w	r3, r1, r3
 80046d0:	4013      	ands	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 814c 	beq.w	8004974 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d005      	beq.n	80046f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d130      	bne.n	8004756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	2203      	movs	r2, #3
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4013      	ands	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800472a:	2201      	movs	r2, #1
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43db      	mvns	r3, r3
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4013      	ands	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	f003 0201 	and.w	r2, r3, #1
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	2b03      	cmp	r3, #3
 8004760:	d017      	beq.n	8004792 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	2203      	movs	r2, #3
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	43db      	mvns	r3, r3
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4013      	ands	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d123      	bne.n	80047e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	08da      	lsrs	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3208      	adds	r2, #8
 80047a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	220f      	movs	r2, #15
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43db      	mvns	r3, r3
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4013      	ands	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	08da      	lsrs	r2, r3, #3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3208      	adds	r2, #8
 80047e0:	6939      	ldr	r1, [r7, #16]
 80047e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	2203      	movs	r2, #3
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43db      	mvns	r3, r3
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4013      	ands	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f003 0203 	and.w	r2, r3, #3
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 80a6 	beq.w	8004974 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004828:	4b5b      	ldr	r3, [pc, #364]	; (8004998 <HAL_GPIO_Init+0x2e4>)
 800482a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482c:	4a5a      	ldr	r2, [pc, #360]	; (8004998 <HAL_GPIO_Init+0x2e4>)
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	6613      	str	r3, [r2, #96]	; 0x60
 8004834:	4b58      	ldr	r3, [pc, #352]	; (8004998 <HAL_GPIO_Init+0x2e4>)
 8004836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004840:	4a56      	ldr	r2, [pc, #344]	; (800499c <HAL_GPIO_Init+0x2e8>)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	089b      	lsrs	r3, r3, #2
 8004846:	3302      	adds	r3, #2
 8004848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	220f      	movs	r2, #15
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	43db      	mvns	r3, r3
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4013      	ands	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800486a:	d01f      	beq.n	80048ac <HAL_GPIO_Init+0x1f8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a4c      	ldr	r2, [pc, #304]	; (80049a0 <HAL_GPIO_Init+0x2ec>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d019      	beq.n	80048a8 <HAL_GPIO_Init+0x1f4>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a4b      	ldr	r2, [pc, #300]	; (80049a4 <HAL_GPIO_Init+0x2f0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d013      	beq.n	80048a4 <HAL_GPIO_Init+0x1f0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a4a      	ldr	r2, [pc, #296]	; (80049a8 <HAL_GPIO_Init+0x2f4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00d      	beq.n	80048a0 <HAL_GPIO_Init+0x1ec>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a49      	ldr	r2, [pc, #292]	; (80049ac <HAL_GPIO_Init+0x2f8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d007      	beq.n	800489c <HAL_GPIO_Init+0x1e8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a48      	ldr	r2, [pc, #288]	; (80049b0 <HAL_GPIO_Init+0x2fc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d101      	bne.n	8004898 <HAL_GPIO_Init+0x1e4>
 8004894:	2305      	movs	r3, #5
 8004896:	e00a      	b.n	80048ae <HAL_GPIO_Init+0x1fa>
 8004898:	2306      	movs	r3, #6
 800489a:	e008      	b.n	80048ae <HAL_GPIO_Init+0x1fa>
 800489c:	2304      	movs	r3, #4
 800489e:	e006      	b.n	80048ae <HAL_GPIO_Init+0x1fa>
 80048a0:	2303      	movs	r3, #3
 80048a2:	e004      	b.n	80048ae <HAL_GPIO_Init+0x1fa>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e002      	b.n	80048ae <HAL_GPIO_Init+0x1fa>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <HAL_GPIO_Init+0x1fa>
 80048ac:	2300      	movs	r3, #0
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	f002 0203 	and.w	r2, r2, #3
 80048b4:	0092      	lsls	r2, r2, #2
 80048b6:	4093      	lsls	r3, r2
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048be:	4937      	ldr	r1, [pc, #220]	; (800499c <HAL_GPIO_Init+0x2e8>)
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	089b      	lsrs	r3, r3, #2
 80048c4:	3302      	adds	r3, #2
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048cc:	4b39      	ldr	r3, [pc, #228]	; (80049b4 <HAL_GPIO_Init+0x300>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4013      	ands	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048f0:	4a30      	ldr	r2, [pc, #192]	; (80049b4 <HAL_GPIO_Init+0x300>)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048f6:	4b2f      	ldr	r3, [pc, #188]	; (80049b4 <HAL_GPIO_Init+0x300>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	43db      	mvns	r3, r3
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4013      	ands	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800491a:	4a26      	ldr	r2, [pc, #152]	; (80049b4 <HAL_GPIO_Init+0x300>)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004920:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <HAL_GPIO_Init+0x300>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	43db      	mvns	r3, r3
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4013      	ands	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004944:	4a1b      	ldr	r2, [pc, #108]	; (80049b4 <HAL_GPIO_Init+0x300>)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800494a:	4b1a      	ldr	r3, [pc, #104]	; (80049b4 <HAL_GPIO_Init+0x300>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	43db      	mvns	r3, r3
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4013      	ands	r3, r2
 8004958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800496e:	4a11      	ldr	r2, [pc, #68]	; (80049b4 <HAL_GPIO_Init+0x300>)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	3301      	adds	r3, #1
 8004978:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	f47f ae9d 	bne.w	80046c4 <HAL_GPIO_Init+0x10>
  }
}
 800498a:	bf00      	nop
 800498c:	bf00      	nop
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	40021000 	.word	0x40021000
 800499c:	40010000 	.word	0x40010000
 80049a0:	48000400 	.word	0x48000400
 80049a4:	48000800 	.word	0x48000800
 80049a8:	48000c00 	.word	0x48000c00
 80049ac:	48001000 	.word	0x48001000
 80049b0:	48001400 	.word	0x48001400
 80049b4:	40010400 	.word	0x40010400

080049b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	807b      	strh	r3, [r7, #2]
 80049c4:	4613      	mov	r3, r2
 80049c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049c8:	787b      	ldrb	r3, [r7, #1]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049ce:	887a      	ldrh	r2, [r7, #2]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049d4:	e002      	b.n	80049dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049f2:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049f4:	695a      	ldr	r2, [r3, #20]
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d006      	beq.n	8004a0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049fe:	4a05      	ldr	r2, [pc, #20]	; (8004a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a00:	88fb      	ldrh	r3, [r7, #6]
 8004a02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fd f8b6 	bl	8001b78 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40010400 	.word	0x40010400

08004a18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d141      	bne.n	8004aaa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a26:	4b4b      	ldr	r3, [pc, #300]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a32:	d131      	bne.n	8004a98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a34:	4b47      	ldr	r3, [pc, #284]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a3a:	4a46      	ldr	r2, [pc, #280]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a44:	4b43      	ldr	r3, [pc, #268]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a4c:	4a41      	ldr	r2, [pc, #260]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a54:	4b40      	ldr	r3, [pc, #256]	; (8004b58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2232      	movs	r2, #50	; 0x32
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	4a3f      	ldr	r2, [pc, #252]	; (8004b5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	0c9b      	lsrs	r3, r3, #18
 8004a66:	3301      	adds	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a6a:	e002      	b.n	8004a72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a72:	4b38      	ldr	r3, [pc, #224]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7e:	d102      	bne.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f2      	bne.n	8004a6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a86:	4b33      	ldr	r3, [pc, #204]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a92:	d158      	bne.n	8004b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e057      	b.n	8004b48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a98:	4b2e      	ldr	r3, [pc, #184]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a9e:	4a2d      	ldr	r2, [pc, #180]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004aa8:	e04d      	b.n	8004b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab0:	d141      	bne.n	8004b36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ab2:	4b28      	ldr	r3, [pc, #160]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abe:	d131      	bne.n	8004b24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ac0:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ac6:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004acc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ad0:	4b20      	ldr	r3, [pc, #128]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ad8:	4a1e      	ldr	r2, [pc, #120]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ade:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	; (8004b58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2232      	movs	r2, #50	; 0x32
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	4a1c      	ldr	r2, [pc, #112]	; (8004b5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	0c9b      	lsrs	r3, r3, #18
 8004af2:	3301      	adds	r3, #1
 8004af4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004af6:	e002      	b.n	8004afe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004afe:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0a:	d102      	bne.n	8004b12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f2      	bne.n	8004af8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1e:	d112      	bne.n	8004b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e011      	b.n	8004b48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b2a:	4a0a      	ldr	r2, [pc, #40]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b34:	e007      	b.n	8004b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b3e:	4a05      	ldr	r2, [pc, #20]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	40007000 	.word	0x40007000
 8004b58:	20000098 	.word	0x20000098
 8004b5c:	431bde83 	.word	0x431bde83

08004b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e306      	b.n	8005180 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d075      	beq.n	8004c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b7e:	4b97      	ldr	r3, [pc, #604]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b88:	4b94      	ldr	r3, [pc, #592]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	2b0c      	cmp	r3, #12
 8004b96:	d102      	bne.n	8004b9e <HAL_RCC_OscConfig+0x3e>
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d002      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x44>
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d10b      	bne.n	8004bbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba4:	4b8d      	ldr	r3, [pc, #564]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d05b      	beq.n	8004c68 <HAL_RCC_OscConfig+0x108>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d157      	bne.n	8004c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e2e1      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc4:	d106      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x74>
 8004bc6:	4b85      	ldr	r3, [pc, #532]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a84      	ldr	r2, [pc, #528]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	e01d      	b.n	8004c10 <HAL_RCC_OscConfig+0xb0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x98>
 8004bde:	4b7f      	ldr	r3, [pc, #508]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a7e      	ldr	r2, [pc, #504]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	4b7c      	ldr	r3, [pc, #496]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a7b      	ldr	r2, [pc, #492]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e00b      	b.n	8004c10 <HAL_RCC_OscConfig+0xb0>
 8004bf8:	4b78      	ldr	r3, [pc, #480]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a77      	ldr	r2, [pc, #476]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	4b75      	ldr	r3, [pc, #468]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a74      	ldr	r2, [pc, #464]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d013      	beq.n	8004c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fd fb5c 	bl	80022d4 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fd fb58 	bl	80022d4 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e2a6      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c32:	4b6a      	ldr	r3, [pc, #424]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0xc0>
 8004c3e:	e014      	b.n	8004c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fd fb48 	bl	80022d4 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fd fb44 	bl	80022d4 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e292      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c5a:	4b60      	ldr	r3, [pc, #384]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0xe8>
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d075      	beq.n	8004d62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c76:	4b59      	ldr	r3, [pc, #356]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c80:	4b56      	ldr	r3, [pc, #344]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b0c      	cmp	r3, #12
 8004c8e:	d102      	bne.n	8004c96 <HAL_RCC_OscConfig+0x136>
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d002      	beq.n	8004c9c <HAL_RCC_OscConfig+0x13c>
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d11f      	bne.n	8004cdc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c9c:	4b4f      	ldr	r3, [pc, #316]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x154>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e265      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb4:	4b49      	ldr	r3, [pc, #292]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	4946      	ldr	r1, [pc, #280]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cc8:	4b45      	ldr	r3, [pc, #276]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fd f911 	bl	8001ef4 <HAL_InitTick>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d043      	beq.n	8004d60 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e251      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d023      	beq.n	8004d2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ce4:	4b3d      	ldr	r3, [pc, #244]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a3c      	ldr	r2, [pc, #240]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fd faf0 	bl	80022d4 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf8:	f7fd faec 	bl	80022d4 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e23a      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d0a:	4b34      	ldr	r3, [pc, #208]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d16:	4b31      	ldr	r3, [pc, #196]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	061b      	lsls	r3, r3, #24
 8004d24:	492d      	ldr	r1, [pc, #180]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	604b      	str	r3, [r1, #4]
 8004d2a:	e01a      	b.n	8004d62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d2c:	4b2b      	ldr	r3, [pc, #172]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a2a      	ldr	r2, [pc, #168]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fd facc 	bl	80022d4 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d40:	f7fd fac8 	bl	80022d4 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e216      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d52:	4b22      	ldr	r3, [pc, #136]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0x1e0>
 8004d5e:	e000      	b.n	8004d62 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d041      	beq.n	8004df2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d01c      	beq.n	8004db0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d76:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d7c:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d86:	f7fd faa5 	bl	80022d4 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d8c:	e008      	b.n	8004da0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d8e:	f7fd faa1 	bl	80022d4 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e1ef      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004da0:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0ef      	beq.n	8004d8e <HAL_RCC_OscConfig+0x22e>
 8004dae:	e020      	b.n	8004df2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db0:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db6:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004db8:	f023 0301 	bic.w	r3, r3, #1
 8004dbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc0:	f7fd fa88 	bl	80022d4 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dc6:	e00d      	b.n	8004de4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc8:	f7fd fa84 	bl	80022d4 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d906      	bls.n	8004de4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e1d2      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
 8004dda:	bf00      	nop
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004de4:	4b8c      	ldr	r3, [pc, #560]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1ea      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80a6 	beq.w	8004f4c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e00:	2300      	movs	r3, #0
 8004e02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e04:	4b84      	ldr	r3, [pc, #528]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_OscConfig+0x2b4>
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <HAL_RCC_OscConfig+0x2b6>
 8004e14:	2300      	movs	r3, #0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00d      	beq.n	8004e36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e1a:	4b7f      	ldr	r3, [pc, #508]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1e:	4a7e      	ldr	r2, [pc, #504]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6593      	str	r3, [r2, #88]	; 0x58
 8004e26:	4b7c      	ldr	r3, [pc, #496]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e32:	2301      	movs	r3, #1
 8004e34:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e36:	4b79      	ldr	r3, [pc, #484]	; (800501c <HAL_RCC_OscConfig+0x4bc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d118      	bne.n	8004e74 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e42:	4b76      	ldr	r3, [pc, #472]	; (800501c <HAL_RCC_OscConfig+0x4bc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a75      	ldr	r2, [pc, #468]	; (800501c <HAL_RCC_OscConfig+0x4bc>)
 8004e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e4e:	f7fd fa41 	bl	80022d4 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e56:	f7fd fa3d 	bl	80022d4 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e18b      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e68:	4b6c      	ldr	r3, [pc, #432]	; (800501c <HAL_RCC_OscConfig+0x4bc>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f0      	beq.n	8004e56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d108      	bne.n	8004e8e <HAL_RCC_OscConfig+0x32e>
 8004e7c:	4b66      	ldr	r3, [pc, #408]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e82:	4a65      	ldr	r2, [pc, #404]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e8c:	e024      	b.n	8004ed8 <HAL_RCC_OscConfig+0x378>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b05      	cmp	r3, #5
 8004e94:	d110      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x358>
 8004e96:	4b60      	ldr	r3, [pc, #384]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9c:	4a5e      	ldr	r2, [pc, #376]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004e9e:	f043 0304 	orr.w	r3, r3, #4
 8004ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ea6:	4b5c      	ldr	r3, [pc, #368]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eac:	4a5a      	ldr	r2, [pc, #360]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004eb6:	e00f      	b.n	8004ed8 <HAL_RCC_OscConfig+0x378>
 8004eb8:	4b57      	ldr	r3, [pc, #348]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebe:	4a56      	ldr	r2, [pc, #344]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ec8:	4b53      	ldr	r3, [pc, #332]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	4a52      	ldr	r2, [pc, #328]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004ed0:	f023 0304 	bic.w	r3, r3, #4
 8004ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d016      	beq.n	8004f0e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fd f9f8 	bl	80022d4 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee8:	f7fd f9f4 	bl	80022d4 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e140      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004efe:	4b46      	ldr	r3, [pc, #280]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0ed      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x388>
 8004f0c:	e015      	b.n	8004f3a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0e:	f7fd f9e1 	bl	80022d4 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f14:	e00a      	b.n	8004f2c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f16:	f7fd f9dd 	bl	80022d4 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e129      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f2c:	4b3a      	ldr	r3, [pc, #232]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1ed      	bne.n	8004f16 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f3a:	7ffb      	ldrb	r3, [r7, #31]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d105      	bne.n	8004f4c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f40:	4b35      	ldr	r3, [pc, #212]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f44:	4a34      	ldr	r2, [pc, #208]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d03c      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01c      	beq.n	8004f9a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f60:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f66:	4a2c      	ldr	r2, [pc, #176]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f70:	f7fd f9b0 	bl	80022d4 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f78:	f7fd f9ac 	bl	80022d4 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e0fa      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f8a:	4b23      	ldr	r3, [pc, #140]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0ef      	beq.n	8004f78 <HAL_RCC_OscConfig+0x418>
 8004f98:	e01b      	b.n	8004fd2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f9a:	4b1f      	ldr	r3, [pc, #124]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fa0:	4a1d      	ldr	r2, [pc, #116]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004faa:	f7fd f993 	bl	80022d4 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fb2:	f7fd f98f 	bl	80022d4 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e0dd      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fc4:	4b14      	ldr	r3, [pc, #80]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1ef      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80d1 	beq.w	800517e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 030c 	and.w	r3, r3, #12
 8004fe4:	2b0c      	cmp	r3, #12
 8004fe6:	f000 808b 	beq.w	8005100 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d15e      	bne.n	80050b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff2:	4b09      	ldr	r3, [pc, #36]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a08      	ldr	r2, [pc, #32]	; (8005018 <HAL_RCC_OscConfig+0x4b8>)
 8004ff8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffe:	f7fd f969 	bl	80022d4 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005004:	e00c      	b.n	8005020 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005006:	f7fd f965 	bl	80022d4 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d905      	bls.n	8005020 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e0b3      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
 8005018:	40021000 	.word	0x40021000
 800501c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005020:	4b59      	ldr	r3, [pc, #356]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1ec      	bne.n	8005006 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800502c:	4b56      	ldr	r3, [pc, #344]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	4b56      	ldr	r3, [pc, #344]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8005032:	4013      	ands	r3, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6a11      	ldr	r1, [r2, #32]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800503c:	3a01      	subs	r2, #1
 800503e:	0112      	lsls	r2, r2, #4
 8005040:	4311      	orrs	r1, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005046:	0212      	lsls	r2, r2, #8
 8005048:	4311      	orrs	r1, r2
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800504e:	0852      	lsrs	r2, r2, #1
 8005050:	3a01      	subs	r2, #1
 8005052:	0552      	lsls	r2, r2, #21
 8005054:	4311      	orrs	r1, r2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800505a:	0852      	lsrs	r2, r2, #1
 800505c:	3a01      	subs	r2, #1
 800505e:	0652      	lsls	r2, r2, #25
 8005060:	4311      	orrs	r1, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005066:	06d2      	lsls	r2, r2, #27
 8005068:	430a      	orrs	r2, r1
 800506a:	4947      	ldr	r1, [pc, #284]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 800506c:	4313      	orrs	r3, r2
 800506e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005070:	4b45      	ldr	r3, [pc, #276]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a44      	ldr	r2, [pc, #272]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 8005076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800507a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800507c:	4b42      	ldr	r3, [pc, #264]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4a41      	ldr	r2, [pc, #260]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 8005082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005086:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005088:	f7fd f924 	bl	80022d4 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005090:	f7fd f920 	bl	80022d4 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e06e      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a2:	4b39      	ldr	r3, [pc, #228]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x530>
 80050ae:	e066      	b.n	800517e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b0:	4b35      	ldr	r3, [pc, #212]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a34      	ldr	r2, [pc, #208]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 80050b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80050bc:	4b32      	ldr	r3, [pc, #200]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	4a31      	ldr	r2, [pc, #196]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 80050c2:	f023 0303 	bic.w	r3, r3, #3
 80050c6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80050c8:	4b2f      	ldr	r3, [pc, #188]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	4a2e      	ldr	r2, [pc, #184]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 80050ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80050d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d8:	f7fd f8fc 	bl	80022d4 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e0:	f7fd f8f8 	bl	80022d4 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e046      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f2:	4b25      	ldr	r3, [pc, #148]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0x580>
 80050fe:	e03e      	b.n	800517e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e039      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800510c:	4b1e      	ldr	r3, [pc, #120]	; (8005188 <HAL_RCC_OscConfig+0x628>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f003 0203 	and.w	r2, r3, #3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	429a      	cmp	r2, r3
 800511e:	d12c      	bne.n	800517a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	3b01      	subs	r3, #1
 800512c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d123      	bne.n	800517a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800513e:	429a      	cmp	r2, r3
 8005140:	d11b      	bne.n	800517a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800514e:	429a      	cmp	r2, r3
 8005150:	d113      	bne.n	800517a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	3b01      	subs	r3, #1
 8005160:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005162:	429a      	cmp	r2, r3
 8005164:	d109      	bne.n	800517a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005170:	085b      	lsrs	r3, r3, #1
 8005172:	3b01      	subs	r3, #1
 8005174:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005176:	429a      	cmp	r2, r3
 8005178:	d001      	beq.n	800517e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3720      	adds	r7, #32
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40021000 	.word	0x40021000
 800518c:	019f800c 	.word	0x019f800c

08005190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e11e      	b.n	80053e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051a8:	4b91      	ldr	r3, [pc, #580]	; (80053f0 <HAL_RCC_ClockConfig+0x260>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d910      	bls.n	80051d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b6:	4b8e      	ldr	r3, [pc, #568]	; (80053f0 <HAL_RCC_ClockConfig+0x260>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f023 020f 	bic.w	r2, r3, #15
 80051be:	498c      	ldr	r1, [pc, #560]	; (80053f0 <HAL_RCC_ClockConfig+0x260>)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c6:	4b8a      	ldr	r3, [pc, #552]	; (80053f0 <HAL_RCC_ClockConfig+0x260>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d001      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e106      	b.n	80053e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d073      	beq.n	80052cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d129      	bne.n	8005240 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ec:	4b81      	ldr	r3, [pc, #516]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e0f4      	b.n	80053e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80051fc:	f000 f9d0 	bl	80055a0 <RCC_GetSysClockFreqFromPLLSource>
 8005200:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	4a7c      	ldr	r2, [pc, #496]	; (80053f8 <HAL_RCC_ClockConfig+0x268>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d93f      	bls.n	800528a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800520a:	4b7a      	ldr	r3, [pc, #488]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800521e:	2b00      	cmp	r3, #0
 8005220:	d033      	beq.n	800528a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005226:	2b00      	cmp	r3, #0
 8005228:	d12f      	bne.n	800528a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800522a:	4b72      	ldr	r3, [pc, #456]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005232:	4a70      	ldr	r2, [pc, #448]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 8005234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005238:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800523a:	2380      	movs	r3, #128	; 0x80
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	e024      	b.n	800528a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d107      	bne.n	8005258 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005248:	4b6a      	ldr	r3, [pc, #424]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d109      	bne.n	8005268 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e0c6      	b.n	80053e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005258:	4b66      	ldr	r3, [pc, #408]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0be      	b.n	80053e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005268:	f000 f8ce 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 800526c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	4a61      	ldr	r2, [pc, #388]	; (80053f8 <HAL_RCC_ClockConfig+0x268>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d909      	bls.n	800528a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005276:	4b5f      	ldr	r3, [pc, #380]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800527e:	4a5d      	ldr	r2, [pc, #372]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 8005280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005284:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005286:	2380      	movs	r3, #128	; 0x80
 8005288:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800528a:	4b5a      	ldr	r3, [pc, #360]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f023 0203 	bic.w	r2, r3, #3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	4957      	ldr	r1, [pc, #348]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 8005298:	4313      	orrs	r3, r2
 800529a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800529c:	f7fd f81a 	bl	80022d4 <HAL_GetTick>
 80052a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a2:	e00a      	b.n	80052ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052a4:	f7fd f816 	bl	80022d4 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e095      	b.n	80053e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ba:	4b4e      	ldr	r3, [pc, #312]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 020c 	and.w	r2, r3, #12
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d1eb      	bne.n	80052a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d023      	beq.n	8005320 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052e4:	4b43      	ldr	r3, [pc, #268]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4a42      	ldr	r2, [pc, #264]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 80052ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d007      	beq.n	800530c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80052fc:	4b3d      	ldr	r3, [pc, #244]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005304:	4a3b      	ldr	r2, [pc, #236]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 8005306:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800530a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800530c:	4b39      	ldr	r3, [pc, #228]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4936      	ldr	r1, [pc, #216]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 800531a:	4313      	orrs	r3, r2
 800531c:	608b      	str	r3, [r1, #8]
 800531e:	e008      	b.n	8005332 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b80      	cmp	r3, #128	; 0x80
 8005324:	d105      	bne.n	8005332 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005326:	4b33      	ldr	r3, [pc, #204]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	4a32      	ldr	r2, [pc, #200]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 800532c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005330:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005332:	4b2f      	ldr	r3, [pc, #188]	; (80053f0 <HAL_RCC_ClockConfig+0x260>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d21d      	bcs.n	800537c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005340:	4b2b      	ldr	r3, [pc, #172]	; (80053f0 <HAL_RCC_ClockConfig+0x260>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f023 020f 	bic.w	r2, r3, #15
 8005348:	4929      	ldr	r1, [pc, #164]	; (80053f0 <HAL_RCC_ClockConfig+0x260>)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	4313      	orrs	r3, r2
 800534e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005350:	f7fc ffc0 	bl	80022d4 <HAL_GetTick>
 8005354:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005356:	e00a      	b.n	800536e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005358:	f7fc ffbc 	bl	80022d4 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f241 3288 	movw	r2, #5000	; 0x1388
 8005366:	4293      	cmp	r3, r2
 8005368:	d901      	bls.n	800536e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e03b      	b.n	80053e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800536e:	4b20      	ldr	r3, [pc, #128]	; (80053f0 <HAL_RCC_ClockConfig+0x260>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d1ed      	bne.n	8005358 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005388:	4b1a      	ldr	r3, [pc, #104]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	4917      	ldr	r1, [pc, #92]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 8005396:	4313      	orrs	r3, r2
 8005398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053a6:	4b13      	ldr	r3, [pc, #76]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	490f      	ldr	r1, [pc, #60]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053ba:	f000 f825 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 80053be:	4602      	mov	r2, r0
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <HAL_RCC_ClockConfig+0x264>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	490c      	ldr	r1, [pc, #48]	; (80053fc <HAL_RCC_ClockConfig+0x26c>)
 80053cc:	5ccb      	ldrb	r3, [r1, r3]
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	fa22 f303 	lsr.w	r3, r2, r3
 80053d6:	4a0a      	ldr	r2, [pc, #40]	; (8005400 <HAL_RCC_ClockConfig+0x270>)
 80053d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80053da:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <HAL_RCC_ClockConfig+0x274>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fc fd88 	bl	8001ef4 <HAL_InitTick>
 80053e4:	4603      	mov	r3, r0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	40022000 	.word	0x40022000
 80053f4:	40021000 	.word	0x40021000
 80053f8:	04c4b400 	.word	0x04c4b400
 80053fc:	0800c8d8 	.word	0x0800c8d8
 8005400:	20000098 	.word	0x20000098
 8005404:	2000009c 	.word	0x2000009c

08005408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800540e:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 030c 	and.w	r3, r3, #12
 8005416:	2b04      	cmp	r3, #4
 8005418:	d102      	bne.n	8005420 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800541a:	4b2a      	ldr	r3, [pc, #168]	; (80054c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800541c:	613b      	str	r3, [r7, #16]
 800541e:	e047      	b.n	80054b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005420:	4b27      	ldr	r3, [pc, #156]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 030c 	and.w	r3, r3, #12
 8005428:	2b08      	cmp	r3, #8
 800542a:	d102      	bne.n	8005432 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800542c:	4b26      	ldr	r3, [pc, #152]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	e03e      	b.n	80054b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005432:	4b23      	ldr	r3, [pc, #140]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 030c 	and.w	r3, r3, #12
 800543a:	2b0c      	cmp	r3, #12
 800543c:	d136      	bne.n	80054ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800543e:	4b20      	ldr	r3, [pc, #128]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005448:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	091b      	lsrs	r3, r3, #4
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	3301      	adds	r3, #1
 8005454:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2b03      	cmp	r3, #3
 800545a:	d10c      	bne.n	8005476 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800545c:	4a1a      	ldr	r2, [pc, #104]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	fbb2 f3f3 	udiv	r3, r2, r3
 8005464:	4a16      	ldr	r2, [pc, #88]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005466:	68d2      	ldr	r2, [r2, #12]
 8005468:	0a12      	lsrs	r2, r2, #8
 800546a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800546e:	fb02 f303 	mul.w	r3, r2, r3
 8005472:	617b      	str	r3, [r7, #20]
      break;
 8005474:	e00c      	b.n	8005490 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005476:	4a13      	ldr	r2, [pc, #76]	; (80054c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	fbb2 f3f3 	udiv	r3, r2, r3
 800547e:	4a10      	ldr	r2, [pc, #64]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005480:	68d2      	ldr	r2, [r2, #12]
 8005482:	0a12      	lsrs	r2, r2, #8
 8005484:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005488:	fb02 f303 	mul.w	r3, r2, r3
 800548c:	617b      	str	r3, [r7, #20]
      break;
 800548e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005490:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	0e5b      	lsrs	r3, r3, #25
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	3301      	adds	r3, #1
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	e001      	b.n	80054b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80054b0:	693b      	ldr	r3, [r7, #16]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40021000 	.word	0x40021000
 80054c4:	00f42400 	.word	0x00f42400
 80054c8:	016e3600 	.word	0x016e3600

080054cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d0:	4b03      	ldr	r3, [pc, #12]	; (80054e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80054d2:	681b      	ldr	r3, [r3, #0]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20000098 	.word	0x20000098

080054e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054e8:	f7ff fff0 	bl	80054cc <HAL_RCC_GetHCLKFreq>
 80054ec:	4602      	mov	r2, r0
 80054ee:	4b06      	ldr	r3, [pc, #24]	; (8005508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	0a1b      	lsrs	r3, r3, #8
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	4904      	ldr	r1, [pc, #16]	; (800550c <HAL_RCC_GetPCLK1Freq+0x28>)
 80054fa:	5ccb      	ldrb	r3, [r1, r3]
 80054fc:	f003 031f 	and.w	r3, r3, #31
 8005500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005504:	4618      	mov	r0, r3
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40021000 	.word	0x40021000
 800550c:	0800c8e8 	.word	0x0800c8e8

08005510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005514:	f7ff ffda 	bl	80054cc <HAL_RCC_GetHCLKFreq>
 8005518:	4602      	mov	r2, r0
 800551a:	4b06      	ldr	r3, [pc, #24]	; (8005534 <HAL_RCC_GetPCLK2Freq+0x24>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	0adb      	lsrs	r3, r3, #11
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	4904      	ldr	r1, [pc, #16]	; (8005538 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005526:	5ccb      	ldrb	r3, [r1, r3]
 8005528:	f003 031f 	and.w	r3, r3, #31
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005530:	4618      	mov	r0, r3
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40021000 	.word	0x40021000
 8005538:	0800c8e8 	.word	0x0800c8e8

0800553c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	220f      	movs	r2, #15
 800554a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800554c:	4b12      	ldr	r3, [pc, #72]	; (8005598 <HAL_RCC_GetClockConfig+0x5c>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 0203 	and.w	r2, r3, #3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005558:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <HAL_RCC_GetClockConfig+0x5c>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005564:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <HAL_RCC_GetClockConfig+0x5c>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005570:	4b09      	ldr	r3, [pc, #36]	; (8005598 <HAL_RCC_GetClockConfig+0x5c>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	08db      	lsrs	r3, r3, #3
 8005576:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800557e:	4b07      	ldr	r3, [pc, #28]	; (800559c <HAL_RCC_GetClockConfig+0x60>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 020f 	and.w	r2, r3, #15
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	601a      	str	r2, [r3, #0]
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40021000 	.word	0x40021000
 800559c:	40022000 	.word	0x40022000

080055a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055a6:	4b1e      	ldr	r3, [pc, #120]	; (8005620 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055b0:	4b1b      	ldr	r3, [pc, #108]	; (8005620 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	091b      	lsrs	r3, r3, #4
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	3301      	adds	r3, #1
 80055bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d10c      	bne.n	80055de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055c4:	4a17      	ldr	r2, [pc, #92]	; (8005624 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055cc:	4a14      	ldr	r2, [pc, #80]	; (8005620 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055ce:	68d2      	ldr	r2, [r2, #12]
 80055d0:	0a12      	lsrs	r2, r2, #8
 80055d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055d6:	fb02 f303 	mul.w	r3, r2, r3
 80055da:	617b      	str	r3, [r7, #20]
    break;
 80055dc:	e00c      	b.n	80055f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055de:	4a12      	ldr	r2, [pc, #72]	; (8005628 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e6:	4a0e      	ldr	r2, [pc, #56]	; (8005620 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055e8:	68d2      	ldr	r2, [r2, #12]
 80055ea:	0a12      	lsrs	r2, r2, #8
 80055ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055f0:	fb02 f303 	mul.w	r3, r2, r3
 80055f4:	617b      	str	r3, [r7, #20]
    break;
 80055f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055f8:	4b09      	ldr	r3, [pc, #36]	; (8005620 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	0e5b      	lsrs	r3, r3, #25
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	3301      	adds	r3, #1
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005610:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005612:	687b      	ldr	r3, [r7, #4]
}
 8005614:	4618      	mov	r0, r3
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	40021000 	.word	0x40021000
 8005624:	016e3600 	.word	0x016e3600
 8005628:	00f42400 	.word	0x00f42400

0800562c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005634:	2300      	movs	r3, #0
 8005636:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005638:	2300      	movs	r3, #0
 800563a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8098 	beq.w	800577a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800564a:	2300      	movs	r3, #0
 800564c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800564e:	4b43      	ldr	r3, [pc, #268]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10d      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800565a:	4b40      	ldr	r3, [pc, #256]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800565c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565e:	4a3f      	ldr	r2, [pc, #252]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005664:	6593      	str	r3, [r2, #88]	; 0x58
 8005666:	4b3d      	ldr	r3, [pc, #244]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566e:	60bb      	str	r3, [r7, #8]
 8005670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005672:	2301      	movs	r3, #1
 8005674:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005676:	4b3a      	ldr	r3, [pc, #232]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a39      	ldr	r2, [pc, #228]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800567c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005680:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005682:	f7fc fe27 	bl	80022d4 <HAL_GetTick>
 8005686:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005688:	e009      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800568a:	f7fc fe23 	bl	80022d4 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d902      	bls.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	74fb      	strb	r3, [r7, #19]
        break;
 800569c:	e005      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800569e:	4b30      	ldr	r3, [pc, #192]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0ef      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80056aa:	7cfb      	ldrb	r3, [r7, #19]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d159      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056b0:	4b2a      	ldr	r3, [pc, #168]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d01e      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d019      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056cc:	4b23      	ldr	r3, [pc, #140]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056d8:	4b20      	ldr	r3, [pc, #128]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056de:	4a1f      	ldr	r2, [pc, #124]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056e8:	4b1c      	ldr	r3, [pc, #112]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ee:	4a1b      	ldr	r2, [pc, #108]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056f8:	4a18      	ldr	r2, [pc, #96]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d016      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570a:	f7fc fde3 	bl	80022d4 <HAL_GetTick>
 800570e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005710:	e00b      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005712:	f7fc fddf 	bl	80022d4 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005720:	4293      	cmp	r3, r2
 8005722:	d902      	bls.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	74fb      	strb	r3, [r7, #19]
            break;
 8005728:	e006      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800572a:	4b0c      	ldr	r3, [pc, #48]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0ec      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005738:	7cfb      	ldrb	r3, [r7, #19]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10b      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800573e:	4b07      	ldr	r3, [pc, #28]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	4903      	ldr	r1, [pc, #12]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005754:	e008      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005756:	7cfb      	ldrb	r3, [r7, #19]
 8005758:	74bb      	strb	r3, [r7, #18]
 800575a:	e005      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800575c:	40021000 	.word	0x40021000
 8005760:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005764:	7cfb      	ldrb	r3, [r7, #19]
 8005766:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005768:	7c7b      	ldrb	r3, [r7, #17]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d105      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800576e:	4ba6      	ldr	r3, [pc, #664]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005772:	4aa5      	ldr	r2, [pc, #660]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005778:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005786:	4ba0      	ldr	r3, [pc, #640]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578c:	f023 0203 	bic.w	r2, r3, #3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	499c      	ldr	r1, [pc, #624]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057a8:	4b97      	ldr	r3, [pc, #604]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ae:	f023 020c 	bic.w	r2, r3, #12
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	4994      	ldr	r1, [pc, #592]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057ca:	4b8f      	ldr	r3, [pc, #572]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	498b      	ldr	r1, [pc, #556]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057ec:	4b86      	ldr	r3, [pc, #536]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	4983      	ldr	r1, [pc, #524]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800580e:	4b7e      	ldr	r3, [pc, #504]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	497a      	ldr	r1, [pc, #488]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005830:	4b75      	ldr	r3, [pc, #468]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005836:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	4972      	ldr	r1, [pc, #456]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005852:	4b6d      	ldr	r3, [pc, #436]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005858:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	4969      	ldr	r1, [pc, #420]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005874:	4b64      	ldr	r3, [pc, #400]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	4961      	ldr	r1, [pc, #388]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005896:	4b5c      	ldr	r3, [pc, #368]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	4958      	ldr	r1, [pc, #352]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d015      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058b8:	4b53      	ldr	r3, [pc, #332]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	4950      	ldr	r1, [pc, #320]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058d6:	d105      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058d8:	4b4b      	ldr	r3, [pc, #300]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	4a4a      	ldr	r2, [pc, #296]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d015      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058f0:	4b45      	ldr	r3, [pc, #276]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	4942      	ldr	r1, [pc, #264]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800590e:	d105      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005910:	4b3d      	ldr	r3, [pc, #244]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4a3c      	ldr	r2, [pc, #240]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800591a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d015      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005928:	4b37      	ldr	r3, [pc, #220]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800592a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	4934      	ldr	r1, [pc, #208]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005938:	4313      	orrs	r3, r2
 800593a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005946:	d105      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005948:	4b2f      	ldr	r3, [pc, #188]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	4a2e      	ldr	r2, [pc, #184]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005952:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d015      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005960:	4b29      	ldr	r3, [pc, #164]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005966:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596e:	4926      	ldr	r1, [pc, #152]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800597e:	d105      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005980:	4b21      	ldr	r3, [pc, #132]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4a20      	ldr	r2, [pc, #128]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800598a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d015      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005998:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	4918      	ldr	r1, [pc, #96]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059b6:	d105      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059b8:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	4a12      	ldr	r2, [pc, #72]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d015      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059d0:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059de:	490a      	ldr	r1, [pc, #40]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ee:	d105      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059f0:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4a04      	ldr	r2, [pc, #16]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80059fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	40021000 	.word	0x40021000

08005a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e049      	b.n	8005ab2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fc f9a8 	bl	8001d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3304      	adds	r3, #4
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	f000 fea6 	bl	800679c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d001      	beq.n	8005ad4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e042      	b.n	8005b5a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a21      	ldr	r2, [pc, #132]	; (8005b68 <HAL_TIM_Base_Start+0xac>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d018      	beq.n	8005b18 <HAL_TIM_Base_Start+0x5c>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aee:	d013      	beq.n	8005b18 <HAL_TIM_Base_Start+0x5c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1d      	ldr	r2, [pc, #116]	; (8005b6c <HAL_TIM_Base_Start+0xb0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00e      	beq.n	8005b18 <HAL_TIM_Base_Start+0x5c>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <HAL_TIM_Base_Start+0xb4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d009      	beq.n	8005b18 <HAL_TIM_Base_Start+0x5c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1a      	ldr	r2, [pc, #104]	; (8005b74 <HAL_TIM_Base_Start+0xb8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d004      	beq.n	8005b18 <HAL_TIM_Base_Start+0x5c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a19      	ldr	r2, [pc, #100]	; (8005b78 <HAL_TIM_Base_Start+0xbc>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d115      	bne.n	8005b44 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	4b17      	ldr	r3, [pc, #92]	; (8005b7c <HAL_TIM_Base_Start+0xc0>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b06      	cmp	r3, #6
 8005b28:	d015      	beq.n	8005b56 <HAL_TIM_Base_Start+0x9a>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b30:	d011      	beq.n	8005b56 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0201 	orr.w	r2, r2, #1
 8005b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b42:	e008      	b.n	8005b56 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	e000      	b.n	8005b58 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	40000400 	.word	0x40000400
 8005b70:	40000800 	.word	0x40000800
 8005b74:	40013400 	.word	0x40013400
 8005b78:	40014000 	.word	0x40014000
 8005b7c:	00010007 	.word	0x00010007

08005b80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d001      	beq.n	8005b98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e04a      	b.n	8005c2e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a21      	ldr	r2, [pc, #132]	; (8005c3c <HAL_TIM_Base_Start_IT+0xbc>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d018      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x6c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc2:	d013      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x6c>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1d      	ldr	r2, [pc, #116]	; (8005c40 <HAL_TIM_Base_Start_IT+0xc0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00e      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x6c>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <HAL_TIM_Base_Start_IT+0xc4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d009      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x6c>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1a      	ldr	r2, [pc, #104]	; (8005c48 <HAL_TIM_Base_Start_IT+0xc8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x6c>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a19      	ldr	r2, [pc, #100]	; (8005c4c <HAL_TIM_Base_Start_IT+0xcc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d115      	bne.n	8005c18 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	4b17      	ldr	r3, [pc, #92]	; (8005c50 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b06      	cmp	r3, #6
 8005bfc:	d015      	beq.n	8005c2a <HAL_TIM_Base_Start_IT+0xaa>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c04:	d011      	beq.n	8005c2a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0201 	orr.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c16:	e008      	b.n	8005c2a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	e000      	b.n	8005c2c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	40012c00 	.word	0x40012c00
 8005c40:	40000400 	.word	0x40000400
 8005c44:	40000800 	.word	0x40000800
 8005c48:	40013400 	.word	0x40013400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	00010007 	.word	0x00010007

08005c54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e049      	b.n	8005cfa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fc f864 	bl	8001d48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4619      	mov	r1, r3
 8005c92:	4610      	mov	r0, r2
 8005c94:	f000 fd82 	bl	800679c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d109      	bne.n	8005d28 <HAL_TIM_PWM_Start+0x24>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	bf14      	ite	ne
 8005d20:	2301      	movne	r3, #1
 8005d22:	2300      	moveq	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	e03c      	b.n	8005da2 <HAL_TIM_PWM_Start+0x9e>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d109      	bne.n	8005d42 <HAL_TIM_PWM_Start+0x3e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	bf14      	ite	ne
 8005d3a:	2301      	movne	r3, #1
 8005d3c:	2300      	moveq	r3, #0
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	e02f      	b.n	8005da2 <HAL_TIM_PWM_Start+0x9e>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d109      	bne.n	8005d5c <HAL_TIM_PWM_Start+0x58>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	bf14      	ite	ne
 8005d54:	2301      	movne	r3, #1
 8005d56:	2300      	moveq	r3, #0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	e022      	b.n	8005da2 <HAL_TIM_PWM_Start+0x9e>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b0c      	cmp	r3, #12
 8005d60:	d109      	bne.n	8005d76 <HAL_TIM_PWM_Start+0x72>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	bf14      	ite	ne
 8005d6e:	2301      	movne	r3, #1
 8005d70:	2300      	moveq	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	e015      	b.n	8005da2 <HAL_TIM_PWM_Start+0x9e>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b10      	cmp	r3, #16
 8005d7a:	d109      	bne.n	8005d90 <HAL_TIM_PWM_Start+0x8c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	bf14      	ite	ne
 8005d88:	2301      	movne	r3, #1
 8005d8a:	2300      	moveq	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	e008      	b.n	8005da2 <HAL_TIM_PWM_Start+0x9e>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	bf14      	ite	ne
 8005d9c:	2301      	movne	r3, #1
 8005d9e:	2300      	moveq	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e097      	b.n	8005eda <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <HAL_TIM_PWM_Start+0xb6>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005db8:	e023      	b.n	8005e02 <HAL_TIM_PWM_Start+0xfe>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d104      	bne.n	8005dca <HAL_TIM_PWM_Start+0xc6>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc8:	e01b      	b.n	8005e02 <HAL_TIM_PWM_Start+0xfe>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d104      	bne.n	8005dda <HAL_TIM_PWM_Start+0xd6>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dd8:	e013      	b.n	8005e02 <HAL_TIM_PWM_Start+0xfe>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b0c      	cmp	r3, #12
 8005dde:	d104      	bne.n	8005dea <HAL_TIM_PWM_Start+0xe6>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005de8:	e00b      	b.n	8005e02 <HAL_TIM_PWM_Start+0xfe>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b10      	cmp	r3, #16
 8005dee:	d104      	bne.n	8005dfa <HAL_TIM_PWM_Start+0xf6>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005df8:	e003      	b.n	8005e02 <HAL_TIM_PWM_Start+0xfe>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2201      	movs	r2, #1
 8005e08:	6839      	ldr	r1, [r7, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f001 f8e8 	bl	8006fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a33      	ldr	r2, [pc, #204]	; (8005ee4 <HAL_TIM_PWM_Start+0x1e0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d013      	beq.n	8005e42 <HAL_TIM_PWM_Start+0x13e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a32      	ldr	r2, [pc, #200]	; (8005ee8 <HAL_TIM_PWM_Start+0x1e4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00e      	beq.n	8005e42 <HAL_TIM_PWM_Start+0x13e>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a30      	ldr	r2, [pc, #192]	; (8005eec <HAL_TIM_PWM_Start+0x1e8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d009      	beq.n	8005e42 <HAL_TIM_PWM_Start+0x13e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a2f      	ldr	r2, [pc, #188]	; (8005ef0 <HAL_TIM_PWM_Start+0x1ec>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d004      	beq.n	8005e42 <HAL_TIM_PWM_Start+0x13e>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a2d      	ldr	r2, [pc, #180]	; (8005ef4 <HAL_TIM_PWM_Start+0x1f0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d101      	bne.n	8005e46 <HAL_TIM_PWM_Start+0x142>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e000      	b.n	8005e48 <HAL_TIM_PWM_Start+0x144>
 8005e46:	2300      	movs	r3, #0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a20      	ldr	r2, [pc, #128]	; (8005ee4 <HAL_TIM_PWM_Start+0x1e0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d018      	beq.n	8005e98 <HAL_TIM_PWM_Start+0x194>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6e:	d013      	beq.n	8005e98 <HAL_TIM_PWM_Start+0x194>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a20      	ldr	r2, [pc, #128]	; (8005ef8 <HAL_TIM_PWM_Start+0x1f4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00e      	beq.n	8005e98 <HAL_TIM_PWM_Start+0x194>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1f      	ldr	r2, [pc, #124]	; (8005efc <HAL_TIM_PWM_Start+0x1f8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d009      	beq.n	8005e98 <HAL_TIM_PWM_Start+0x194>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a17      	ldr	r2, [pc, #92]	; (8005ee8 <HAL_TIM_PWM_Start+0x1e4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d004      	beq.n	8005e98 <HAL_TIM_PWM_Start+0x194>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a16      	ldr	r2, [pc, #88]	; (8005eec <HAL_TIM_PWM_Start+0x1e8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d115      	bne.n	8005ec4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	4b18      	ldr	r3, [pc, #96]	; (8005f00 <HAL_TIM_PWM_Start+0x1fc>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b06      	cmp	r3, #6
 8005ea8:	d015      	beq.n	8005ed6 <HAL_TIM_PWM_Start+0x1d2>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb0:	d011      	beq.n	8005ed6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0201 	orr.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec2:	e008      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	e000      	b.n	8005ed8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	40013400 	.word	0x40013400
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40014400 	.word	0x40014400
 8005ef4:	40014800 	.word	0x40014800
 8005ef8:	40000400 	.word	0x40000400
 8005efc:	40000800 	.word	0x40000800
 8005f00:	00010007 	.word	0x00010007

08005f04 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2200      	movs	r2, #0
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f001 f862 	bl	8006fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a3e      	ldr	r2, [pc, #248]	; (800601c <HAL_TIM_PWM_Stop+0x118>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d013      	beq.n	8005f4e <HAL_TIM_PWM_Stop+0x4a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a3d      	ldr	r2, [pc, #244]	; (8006020 <HAL_TIM_PWM_Stop+0x11c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d00e      	beq.n	8005f4e <HAL_TIM_PWM_Stop+0x4a>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a3b      	ldr	r2, [pc, #236]	; (8006024 <HAL_TIM_PWM_Stop+0x120>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d009      	beq.n	8005f4e <HAL_TIM_PWM_Stop+0x4a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a3a      	ldr	r2, [pc, #232]	; (8006028 <HAL_TIM_PWM_Stop+0x124>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d004      	beq.n	8005f4e <HAL_TIM_PWM_Stop+0x4a>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a38      	ldr	r2, [pc, #224]	; (800602c <HAL_TIM_PWM_Stop+0x128>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d101      	bne.n	8005f52 <HAL_TIM_PWM_Stop+0x4e>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <HAL_TIM_PWM_Stop+0x50>
 8005f52:	2300      	movs	r3, #0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d017      	beq.n	8005f88 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6a1a      	ldr	r2, [r3, #32]
 8005f5e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10f      	bne.n	8005f88 <HAL_TIM_PWM_Stop+0x84>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6a1a      	ldr	r2, [r3, #32]
 8005f6e:	f244 4344 	movw	r3, #17476	; 0x4444
 8005f72:	4013      	ands	r3, r2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d107      	bne.n	8005f88 <HAL_TIM_PWM_Stop+0x84>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6a1a      	ldr	r2, [r3, #32]
 8005f8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10f      	bne.n	8005fb8 <HAL_TIM_PWM_Stop+0xb4>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6a1a      	ldr	r2, [r3, #32]
 8005f9e:	f244 4344 	movw	r3, #17476	; 0x4444
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d107      	bne.n	8005fb8 <HAL_TIM_PWM_Stop+0xb4>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0201 	bic.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d104      	bne.n	8005fc8 <HAL_TIM_PWM_Stop+0xc4>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fc6:	e023      	b.n	8006010 <HAL_TIM_PWM_Stop+0x10c>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d104      	bne.n	8005fd8 <HAL_TIM_PWM_Stop+0xd4>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd6:	e01b      	b.n	8006010 <HAL_TIM_PWM_Stop+0x10c>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	d104      	bne.n	8005fe8 <HAL_TIM_PWM_Stop+0xe4>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe6:	e013      	b.n	8006010 <HAL_TIM_PWM_Stop+0x10c>
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b0c      	cmp	r3, #12
 8005fec:	d104      	bne.n	8005ff8 <HAL_TIM_PWM_Stop+0xf4>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ff6:	e00b      	b.n	8006010 <HAL_TIM_PWM_Stop+0x10c>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d104      	bne.n	8006008 <HAL_TIM_PWM_Stop+0x104>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006006:	e003      	b.n	8006010 <HAL_TIM_PWM_Stop+0x10c>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40012c00 	.word	0x40012c00
 8006020:	40013400 	.word	0x40013400
 8006024:	40014000 	.word	0x40014000
 8006028:	40014400 	.word	0x40014400
 800602c:	40014800 	.word	0x40014800

08006030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b02      	cmp	r3, #2
 8006044:	d122      	bne.n	800608c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b02      	cmp	r3, #2
 8006052:	d11b      	bne.n	800608c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0202 	mvn.w	r2, #2
 800605c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fb74 	bl	8006760 <HAL_TIM_IC_CaptureCallback>
 8006078:	e005      	b.n	8006086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fb66 	bl	800674c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fb77 	bl	8006774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f003 0304 	and.w	r3, r3, #4
 8006096:	2b04      	cmp	r3, #4
 8006098:	d122      	bne.n	80060e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d11b      	bne.n	80060e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0204 	mvn.w	r2, #4
 80060b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2202      	movs	r2, #2
 80060b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fb4a 	bl	8006760 <HAL_TIM_IC_CaptureCallback>
 80060cc:	e005      	b.n	80060da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fb3c 	bl	800674c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fb4d 	bl	8006774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d122      	bne.n	8006134 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f003 0308 	and.w	r3, r3, #8
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d11b      	bne.n	8006134 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f06f 0208 	mvn.w	r2, #8
 8006104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2204      	movs	r2, #4
 800610a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fb20 	bl	8006760 <HAL_TIM_IC_CaptureCallback>
 8006120:	e005      	b.n	800612e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fb12 	bl	800674c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fb23 	bl	8006774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f003 0310 	and.w	r3, r3, #16
 800613e:	2b10      	cmp	r3, #16
 8006140:	d122      	bne.n	8006188 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b10      	cmp	r3, #16
 800614e:	d11b      	bne.n	8006188 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0210 	mvn.w	r2, #16
 8006158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2208      	movs	r2, #8
 800615e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 faf6 	bl	8006760 <HAL_TIM_IC_CaptureCallback>
 8006174:	e005      	b.n	8006182 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fae8 	bl	800674c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 faf9 	bl	8006774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b01      	cmp	r3, #1
 8006194:	d10e      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d107      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f06f 0201 	mvn.w	r2, #1
 80061ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fb fd04 	bl	8001bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061be:	2b80      	cmp	r3, #128	; 0x80
 80061c0:	d10e      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061cc:	2b80      	cmp	r3, #128	; 0x80
 80061ce:	d107      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f001 f964 	bl	80074a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ee:	d10e      	bne.n	800620e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fa:	2b80      	cmp	r3, #128	; 0x80
 80061fc:	d107      	bne.n	800620e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f001 f957 	bl	80074bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006218:	2b40      	cmp	r3, #64	; 0x40
 800621a:	d10e      	bne.n	800623a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006226:	2b40      	cmp	r3, #64	; 0x40
 8006228:	d107      	bne.n	800623a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 faa7 	bl	8006788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f003 0320 	and.w	r3, r3, #32
 8006244:	2b20      	cmp	r3, #32
 8006246:	d10e      	bne.n	8006266 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b20      	cmp	r3, #32
 8006254:	d107      	bne.n	8006266 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f06f 0220 	mvn.w	r2, #32
 800625e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 f917 	bl	8007494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006274:	d10f      	bne.n	8006296 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006284:	d107      	bne.n	8006296 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800628e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f001 f91d 	bl	80074d0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062a4:	d10f      	bne.n	80062c6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062b4:	d107      	bne.n	80062c6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80062be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f001 f90f 	bl	80074e4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062d4:	d10f      	bne.n	80062f6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062e4:	d107      	bne.n	80062f6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80062ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 f901 	bl	80074f8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006300:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006304:	d10f      	bne.n	8006326 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006310:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006314:	d107      	bne.n	8006326 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800631e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f001 f8f3 	bl	800750c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006326:	bf00      	nop
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800634a:	2302      	movs	r3, #2
 800634c:	e0ff      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b14      	cmp	r3, #20
 800635a:	f200 80f0 	bhi.w	800653e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800635e:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	080063b9 	.word	0x080063b9
 8006368:	0800653f 	.word	0x0800653f
 800636c:	0800653f 	.word	0x0800653f
 8006370:	0800653f 	.word	0x0800653f
 8006374:	080063f9 	.word	0x080063f9
 8006378:	0800653f 	.word	0x0800653f
 800637c:	0800653f 	.word	0x0800653f
 8006380:	0800653f 	.word	0x0800653f
 8006384:	0800643b 	.word	0x0800643b
 8006388:	0800653f 	.word	0x0800653f
 800638c:	0800653f 	.word	0x0800653f
 8006390:	0800653f 	.word	0x0800653f
 8006394:	0800647b 	.word	0x0800647b
 8006398:	0800653f 	.word	0x0800653f
 800639c:	0800653f 	.word	0x0800653f
 80063a0:	0800653f 	.word	0x0800653f
 80063a4:	080064bd 	.word	0x080064bd
 80063a8:	0800653f 	.word	0x0800653f
 80063ac:	0800653f 	.word	0x0800653f
 80063b0:	0800653f 	.word	0x0800653f
 80063b4:	080064fd 	.word	0x080064fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fa7c 	bl	80068bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0208 	orr.w	r2, r2, #8
 80063d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0204 	bic.w	r2, r2, #4
 80063e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6999      	ldr	r1, [r3, #24]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	619a      	str	r2, [r3, #24]
      break;
 80063f6:	e0a5      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 faec 	bl	80069dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6999      	ldr	r1, [r3, #24]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	021a      	lsls	r2, r3, #8
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	619a      	str	r2, [r3, #24]
      break;
 8006438:	e084      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fb55 	bl	8006af0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 0208 	orr.w	r2, r2, #8
 8006454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0204 	bic.w	r2, r2, #4
 8006464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69d9      	ldr	r1, [r3, #28]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	691a      	ldr	r2, [r3, #16]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	61da      	str	r2, [r3, #28]
      break;
 8006478:	e064      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68b9      	ldr	r1, [r7, #8]
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fbbd 	bl	8006c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69da      	ldr	r2, [r3, #28]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69d9      	ldr	r1, [r3, #28]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	021a      	lsls	r2, r3, #8
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	61da      	str	r2, [r3, #28]
      break;
 80064ba:	e043      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fc26 	bl	8006d14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0208 	orr.w	r2, r2, #8
 80064d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0204 	bic.w	r2, r2, #4
 80064e6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80064fa:	e023      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fc6a 	bl	8006ddc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006516:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006526:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	021a      	lsls	r2, r3, #8
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800653c:	e002      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	75fb      	strb	r3, [r7, #23]
      break;
 8006542:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800654c:	7dfb      	ldrb	r3, [r7, #23]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop

08006558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_TIM_ConfigClockSource+0x1c>
 8006570:	2302      	movs	r3, #2
 8006572:	e0de      	b.n	8006732 <HAL_TIM_ConfigClockSource+0x1da>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006592:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800659e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a63      	ldr	r2, [pc, #396]	; (800673c <HAL_TIM_ConfigClockSource+0x1e4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	f000 80a9 	beq.w	8006706 <HAL_TIM_ConfigClockSource+0x1ae>
 80065b4:	4a61      	ldr	r2, [pc, #388]	; (800673c <HAL_TIM_ConfigClockSource+0x1e4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	f200 80ae 	bhi.w	8006718 <HAL_TIM_ConfigClockSource+0x1c0>
 80065bc:	4a60      	ldr	r2, [pc, #384]	; (8006740 <HAL_TIM_ConfigClockSource+0x1e8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	f000 80a1 	beq.w	8006706 <HAL_TIM_ConfigClockSource+0x1ae>
 80065c4:	4a5e      	ldr	r2, [pc, #376]	; (8006740 <HAL_TIM_ConfigClockSource+0x1e8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	f200 80a6 	bhi.w	8006718 <HAL_TIM_ConfigClockSource+0x1c0>
 80065cc:	4a5d      	ldr	r2, [pc, #372]	; (8006744 <HAL_TIM_ConfigClockSource+0x1ec>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	f000 8099 	beq.w	8006706 <HAL_TIM_ConfigClockSource+0x1ae>
 80065d4:	4a5b      	ldr	r2, [pc, #364]	; (8006744 <HAL_TIM_ConfigClockSource+0x1ec>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	f200 809e 	bhi.w	8006718 <HAL_TIM_ConfigClockSource+0x1c0>
 80065dc:	4a5a      	ldr	r2, [pc, #360]	; (8006748 <HAL_TIM_ConfigClockSource+0x1f0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	f000 8091 	beq.w	8006706 <HAL_TIM_ConfigClockSource+0x1ae>
 80065e4:	4a58      	ldr	r2, [pc, #352]	; (8006748 <HAL_TIM_ConfigClockSource+0x1f0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	f200 8096 	bhi.w	8006718 <HAL_TIM_ConfigClockSource+0x1c0>
 80065ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80065f0:	f000 8089 	beq.w	8006706 <HAL_TIM_ConfigClockSource+0x1ae>
 80065f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80065f8:	f200 808e 	bhi.w	8006718 <HAL_TIM_ConfigClockSource+0x1c0>
 80065fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006600:	d03e      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0x128>
 8006602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006606:	f200 8087 	bhi.w	8006718 <HAL_TIM_ConfigClockSource+0x1c0>
 800660a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800660e:	f000 8086 	beq.w	800671e <HAL_TIM_ConfigClockSource+0x1c6>
 8006612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006616:	d87f      	bhi.n	8006718 <HAL_TIM_ConfigClockSource+0x1c0>
 8006618:	2b70      	cmp	r3, #112	; 0x70
 800661a:	d01a      	beq.n	8006652 <HAL_TIM_ConfigClockSource+0xfa>
 800661c:	2b70      	cmp	r3, #112	; 0x70
 800661e:	d87b      	bhi.n	8006718 <HAL_TIM_ConfigClockSource+0x1c0>
 8006620:	2b60      	cmp	r3, #96	; 0x60
 8006622:	d050      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x16e>
 8006624:	2b60      	cmp	r3, #96	; 0x60
 8006626:	d877      	bhi.n	8006718 <HAL_TIM_ConfigClockSource+0x1c0>
 8006628:	2b50      	cmp	r3, #80	; 0x50
 800662a:	d03c      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x14e>
 800662c:	2b50      	cmp	r3, #80	; 0x50
 800662e:	d873      	bhi.n	8006718 <HAL_TIM_ConfigClockSource+0x1c0>
 8006630:	2b40      	cmp	r3, #64	; 0x40
 8006632:	d058      	beq.n	80066e6 <HAL_TIM_ConfigClockSource+0x18e>
 8006634:	2b40      	cmp	r3, #64	; 0x40
 8006636:	d86f      	bhi.n	8006718 <HAL_TIM_ConfigClockSource+0x1c0>
 8006638:	2b30      	cmp	r3, #48	; 0x30
 800663a:	d064      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0x1ae>
 800663c:	2b30      	cmp	r3, #48	; 0x30
 800663e:	d86b      	bhi.n	8006718 <HAL_TIM_ConfigClockSource+0x1c0>
 8006640:	2b20      	cmp	r3, #32
 8006642:	d060      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0x1ae>
 8006644:	2b20      	cmp	r3, #32
 8006646:	d867      	bhi.n	8006718 <HAL_TIM_ConfigClockSource+0x1c0>
 8006648:	2b00      	cmp	r3, #0
 800664a:	d05c      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0x1ae>
 800664c:	2b10      	cmp	r3, #16
 800664e:	d05a      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0x1ae>
 8006650:	e062      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	6899      	ldr	r1, [r3, #8]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f000 fc9d 	bl	8006fa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006674:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	609a      	str	r2, [r3, #8]
      break;
 800667e:	e04f      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	6899      	ldr	r1, [r3, #8]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f000 fc86 	bl	8006fa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689a      	ldr	r2, [r3, #8]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066a2:	609a      	str	r2, [r3, #8]
      break;
 80066a4:	e03c      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6818      	ldr	r0, [r3, #0]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	6859      	ldr	r1, [r3, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	461a      	mov	r2, r3
 80066b4:	f000 fbf8 	bl	8006ea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2150      	movs	r1, #80	; 0x50
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 fc51 	bl	8006f66 <TIM_ITRx_SetConfig>
      break;
 80066c4:	e02c      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6818      	ldr	r0, [r3, #0]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	6859      	ldr	r1, [r3, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	461a      	mov	r2, r3
 80066d4:	f000 fc17 	bl	8006f06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2160      	movs	r1, #96	; 0x60
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fc41 	bl	8006f66 <TIM_ITRx_SetConfig>
      break;
 80066e4:	e01c      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	6859      	ldr	r1, [r3, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	461a      	mov	r2, r3
 80066f4:	f000 fbd8 	bl	8006ea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2140      	movs	r1, #64	; 0x40
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 fc31 	bl	8006f66 <TIM_ITRx_SetConfig>
      break;
 8006704:	e00c      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4619      	mov	r1, r3
 8006710:	4610      	mov	r0, r2
 8006712:	f000 fc28 	bl	8006f66 <TIM_ITRx_SetConfig>
      break;
 8006716:	e003      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	73fb      	strb	r3, [r7, #15]
      break;
 800671c:	e000      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800671e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006730:	7bfb      	ldrb	r3, [r7, #15]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	00100070 	.word	0x00100070
 8006740:	00100040 	.word	0x00100040
 8006744:	00100030 	.word	0x00100030
 8006748:	00100020 	.word	0x00100020

0800674c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a3c      	ldr	r2, [pc, #240]	; (80068a0 <TIM_Base_SetConfig+0x104>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00f      	beq.n	80067d4 <TIM_Base_SetConfig+0x38>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ba:	d00b      	beq.n	80067d4 <TIM_Base_SetConfig+0x38>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a39      	ldr	r2, [pc, #228]	; (80068a4 <TIM_Base_SetConfig+0x108>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d007      	beq.n	80067d4 <TIM_Base_SetConfig+0x38>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a38      	ldr	r2, [pc, #224]	; (80068a8 <TIM_Base_SetConfig+0x10c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <TIM_Base_SetConfig+0x38>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a37      	ldr	r2, [pc, #220]	; (80068ac <TIM_Base_SetConfig+0x110>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d108      	bne.n	80067e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a2d      	ldr	r2, [pc, #180]	; (80068a0 <TIM_Base_SetConfig+0x104>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d01b      	beq.n	8006826 <TIM_Base_SetConfig+0x8a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f4:	d017      	beq.n	8006826 <TIM_Base_SetConfig+0x8a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a2a      	ldr	r2, [pc, #168]	; (80068a4 <TIM_Base_SetConfig+0x108>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d013      	beq.n	8006826 <TIM_Base_SetConfig+0x8a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a29      	ldr	r2, [pc, #164]	; (80068a8 <TIM_Base_SetConfig+0x10c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00f      	beq.n	8006826 <TIM_Base_SetConfig+0x8a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a28      	ldr	r2, [pc, #160]	; (80068ac <TIM_Base_SetConfig+0x110>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00b      	beq.n	8006826 <TIM_Base_SetConfig+0x8a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a27      	ldr	r2, [pc, #156]	; (80068b0 <TIM_Base_SetConfig+0x114>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d007      	beq.n	8006826 <TIM_Base_SetConfig+0x8a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a26      	ldr	r2, [pc, #152]	; (80068b4 <TIM_Base_SetConfig+0x118>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d003      	beq.n	8006826 <TIM_Base_SetConfig+0x8a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a25      	ldr	r2, [pc, #148]	; (80068b8 <TIM_Base_SetConfig+0x11c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d108      	bne.n	8006838 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a10      	ldr	r2, [pc, #64]	; (80068a0 <TIM_Base_SetConfig+0x104>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d00f      	beq.n	8006884 <TIM_Base_SetConfig+0xe8>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a11      	ldr	r2, [pc, #68]	; (80068ac <TIM_Base_SetConfig+0x110>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00b      	beq.n	8006884 <TIM_Base_SetConfig+0xe8>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a10      	ldr	r2, [pc, #64]	; (80068b0 <TIM_Base_SetConfig+0x114>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d007      	beq.n	8006884 <TIM_Base_SetConfig+0xe8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a0f      	ldr	r2, [pc, #60]	; (80068b4 <TIM_Base_SetConfig+0x118>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_Base_SetConfig+0xe8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a0e      	ldr	r2, [pc, #56]	; (80068b8 <TIM_Base_SetConfig+0x11c>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d103      	bne.n	800688c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	691a      	ldr	r2, [r3, #16]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	615a      	str	r2, [r3, #20]
}
 8006892:	bf00      	nop
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40012c00 	.word	0x40012c00
 80068a4:	40000400 	.word	0x40000400
 80068a8:	40000800 	.word	0x40000800
 80068ac:	40013400 	.word	0x40013400
 80068b0:	40014000 	.word	0x40014000
 80068b4:	40014400 	.word	0x40014400
 80068b8:	40014800 	.word	0x40014800

080068bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f023 0201 	bic.w	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0303 	bic.w	r3, r3, #3
 80068f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f023 0302 	bic.w	r3, r3, #2
 8006908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	4313      	orrs	r3, r2
 8006912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a2c      	ldr	r2, [pc, #176]	; (80069c8 <TIM_OC1_SetConfig+0x10c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00f      	beq.n	800693c <TIM_OC1_SetConfig+0x80>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a2b      	ldr	r2, [pc, #172]	; (80069cc <TIM_OC1_SetConfig+0x110>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d00b      	beq.n	800693c <TIM_OC1_SetConfig+0x80>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a2a      	ldr	r2, [pc, #168]	; (80069d0 <TIM_OC1_SetConfig+0x114>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d007      	beq.n	800693c <TIM_OC1_SetConfig+0x80>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a29      	ldr	r2, [pc, #164]	; (80069d4 <TIM_OC1_SetConfig+0x118>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d003      	beq.n	800693c <TIM_OC1_SetConfig+0x80>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a28      	ldr	r2, [pc, #160]	; (80069d8 <TIM_OC1_SetConfig+0x11c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d10c      	bne.n	8006956 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f023 0308 	bic.w	r3, r3, #8
 8006942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f023 0304 	bic.w	r3, r3, #4
 8006954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a1b      	ldr	r2, [pc, #108]	; (80069c8 <TIM_OC1_SetConfig+0x10c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00f      	beq.n	800697e <TIM_OC1_SetConfig+0xc2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a1a      	ldr	r2, [pc, #104]	; (80069cc <TIM_OC1_SetConfig+0x110>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00b      	beq.n	800697e <TIM_OC1_SetConfig+0xc2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a19      	ldr	r2, [pc, #100]	; (80069d0 <TIM_OC1_SetConfig+0x114>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d007      	beq.n	800697e <TIM_OC1_SetConfig+0xc2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a18      	ldr	r2, [pc, #96]	; (80069d4 <TIM_OC1_SetConfig+0x118>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d003      	beq.n	800697e <TIM_OC1_SetConfig+0xc2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a17      	ldr	r2, [pc, #92]	; (80069d8 <TIM_OC1_SetConfig+0x11c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d111      	bne.n	80069a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800698c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	621a      	str	r2, [r3, #32]
}
 80069bc:	bf00      	nop
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	40012c00 	.word	0x40012c00
 80069cc:	40013400 	.word	0x40013400
 80069d0:	40014000 	.word	0x40014000
 80069d4:	40014400 	.word	0x40014400
 80069d8:	40014800 	.word	0x40014800

080069dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f023 0210 	bic.w	r2, r3, #16
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	021b      	lsls	r3, r3, #8
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f023 0320 	bic.w	r3, r3, #32
 8006a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a28      	ldr	r2, [pc, #160]	; (8006adc <TIM_OC2_SetConfig+0x100>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d003      	beq.n	8006a48 <TIM_OC2_SetConfig+0x6c>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a27      	ldr	r2, [pc, #156]	; (8006ae0 <TIM_OC2_SetConfig+0x104>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d10d      	bne.n	8006a64 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	011b      	lsls	r3, r3, #4
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a1d      	ldr	r2, [pc, #116]	; (8006adc <TIM_OC2_SetConfig+0x100>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00f      	beq.n	8006a8c <TIM_OC2_SetConfig+0xb0>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a1c      	ldr	r2, [pc, #112]	; (8006ae0 <TIM_OC2_SetConfig+0x104>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00b      	beq.n	8006a8c <TIM_OC2_SetConfig+0xb0>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a1b      	ldr	r2, [pc, #108]	; (8006ae4 <TIM_OC2_SetConfig+0x108>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d007      	beq.n	8006a8c <TIM_OC2_SetConfig+0xb0>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a1a      	ldr	r2, [pc, #104]	; (8006ae8 <TIM_OC2_SetConfig+0x10c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d003      	beq.n	8006a8c <TIM_OC2_SetConfig+0xb0>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a19      	ldr	r2, [pc, #100]	; (8006aec <TIM_OC2_SetConfig+0x110>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d113      	bne.n	8006ab4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	621a      	str	r2, [r3, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40012c00 	.word	0x40012c00
 8006ae0:	40013400 	.word	0x40013400
 8006ae4:	40014000 	.word	0x40014000
 8006ae8:	40014400 	.word	0x40014400
 8006aec:	40014800 	.word	0x40014800

08006af0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0303 	bic.w	r3, r3, #3
 8006b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	021b      	lsls	r3, r3, #8
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a27      	ldr	r2, [pc, #156]	; (8006bec <TIM_OC3_SetConfig+0xfc>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d003      	beq.n	8006b5a <TIM_OC3_SetConfig+0x6a>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a26      	ldr	r2, [pc, #152]	; (8006bf0 <TIM_OC3_SetConfig+0x100>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d10d      	bne.n	8006b76 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	021b      	lsls	r3, r3, #8
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a1c      	ldr	r2, [pc, #112]	; (8006bec <TIM_OC3_SetConfig+0xfc>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00f      	beq.n	8006b9e <TIM_OC3_SetConfig+0xae>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a1b      	ldr	r2, [pc, #108]	; (8006bf0 <TIM_OC3_SetConfig+0x100>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00b      	beq.n	8006b9e <TIM_OC3_SetConfig+0xae>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a1a      	ldr	r2, [pc, #104]	; (8006bf4 <TIM_OC3_SetConfig+0x104>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d007      	beq.n	8006b9e <TIM_OC3_SetConfig+0xae>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a19      	ldr	r2, [pc, #100]	; (8006bf8 <TIM_OC3_SetConfig+0x108>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d003      	beq.n	8006b9e <TIM_OC3_SetConfig+0xae>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a18      	ldr	r2, [pc, #96]	; (8006bfc <TIM_OC3_SetConfig+0x10c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d113      	bne.n	8006bc6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	621a      	str	r2, [r3, #32]
}
 8006be0:	bf00      	nop
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	40012c00 	.word	0x40012c00
 8006bf0:	40013400 	.word	0x40013400
 8006bf4:	40014000 	.word	0x40014000
 8006bf8:	40014400 	.word	0x40014400
 8006bfc:	40014800 	.word	0x40014800

08006c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	031b      	lsls	r3, r3, #12
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a28      	ldr	r2, [pc, #160]	; (8006d00 <TIM_OC4_SetConfig+0x100>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d003      	beq.n	8006c6c <TIM_OC4_SetConfig+0x6c>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a27      	ldr	r2, [pc, #156]	; (8006d04 <TIM_OC4_SetConfig+0x104>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d10d      	bne.n	8006c88 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	031b      	lsls	r3, r3, #12
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a1d      	ldr	r2, [pc, #116]	; (8006d00 <TIM_OC4_SetConfig+0x100>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d00f      	beq.n	8006cb0 <TIM_OC4_SetConfig+0xb0>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a1c      	ldr	r2, [pc, #112]	; (8006d04 <TIM_OC4_SetConfig+0x104>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00b      	beq.n	8006cb0 <TIM_OC4_SetConfig+0xb0>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a1b      	ldr	r2, [pc, #108]	; (8006d08 <TIM_OC4_SetConfig+0x108>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d007      	beq.n	8006cb0 <TIM_OC4_SetConfig+0xb0>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a1a      	ldr	r2, [pc, #104]	; (8006d0c <TIM_OC4_SetConfig+0x10c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d003      	beq.n	8006cb0 <TIM_OC4_SetConfig+0xb0>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a19      	ldr	r2, [pc, #100]	; (8006d10 <TIM_OC4_SetConfig+0x110>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d113      	bne.n	8006cd8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cb6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cbe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	019b      	lsls	r3, r3, #6
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	019b      	lsls	r3, r3, #6
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	621a      	str	r2, [r3, #32]
}
 8006cf2:	bf00      	nop
 8006cf4:	371c      	adds	r7, #28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	40012c00 	.word	0x40012c00
 8006d04:	40013400 	.word	0x40013400
 8006d08:	40014000 	.word	0x40014000
 8006d0c:	40014400 	.word	0x40014400
 8006d10:	40014800 	.word	0x40014800

08006d14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	041b      	lsls	r3, r3, #16
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a17      	ldr	r2, [pc, #92]	; (8006dc8 <TIM_OC5_SetConfig+0xb4>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d00f      	beq.n	8006d8e <TIM_OC5_SetConfig+0x7a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a16      	ldr	r2, [pc, #88]	; (8006dcc <TIM_OC5_SetConfig+0xb8>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00b      	beq.n	8006d8e <TIM_OC5_SetConfig+0x7a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a15      	ldr	r2, [pc, #84]	; (8006dd0 <TIM_OC5_SetConfig+0xbc>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d007      	beq.n	8006d8e <TIM_OC5_SetConfig+0x7a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a14      	ldr	r2, [pc, #80]	; (8006dd4 <TIM_OC5_SetConfig+0xc0>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d003      	beq.n	8006d8e <TIM_OC5_SetConfig+0x7a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a13      	ldr	r2, [pc, #76]	; (8006dd8 <TIM_OC5_SetConfig+0xc4>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d109      	bne.n	8006da2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	021b      	lsls	r3, r3, #8
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	621a      	str	r2, [r3, #32]
}
 8006dbc:	bf00      	nop
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	40012c00 	.word	0x40012c00
 8006dcc:	40013400 	.word	0x40013400
 8006dd0:	40014000 	.word	0x40014000
 8006dd4:	40014400 	.word	0x40014400
 8006dd8:	40014800 	.word	0x40014800

08006ddc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	021b      	lsls	r3, r3, #8
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	051b      	lsls	r3, r3, #20
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a18      	ldr	r2, [pc, #96]	; (8006e94 <TIM_OC6_SetConfig+0xb8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00f      	beq.n	8006e58 <TIM_OC6_SetConfig+0x7c>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a17      	ldr	r2, [pc, #92]	; (8006e98 <TIM_OC6_SetConfig+0xbc>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00b      	beq.n	8006e58 <TIM_OC6_SetConfig+0x7c>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a16      	ldr	r2, [pc, #88]	; (8006e9c <TIM_OC6_SetConfig+0xc0>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d007      	beq.n	8006e58 <TIM_OC6_SetConfig+0x7c>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a15      	ldr	r2, [pc, #84]	; (8006ea0 <TIM_OC6_SetConfig+0xc4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_OC6_SetConfig+0x7c>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a14      	ldr	r2, [pc, #80]	; (8006ea4 <TIM_OC6_SetConfig+0xc8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d109      	bne.n	8006e6c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	029b      	lsls	r3, r3, #10
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	621a      	str	r2, [r3, #32]
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40012c00 	.word	0x40012c00
 8006e98:	40013400 	.word	0x40013400
 8006e9c:	40014000 	.word	0x40014000
 8006ea0:	40014400 	.word	0x40014400
 8006ea4:	40014800 	.word	0x40014800

08006ea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f023 0201 	bic.w	r2, r3, #1
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	011b      	lsls	r3, r3, #4
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f023 030a 	bic.w	r3, r3, #10
 8006ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	621a      	str	r2, [r3, #32]
}
 8006efa:	bf00      	nop
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b087      	sub	sp, #28
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	f023 0210 	bic.w	r2, r3, #16
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	031b      	lsls	r3, r3, #12
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	621a      	str	r2, [r3, #32]
}
 8006f5a:	bf00      	nop
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f043 0307 	orr.w	r3, r3, #7
 8006f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	609a      	str	r2, [r3, #8]
}
 8006f94:	bf00      	nop
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	021a      	lsls	r2, r3, #8
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	609a      	str	r2, [r3, #8]
}
 8006fd4:	bf00      	nop
 8006fd6:	371c      	adds	r7, #28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f003 031f 	and.w	r3, r3, #31
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6a1a      	ldr	r2, [r3, #32]
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	43db      	mvns	r3, r3
 8007002:	401a      	ands	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6a1a      	ldr	r2, [r3, #32]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	fa01 f303 	lsl.w	r3, r1, r3
 8007018:	431a      	orrs	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	621a      	str	r2, [r3, #32]
}
 800701e:	bf00      	nop
 8007020:	371c      	adds	r7, #28
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
	...

0800702c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d109      	bne.n	8007050 <HAL_TIMEx_PWMN_Start+0x24>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b01      	cmp	r3, #1
 8007046:	bf14      	ite	ne
 8007048:	2301      	movne	r3, #1
 800704a:	2300      	moveq	r3, #0
 800704c:	b2db      	uxtb	r3, r3
 800704e:	e022      	b.n	8007096 <HAL_TIMEx_PWMN_Start+0x6a>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	2b04      	cmp	r3, #4
 8007054:	d109      	bne.n	800706a <HAL_TIMEx_PWMN_Start+0x3e>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b01      	cmp	r3, #1
 8007060:	bf14      	ite	ne
 8007062:	2301      	movne	r3, #1
 8007064:	2300      	moveq	r3, #0
 8007066:	b2db      	uxtb	r3, r3
 8007068:	e015      	b.n	8007096 <HAL_TIMEx_PWMN_Start+0x6a>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b08      	cmp	r3, #8
 800706e:	d109      	bne.n	8007084 <HAL_TIMEx_PWMN_Start+0x58>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b01      	cmp	r3, #1
 800707a:	bf14      	ite	ne
 800707c:	2301      	movne	r3, #1
 800707e:	2300      	moveq	r3, #0
 8007080:	b2db      	uxtb	r3, r3
 8007082:	e008      	b.n	8007096 <HAL_TIMEx_PWMN_Start+0x6a>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b01      	cmp	r3, #1
 800708e:	bf14      	ite	ne
 8007090:	2301      	movne	r3, #1
 8007092:	2300      	moveq	r3, #0
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e069      	b.n	8007172 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <HAL_TIMEx_PWMN_Start+0x82>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ac:	e013      	b.n	80070d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	d104      	bne.n	80070be <HAL_TIMEx_PWMN_Start+0x92>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070bc:	e00b      	b.n	80070d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d104      	bne.n	80070ce <HAL_TIMEx_PWMN_Start+0xa2>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070cc:	e003      	b.n	80070d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2202      	movs	r2, #2
 80070d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2204      	movs	r2, #4
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fa1e 	bl	8007520 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a20      	ldr	r2, [pc, #128]	; (800717c <HAL_TIMEx_PWMN_Start+0x150>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d018      	beq.n	8007130 <HAL_TIMEx_PWMN_Start+0x104>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007106:	d013      	beq.n	8007130 <HAL_TIMEx_PWMN_Start+0x104>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a1c      	ldr	r2, [pc, #112]	; (8007180 <HAL_TIMEx_PWMN_Start+0x154>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d00e      	beq.n	8007130 <HAL_TIMEx_PWMN_Start+0x104>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a1b      	ldr	r2, [pc, #108]	; (8007184 <HAL_TIMEx_PWMN_Start+0x158>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d009      	beq.n	8007130 <HAL_TIMEx_PWMN_Start+0x104>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a19      	ldr	r2, [pc, #100]	; (8007188 <HAL_TIMEx_PWMN_Start+0x15c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d004      	beq.n	8007130 <HAL_TIMEx_PWMN_Start+0x104>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a18      	ldr	r2, [pc, #96]	; (800718c <HAL_TIMEx_PWMN_Start+0x160>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d115      	bne.n	800715c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	4b16      	ldr	r3, [pc, #88]	; (8007190 <HAL_TIMEx_PWMN_Start+0x164>)
 8007138:	4013      	ands	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b06      	cmp	r3, #6
 8007140:	d015      	beq.n	800716e <HAL_TIMEx_PWMN_Start+0x142>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007148:	d011      	beq.n	800716e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f042 0201 	orr.w	r2, r2, #1
 8007158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715a:	e008      	b.n	800716e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0201 	orr.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	e000      	b.n	8007170 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800716e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	40012c00 	.word	0x40012c00
 8007180:	40000400 	.word	0x40000400
 8007184:	40000800 	.word	0x40000800
 8007188:	40013400 	.word	0x40013400
 800718c:	40014000 	.word	0x40014000
 8007190:	00010007 	.word	0x00010007

08007194 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2200      	movs	r2, #0
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 f9ba 	bl	8007520 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6a1a      	ldr	r2, [r3, #32]
 80071b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80071b6:	4013      	ands	r3, r2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10f      	bne.n	80071dc <HAL_TIMEx_PWMN_Stop+0x48>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6a1a      	ldr	r2, [r3, #32]
 80071c2:	f244 4344 	movw	r3, #17476	; 0x4444
 80071c6:	4013      	ands	r3, r2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d107      	bne.n	80071dc <HAL_TIMEx_PWMN_Stop+0x48>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6a1a      	ldr	r2, [r3, #32]
 80071e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80071e6:	4013      	ands	r3, r2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10f      	bne.n	800720c <HAL_TIMEx_PWMN_Stop+0x78>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6a1a      	ldr	r2, [r3, #32]
 80071f2:	f244 4344 	movw	r3, #17476	; 0x4444
 80071f6:	4013      	ands	r3, r2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d107      	bne.n	800720c <HAL_TIMEx_PWMN_Stop+0x78>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0201 	bic.w	r2, r2, #1
 800720a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <HAL_TIMEx_PWMN_Stop+0x88>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800721a:	e013      	b.n	8007244 <HAL_TIMEx_PWMN_Stop+0xb0>
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2b04      	cmp	r3, #4
 8007220:	d104      	bne.n	800722c <HAL_TIMEx_PWMN_Stop+0x98>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800722a:	e00b      	b.n	8007244 <HAL_TIMEx_PWMN_Stop+0xb0>
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b08      	cmp	r3, #8
 8007230:	d104      	bne.n	800723c <HAL_TIMEx_PWMN_Stop+0xa8>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800723a:	e003      	b.n	8007244 <HAL_TIMEx_PWMN_Stop+0xb0>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007264:	2302      	movs	r3, #2
 8007266:	e065      	b.n	8007334 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a2c      	ldr	r2, [pc, #176]	; (8007340 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d004      	beq.n	800729c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a2b      	ldr	r2, [pc, #172]	; (8007344 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d108      	bne.n	80072ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80072b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a1b      	ldr	r2, [pc, #108]	; (8007340 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d018      	beq.n	8007308 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072de:	d013      	beq.n	8007308 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a18      	ldr	r2, [pc, #96]	; (8007348 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d00e      	beq.n	8007308 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a17      	ldr	r2, [pc, #92]	; (800734c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d009      	beq.n	8007308 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a12      	ldr	r2, [pc, #72]	; (8007344 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d004      	beq.n	8007308 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a13      	ldr	r2, [pc, #76]	; (8007350 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d10c      	bne.n	8007322 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800730e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	4313      	orrs	r3, r2
 8007318:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	40012c00 	.word	0x40012c00
 8007344:	40013400 	.word	0x40013400
 8007348:	40000400 	.word	0x40000400
 800734c:	40000800 	.word	0x40000800
 8007350:	40014000 	.word	0x40014000

08007354 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800736c:	2302      	movs	r3, #2
 800736e:	e087      	b.n	8007480 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	4313      	orrs	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a27      	ldr	r2, [pc, #156]	; (800748c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d004      	beq.n	80073fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a25      	ldr	r2, [pc, #148]	; (8007490 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d106      	bne.n	800740c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	4313      	orrs	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a1e      	ldr	r2, [pc, #120]	; (800748c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d004      	beq.n	8007420 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1d      	ldr	r2, [pc, #116]	; (8007490 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d126      	bne.n	800746e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	051b      	lsls	r3, r3, #20
 800742c:	4313      	orrs	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a0e      	ldr	r2, [pc, #56]	; (800748c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d004      	beq.n	8007460 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a0d      	ldr	r2, [pc, #52]	; (8007490 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d106      	bne.n	800746e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	40012c00 	.word	0x40012c00
 8007490:	40013400 	.word	0x40013400

08007494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f003 031f 	and.w	r3, r3, #31
 8007532:	2204      	movs	r2, #4
 8007534:	fa02 f303 	lsl.w	r3, r2, r3
 8007538:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6a1a      	ldr	r2, [r3, #32]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	43db      	mvns	r3, r3
 8007542:	401a      	ands	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6a1a      	ldr	r2, [r3, #32]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f003 031f 	and.w	r3, r3, #31
 8007552:	6879      	ldr	r1, [r7, #4]
 8007554:	fa01 f303 	lsl.w	r3, r1, r3
 8007558:	431a      	orrs	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	621a      	str	r2, [r3, #32]
}
 800755e:	bf00      	nop
 8007560:	371c      	adds	r7, #28
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e042      	b.n	8007602 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007582:	2b00      	cmp	r3, #0
 8007584:	d106      	bne.n	8007594 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7fa fc50 	bl	8001e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2224      	movs	r2, #36	; 0x24
 8007598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0201 	bic.w	r2, r2, #1
 80075aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fc51 	bl	8007e54 <UART_SetConfig>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d101      	bne.n	80075bc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e022      	b.n	8007602 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 ff11 	bl	80083ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f042 0201 	orr.w	r2, r2, #1
 80075f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 ff98 	bl	8008530 <UART_CheckIdleState>
 8007600:	4603      	mov	r3, r0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b08a      	sub	sp, #40	; 0x28
 800760e:	af02      	add	r7, sp, #8
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	603b      	str	r3, [r7, #0]
 8007616:	4613      	mov	r3, r2
 8007618:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007620:	2b20      	cmp	r3, #32
 8007622:	f040 8083 	bne.w	800772c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <HAL_UART_Transmit+0x28>
 800762c:	88fb      	ldrh	r3, [r7, #6]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e07b      	b.n	800772e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_UART_Transmit+0x3a>
 8007640:	2302      	movs	r3, #2
 8007642:	e074      	b.n	800772e <HAL_UART_Transmit+0x124>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2221      	movs	r2, #33	; 0x21
 8007658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800765c:	f7fa fe3a 	bl	80022d4 <HAL_GetTick>
 8007660:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	88fa      	ldrh	r2, [r7, #6]
 8007666:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	88fa      	ldrh	r2, [r7, #6]
 800766e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800767a:	d108      	bne.n	800768e <HAL_UART_Transmit+0x84>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d104      	bne.n	800768e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007684:	2300      	movs	r3, #0
 8007686:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	61bb      	str	r3, [r7, #24]
 800768c:	e003      	b.n	8007696 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800769e:	e02c      	b.n	80076fa <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	2200      	movs	r2, #0
 80076a8:	2180      	movs	r1, #128	; 0x80
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 ff8b 	bl	80085c6 <UART_WaitOnFlagUntilTimeout>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e039      	b.n	800772e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10b      	bne.n	80076d8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	3302      	adds	r3, #2
 80076d4:	61bb      	str	r3, [r7, #24]
 80076d6:	e007      	b.n	80076e8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	781a      	ldrb	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	3301      	adds	r3, #1
 80076e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007700:	b29b      	uxth	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1cc      	bne.n	80076a0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2200      	movs	r2, #0
 800770e:	2140      	movs	r1, #64	; 0x40
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 ff58 	bl	80085c6 <UART_WaitOnFlagUntilTimeout>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e006      	b.n	800772e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2220      	movs	r2, #32
 8007724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007728:	2300      	movs	r3, #0
 800772a:	e000      	b.n	800772e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800772c:	2302      	movs	r3, #2
  }
}
 800772e:	4618      	mov	r0, r3
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08a      	sub	sp, #40	; 0x28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	4613      	mov	r3, r2
 8007744:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774c:	2b20      	cmp	r3, #32
 800774e:	d142      	bne.n	80077d6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <HAL_UART_Receive_IT+0x24>
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e03b      	b.n	80077d8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007766:	2b01      	cmp	r3, #1
 8007768:	d101      	bne.n	800776e <HAL_UART_Receive_IT+0x36>
 800776a:	2302      	movs	r3, #2
 800776c:	e034      	b.n	80077d8 <HAL_UART_Receive_IT+0xa0>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a17      	ldr	r2, [pc, #92]	; (80077e0 <HAL_UART_Receive_IT+0xa8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d01f      	beq.n	80077c6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d018      	beq.n	80077c6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	613b      	str	r3, [r7, #16]
   return(result);
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	623b      	str	r3, [r7, #32]
 80077b4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	69f9      	ldr	r1, [r7, #28]
 80077b8:	6a3a      	ldr	r2, [r7, #32]
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	61bb      	str	r3, [r7, #24]
   return(result);
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e6      	bne.n	8007794 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077c6:	88fb      	ldrh	r3, [r7, #6]
 80077c8:	461a      	mov	r2, r3
 80077ca:	68b9      	ldr	r1, [r7, #8]
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 ffc3 	bl	8008758 <UART_Start_Receive_IT>
 80077d2:	4603      	mov	r3, r0
 80077d4:	e000      	b.n	80077d8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80077d6:	2302      	movs	r3, #2
  }
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3728      	adds	r7, #40	; 0x28
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	40008000 	.word	0x40008000

080077e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b0ba      	sub	sp, #232	; 0xe8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800780a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800780e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007812:	4013      	ands	r3, r2
 8007814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007818:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800781c:	2b00      	cmp	r3, #0
 800781e:	d11b      	bne.n	8007858 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	d015      	beq.n	8007858 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800782c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007830:	f003 0320 	and.w	r3, r3, #32
 8007834:	2b00      	cmp	r3, #0
 8007836:	d105      	bne.n	8007844 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800783c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d009      	beq.n	8007858 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 82d6 	beq.w	8007dfa <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	4798      	blx	r3
      }
      return;
 8007856:	e2d0      	b.n	8007dfa <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007858:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 811f 	beq.w	8007aa0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007862:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007866:	4b8b      	ldr	r3, [pc, #556]	; (8007a94 <HAL_UART_IRQHandler+0x2b0>)
 8007868:	4013      	ands	r3, r2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d106      	bne.n	800787c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800786e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007872:	4b89      	ldr	r3, [pc, #548]	; (8007a98 <HAL_UART_IRQHandler+0x2b4>)
 8007874:	4013      	ands	r3, r2
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 8112 	beq.w	8007aa0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800787c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	d011      	beq.n	80078ac <HAL_UART_IRQHandler+0xc8>
 8007888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800788c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00b      	beq.n	80078ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2201      	movs	r2, #1
 800789a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a2:	f043 0201 	orr.w	r2, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d011      	beq.n	80078dc <HAL_UART_IRQHandler+0xf8>
 80078b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00b      	beq.n	80078dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2202      	movs	r2, #2
 80078ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078d2:	f043 0204 	orr.w	r2, r3, #4
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d011      	beq.n	800790c <HAL_UART_IRQHandler+0x128>
 80078e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00b      	beq.n	800790c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2204      	movs	r2, #4
 80078fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007902:	f043 0202 	orr.w	r2, r3, #2
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800790c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007910:	f003 0308 	and.w	r3, r3, #8
 8007914:	2b00      	cmp	r3, #0
 8007916:	d017      	beq.n	8007948 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800791c:	f003 0320 	and.w	r3, r3, #32
 8007920:	2b00      	cmp	r3, #0
 8007922:	d105      	bne.n	8007930 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007924:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007928:	4b5a      	ldr	r3, [pc, #360]	; (8007a94 <HAL_UART_IRQHandler+0x2b0>)
 800792a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00b      	beq.n	8007948 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2208      	movs	r2, #8
 8007936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800793e:	f043 0208 	orr.w	r2, r3, #8
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800794c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007950:	2b00      	cmp	r3, #0
 8007952:	d012      	beq.n	800797a <HAL_UART_IRQHandler+0x196>
 8007954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007958:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00c      	beq.n	800797a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007968:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007970:	f043 0220 	orr.w	r2, r3, #32
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 823c 	beq.w	8007dfe <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800798a:	f003 0320 	and.w	r3, r3, #32
 800798e:	2b00      	cmp	r3, #0
 8007990:	d013      	beq.n	80079ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007996:	f003 0320 	and.w	r3, r3, #32
 800799a:	2b00      	cmp	r3, #0
 800799c:	d105      	bne.n	80079aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800799e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d007      	beq.n	80079ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ce:	2b40      	cmp	r3, #64	; 0x40
 80079d0:	d005      	beq.n	80079de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d04f      	beq.n	8007a7e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 ffe4 	bl	80089ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b40      	cmp	r3, #64	; 0x40
 80079f0:	d141      	bne.n	8007a76 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3308      	adds	r3, #8
 80079f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3308      	adds	r3, #8
 8007a1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1d9      	bne.n	80079f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d013      	beq.n	8007a6e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a4a:	4a14      	ldr	r2, [pc, #80]	; (8007a9c <HAL_UART_IRQHandler+0x2b8>)
 8007a4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fc fc78 	bl	8004348 <HAL_DMA_Abort_IT>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d017      	beq.n	8007a8e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a6c:	e00f      	b.n	8007a8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f9da 	bl	8007e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a74:	e00b      	b.n	8007a8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f9d6 	bl	8007e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a7c:	e007      	b.n	8007a8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f9d2 	bl	8007e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007a8c:	e1b7      	b.n	8007dfe <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a8e:	bf00      	nop
    return;
 8007a90:	e1b5      	b.n	8007dfe <HAL_UART_IRQHandler+0x61a>
 8007a92:	bf00      	nop
 8007a94:	10000001 	.word	0x10000001
 8007a98:	04000120 	.word	0x04000120
 8007a9c:	08008a79 	.word	0x08008a79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	f040 814a 	bne.w	8007d3e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aae:	f003 0310 	and.w	r3, r3, #16
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 8143 	beq.w	8007d3e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007abc:	f003 0310 	and.w	r3, r3, #16
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 813c 	beq.w	8007d3e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2210      	movs	r2, #16
 8007acc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad8:	2b40      	cmp	r3, #64	; 0x40
 8007ada:	f040 80b5 	bne.w	8007c48 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007aea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 8187 	beq.w	8007e02 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007afe:	429a      	cmp	r2, r3
 8007b00:	f080 817f 	bcs.w	8007e02 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0320 	and.w	r3, r3, #32
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f040 8086 	bne.w	8007c2c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b2c:	e853 3f00 	ldrex	r3, [r3]
 8007b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b5a:	e841 2300 	strex	r3, r2, [r1]
 8007b5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1da      	bne.n	8007b20 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b7c:	f023 0301 	bic.w	r3, r3, #1
 8007b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3308      	adds	r3, #8
 8007b8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b9a:	e841 2300 	strex	r3, r2, [r1]
 8007b9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1e1      	bne.n	8007b6a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	3308      	adds	r3, #8
 8007bac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007bca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007bcc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007bd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007bd2:	e841 2300 	strex	r3, r2, [r1]
 8007bd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1e3      	bne.n	8007ba6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2220      	movs	r2, #32
 8007be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf4:	e853 3f00 	ldrex	r3, [r3]
 8007bf8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bfc:	f023 0310 	bic.w	r3, r3, #16
 8007c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c16:	e841 2300 	strex	r3, r2, [r1]
 8007c1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1e4      	bne.n	8007bec <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fc fb35 	bl	8004296 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f8fb 	bl	8007e3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c46:	e0dc      	b.n	8007e02 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 80ce 	beq.w	8007e06 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007c6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 80c9 	beq.w	8007e06 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	e853 3f00 	ldrex	r3, [r3]
 8007c80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	461a      	mov	r2, r3
 8007c92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c96:	647b      	str	r3, [r7, #68]	; 0x44
 8007c98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c9e:	e841 2300 	strex	r3, r2, [r1]
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1e4      	bne.n	8007c74 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	3308      	adds	r3, #8
 8007cb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	e853 3f00 	ldrex	r3, [r3]
 8007cb8:	623b      	str	r3, [r7, #32]
   return(result);
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cc0:	f023 0301 	bic.w	r3, r3, #1
 8007cc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3308      	adds	r3, #8
 8007cce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007cd2:	633a      	str	r2, [r7, #48]	; 0x30
 8007cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e1      	bne.n	8007caa <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2220      	movs	r2, #32
 8007cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	e853 3f00 	ldrex	r3, [r3]
 8007d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0310 	bic.w	r3, r3, #16
 8007d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d1c:	61fb      	str	r3, [r7, #28]
 8007d1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	69b9      	ldr	r1, [r7, #24]
 8007d22:	69fa      	ldr	r2, [r7, #28]
 8007d24:	e841 2300 	strex	r3, r2, [r1]
 8007d28:	617b      	str	r3, [r7, #20]
   return(result);
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e4      	bne.n	8007cfa <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f880 	bl	8007e3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d3c:	e063      	b.n	8007e06 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00e      	beq.n	8007d68 <HAL_UART_IRQHandler+0x584>
 8007d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d008      	beq.n	8007d68 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 fb27 	bl	80093b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d66:	e051      	b.n	8007e0c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d014      	beq.n	8007d9e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d105      	bne.n	8007d8c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d008      	beq.n	8007d9e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d03a      	beq.n	8007e0a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	4798      	blx	r3
    }
    return;
 8007d9c:	e035      	b.n	8007e0a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <HAL_UART_IRQHandler+0x5da>
 8007daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fe74 	bl	8008aa4 <UART_EndTransmit_IT>
    return;
 8007dbc:	e026      	b.n	8007e0c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d009      	beq.n	8007dde <HAL_UART_IRQHandler+0x5fa>
 8007dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f001 fb00 	bl	80093dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ddc:	e016      	b.n	8007e0c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d010      	beq.n	8007e0c <HAL_UART_IRQHandler+0x628>
 8007dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	da0c      	bge.n	8007e0c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 fae8 	bl	80093c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007df8:	e008      	b.n	8007e0c <HAL_UART_IRQHandler+0x628>
      return;
 8007dfa:	bf00      	nop
 8007dfc:	e006      	b.n	8007e0c <HAL_UART_IRQHandler+0x628>
    return;
 8007dfe:	bf00      	nop
 8007e00:	e004      	b.n	8007e0c <HAL_UART_IRQHandler+0x628>
      return;
 8007e02:	bf00      	nop
 8007e04:	e002      	b.n	8007e0c <HAL_UART_IRQHandler+0x628>
      return;
 8007e06:	bf00      	nop
 8007e08:	e000      	b.n	8007e0c <HAL_UART_IRQHandler+0x628>
    return;
 8007e0a:	bf00      	nop
  }
}
 8007e0c:	37e8      	adds	r7, #232	; 0xe8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop

08007e14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	460b      	mov	r3, r1
 8007e46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e58:	b08c      	sub	sp, #48	; 0x30
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	431a      	orrs	r2, r3
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	431a      	orrs	r2, r3
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	4bab      	ldr	r3, [pc, #684]	; (8008130 <UART_SetConfig+0x2dc>)
 8007e84:	4013      	ands	r3, r2
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	6812      	ldr	r2, [r2, #0]
 8007e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4aa0      	ldr	r2, [pc, #640]	; (8008134 <UART_SetConfig+0x2e0>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d004      	beq.n	8007ec0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007eca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	6812      	ldr	r2, [r2, #0]
 8007ed2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ede:	f023 010f 	bic.w	r1, r3, #15
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a91      	ldr	r2, [pc, #580]	; (8008138 <UART_SetConfig+0x2e4>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d125      	bne.n	8007f44 <UART_SetConfig+0xf0>
 8007ef8:	4b90      	ldr	r3, [pc, #576]	; (800813c <UART_SetConfig+0x2e8>)
 8007efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007efe:	f003 0303 	and.w	r3, r3, #3
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d81a      	bhi.n	8007f3c <UART_SetConfig+0xe8>
 8007f06:	a201      	add	r2, pc, #4	; (adr r2, 8007f0c <UART_SetConfig+0xb8>)
 8007f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0c:	08007f1d 	.word	0x08007f1d
 8007f10:	08007f2d 	.word	0x08007f2d
 8007f14:	08007f25 	.word	0x08007f25
 8007f18:	08007f35 	.word	0x08007f35
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f22:	e0d6      	b.n	80080d2 <UART_SetConfig+0x27e>
 8007f24:	2302      	movs	r3, #2
 8007f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f2a:	e0d2      	b.n	80080d2 <UART_SetConfig+0x27e>
 8007f2c:	2304      	movs	r3, #4
 8007f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f32:	e0ce      	b.n	80080d2 <UART_SetConfig+0x27e>
 8007f34:	2308      	movs	r3, #8
 8007f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f3a:	e0ca      	b.n	80080d2 <UART_SetConfig+0x27e>
 8007f3c:	2310      	movs	r3, #16
 8007f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f42:	e0c6      	b.n	80080d2 <UART_SetConfig+0x27e>
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a7d      	ldr	r2, [pc, #500]	; (8008140 <UART_SetConfig+0x2ec>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d138      	bne.n	8007fc0 <UART_SetConfig+0x16c>
 8007f4e:	4b7b      	ldr	r3, [pc, #492]	; (800813c <UART_SetConfig+0x2e8>)
 8007f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f54:	f003 030c 	and.w	r3, r3, #12
 8007f58:	2b0c      	cmp	r3, #12
 8007f5a:	d82d      	bhi.n	8007fb8 <UART_SetConfig+0x164>
 8007f5c:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <UART_SetConfig+0x110>)
 8007f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f62:	bf00      	nop
 8007f64:	08007f99 	.word	0x08007f99
 8007f68:	08007fb9 	.word	0x08007fb9
 8007f6c:	08007fb9 	.word	0x08007fb9
 8007f70:	08007fb9 	.word	0x08007fb9
 8007f74:	08007fa9 	.word	0x08007fa9
 8007f78:	08007fb9 	.word	0x08007fb9
 8007f7c:	08007fb9 	.word	0x08007fb9
 8007f80:	08007fb9 	.word	0x08007fb9
 8007f84:	08007fa1 	.word	0x08007fa1
 8007f88:	08007fb9 	.word	0x08007fb9
 8007f8c:	08007fb9 	.word	0x08007fb9
 8007f90:	08007fb9 	.word	0x08007fb9
 8007f94:	08007fb1 	.word	0x08007fb1
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f9e:	e098      	b.n	80080d2 <UART_SetConfig+0x27e>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fa6:	e094      	b.n	80080d2 <UART_SetConfig+0x27e>
 8007fa8:	2304      	movs	r3, #4
 8007faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fae:	e090      	b.n	80080d2 <UART_SetConfig+0x27e>
 8007fb0:	2308      	movs	r3, #8
 8007fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fb6:	e08c      	b.n	80080d2 <UART_SetConfig+0x27e>
 8007fb8:	2310      	movs	r3, #16
 8007fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fbe:	e088      	b.n	80080d2 <UART_SetConfig+0x27e>
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a5f      	ldr	r2, [pc, #380]	; (8008144 <UART_SetConfig+0x2f0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d125      	bne.n	8008016 <UART_SetConfig+0x1c2>
 8007fca:	4b5c      	ldr	r3, [pc, #368]	; (800813c <UART_SetConfig+0x2e8>)
 8007fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fd4:	2b30      	cmp	r3, #48	; 0x30
 8007fd6:	d016      	beq.n	8008006 <UART_SetConfig+0x1b2>
 8007fd8:	2b30      	cmp	r3, #48	; 0x30
 8007fda:	d818      	bhi.n	800800e <UART_SetConfig+0x1ba>
 8007fdc:	2b20      	cmp	r3, #32
 8007fde:	d00a      	beq.n	8007ff6 <UART_SetConfig+0x1a2>
 8007fe0:	2b20      	cmp	r3, #32
 8007fe2:	d814      	bhi.n	800800e <UART_SetConfig+0x1ba>
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <UART_SetConfig+0x19a>
 8007fe8:	2b10      	cmp	r3, #16
 8007fea:	d008      	beq.n	8007ffe <UART_SetConfig+0x1aa>
 8007fec:	e00f      	b.n	800800e <UART_SetConfig+0x1ba>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ff4:	e06d      	b.n	80080d2 <UART_SetConfig+0x27e>
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ffc:	e069      	b.n	80080d2 <UART_SetConfig+0x27e>
 8007ffe:	2304      	movs	r3, #4
 8008000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008004:	e065      	b.n	80080d2 <UART_SetConfig+0x27e>
 8008006:	2308      	movs	r3, #8
 8008008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800800c:	e061      	b.n	80080d2 <UART_SetConfig+0x27e>
 800800e:	2310      	movs	r3, #16
 8008010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008014:	e05d      	b.n	80080d2 <UART_SetConfig+0x27e>
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a4b      	ldr	r2, [pc, #300]	; (8008148 <UART_SetConfig+0x2f4>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d125      	bne.n	800806c <UART_SetConfig+0x218>
 8008020:	4b46      	ldr	r3, [pc, #280]	; (800813c <UART_SetConfig+0x2e8>)
 8008022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008026:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800802a:	2bc0      	cmp	r3, #192	; 0xc0
 800802c:	d016      	beq.n	800805c <UART_SetConfig+0x208>
 800802e:	2bc0      	cmp	r3, #192	; 0xc0
 8008030:	d818      	bhi.n	8008064 <UART_SetConfig+0x210>
 8008032:	2b80      	cmp	r3, #128	; 0x80
 8008034:	d00a      	beq.n	800804c <UART_SetConfig+0x1f8>
 8008036:	2b80      	cmp	r3, #128	; 0x80
 8008038:	d814      	bhi.n	8008064 <UART_SetConfig+0x210>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <UART_SetConfig+0x1f0>
 800803e:	2b40      	cmp	r3, #64	; 0x40
 8008040:	d008      	beq.n	8008054 <UART_SetConfig+0x200>
 8008042:	e00f      	b.n	8008064 <UART_SetConfig+0x210>
 8008044:	2300      	movs	r3, #0
 8008046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800804a:	e042      	b.n	80080d2 <UART_SetConfig+0x27e>
 800804c:	2302      	movs	r3, #2
 800804e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008052:	e03e      	b.n	80080d2 <UART_SetConfig+0x27e>
 8008054:	2304      	movs	r3, #4
 8008056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800805a:	e03a      	b.n	80080d2 <UART_SetConfig+0x27e>
 800805c:	2308      	movs	r3, #8
 800805e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008062:	e036      	b.n	80080d2 <UART_SetConfig+0x27e>
 8008064:	2310      	movs	r3, #16
 8008066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800806a:	e032      	b.n	80080d2 <UART_SetConfig+0x27e>
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a30      	ldr	r2, [pc, #192]	; (8008134 <UART_SetConfig+0x2e0>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d12a      	bne.n	80080cc <UART_SetConfig+0x278>
 8008076:	4b31      	ldr	r3, [pc, #196]	; (800813c <UART_SetConfig+0x2e8>)
 8008078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008080:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008084:	d01a      	beq.n	80080bc <UART_SetConfig+0x268>
 8008086:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800808a:	d81b      	bhi.n	80080c4 <UART_SetConfig+0x270>
 800808c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008090:	d00c      	beq.n	80080ac <UART_SetConfig+0x258>
 8008092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008096:	d815      	bhi.n	80080c4 <UART_SetConfig+0x270>
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <UART_SetConfig+0x250>
 800809c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080a0:	d008      	beq.n	80080b4 <UART_SetConfig+0x260>
 80080a2:	e00f      	b.n	80080c4 <UART_SetConfig+0x270>
 80080a4:	2300      	movs	r3, #0
 80080a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080aa:	e012      	b.n	80080d2 <UART_SetConfig+0x27e>
 80080ac:	2302      	movs	r3, #2
 80080ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080b2:	e00e      	b.n	80080d2 <UART_SetConfig+0x27e>
 80080b4:	2304      	movs	r3, #4
 80080b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ba:	e00a      	b.n	80080d2 <UART_SetConfig+0x27e>
 80080bc:	2308      	movs	r3, #8
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c2:	e006      	b.n	80080d2 <UART_SetConfig+0x27e>
 80080c4:	2310      	movs	r3, #16
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ca:	e002      	b.n	80080d2 <UART_SetConfig+0x27e>
 80080cc:	2310      	movs	r3, #16
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a17      	ldr	r2, [pc, #92]	; (8008134 <UART_SetConfig+0x2e0>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	f040 80a8 	bne.w	800822e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080e2:	2b08      	cmp	r3, #8
 80080e4:	d834      	bhi.n	8008150 <UART_SetConfig+0x2fc>
 80080e6:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <UART_SetConfig+0x298>)
 80080e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ec:	08008111 	.word	0x08008111
 80080f0:	08008151 	.word	0x08008151
 80080f4:	08008119 	.word	0x08008119
 80080f8:	08008151 	.word	0x08008151
 80080fc:	0800811f 	.word	0x0800811f
 8008100:	08008151 	.word	0x08008151
 8008104:	08008151 	.word	0x08008151
 8008108:	08008151 	.word	0x08008151
 800810c:	08008127 	.word	0x08008127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008110:	f7fd f9e8 	bl	80054e4 <HAL_RCC_GetPCLK1Freq>
 8008114:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008116:	e021      	b.n	800815c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008118:	4b0c      	ldr	r3, [pc, #48]	; (800814c <UART_SetConfig+0x2f8>)
 800811a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800811c:	e01e      	b.n	800815c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800811e:	f7fd f973 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 8008122:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008124:	e01a      	b.n	800815c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800812a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800812c:	e016      	b.n	800815c <UART_SetConfig+0x308>
 800812e:	bf00      	nop
 8008130:	cfff69f3 	.word	0xcfff69f3
 8008134:	40008000 	.word	0x40008000
 8008138:	40013800 	.word	0x40013800
 800813c:	40021000 	.word	0x40021000
 8008140:	40004400 	.word	0x40004400
 8008144:	40004800 	.word	0x40004800
 8008148:	40004c00 	.word	0x40004c00
 800814c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800815a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 812a 	beq.w	80083b8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	4a9e      	ldr	r2, [pc, #632]	; (80083e4 <UART_SetConfig+0x590>)
 800816a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800816e:	461a      	mov	r2, r3
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	fbb3 f3f2 	udiv	r3, r3, r2
 8008176:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	4613      	mov	r3, r2
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	4413      	add	r3, r2
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	429a      	cmp	r2, r3
 8008186:	d305      	bcc.n	8008194 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	429a      	cmp	r2, r3
 8008192:	d903      	bls.n	800819c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800819a:	e10d      	b.n	80083b8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	2200      	movs	r2, #0
 80081a0:	60bb      	str	r3, [r7, #8]
 80081a2:	60fa      	str	r2, [r7, #12]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	4a8e      	ldr	r2, [pc, #568]	; (80083e4 <UART_SetConfig+0x590>)
 80081aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2200      	movs	r2, #0
 80081b2:	603b      	str	r3, [r7, #0]
 80081b4:	607a      	str	r2, [r7, #4]
 80081b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081be:	f7f8 fd7b 	bl	8000cb8 <__aeabi_uldivmod>
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	4610      	mov	r0, r2
 80081c8:	4619      	mov	r1, r3
 80081ca:	f04f 0200 	mov.w	r2, #0
 80081ce:	f04f 0300 	mov.w	r3, #0
 80081d2:	020b      	lsls	r3, r1, #8
 80081d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081d8:	0202      	lsls	r2, r0, #8
 80081da:	6979      	ldr	r1, [r7, #20]
 80081dc:	6849      	ldr	r1, [r1, #4]
 80081de:	0849      	lsrs	r1, r1, #1
 80081e0:	2000      	movs	r0, #0
 80081e2:	460c      	mov	r4, r1
 80081e4:	4605      	mov	r5, r0
 80081e6:	eb12 0804 	adds.w	r8, r2, r4
 80081ea:	eb43 0905 	adc.w	r9, r3, r5
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	469a      	mov	sl, r3
 80081f6:	4693      	mov	fp, r2
 80081f8:	4652      	mov	r2, sl
 80081fa:	465b      	mov	r3, fp
 80081fc:	4640      	mov	r0, r8
 80081fe:	4649      	mov	r1, r9
 8008200:	f7f8 fd5a 	bl	8000cb8 <__aeabi_uldivmod>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4613      	mov	r3, r2
 800820a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008212:	d308      	bcc.n	8008226 <UART_SetConfig+0x3d2>
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800821a:	d204      	bcs.n	8008226 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6a3a      	ldr	r2, [r7, #32]
 8008222:	60da      	str	r2, [r3, #12]
 8008224:	e0c8      	b.n	80083b8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800822c:	e0c4      	b.n	80083b8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008236:	d167      	bne.n	8008308 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008238:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800823c:	2b08      	cmp	r3, #8
 800823e:	d828      	bhi.n	8008292 <UART_SetConfig+0x43e>
 8008240:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <UART_SetConfig+0x3f4>)
 8008242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008246:	bf00      	nop
 8008248:	0800826d 	.word	0x0800826d
 800824c:	08008275 	.word	0x08008275
 8008250:	0800827d 	.word	0x0800827d
 8008254:	08008293 	.word	0x08008293
 8008258:	08008283 	.word	0x08008283
 800825c:	08008293 	.word	0x08008293
 8008260:	08008293 	.word	0x08008293
 8008264:	08008293 	.word	0x08008293
 8008268:	0800828b 	.word	0x0800828b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800826c:	f7fd f93a 	bl	80054e4 <HAL_RCC_GetPCLK1Freq>
 8008270:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008272:	e014      	b.n	800829e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008274:	f7fd f94c 	bl	8005510 <HAL_RCC_GetPCLK2Freq>
 8008278:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800827a:	e010      	b.n	800829e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800827c:	4b5a      	ldr	r3, [pc, #360]	; (80083e8 <UART_SetConfig+0x594>)
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008280:	e00d      	b.n	800829e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008282:	f7fd f8c1 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 8008286:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008288:	e009      	b.n	800829e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800828a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800828e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008290:	e005      	b.n	800829e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800829c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 8089 	beq.w	80083b8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	4a4e      	ldr	r2, [pc, #312]	; (80083e4 <UART_SetConfig+0x590>)
 80082ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082b0:	461a      	mov	r2, r3
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80082b8:	005a      	lsls	r2, r3, #1
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	085b      	lsrs	r3, r3, #1
 80082c0:	441a      	add	r2, r3
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	2b0f      	cmp	r3, #15
 80082d0:	d916      	bls.n	8008300 <UART_SetConfig+0x4ac>
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082d8:	d212      	bcs.n	8008300 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	f023 030f 	bic.w	r3, r3, #15
 80082e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	085b      	lsrs	r3, r3, #1
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	8bfb      	ldrh	r3, [r7, #30]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	8bfa      	ldrh	r2, [r7, #30]
 80082fc:	60da      	str	r2, [r3, #12]
 80082fe:	e05b      	b.n	80083b8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008306:	e057      	b.n	80083b8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008308:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800830c:	2b08      	cmp	r3, #8
 800830e:	d828      	bhi.n	8008362 <UART_SetConfig+0x50e>
 8008310:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <UART_SetConfig+0x4c4>)
 8008312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008316:	bf00      	nop
 8008318:	0800833d 	.word	0x0800833d
 800831c:	08008345 	.word	0x08008345
 8008320:	0800834d 	.word	0x0800834d
 8008324:	08008363 	.word	0x08008363
 8008328:	08008353 	.word	0x08008353
 800832c:	08008363 	.word	0x08008363
 8008330:	08008363 	.word	0x08008363
 8008334:	08008363 	.word	0x08008363
 8008338:	0800835b 	.word	0x0800835b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800833c:	f7fd f8d2 	bl	80054e4 <HAL_RCC_GetPCLK1Freq>
 8008340:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008342:	e014      	b.n	800836e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008344:	f7fd f8e4 	bl	8005510 <HAL_RCC_GetPCLK2Freq>
 8008348:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800834a:	e010      	b.n	800836e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800834c:	4b26      	ldr	r3, [pc, #152]	; (80083e8 <UART_SetConfig+0x594>)
 800834e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008350:	e00d      	b.n	800836e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008352:	f7fd f859 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 8008356:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008358:	e009      	b.n	800836e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800835a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008360:	e005      	b.n	800836e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800836c:	bf00      	nop
    }

    if (pclk != 0U)
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	2b00      	cmp	r3, #0
 8008372:	d021      	beq.n	80083b8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	4a1a      	ldr	r2, [pc, #104]	; (80083e4 <UART_SetConfig+0x590>)
 800837a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800837e:	461a      	mov	r2, r3
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	fbb3 f2f2 	udiv	r2, r3, r2
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	085b      	lsrs	r3, r3, #1
 800838c:	441a      	add	r2, r3
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	fbb2 f3f3 	udiv	r3, r2, r3
 8008396:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	2b0f      	cmp	r3, #15
 800839c:	d909      	bls.n	80083b2 <UART_SetConfig+0x55e>
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083a4:	d205      	bcs.n	80083b2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60da      	str	r2, [r3, #12]
 80083b0:	e002      	b.n	80083b8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2200      	movs	r2, #0
 80083cc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2200      	movs	r2, #0
 80083d2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80083d4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3730      	adds	r7, #48	; 0x30
 80083dc:	46bd      	mov	sp, r7
 80083de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083e2:	bf00      	nop
 80083e4:	0800c8f0 	.word	0x0800c8f0
 80083e8:	00f42400 	.word	0x00f42400

080083ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841a:	f003 0302 	and.w	r3, r3, #2
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843c:	f003 0304 	and.w	r3, r3, #4
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00a      	beq.n	800845a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845e:	f003 0308 	and.w	r3, r3, #8
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008480:	f003 0310 	and.w	r3, r3, #16
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00a      	beq.n	800849e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a2:	f003 0320 	and.w	r3, r3, #32
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d01a      	beq.n	8008502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084ea:	d10a      	bne.n	8008502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00a      	beq.n	8008524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	605a      	str	r2, [r3, #4]
  }
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af02      	add	r7, sp, #8
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008540:	f7f9 fec8 	bl	80022d4 <HAL_GetTick>
 8008544:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0308 	and.w	r3, r3, #8
 8008550:	2b08      	cmp	r3, #8
 8008552:	d10e      	bne.n	8008572 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f82f 	bl	80085c6 <UART_WaitOnFlagUntilTimeout>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e025      	b.n	80085be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0304 	and.w	r3, r3, #4
 800857c:	2b04      	cmp	r3, #4
 800857e:	d10e      	bne.n	800859e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f819 	bl	80085c6 <UART_WaitOnFlagUntilTimeout>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e00f      	b.n	80085be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b09c      	sub	sp, #112	; 0x70
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	60b9      	str	r1, [r7, #8]
 80085d0:	603b      	str	r3, [r7, #0]
 80085d2:	4613      	mov	r3, r2
 80085d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085d6:	e0a9      	b.n	800872c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085de:	f000 80a5 	beq.w	800872c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085e2:	f7f9 fe77 	bl	80022d4 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d302      	bcc.n	80085f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80085f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d140      	bne.n	800867a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008608:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800860c:	667b      	str	r3, [r7, #100]	; 0x64
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008616:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008618:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800861c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e6      	bne.n	80085f8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3308      	adds	r3, #8
 8008630:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008634:	e853 3f00 	ldrex	r3, [r3]
 8008638:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	f023 0301 	bic.w	r3, r3, #1
 8008640:	663b      	str	r3, [r7, #96]	; 0x60
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3308      	adds	r3, #8
 8008648:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800864a:	64ba      	str	r2, [r7, #72]	; 0x48
 800864c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e5      	bne.n	800862a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2220      	movs	r2, #32
 8008662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2220      	movs	r2, #32
 800866a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e069      	b.n	800874e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b00      	cmp	r3, #0
 8008686:	d051      	beq.n	800872c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008696:	d149      	bne.n	800872c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	461a      	mov	r2, r3
 80086be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086c0:	637b      	str	r3, [r7, #52]	; 0x34
 80086c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e6      	bne.n	80086a2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3308      	adds	r3, #8
 80086da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	e853 3f00 	ldrex	r3, [r3]
 80086e2:	613b      	str	r3, [r7, #16]
   return(result);
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f023 0301 	bic.w	r3, r3, #1
 80086ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3308      	adds	r3, #8
 80086f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086f4:	623a      	str	r2, [r7, #32]
 80086f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f8:	69f9      	ldr	r1, [r7, #28]
 80086fa:	6a3a      	ldr	r2, [r7, #32]
 80086fc:	e841 2300 	strex	r3, r2, [r1]
 8008700:	61bb      	str	r3, [r7, #24]
   return(result);
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1e5      	bne.n	80086d4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2220      	movs	r2, #32
 800870c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2220      	movs	r2, #32
 8008714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2220      	movs	r2, #32
 800871c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e010      	b.n	800874e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	69da      	ldr	r2, [r3, #28]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	4013      	ands	r3, r2
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	429a      	cmp	r2, r3
 800873a:	bf0c      	ite	eq
 800873c:	2301      	moveq	r3, #1
 800873e:	2300      	movne	r3, #0
 8008740:	b2db      	uxtb	r3, r3
 8008742:	461a      	mov	r2, r3
 8008744:	79fb      	ldrb	r3, [r7, #7]
 8008746:	429a      	cmp	r2, r3
 8008748:	f43f af46 	beq.w	80085d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3770      	adds	r7, #112	; 0x70
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
	...

08008758 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008758:	b480      	push	{r7}
 800875a:	b0a3      	sub	sp, #140	; 0x8c
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	4613      	mov	r3, r2
 8008764:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	88fa      	ldrh	r2, [r7, #6]
 8008770:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	88fa      	ldrh	r2, [r7, #6]
 8008778:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800878a:	d10e      	bne.n	80087aa <UART_Start_Receive_IT+0x52>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d105      	bne.n	80087a0 <UART_Start_Receive_IT+0x48>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f240 12ff 	movw	r2, #511	; 0x1ff
 800879a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800879e:	e02d      	b.n	80087fc <UART_Start_Receive_IT+0xa4>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	22ff      	movs	r2, #255	; 0xff
 80087a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087a8:	e028      	b.n	80087fc <UART_Start_Receive_IT+0xa4>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10d      	bne.n	80087ce <UART_Start_Receive_IT+0x76>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d104      	bne.n	80087c4 <UART_Start_Receive_IT+0x6c>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	22ff      	movs	r2, #255	; 0xff
 80087be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087c2:	e01b      	b.n	80087fc <UART_Start_Receive_IT+0xa4>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	227f      	movs	r2, #127	; 0x7f
 80087c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087cc:	e016      	b.n	80087fc <UART_Start_Receive_IT+0xa4>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087d6:	d10d      	bne.n	80087f4 <UART_Start_Receive_IT+0x9c>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d104      	bne.n	80087ea <UART_Start_Receive_IT+0x92>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	227f      	movs	r2, #127	; 0x7f
 80087e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087e8:	e008      	b.n	80087fc <UART_Start_Receive_IT+0xa4>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	223f      	movs	r2, #63	; 0x3f
 80087ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087f2:	e003      	b.n	80087fc <UART_Start_Receive_IT+0xa4>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2222      	movs	r2, #34	; 0x22
 8008808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3308      	adds	r3, #8
 8008812:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008816:	e853 3f00 	ldrex	r3, [r3]
 800881a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800881c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800881e:	f043 0301 	orr.w	r3, r3, #1
 8008822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3308      	adds	r3, #8
 800882c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008830:	673a      	str	r2, [r7, #112]	; 0x70
 8008832:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008834:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008836:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008838:	e841 2300 	strex	r3, r2, [r1]
 800883c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800883e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1e3      	bne.n	800880c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800884c:	d153      	bne.n	80088f6 <UART_Start_Receive_IT+0x19e>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008854:	88fa      	ldrh	r2, [r7, #6]
 8008856:	429a      	cmp	r2, r3
 8008858:	d34d      	bcc.n	80088f6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008862:	d107      	bne.n	8008874 <UART_Start_Receive_IT+0x11c>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d103      	bne.n	8008874 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4a4b      	ldr	r2, [pc, #300]	; (800899c <UART_Start_Receive_IT+0x244>)
 8008870:	671a      	str	r2, [r3, #112]	; 0x70
 8008872:	e002      	b.n	800887a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	4a4a      	ldr	r2, [pc, #296]	; (80089a0 <UART_Start_Receive_IT+0x248>)
 8008878:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d01a      	beq.n	80088c0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800889a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800889e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088ae:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088b4:	e841 2300 	strex	r3, r2, [r1]
 80088b8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80088ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1e4      	bne.n	800888a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3308      	adds	r3, #8
 80088c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3308      	adds	r3, #8
 80088de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80088e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80088e2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e5      	bne.n	80088c0 <UART_Start_Receive_IT+0x168>
 80088f4:	e04a      	b.n	800898c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088fe:	d107      	bne.n	8008910 <UART_Start_Receive_IT+0x1b8>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d103      	bne.n	8008910 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	4a26      	ldr	r2, [pc, #152]	; (80089a4 <UART_Start_Receive_IT+0x24c>)
 800890c:	671a      	str	r2, [r3, #112]	; 0x70
 800890e:	e002      	b.n	8008916 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4a25      	ldr	r2, [pc, #148]	; (80089a8 <UART_Start_Receive_IT+0x250>)
 8008914:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d019      	beq.n	800895a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892e:	e853 3f00 	ldrex	r3, [r3]
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800893a:	677b      	str	r3, [r7, #116]	; 0x74
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	461a      	mov	r2, r3
 8008942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008944:	637b      	str	r3, [r7, #52]	; 0x34
 8008946:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008948:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800894a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800894c:	e841 2300 	strex	r3, r2, [r1]
 8008950:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1e6      	bne.n	8008926 <UART_Start_Receive_IT+0x1ce>
 8008958:	e018      	b.n	800898c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	e853 3f00 	ldrex	r3, [r3]
 8008966:	613b      	str	r3, [r7, #16]
   return(result);
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	f043 0320 	orr.w	r3, r3, #32
 800896e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	461a      	mov	r2, r3
 8008976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008978:	623b      	str	r3, [r7, #32]
 800897a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897c:	69f9      	ldr	r1, [r7, #28]
 800897e:	6a3a      	ldr	r2, [r7, #32]
 8008980:	e841 2300 	strex	r3, r2, [r1]
 8008984:	61bb      	str	r3, [r7, #24]
   return(result);
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e6      	bne.n	800895a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	378c      	adds	r7, #140	; 0x8c
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	080090b5 	.word	0x080090b5
 80089a0:	08008dbd 	.word	0x08008dbd
 80089a4:	08008c5b 	.word	0x08008c5b
 80089a8:	08008afb 	.word	0x08008afb

080089ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b095      	sub	sp, #84	; 0x54
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089bc:	e853 3f00 	ldrex	r3, [r3]
 80089c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d2:	643b      	str	r3, [r7, #64]	; 0x40
 80089d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089da:	e841 2300 	strex	r3, r2, [r1]
 80089de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1e6      	bne.n	80089b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3308      	adds	r3, #8
 80089ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ee:	6a3b      	ldr	r3, [r7, #32]
 80089f0:	e853 3f00 	ldrex	r3, [r3]
 80089f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089fc:	f023 0301 	bic.w	r3, r3, #1
 8008a00:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3308      	adds	r3, #8
 8008a08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a12:	e841 2300 	strex	r3, r2, [r1]
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1e3      	bne.n	80089e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d118      	bne.n	8008a58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	e853 3f00 	ldrex	r3, [r3]
 8008a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f023 0310 	bic.w	r3, r3, #16
 8008a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	461a      	mov	r2, r3
 8008a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a44:	61bb      	str	r3, [r7, #24]
 8008a46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a48:	6979      	ldr	r1, [r7, #20]
 8008a4a:	69ba      	ldr	r2, [r7, #24]
 8008a4c:	e841 2300 	strex	r3, r2, [r1]
 8008a50:	613b      	str	r3, [r7, #16]
   return(result);
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1e6      	bne.n	8008a26 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008a6c:	bf00      	nop
 8008a6e:	3754      	adds	r7, #84	; 0x54
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f7ff f9c6 	bl	8007e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a9c:	bf00      	nop
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b088      	sub	sp, #32
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ac0:	61fb      	str	r3, [r7, #28]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	61bb      	str	r3, [r7, #24]
 8008acc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	6979      	ldr	r1, [r7, #20]
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e6      	bne.n	8008aac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff f991 	bl	8007e14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008af2:	bf00      	nop
 8008af4:	3720      	adds	r7, #32
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b096      	sub	sp, #88	; 0x58
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b08:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b12:	2b22      	cmp	r3, #34	; 0x22
 8008b14:	f040 8095 	bne.w	8008c42 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b22:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008b26:	b2d9      	uxtb	r1, r3
 8008b28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b32:	400a      	ands	r2, r1
 8008b34:	b2d2      	uxtb	r2, r2
 8008b36:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d178      	bne.n	8008c52 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b68:	e853 3f00 	ldrex	r3, [r3]
 8008b6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b74:	653b      	str	r3, [r7, #80]	; 0x50
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e6      	bne.n	8008b60 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3308      	adds	r3, #8
 8008b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	e853 3f00 	ldrex	r3, [r3]
 8008ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ba2:	6a3b      	ldr	r3, [r7, #32]
 8008ba4:	f023 0301 	bic.w	r3, r3, #1
 8008ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3308      	adds	r3, #8
 8008bb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bb2:	633a      	str	r2, [r7, #48]	; 0x30
 8008bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bba:	e841 2300 	strex	r3, r2, [r1]
 8008bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1e5      	bne.n	8008b92 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2220      	movs	r2, #32
 8008bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d12e      	bne.n	8008c3a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	e853 3f00 	ldrex	r3, [r3]
 8008bee:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f023 0310 	bic.w	r3, r3, #16
 8008bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c00:	61fb      	str	r3, [r7, #28]
 8008c02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c04:	69b9      	ldr	r1, [r7, #24]
 8008c06:	69fa      	ldr	r2, [r7, #28]
 8008c08:	e841 2300 	strex	r3, r2, [r1]
 8008c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e6      	bne.n	8008be2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	69db      	ldr	r3, [r3, #28]
 8008c1a:	f003 0310 	and.w	r3, r3, #16
 8008c1e:	2b10      	cmp	r3, #16
 8008c20:	d103      	bne.n	8008c2a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2210      	movs	r2, #16
 8008c28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7ff f902 	bl	8007e3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c38:	e00b      	b.n	8008c52 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7f8 ff86 	bl	8001b4c <HAL_UART_RxCpltCallback>
}
 8008c40:	e007      	b.n	8008c52 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	699a      	ldr	r2, [r3, #24]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f042 0208 	orr.w	r2, r2, #8
 8008c50:	619a      	str	r2, [r3, #24]
}
 8008c52:	bf00      	nop
 8008c54:	3758      	adds	r7, #88	; 0x58
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b096      	sub	sp, #88	; 0x58
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c68:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c72:	2b22      	cmp	r3, #34	; 0x22
 8008c74:	f040 8095 	bne.w	8008da2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c86:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008c88:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008c8c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008c90:	4013      	ands	r3, r2
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c96:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c9c:	1c9a      	adds	r2, r3, #2
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	3b01      	subs	r3, #1
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d178      	bne.n	8008db2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cde:	643b      	str	r3, [r7, #64]	; 0x40
 8008ce0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ce4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e6      	bne.n	8008cc0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfa:	6a3b      	ldr	r3, [r7, #32]
 8008cfc:	e853 3f00 	ldrex	r3, [r3]
 8008d00:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	f023 0301 	bic.w	r3, r3, #1
 8008d08:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3308      	adds	r3, #8
 8008d10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d1a:	e841 2300 	strex	r3, r2, [r1]
 8008d1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1e5      	bne.n	8008cf2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d12e      	bne.n	8008d9a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	e853 3f00 	ldrex	r3, [r3]
 8008d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f023 0310 	bic.w	r3, r3, #16
 8008d56:	647b      	str	r3, [r7, #68]	; 0x44
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d60:	61bb      	str	r3, [r7, #24]
 8008d62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d64:	6979      	ldr	r1, [r7, #20]
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	e841 2300 	strex	r3, r2, [r1]
 8008d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1e6      	bne.n	8008d42 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	f003 0310 	and.w	r3, r3, #16
 8008d7e:	2b10      	cmp	r3, #16
 8008d80:	d103      	bne.n	8008d8a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2210      	movs	r2, #16
 8008d88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7ff f852 	bl	8007e3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d98:	e00b      	b.n	8008db2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7f8 fed6 	bl	8001b4c <HAL_UART_RxCpltCallback>
}
 8008da0:	e007      	b.n	8008db2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	699a      	ldr	r2, [r3, #24]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f042 0208 	orr.w	r2, r2, #8
 8008db0:	619a      	str	r2, [r3, #24]
}
 8008db2:	bf00      	nop
 8008db4:	3758      	adds	r7, #88	; 0x58
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
	...

08008dbc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b0a6      	sub	sp, #152	; 0x98
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008dca:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008df2:	2b22      	cmp	r3, #34	; 0x22
 8008df4:	f040 814f 	bne.w	8009096 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008dfe:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e02:	e0f6      	b.n	8008ff2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e0e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008e12:	b2d9      	uxtb	r1, r3
 8008e14:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1e:	400a      	ands	r2, r1
 8008e20:	b2d2      	uxtb	r2, r2
 8008e22:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e28:	1c5a      	adds	r2, r3, #1
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	3b01      	subs	r3, #1
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e4e:	f003 0307 	and.w	r3, r3, #7
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d053      	beq.n	8008efe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d011      	beq.n	8008e86 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00b      	beq.n	8008e86 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2201      	movs	r2, #1
 8008e74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e7c:	f043 0201 	orr.w	r2, r3, #1
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d011      	beq.n	8008eb6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00b      	beq.n	8008eb6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008eac:	f043 0204 	orr.w	r2, r3, #4
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008eba:	f003 0304 	and.w	r3, r3, #4
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d011      	beq.n	8008ee6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008ec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00b      	beq.n	8008ee6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2204      	movs	r2, #4
 8008ed4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008edc:	f043 0202 	orr.w	r2, r3, #2
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d006      	beq.n	8008efe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7fe ff99 	bl	8007e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d173      	bne.n	8008ff2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f2e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f30:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008f32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f34:	e841 2300 	strex	r3, r2, [r1]
 8008f38:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1e4      	bne.n	8008f0a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	3308      	adds	r3, #8
 8008f46:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f56:	f023 0301 	bic.w	r3, r3, #1
 8008f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3308      	adds	r3, #8
 8008f62:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008f64:	657a      	str	r2, [r7, #84]	; 0x54
 8008f66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f6c:	e841 2300 	strex	r3, r2, [r1]
 8008f70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1e3      	bne.n	8008f40 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2220      	movs	r2, #32
 8008f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d12e      	bne.n	8008fec <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9c:	e853 3f00 	ldrex	r3, [r3]
 8008fa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa4:	f023 0310 	bic.w	r3, r3, #16
 8008fa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8008fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fba:	e841 2300 	strex	r3, r2, [r1]
 8008fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1e6      	bne.n	8008f94 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	69db      	ldr	r3, [r3, #28]
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b10      	cmp	r3, #16
 8008fd2:	d103      	bne.n	8008fdc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2210      	movs	r2, #16
 8008fda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7fe ff29 	bl	8007e3c <HAL_UARTEx_RxEventCallback>
 8008fea:	e002      	b.n	8008ff2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f7f8 fdad 	bl	8001b4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ff2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d006      	beq.n	8009008 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008ffa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ffe:	f003 0320 	and.w	r3, r3, #32
 8009002:	2b00      	cmp	r3, #0
 8009004:	f47f aefe 	bne.w	8008e04 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800900e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009012:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009016:	2b00      	cmp	r3, #0
 8009018:	d045      	beq.n	80090a6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009020:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009024:	429a      	cmp	r2, r3
 8009026:	d23e      	bcs.n	80090a6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	3308      	adds	r3, #8
 800902e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	e853 3f00 	ldrex	r3, [r3]
 8009036:	61fb      	str	r3, [r7, #28]
   return(result);
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800903e:	673b      	str	r3, [r7, #112]	; 0x70
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3308      	adds	r3, #8
 8009046:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009048:	62fa      	str	r2, [r7, #44]	; 0x2c
 800904a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800904e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009050:	e841 2300 	strex	r3, r2, [r1]
 8009054:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e5      	bne.n	8009028 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a14      	ldr	r2, [pc, #80]	; (80090b0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009060:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	e853 3f00 	ldrex	r3, [r3]
 800906e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f043 0320 	orr.w	r3, r3, #32
 8009076:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	461a      	mov	r2, r3
 800907e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009080:	61bb      	str	r3, [r7, #24]
 8009082:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009084:	6979      	ldr	r1, [r7, #20]
 8009086:	69ba      	ldr	r2, [r7, #24]
 8009088:	e841 2300 	strex	r3, r2, [r1]
 800908c:	613b      	str	r3, [r7, #16]
   return(result);
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e6      	bne.n	8009062 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009094:	e007      	b.n	80090a6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	699a      	ldr	r2, [r3, #24]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f042 0208 	orr.w	r2, r2, #8
 80090a4:	619a      	str	r2, [r3, #24]
}
 80090a6:	bf00      	nop
 80090a8:	3798      	adds	r7, #152	; 0x98
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	08008afb 	.word	0x08008afb

080090b4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b0a8      	sub	sp, #160	; 0xa0
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090c2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ea:	2b22      	cmp	r3, #34	; 0x22
 80090ec:	f040 8153 	bne.w	8009396 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090f6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090fa:	e0fa      	b.n	80092f2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800910a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800910e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009112:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009116:	4013      	ands	r3, r2
 8009118:	b29a      	uxth	r2, r3
 800911a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800911e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009124:	1c9a      	adds	r2, r3, #2
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009130:	b29b      	uxth	r3, r3
 8009132:	3b01      	subs	r3, #1
 8009134:	b29a      	uxth	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009146:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800914a:	f003 0307 	and.w	r3, r3, #7
 800914e:	2b00      	cmp	r3, #0
 8009150:	d053      	beq.n	80091fa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009152:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d011      	beq.n	8009182 <UART_RxISR_16BIT_FIFOEN+0xce>
 800915e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00b      	beq.n	8009182 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2201      	movs	r2, #1
 8009170:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009178:	f043 0201 	orr.w	r2, r3, #1
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009182:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009186:	f003 0302 	and.w	r3, r3, #2
 800918a:	2b00      	cmp	r3, #0
 800918c:	d011      	beq.n	80091b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800918e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009192:	f003 0301 	and.w	r3, r3, #1
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00b      	beq.n	80091b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2202      	movs	r2, #2
 80091a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091a8:	f043 0204 	orr.w	r2, r3, #4
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091b6:	f003 0304 	and.w	r3, r3, #4
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d011      	beq.n	80091e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80091be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00b      	beq.n	80091e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2204      	movs	r2, #4
 80091d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091d8:	f043 0202 	orr.w	r2, r3, #2
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d006      	beq.n	80091fa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7fe fe1b 	bl	8007e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009200:	b29b      	uxth	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d175      	bne.n	80092f2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800920e:	e853 3f00 	ldrex	r3, [r3]
 8009212:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800921a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009228:	66fb      	str	r3, [r7, #108]	; 0x6c
 800922a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800922e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009230:	e841 2300 	strex	r3, r2, [r1]
 8009234:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009236:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1e4      	bne.n	8009206 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3308      	adds	r3, #8
 8009242:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800924c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800924e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009252:	f023 0301 	bic.w	r3, r3, #1
 8009256:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3308      	adds	r3, #8
 8009260:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009264:	65ba      	str	r2, [r7, #88]	; 0x58
 8009266:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800926a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800926c:	e841 2300 	strex	r3, r2, [r1]
 8009270:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1e1      	bne.n	800923c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2220      	movs	r2, #32
 800927c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800928a:	2b01      	cmp	r3, #1
 800928c:	d12e      	bne.n	80092ec <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a4:	f023 0310 	bic.w	r3, r3, #16
 80092a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092b2:	647b      	str	r3, [r7, #68]	; 0x44
 80092b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e6      	bne.n	8009294 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	f003 0310 	and.w	r3, r3, #16
 80092d0:	2b10      	cmp	r3, #16
 80092d2:	d103      	bne.n	80092dc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2210      	movs	r2, #16
 80092da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7fe fda9 	bl	8007e3c <HAL_UARTEx_RxEventCallback>
 80092ea:	e002      	b.n	80092f2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7f8 fc2d 	bl	8001b4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d006      	beq.n	8009308 <UART_RxISR_16BIT_FIFOEN+0x254>
 80092fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092fe:	f003 0320 	and.w	r3, r3, #32
 8009302:	2b00      	cmp	r3, #0
 8009304:	f47f aefa 	bne.w	80090fc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800930e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009312:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009316:	2b00      	cmp	r3, #0
 8009318:	d045      	beq.n	80093a6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009320:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009324:	429a      	cmp	r2, r3
 8009326:	d23e      	bcs.n	80093a6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3308      	adds	r3, #8
 800932e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	e853 3f00 	ldrex	r3, [r3]
 8009336:	623b      	str	r3, [r7, #32]
   return(result);
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800933e:	677b      	str	r3, [r7, #116]	; 0x74
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3308      	adds	r3, #8
 8009346:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009348:	633a      	str	r2, [r7, #48]	; 0x30
 800934a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800934e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009350:	e841 2300 	strex	r3, r2, [r1]
 8009354:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e5      	bne.n	8009328 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a14      	ldr	r2, [pc, #80]	; (80093b0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009360:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f043 0320 	orr.w	r3, r3, #32
 8009376:	673b      	str	r3, [r7, #112]	; 0x70
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	461a      	mov	r2, r3
 800937e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009380:	61fb      	str	r3, [r7, #28]
 8009382:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	69b9      	ldr	r1, [r7, #24]
 8009386:	69fa      	ldr	r2, [r7, #28]
 8009388:	e841 2300 	strex	r3, r2, [r1]
 800938c:	617b      	str	r3, [r7, #20]
   return(result);
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1e6      	bne.n	8009362 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009394:	e007      	b.n	80093a6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	699a      	ldr	r2, [r3, #24]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f042 0208 	orr.w	r2, r2, #8
 80093a4:	619a      	str	r2, [r3, #24]
}
 80093a6:	bf00      	nop
 80093a8:	37a0      	adds	r7, #160	; 0xa0
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	08008c5b 	.word	0x08008c5b

080093b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_UARTEx_DisableFifoMode+0x16>
 8009402:	2302      	movs	r3, #2
 8009404:	e027      	b.n	8009456 <HAL_UARTEx_DisableFifoMode+0x66>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2224      	movs	r2, #36	; 0x24
 8009412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 0201 	bic.w	r2, r2, #1
 800942c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009434:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2220      	movs	r2, #32
 8009448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b084      	sub	sp, #16
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009472:	2b01      	cmp	r3, #1
 8009474:	d101      	bne.n	800947a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009476:	2302      	movs	r3, #2
 8009478:	e02d      	b.n	80094d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2224      	movs	r2, #36	; 0x24
 8009486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f022 0201 	bic.w	r2, r2, #1
 80094a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f850 	bl	800955c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2220      	movs	r2, #32
 80094c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d101      	bne.n	80094f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094f2:	2302      	movs	r3, #2
 80094f4:	e02d      	b.n	8009552 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2224      	movs	r2, #36	; 0x24
 8009502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f022 0201 	bic.w	r2, r2, #1
 800951c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	430a      	orrs	r2, r1
 8009530:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f812 	bl	800955c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2220      	movs	r2, #32
 8009544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009568:	2b00      	cmp	r3, #0
 800956a:	d108      	bne.n	800957e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800957c:	e031      	b.n	80095e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800957e:	2308      	movs	r3, #8
 8009580:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009582:	2308      	movs	r3, #8
 8009584:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	0e5b      	lsrs	r3, r3, #25
 800958e:	b2db      	uxtb	r3, r3
 8009590:	f003 0307 	and.w	r3, r3, #7
 8009594:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	0f5b      	lsrs	r3, r3, #29
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	f003 0307 	and.w	r3, r3, #7
 80095a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	7b3a      	ldrb	r2, [r7, #12]
 80095aa:	4911      	ldr	r1, [pc, #68]	; (80095f0 <UARTEx_SetNbDataToProcess+0x94>)
 80095ac:	5c8a      	ldrb	r2, [r1, r2]
 80095ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095b2:	7b3a      	ldrb	r2, [r7, #12]
 80095b4:	490f      	ldr	r1, [pc, #60]	; (80095f4 <UARTEx_SetNbDataToProcess+0x98>)
 80095b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80095bc:	b29a      	uxth	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	7b7a      	ldrb	r2, [r7, #13]
 80095c8:	4909      	ldr	r1, [pc, #36]	; (80095f0 <UARTEx_SetNbDataToProcess+0x94>)
 80095ca:	5c8a      	ldrb	r2, [r1, r2]
 80095cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095d0:	7b7a      	ldrb	r2, [r7, #13]
 80095d2:	4908      	ldr	r1, [pc, #32]	; (80095f4 <UARTEx_SetNbDataToProcess+0x98>)
 80095d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80095da:	b29a      	uxth	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80095e2:	bf00      	nop
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	0800c908 	.word	0x0800c908
 80095f4:	0800c910 	.word	0x0800c910

080095f8 <atoi>:
 80095f8:	220a      	movs	r2, #10
 80095fa:	2100      	movs	r1, #0
 80095fc:	f000 be24 	b.w	800a248 <strtol>

08009600 <__errno>:
 8009600:	4b01      	ldr	r3, [pc, #4]	; (8009608 <__errno+0x8>)
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	200000a4 	.word	0x200000a4

0800960c <__libc_init_array>:
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	4d0d      	ldr	r5, [pc, #52]	; (8009644 <__libc_init_array+0x38>)
 8009610:	4c0d      	ldr	r4, [pc, #52]	; (8009648 <__libc_init_array+0x3c>)
 8009612:	1b64      	subs	r4, r4, r5
 8009614:	10a4      	asrs	r4, r4, #2
 8009616:	2600      	movs	r6, #0
 8009618:	42a6      	cmp	r6, r4
 800961a:	d109      	bne.n	8009630 <__libc_init_array+0x24>
 800961c:	4d0b      	ldr	r5, [pc, #44]	; (800964c <__libc_init_array+0x40>)
 800961e:	4c0c      	ldr	r4, [pc, #48]	; (8009650 <__libc_init_array+0x44>)
 8009620:	f003 f876 	bl	800c710 <_init>
 8009624:	1b64      	subs	r4, r4, r5
 8009626:	10a4      	asrs	r4, r4, #2
 8009628:	2600      	movs	r6, #0
 800962a:	42a6      	cmp	r6, r4
 800962c:	d105      	bne.n	800963a <__libc_init_array+0x2e>
 800962e:	bd70      	pop	{r4, r5, r6, pc}
 8009630:	f855 3b04 	ldr.w	r3, [r5], #4
 8009634:	4798      	blx	r3
 8009636:	3601      	adds	r6, #1
 8009638:	e7ee      	b.n	8009618 <__libc_init_array+0xc>
 800963a:	f855 3b04 	ldr.w	r3, [r5], #4
 800963e:	4798      	blx	r3
 8009640:	3601      	adds	r6, #1
 8009642:	e7f2      	b.n	800962a <__libc_init_array+0x1e>
 8009644:	0800cd58 	.word	0x0800cd58
 8009648:	0800cd58 	.word	0x0800cd58
 800964c:	0800cd58 	.word	0x0800cd58
 8009650:	0800cd5c 	.word	0x0800cd5c

08009654 <memset>:
 8009654:	4402      	add	r2, r0
 8009656:	4603      	mov	r3, r0
 8009658:	4293      	cmp	r3, r2
 800965a:	d100      	bne.n	800965e <memset+0xa>
 800965c:	4770      	bx	lr
 800965e:	f803 1b01 	strb.w	r1, [r3], #1
 8009662:	e7f9      	b.n	8009658 <memset+0x4>

08009664 <__cvt>:
 8009664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009668:	ec55 4b10 	vmov	r4, r5, d0
 800966c:	2d00      	cmp	r5, #0
 800966e:	460e      	mov	r6, r1
 8009670:	4619      	mov	r1, r3
 8009672:	462b      	mov	r3, r5
 8009674:	bfbb      	ittet	lt
 8009676:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800967a:	461d      	movlt	r5, r3
 800967c:	2300      	movge	r3, #0
 800967e:	232d      	movlt	r3, #45	; 0x2d
 8009680:	700b      	strb	r3, [r1, #0]
 8009682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009684:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009688:	4691      	mov	r9, r2
 800968a:	f023 0820 	bic.w	r8, r3, #32
 800968e:	bfbc      	itt	lt
 8009690:	4622      	movlt	r2, r4
 8009692:	4614      	movlt	r4, r2
 8009694:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009698:	d005      	beq.n	80096a6 <__cvt+0x42>
 800969a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800969e:	d100      	bne.n	80096a2 <__cvt+0x3e>
 80096a0:	3601      	adds	r6, #1
 80096a2:	2102      	movs	r1, #2
 80096a4:	e000      	b.n	80096a8 <__cvt+0x44>
 80096a6:	2103      	movs	r1, #3
 80096a8:	ab03      	add	r3, sp, #12
 80096aa:	9301      	str	r3, [sp, #4]
 80096ac:	ab02      	add	r3, sp, #8
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	ec45 4b10 	vmov	d0, r4, r5
 80096b4:	4653      	mov	r3, sl
 80096b6:	4632      	mov	r2, r6
 80096b8:	f000 ff3a 	bl	800a530 <_dtoa_r>
 80096bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096c0:	4607      	mov	r7, r0
 80096c2:	d102      	bne.n	80096ca <__cvt+0x66>
 80096c4:	f019 0f01 	tst.w	r9, #1
 80096c8:	d022      	beq.n	8009710 <__cvt+0xac>
 80096ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096ce:	eb07 0906 	add.w	r9, r7, r6
 80096d2:	d110      	bne.n	80096f6 <__cvt+0x92>
 80096d4:	783b      	ldrb	r3, [r7, #0]
 80096d6:	2b30      	cmp	r3, #48	; 0x30
 80096d8:	d10a      	bne.n	80096f0 <__cvt+0x8c>
 80096da:	2200      	movs	r2, #0
 80096dc:	2300      	movs	r3, #0
 80096de:	4620      	mov	r0, r4
 80096e0:	4629      	mov	r1, r5
 80096e2:	f7f7 fa29 	bl	8000b38 <__aeabi_dcmpeq>
 80096e6:	b918      	cbnz	r0, 80096f0 <__cvt+0x8c>
 80096e8:	f1c6 0601 	rsb	r6, r6, #1
 80096ec:	f8ca 6000 	str.w	r6, [sl]
 80096f0:	f8da 3000 	ldr.w	r3, [sl]
 80096f4:	4499      	add	r9, r3
 80096f6:	2200      	movs	r2, #0
 80096f8:	2300      	movs	r3, #0
 80096fa:	4620      	mov	r0, r4
 80096fc:	4629      	mov	r1, r5
 80096fe:	f7f7 fa1b 	bl	8000b38 <__aeabi_dcmpeq>
 8009702:	b108      	cbz	r0, 8009708 <__cvt+0xa4>
 8009704:	f8cd 900c 	str.w	r9, [sp, #12]
 8009708:	2230      	movs	r2, #48	; 0x30
 800970a:	9b03      	ldr	r3, [sp, #12]
 800970c:	454b      	cmp	r3, r9
 800970e:	d307      	bcc.n	8009720 <__cvt+0xbc>
 8009710:	9b03      	ldr	r3, [sp, #12]
 8009712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009714:	1bdb      	subs	r3, r3, r7
 8009716:	4638      	mov	r0, r7
 8009718:	6013      	str	r3, [r2, #0]
 800971a:	b004      	add	sp, #16
 800971c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009720:	1c59      	adds	r1, r3, #1
 8009722:	9103      	str	r1, [sp, #12]
 8009724:	701a      	strb	r2, [r3, #0]
 8009726:	e7f0      	b.n	800970a <__cvt+0xa6>

08009728 <__exponent>:
 8009728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800972a:	4603      	mov	r3, r0
 800972c:	2900      	cmp	r1, #0
 800972e:	bfb8      	it	lt
 8009730:	4249      	neglt	r1, r1
 8009732:	f803 2b02 	strb.w	r2, [r3], #2
 8009736:	bfb4      	ite	lt
 8009738:	222d      	movlt	r2, #45	; 0x2d
 800973a:	222b      	movge	r2, #43	; 0x2b
 800973c:	2909      	cmp	r1, #9
 800973e:	7042      	strb	r2, [r0, #1]
 8009740:	dd2a      	ble.n	8009798 <__exponent+0x70>
 8009742:	f10d 0407 	add.w	r4, sp, #7
 8009746:	46a4      	mov	ip, r4
 8009748:	270a      	movs	r7, #10
 800974a:	46a6      	mov	lr, r4
 800974c:	460a      	mov	r2, r1
 800974e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009752:	fb07 1516 	mls	r5, r7, r6, r1
 8009756:	3530      	adds	r5, #48	; 0x30
 8009758:	2a63      	cmp	r2, #99	; 0x63
 800975a:	f104 34ff 	add.w	r4, r4, #4294967295
 800975e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009762:	4631      	mov	r1, r6
 8009764:	dcf1      	bgt.n	800974a <__exponent+0x22>
 8009766:	3130      	adds	r1, #48	; 0x30
 8009768:	f1ae 0502 	sub.w	r5, lr, #2
 800976c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009770:	1c44      	adds	r4, r0, #1
 8009772:	4629      	mov	r1, r5
 8009774:	4561      	cmp	r1, ip
 8009776:	d30a      	bcc.n	800978e <__exponent+0x66>
 8009778:	f10d 0209 	add.w	r2, sp, #9
 800977c:	eba2 020e 	sub.w	r2, r2, lr
 8009780:	4565      	cmp	r5, ip
 8009782:	bf88      	it	hi
 8009784:	2200      	movhi	r2, #0
 8009786:	4413      	add	r3, r2
 8009788:	1a18      	subs	r0, r3, r0
 800978a:	b003      	add	sp, #12
 800978c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800978e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009792:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009796:	e7ed      	b.n	8009774 <__exponent+0x4c>
 8009798:	2330      	movs	r3, #48	; 0x30
 800979a:	3130      	adds	r1, #48	; 0x30
 800979c:	7083      	strb	r3, [r0, #2]
 800979e:	70c1      	strb	r1, [r0, #3]
 80097a0:	1d03      	adds	r3, r0, #4
 80097a2:	e7f1      	b.n	8009788 <__exponent+0x60>

080097a4 <_printf_float>:
 80097a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	ed2d 8b02 	vpush	{d8}
 80097ac:	b08d      	sub	sp, #52	; 0x34
 80097ae:	460c      	mov	r4, r1
 80097b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80097b4:	4616      	mov	r6, r2
 80097b6:	461f      	mov	r7, r3
 80097b8:	4605      	mov	r5, r0
 80097ba:	f001 fe71 	bl	800b4a0 <_localeconv_r>
 80097be:	f8d0 a000 	ldr.w	sl, [r0]
 80097c2:	4650      	mov	r0, sl
 80097c4:	f7f6 fd36 	bl	8000234 <strlen>
 80097c8:	2300      	movs	r3, #0
 80097ca:	930a      	str	r3, [sp, #40]	; 0x28
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	9305      	str	r3, [sp, #20]
 80097d0:	f8d8 3000 	ldr.w	r3, [r8]
 80097d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80097d8:	3307      	adds	r3, #7
 80097da:	f023 0307 	bic.w	r3, r3, #7
 80097de:	f103 0208 	add.w	r2, r3, #8
 80097e2:	f8c8 2000 	str.w	r2, [r8]
 80097e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80097ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80097f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097f6:	9307      	str	r3, [sp, #28]
 80097f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80097fc:	ee08 0a10 	vmov	s16, r0
 8009800:	4b9f      	ldr	r3, [pc, #636]	; (8009a80 <_printf_float+0x2dc>)
 8009802:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009806:	f04f 32ff 	mov.w	r2, #4294967295
 800980a:	f7f7 f9c7 	bl	8000b9c <__aeabi_dcmpun>
 800980e:	bb88      	cbnz	r0, 8009874 <_printf_float+0xd0>
 8009810:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009814:	4b9a      	ldr	r3, [pc, #616]	; (8009a80 <_printf_float+0x2dc>)
 8009816:	f04f 32ff 	mov.w	r2, #4294967295
 800981a:	f7f7 f9a1 	bl	8000b60 <__aeabi_dcmple>
 800981e:	bb48      	cbnz	r0, 8009874 <_printf_float+0xd0>
 8009820:	2200      	movs	r2, #0
 8009822:	2300      	movs	r3, #0
 8009824:	4640      	mov	r0, r8
 8009826:	4649      	mov	r1, r9
 8009828:	f7f7 f990 	bl	8000b4c <__aeabi_dcmplt>
 800982c:	b110      	cbz	r0, 8009834 <_printf_float+0x90>
 800982e:	232d      	movs	r3, #45	; 0x2d
 8009830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009834:	4b93      	ldr	r3, [pc, #588]	; (8009a84 <_printf_float+0x2e0>)
 8009836:	4894      	ldr	r0, [pc, #592]	; (8009a88 <_printf_float+0x2e4>)
 8009838:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800983c:	bf94      	ite	ls
 800983e:	4698      	movls	r8, r3
 8009840:	4680      	movhi	r8, r0
 8009842:	2303      	movs	r3, #3
 8009844:	6123      	str	r3, [r4, #16]
 8009846:	9b05      	ldr	r3, [sp, #20]
 8009848:	f023 0204 	bic.w	r2, r3, #4
 800984c:	6022      	str	r2, [r4, #0]
 800984e:	f04f 0900 	mov.w	r9, #0
 8009852:	9700      	str	r7, [sp, #0]
 8009854:	4633      	mov	r3, r6
 8009856:	aa0b      	add	r2, sp, #44	; 0x2c
 8009858:	4621      	mov	r1, r4
 800985a:	4628      	mov	r0, r5
 800985c:	f000 f9d8 	bl	8009c10 <_printf_common>
 8009860:	3001      	adds	r0, #1
 8009862:	f040 8090 	bne.w	8009986 <_printf_float+0x1e2>
 8009866:	f04f 30ff 	mov.w	r0, #4294967295
 800986a:	b00d      	add	sp, #52	; 0x34
 800986c:	ecbd 8b02 	vpop	{d8}
 8009870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009874:	4642      	mov	r2, r8
 8009876:	464b      	mov	r3, r9
 8009878:	4640      	mov	r0, r8
 800987a:	4649      	mov	r1, r9
 800987c:	f7f7 f98e 	bl	8000b9c <__aeabi_dcmpun>
 8009880:	b140      	cbz	r0, 8009894 <_printf_float+0xf0>
 8009882:	464b      	mov	r3, r9
 8009884:	2b00      	cmp	r3, #0
 8009886:	bfbc      	itt	lt
 8009888:	232d      	movlt	r3, #45	; 0x2d
 800988a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800988e:	487f      	ldr	r0, [pc, #508]	; (8009a8c <_printf_float+0x2e8>)
 8009890:	4b7f      	ldr	r3, [pc, #508]	; (8009a90 <_printf_float+0x2ec>)
 8009892:	e7d1      	b.n	8009838 <_printf_float+0x94>
 8009894:	6863      	ldr	r3, [r4, #4]
 8009896:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800989a:	9206      	str	r2, [sp, #24]
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	d13f      	bne.n	8009920 <_printf_float+0x17c>
 80098a0:	2306      	movs	r3, #6
 80098a2:	6063      	str	r3, [r4, #4]
 80098a4:	9b05      	ldr	r3, [sp, #20]
 80098a6:	6861      	ldr	r1, [r4, #4]
 80098a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80098ac:	2300      	movs	r3, #0
 80098ae:	9303      	str	r3, [sp, #12]
 80098b0:	ab0a      	add	r3, sp, #40	; 0x28
 80098b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80098b6:	ab09      	add	r3, sp, #36	; 0x24
 80098b8:	ec49 8b10 	vmov	d0, r8, r9
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	6022      	str	r2, [r4, #0]
 80098c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098c4:	4628      	mov	r0, r5
 80098c6:	f7ff fecd 	bl	8009664 <__cvt>
 80098ca:	9b06      	ldr	r3, [sp, #24]
 80098cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098ce:	2b47      	cmp	r3, #71	; 0x47
 80098d0:	4680      	mov	r8, r0
 80098d2:	d108      	bne.n	80098e6 <_printf_float+0x142>
 80098d4:	1cc8      	adds	r0, r1, #3
 80098d6:	db02      	blt.n	80098de <_printf_float+0x13a>
 80098d8:	6863      	ldr	r3, [r4, #4]
 80098da:	4299      	cmp	r1, r3
 80098dc:	dd41      	ble.n	8009962 <_printf_float+0x1be>
 80098de:	f1ab 0b02 	sub.w	fp, fp, #2
 80098e2:	fa5f fb8b 	uxtb.w	fp, fp
 80098e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098ea:	d820      	bhi.n	800992e <_printf_float+0x18a>
 80098ec:	3901      	subs	r1, #1
 80098ee:	465a      	mov	r2, fp
 80098f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098f4:	9109      	str	r1, [sp, #36]	; 0x24
 80098f6:	f7ff ff17 	bl	8009728 <__exponent>
 80098fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098fc:	1813      	adds	r3, r2, r0
 80098fe:	2a01      	cmp	r2, #1
 8009900:	4681      	mov	r9, r0
 8009902:	6123      	str	r3, [r4, #16]
 8009904:	dc02      	bgt.n	800990c <_printf_float+0x168>
 8009906:	6822      	ldr	r2, [r4, #0]
 8009908:	07d2      	lsls	r2, r2, #31
 800990a:	d501      	bpl.n	8009910 <_printf_float+0x16c>
 800990c:	3301      	adds	r3, #1
 800990e:	6123      	str	r3, [r4, #16]
 8009910:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009914:	2b00      	cmp	r3, #0
 8009916:	d09c      	beq.n	8009852 <_printf_float+0xae>
 8009918:	232d      	movs	r3, #45	; 0x2d
 800991a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800991e:	e798      	b.n	8009852 <_printf_float+0xae>
 8009920:	9a06      	ldr	r2, [sp, #24]
 8009922:	2a47      	cmp	r2, #71	; 0x47
 8009924:	d1be      	bne.n	80098a4 <_printf_float+0x100>
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1bc      	bne.n	80098a4 <_printf_float+0x100>
 800992a:	2301      	movs	r3, #1
 800992c:	e7b9      	b.n	80098a2 <_printf_float+0xfe>
 800992e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009932:	d118      	bne.n	8009966 <_printf_float+0x1c2>
 8009934:	2900      	cmp	r1, #0
 8009936:	6863      	ldr	r3, [r4, #4]
 8009938:	dd0b      	ble.n	8009952 <_printf_float+0x1ae>
 800993a:	6121      	str	r1, [r4, #16]
 800993c:	b913      	cbnz	r3, 8009944 <_printf_float+0x1a0>
 800993e:	6822      	ldr	r2, [r4, #0]
 8009940:	07d0      	lsls	r0, r2, #31
 8009942:	d502      	bpl.n	800994a <_printf_float+0x1a6>
 8009944:	3301      	adds	r3, #1
 8009946:	440b      	add	r3, r1
 8009948:	6123      	str	r3, [r4, #16]
 800994a:	65a1      	str	r1, [r4, #88]	; 0x58
 800994c:	f04f 0900 	mov.w	r9, #0
 8009950:	e7de      	b.n	8009910 <_printf_float+0x16c>
 8009952:	b913      	cbnz	r3, 800995a <_printf_float+0x1b6>
 8009954:	6822      	ldr	r2, [r4, #0]
 8009956:	07d2      	lsls	r2, r2, #31
 8009958:	d501      	bpl.n	800995e <_printf_float+0x1ba>
 800995a:	3302      	adds	r3, #2
 800995c:	e7f4      	b.n	8009948 <_printf_float+0x1a4>
 800995e:	2301      	movs	r3, #1
 8009960:	e7f2      	b.n	8009948 <_printf_float+0x1a4>
 8009962:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009968:	4299      	cmp	r1, r3
 800996a:	db05      	blt.n	8009978 <_printf_float+0x1d4>
 800996c:	6823      	ldr	r3, [r4, #0]
 800996e:	6121      	str	r1, [r4, #16]
 8009970:	07d8      	lsls	r0, r3, #31
 8009972:	d5ea      	bpl.n	800994a <_printf_float+0x1a6>
 8009974:	1c4b      	adds	r3, r1, #1
 8009976:	e7e7      	b.n	8009948 <_printf_float+0x1a4>
 8009978:	2900      	cmp	r1, #0
 800997a:	bfd4      	ite	le
 800997c:	f1c1 0202 	rsble	r2, r1, #2
 8009980:	2201      	movgt	r2, #1
 8009982:	4413      	add	r3, r2
 8009984:	e7e0      	b.n	8009948 <_printf_float+0x1a4>
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	055a      	lsls	r2, r3, #21
 800998a:	d407      	bmi.n	800999c <_printf_float+0x1f8>
 800998c:	6923      	ldr	r3, [r4, #16]
 800998e:	4642      	mov	r2, r8
 8009990:	4631      	mov	r1, r6
 8009992:	4628      	mov	r0, r5
 8009994:	47b8      	blx	r7
 8009996:	3001      	adds	r0, #1
 8009998:	d12c      	bne.n	80099f4 <_printf_float+0x250>
 800999a:	e764      	b.n	8009866 <_printf_float+0xc2>
 800999c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099a0:	f240 80e0 	bls.w	8009b64 <_printf_float+0x3c0>
 80099a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099a8:	2200      	movs	r2, #0
 80099aa:	2300      	movs	r3, #0
 80099ac:	f7f7 f8c4 	bl	8000b38 <__aeabi_dcmpeq>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d034      	beq.n	8009a1e <_printf_float+0x27a>
 80099b4:	4a37      	ldr	r2, [pc, #220]	; (8009a94 <_printf_float+0x2f0>)
 80099b6:	2301      	movs	r3, #1
 80099b8:	4631      	mov	r1, r6
 80099ba:	4628      	mov	r0, r5
 80099bc:	47b8      	blx	r7
 80099be:	3001      	adds	r0, #1
 80099c0:	f43f af51 	beq.w	8009866 <_printf_float+0xc2>
 80099c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099c8:	429a      	cmp	r2, r3
 80099ca:	db02      	blt.n	80099d2 <_printf_float+0x22e>
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	07d8      	lsls	r0, r3, #31
 80099d0:	d510      	bpl.n	80099f4 <_printf_float+0x250>
 80099d2:	ee18 3a10 	vmov	r3, s16
 80099d6:	4652      	mov	r2, sl
 80099d8:	4631      	mov	r1, r6
 80099da:	4628      	mov	r0, r5
 80099dc:	47b8      	blx	r7
 80099de:	3001      	adds	r0, #1
 80099e0:	f43f af41 	beq.w	8009866 <_printf_float+0xc2>
 80099e4:	f04f 0800 	mov.w	r8, #0
 80099e8:	f104 091a 	add.w	r9, r4, #26
 80099ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ee:	3b01      	subs	r3, #1
 80099f0:	4543      	cmp	r3, r8
 80099f2:	dc09      	bgt.n	8009a08 <_printf_float+0x264>
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	079b      	lsls	r3, r3, #30
 80099f8:	f100 8105 	bmi.w	8009c06 <_printf_float+0x462>
 80099fc:	68e0      	ldr	r0, [r4, #12]
 80099fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a00:	4298      	cmp	r0, r3
 8009a02:	bfb8      	it	lt
 8009a04:	4618      	movlt	r0, r3
 8009a06:	e730      	b.n	800986a <_printf_float+0xc6>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	464a      	mov	r2, r9
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4628      	mov	r0, r5
 8009a10:	47b8      	blx	r7
 8009a12:	3001      	adds	r0, #1
 8009a14:	f43f af27 	beq.w	8009866 <_printf_float+0xc2>
 8009a18:	f108 0801 	add.w	r8, r8, #1
 8009a1c:	e7e6      	b.n	80099ec <_printf_float+0x248>
 8009a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	dc39      	bgt.n	8009a98 <_printf_float+0x2f4>
 8009a24:	4a1b      	ldr	r2, [pc, #108]	; (8009a94 <_printf_float+0x2f0>)
 8009a26:	2301      	movs	r3, #1
 8009a28:	4631      	mov	r1, r6
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	47b8      	blx	r7
 8009a2e:	3001      	adds	r0, #1
 8009a30:	f43f af19 	beq.w	8009866 <_printf_float+0xc2>
 8009a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	d102      	bne.n	8009a42 <_printf_float+0x29e>
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	07d9      	lsls	r1, r3, #31
 8009a40:	d5d8      	bpl.n	80099f4 <_printf_float+0x250>
 8009a42:	ee18 3a10 	vmov	r3, s16
 8009a46:	4652      	mov	r2, sl
 8009a48:	4631      	mov	r1, r6
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	47b8      	blx	r7
 8009a4e:	3001      	adds	r0, #1
 8009a50:	f43f af09 	beq.w	8009866 <_printf_float+0xc2>
 8009a54:	f04f 0900 	mov.w	r9, #0
 8009a58:	f104 0a1a 	add.w	sl, r4, #26
 8009a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a5e:	425b      	negs	r3, r3
 8009a60:	454b      	cmp	r3, r9
 8009a62:	dc01      	bgt.n	8009a68 <_printf_float+0x2c4>
 8009a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a66:	e792      	b.n	800998e <_printf_float+0x1ea>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	4652      	mov	r2, sl
 8009a6c:	4631      	mov	r1, r6
 8009a6e:	4628      	mov	r0, r5
 8009a70:	47b8      	blx	r7
 8009a72:	3001      	adds	r0, #1
 8009a74:	f43f aef7 	beq.w	8009866 <_printf_float+0xc2>
 8009a78:	f109 0901 	add.w	r9, r9, #1
 8009a7c:	e7ee      	b.n	8009a5c <_printf_float+0x2b8>
 8009a7e:	bf00      	nop
 8009a80:	7fefffff 	.word	0x7fefffff
 8009a84:	0800c91c 	.word	0x0800c91c
 8009a88:	0800c920 	.word	0x0800c920
 8009a8c:	0800c928 	.word	0x0800c928
 8009a90:	0800c924 	.word	0x0800c924
 8009a94:	0800c92c 	.word	0x0800c92c
 8009a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	bfa8      	it	ge
 8009aa0:	461a      	movge	r2, r3
 8009aa2:	2a00      	cmp	r2, #0
 8009aa4:	4691      	mov	r9, r2
 8009aa6:	dc37      	bgt.n	8009b18 <_printf_float+0x374>
 8009aa8:	f04f 0b00 	mov.w	fp, #0
 8009aac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ab0:	f104 021a 	add.w	r2, r4, #26
 8009ab4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ab6:	9305      	str	r3, [sp, #20]
 8009ab8:	eba3 0309 	sub.w	r3, r3, r9
 8009abc:	455b      	cmp	r3, fp
 8009abe:	dc33      	bgt.n	8009b28 <_printf_float+0x384>
 8009ac0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	db3b      	blt.n	8009b40 <_printf_float+0x39c>
 8009ac8:	6823      	ldr	r3, [r4, #0]
 8009aca:	07da      	lsls	r2, r3, #31
 8009acc:	d438      	bmi.n	8009b40 <_printf_float+0x39c>
 8009ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad0:	9a05      	ldr	r2, [sp, #20]
 8009ad2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ad4:	1a9a      	subs	r2, r3, r2
 8009ad6:	eba3 0901 	sub.w	r9, r3, r1
 8009ada:	4591      	cmp	r9, r2
 8009adc:	bfa8      	it	ge
 8009ade:	4691      	movge	r9, r2
 8009ae0:	f1b9 0f00 	cmp.w	r9, #0
 8009ae4:	dc35      	bgt.n	8009b52 <_printf_float+0x3ae>
 8009ae6:	f04f 0800 	mov.w	r8, #0
 8009aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009aee:	f104 0a1a 	add.w	sl, r4, #26
 8009af2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009af6:	1a9b      	subs	r3, r3, r2
 8009af8:	eba3 0309 	sub.w	r3, r3, r9
 8009afc:	4543      	cmp	r3, r8
 8009afe:	f77f af79 	ble.w	80099f4 <_printf_float+0x250>
 8009b02:	2301      	movs	r3, #1
 8009b04:	4652      	mov	r2, sl
 8009b06:	4631      	mov	r1, r6
 8009b08:	4628      	mov	r0, r5
 8009b0a:	47b8      	blx	r7
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	f43f aeaa 	beq.w	8009866 <_printf_float+0xc2>
 8009b12:	f108 0801 	add.w	r8, r8, #1
 8009b16:	e7ec      	b.n	8009af2 <_printf_float+0x34e>
 8009b18:	4613      	mov	r3, r2
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	4642      	mov	r2, r8
 8009b1e:	4628      	mov	r0, r5
 8009b20:	47b8      	blx	r7
 8009b22:	3001      	adds	r0, #1
 8009b24:	d1c0      	bne.n	8009aa8 <_printf_float+0x304>
 8009b26:	e69e      	b.n	8009866 <_printf_float+0xc2>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	9205      	str	r2, [sp, #20]
 8009b30:	47b8      	blx	r7
 8009b32:	3001      	adds	r0, #1
 8009b34:	f43f ae97 	beq.w	8009866 <_printf_float+0xc2>
 8009b38:	9a05      	ldr	r2, [sp, #20]
 8009b3a:	f10b 0b01 	add.w	fp, fp, #1
 8009b3e:	e7b9      	b.n	8009ab4 <_printf_float+0x310>
 8009b40:	ee18 3a10 	vmov	r3, s16
 8009b44:	4652      	mov	r2, sl
 8009b46:	4631      	mov	r1, r6
 8009b48:	4628      	mov	r0, r5
 8009b4a:	47b8      	blx	r7
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d1be      	bne.n	8009ace <_printf_float+0x32a>
 8009b50:	e689      	b.n	8009866 <_printf_float+0xc2>
 8009b52:	9a05      	ldr	r2, [sp, #20]
 8009b54:	464b      	mov	r3, r9
 8009b56:	4442      	add	r2, r8
 8009b58:	4631      	mov	r1, r6
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	47b8      	blx	r7
 8009b5e:	3001      	adds	r0, #1
 8009b60:	d1c1      	bne.n	8009ae6 <_printf_float+0x342>
 8009b62:	e680      	b.n	8009866 <_printf_float+0xc2>
 8009b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b66:	2a01      	cmp	r2, #1
 8009b68:	dc01      	bgt.n	8009b6e <_printf_float+0x3ca>
 8009b6a:	07db      	lsls	r3, r3, #31
 8009b6c:	d538      	bpl.n	8009be0 <_printf_float+0x43c>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	4642      	mov	r2, r8
 8009b72:	4631      	mov	r1, r6
 8009b74:	4628      	mov	r0, r5
 8009b76:	47b8      	blx	r7
 8009b78:	3001      	adds	r0, #1
 8009b7a:	f43f ae74 	beq.w	8009866 <_printf_float+0xc2>
 8009b7e:	ee18 3a10 	vmov	r3, s16
 8009b82:	4652      	mov	r2, sl
 8009b84:	4631      	mov	r1, r6
 8009b86:	4628      	mov	r0, r5
 8009b88:	47b8      	blx	r7
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	f43f ae6b 	beq.w	8009866 <_printf_float+0xc2>
 8009b90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b94:	2200      	movs	r2, #0
 8009b96:	2300      	movs	r3, #0
 8009b98:	f7f6 ffce 	bl	8000b38 <__aeabi_dcmpeq>
 8009b9c:	b9d8      	cbnz	r0, 8009bd6 <_printf_float+0x432>
 8009b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ba0:	f108 0201 	add.w	r2, r8, #1
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	4631      	mov	r1, r6
 8009ba8:	4628      	mov	r0, r5
 8009baa:	47b8      	blx	r7
 8009bac:	3001      	adds	r0, #1
 8009bae:	d10e      	bne.n	8009bce <_printf_float+0x42a>
 8009bb0:	e659      	b.n	8009866 <_printf_float+0xc2>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4652      	mov	r2, sl
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4628      	mov	r0, r5
 8009bba:	47b8      	blx	r7
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	f43f ae52 	beq.w	8009866 <_printf_float+0xc2>
 8009bc2:	f108 0801 	add.w	r8, r8, #1
 8009bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	4543      	cmp	r3, r8
 8009bcc:	dcf1      	bgt.n	8009bb2 <_printf_float+0x40e>
 8009bce:	464b      	mov	r3, r9
 8009bd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bd4:	e6dc      	b.n	8009990 <_printf_float+0x1ec>
 8009bd6:	f04f 0800 	mov.w	r8, #0
 8009bda:	f104 0a1a 	add.w	sl, r4, #26
 8009bde:	e7f2      	b.n	8009bc6 <_printf_float+0x422>
 8009be0:	2301      	movs	r3, #1
 8009be2:	4642      	mov	r2, r8
 8009be4:	e7df      	b.n	8009ba6 <_printf_float+0x402>
 8009be6:	2301      	movs	r3, #1
 8009be8:	464a      	mov	r2, r9
 8009bea:	4631      	mov	r1, r6
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b8      	blx	r7
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	f43f ae38 	beq.w	8009866 <_printf_float+0xc2>
 8009bf6:	f108 0801 	add.w	r8, r8, #1
 8009bfa:	68e3      	ldr	r3, [r4, #12]
 8009bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bfe:	1a5b      	subs	r3, r3, r1
 8009c00:	4543      	cmp	r3, r8
 8009c02:	dcf0      	bgt.n	8009be6 <_printf_float+0x442>
 8009c04:	e6fa      	b.n	80099fc <_printf_float+0x258>
 8009c06:	f04f 0800 	mov.w	r8, #0
 8009c0a:	f104 0919 	add.w	r9, r4, #25
 8009c0e:	e7f4      	b.n	8009bfa <_printf_float+0x456>

08009c10 <_printf_common>:
 8009c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c14:	4616      	mov	r6, r2
 8009c16:	4699      	mov	r9, r3
 8009c18:	688a      	ldr	r2, [r1, #8]
 8009c1a:	690b      	ldr	r3, [r1, #16]
 8009c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c20:	4293      	cmp	r3, r2
 8009c22:	bfb8      	it	lt
 8009c24:	4613      	movlt	r3, r2
 8009c26:	6033      	str	r3, [r6, #0]
 8009c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c2c:	4607      	mov	r7, r0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	b10a      	cbz	r2, 8009c36 <_printf_common+0x26>
 8009c32:	3301      	adds	r3, #1
 8009c34:	6033      	str	r3, [r6, #0]
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	0699      	lsls	r1, r3, #26
 8009c3a:	bf42      	ittt	mi
 8009c3c:	6833      	ldrmi	r3, [r6, #0]
 8009c3e:	3302      	addmi	r3, #2
 8009c40:	6033      	strmi	r3, [r6, #0]
 8009c42:	6825      	ldr	r5, [r4, #0]
 8009c44:	f015 0506 	ands.w	r5, r5, #6
 8009c48:	d106      	bne.n	8009c58 <_printf_common+0x48>
 8009c4a:	f104 0a19 	add.w	sl, r4, #25
 8009c4e:	68e3      	ldr	r3, [r4, #12]
 8009c50:	6832      	ldr	r2, [r6, #0]
 8009c52:	1a9b      	subs	r3, r3, r2
 8009c54:	42ab      	cmp	r3, r5
 8009c56:	dc26      	bgt.n	8009ca6 <_printf_common+0x96>
 8009c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c5c:	1e13      	subs	r3, r2, #0
 8009c5e:	6822      	ldr	r2, [r4, #0]
 8009c60:	bf18      	it	ne
 8009c62:	2301      	movne	r3, #1
 8009c64:	0692      	lsls	r2, r2, #26
 8009c66:	d42b      	bmi.n	8009cc0 <_printf_common+0xb0>
 8009c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c6c:	4649      	mov	r1, r9
 8009c6e:	4638      	mov	r0, r7
 8009c70:	47c0      	blx	r8
 8009c72:	3001      	adds	r0, #1
 8009c74:	d01e      	beq.n	8009cb4 <_printf_common+0xa4>
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	68e5      	ldr	r5, [r4, #12]
 8009c7a:	6832      	ldr	r2, [r6, #0]
 8009c7c:	f003 0306 	and.w	r3, r3, #6
 8009c80:	2b04      	cmp	r3, #4
 8009c82:	bf08      	it	eq
 8009c84:	1aad      	subeq	r5, r5, r2
 8009c86:	68a3      	ldr	r3, [r4, #8]
 8009c88:	6922      	ldr	r2, [r4, #16]
 8009c8a:	bf0c      	ite	eq
 8009c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c90:	2500      	movne	r5, #0
 8009c92:	4293      	cmp	r3, r2
 8009c94:	bfc4      	itt	gt
 8009c96:	1a9b      	subgt	r3, r3, r2
 8009c98:	18ed      	addgt	r5, r5, r3
 8009c9a:	2600      	movs	r6, #0
 8009c9c:	341a      	adds	r4, #26
 8009c9e:	42b5      	cmp	r5, r6
 8009ca0:	d11a      	bne.n	8009cd8 <_printf_common+0xc8>
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	e008      	b.n	8009cb8 <_printf_common+0xa8>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4652      	mov	r2, sl
 8009caa:	4649      	mov	r1, r9
 8009cac:	4638      	mov	r0, r7
 8009cae:	47c0      	blx	r8
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d103      	bne.n	8009cbc <_printf_common+0xac>
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cbc:	3501      	adds	r5, #1
 8009cbe:	e7c6      	b.n	8009c4e <_printf_common+0x3e>
 8009cc0:	18e1      	adds	r1, r4, r3
 8009cc2:	1c5a      	adds	r2, r3, #1
 8009cc4:	2030      	movs	r0, #48	; 0x30
 8009cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cca:	4422      	add	r2, r4
 8009ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cd4:	3302      	adds	r3, #2
 8009cd6:	e7c7      	b.n	8009c68 <_printf_common+0x58>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	4622      	mov	r2, r4
 8009cdc:	4649      	mov	r1, r9
 8009cde:	4638      	mov	r0, r7
 8009ce0:	47c0      	blx	r8
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	d0e6      	beq.n	8009cb4 <_printf_common+0xa4>
 8009ce6:	3601      	adds	r6, #1
 8009ce8:	e7d9      	b.n	8009c9e <_printf_common+0x8e>
	...

08009cec <_printf_i>:
 8009cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf0:	7e0f      	ldrb	r7, [r1, #24]
 8009cf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009cf4:	2f78      	cmp	r7, #120	; 0x78
 8009cf6:	4691      	mov	r9, r2
 8009cf8:	4680      	mov	r8, r0
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	469a      	mov	sl, r3
 8009cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d02:	d807      	bhi.n	8009d14 <_printf_i+0x28>
 8009d04:	2f62      	cmp	r7, #98	; 0x62
 8009d06:	d80a      	bhi.n	8009d1e <_printf_i+0x32>
 8009d08:	2f00      	cmp	r7, #0
 8009d0a:	f000 80d8 	beq.w	8009ebe <_printf_i+0x1d2>
 8009d0e:	2f58      	cmp	r7, #88	; 0x58
 8009d10:	f000 80a3 	beq.w	8009e5a <_printf_i+0x16e>
 8009d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d1c:	e03a      	b.n	8009d94 <_printf_i+0xa8>
 8009d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d22:	2b15      	cmp	r3, #21
 8009d24:	d8f6      	bhi.n	8009d14 <_printf_i+0x28>
 8009d26:	a101      	add	r1, pc, #4	; (adr r1, 8009d2c <_printf_i+0x40>)
 8009d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d2c:	08009d85 	.word	0x08009d85
 8009d30:	08009d99 	.word	0x08009d99
 8009d34:	08009d15 	.word	0x08009d15
 8009d38:	08009d15 	.word	0x08009d15
 8009d3c:	08009d15 	.word	0x08009d15
 8009d40:	08009d15 	.word	0x08009d15
 8009d44:	08009d99 	.word	0x08009d99
 8009d48:	08009d15 	.word	0x08009d15
 8009d4c:	08009d15 	.word	0x08009d15
 8009d50:	08009d15 	.word	0x08009d15
 8009d54:	08009d15 	.word	0x08009d15
 8009d58:	08009ea5 	.word	0x08009ea5
 8009d5c:	08009dc9 	.word	0x08009dc9
 8009d60:	08009e87 	.word	0x08009e87
 8009d64:	08009d15 	.word	0x08009d15
 8009d68:	08009d15 	.word	0x08009d15
 8009d6c:	08009ec7 	.word	0x08009ec7
 8009d70:	08009d15 	.word	0x08009d15
 8009d74:	08009dc9 	.word	0x08009dc9
 8009d78:	08009d15 	.word	0x08009d15
 8009d7c:	08009d15 	.word	0x08009d15
 8009d80:	08009e8f 	.word	0x08009e8f
 8009d84:	682b      	ldr	r3, [r5, #0]
 8009d86:	1d1a      	adds	r2, r3, #4
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	602a      	str	r2, [r5, #0]
 8009d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d94:	2301      	movs	r3, #1
 8009d96:	e0a3      	b.n	8009ee0 <_printf_i+0x1f4>
 8009d98:	6820      	ldr	r0, [r4, #0]
 8009d9a:	6829      	ldr	r1, [r5, #0]
 8009d9c:	0606      	lsls	r6, r0, #24
 8009d9e:	f101 0304 	add.w	r3, r1, #4
 8009da2:	d50a      	bpl.n	8009dba <_printf_i+0xce>
 8009da4:	680e      	ldr	r6, [r1, #0]
 8009da6:	602b      	str	r3, [r5, #0]
 8009da8:	2e00      	cmp	r6, #0
 8009daa:	da03      	bge.n	8009db4 <_printf_i+0xc8>
 8009dac:	232d      	movs	r3, #45	; 0x2d
 8009dae:	4276      	negs	r6, r6
 8009db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009db4:	485e      	ldr	r0, [pc, #376]	; (8009f30 <_printf_i+0x244>)
 8009db6:	230a      	movs	r3, #10
 8009db8:	e019      	b.n	8009dee <_printf_i+0x102>
 8009dba:	680e      	ldr	r6, [r1, #0]
 8009dbc:	602b      	str	r3, [r5, #0]
 8009dbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009dc2:	bf18      	it	ne
 8009dc4:	b236      	sxthne	r6, r6
 8009dc6:	e7ef      	b.n	8009da8 <_printf_i+0xbc>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	6820      	ldr	r0, [r4, #0]
 8009dcc:	1d19      	adds	r1, r3, #4
 8009dce:	6029      	str	r1, [r5, #0]
 8009dd0:	0601      	lsls	r1, r0, #24
 8009dd2:	d501      	bpl.n	8009dd8 <_printf_i+0xec>
 8009dd4:	681e      	ldr	r6, [r3, #0]
 8009dd6:	e002      	b.n	8009dde <_printf_i+0xf2>
 8009dd8:	0646      	lsls	r6, r0, #25
 8009dda:	d5fb      	bpl.n	8009dd4 <_printf_i+0xe8>
 8009ddc:	881e      	ldrh	r6, [r3, #0]
 8009dde:	4854      	ldr	r0, [pc, #336]	; (8009f30 <_printf_i+0x244>)
 8009de0:	2f6f      	cmp	r7, #111	; 0x6f
 8009de2:	bf0c      	ite	eq
 8009de4:	2308      	moveq	r3, #8
 8009de6:	230a      	movne	r3, #10
 8009de8:	2100      	movs	r1, #0
 8009dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dee:	6865      	ldr	r5, [r4, #4]
 8009df0:	60a5      	str	r5, [r4, #8]
 8009df2:	2d00      	cmp	r5, #0
 8009df4:	bfa2      	ittt	ge
 8009df6:	6821      	ldrge	r1, [r4, #0]
 8009df8:	f021 0104 	bicge.w	r1, r1, #4
 8009dfc:	6021      	strge	r1, [r4, #0]
 8009dfe:	b90e      	cbnz	r6, 8009e04 <_printf_i+0x118>
 8009e00:	2d00      	cmp	r5, #0
 8009e02:	d04d      	beq.n	8009ea0 <_printf_i+0x1b4>
 8009e04:	4615      	mov	r5, r2
 8009e06:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e0a:	fb03 6711 	mls	r7, r3, r1, r6
 8009e0e:	5dc7      	ldrb	r7, [r0, r7]
 8009e10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e14:	4637      	mov	r7, r6
 8009e16:	42bb      	cmp	r3, r7
 8009e18:	460e      	mov	r6, r1
 8009e1a:	d9f4      	bls.n	8009e06 <_printf_i+0x11a>
 8009e1c:	2b08      	cmp	r3, #8
 8009e1e:	d10b      	bne.n	8009e38 <_printf_i+0x14c>
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	07de      	lsls	r6, r3, #31
 8009e24:	d508      	bpl.n	8009e38 <_printf_i+0x14c>
 8009e26:	6923      	ldr	r3, [r4, #16]
 8009e28:	6861      	ldr	r1, [r4, #4]
 8009e2a:	4299      	cmp	r1, r3
 8009e2c:	bfde      	ittt	le
 8009e2e:	2330      	movle	r3, #48	; 0x30
 8009e30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e38:	1b52      	subs	r2, r2, r5
 8009e3a:	6122      	str	r2, [r4, #16]
 8009e3c:	f8cd a000 	str.w	sl, [sp]
 8009e40:	464b      	mov	r3, r9
 8009e42:	aa03      	add	r2, sp, #12
 8009e44:	4621      	mov	r1, r4
 8009e46:	4640      	mov	r0, r8
 8009e48:	f7ff fee2 	bl	8009c10 <_printf_common>
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d14c      	bne.n	8009eea <_printf_i+0x1fe>
 8009e50:	f04f 30ff 	mov.w	r0, #4294967295
 8009e54:	b004      	add	sp, #16
 8009e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e5a:	4835      	ldr	r0, [pc, #212]	; (8009f30 <_printf_i+0x244>)
 8009e5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e60:	6829      	ldr	r1, [r5, #0]
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e68:	6029      	str	r1, [r5, #0]
 8009e6a:	061d      	lsls	r5, r3, #24
 8009e6c:	d514      	bpl.n	8009e98 <_printf_i+0x1ac>
 8009e6e:	07df      	lsls	r7, r3, #31
 8009e70:	bf44      	itt	mi
 8009e72:	f043 0320 	orrmi.w	r3, r3, #32
 8009e76:	6023      	strmi	r3, [r4, #0]
 8009e78:	b91e      	cbnz	r6, 8009e82 <_printf_i+0x196>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	f023 0320 	bic.w	r3, r3, #32
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	2310      	movs	r3, #16
 8009e84:	e7b0      	b.n	8009de8 <_printf_i+0xfc>
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	f043 0320 	orr.w	r3, r3, #32
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	2378      	movs	r3, #120	; 0x78
 8009e90:	4828      	ldr	r0, [pc, #160]	; (8009f34 <_printf_i+0x248>)
 8009e92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e96:	e7e3      	b.n	8009e60 <_printf_i+0x174>
 8009e98:	0659      	lsls	r1, r3, #25
 8009e9a:	bf48      	it	mi
 8009e9c:	b2b6      	uxthmi	r6, r6
 8009e9e:	e7e6      	b.n	8009e6e <_printf_i+0x182>
 8009ea0:	4615      	mov	r5, r2
 8009ea2:	e7bb      	b.n	8009e1c <_printf_i+0x130>
 8009ea4:	682b      	ldr	r3, [r5, #0]
 8009ea6:	6826      	ldr	r6, [r4, #0]
 8009ea8:	6961      	ldr	r1, [r4, #20]
 8009eaa:	1d18      	adds	r0, r3, #4
 8009eac:	6028      	str	r0, [r5, #0]
 8009eae:	0635      	lsls	r5, r6, #24
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	d501      	bpl.n	8009eb8 <_printf_i+0x1cc>
 8009eb4:	6019      	str	r1, [r3, #0]
 8009eb6:	e002      	b.n	8009ebe <_printf_i+0x1d2>
 8009eb8:	0670      	lsls	r0, r6, #25
 8009eba:	d5fb      	bpl.n	8009eb4 <_printf_i+0x1c8>
 8009ebc:	8019      	strh	r1, [r3, #0]
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	6123      	str	r3, [r4, #16]
 8009ec2:	4615      	mov	r5, r2
 8009ec4:	e7ba      	b.n	8009e3c <_printf_i+0x150>
 8009ec6:	682b      	ldr	r3, [r5, #0]
 8009ec8:	1d1a      	adds	r2, r3, #4
 8009eca:	602a      	str	r2, [r5, #0]
 8009ecc:	681d      	ldr	r5, [r3, #0]
 8009ece:	6862      	ldr	r2, [r4, #4]
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	f7f6 f9bc 	bl	8000250 <memchr>
 8009ed8:	b108      	cbz	r0, 8009ede <_printf_i+0x1f2>
 8009eda:	1b40      	subs	r0, r0, r5
 8009edc:	6060      	str	r0, [r4, #4]
 8009ede:	6863      	ldr	r3, [r4, #4]
 8009ee0:	6123      	str	r3, [r4, #16]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ee8:	e7a8      	b.n	8009e3c <_printf_i+0x150>
 8009eea:	6923      	ldr	r3, [r4, #16]
 8009eec:	462a      	mov	r2, r5
 8009eee:	4649      	mov	r1, r9
 8009ef0:	4640      	mov	r0, r8
 8009ef2:	47d0      	blx	sl
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	d0ab      	beq.n	8009e50 <_printf_i+0x164>
 8009ef8:	6823      	ldr	r3, [r4, #0]
 8009efa:	079b      	lsls	r3, r3, #30
 8009efc:	d413      	bmi.n	8009f26 <_printf_i+0x23a>
 8009efe:	68e0      	ldr	r0, [r4, #12]
 8009f00:	9b03      	ldr	r3, [sp, #12]
 8009f02:	4298      	cmp	r0, r3
 8009f04:	bfb8      	it	lt
 8009f06:	4618      	movlt	r0, r3
 8009f08:	e7a4      	b.n	8009e54 <_printf_i+0x168>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	4649      	mov	r1, r9
 8009f10:	4640      	mov	r0, r8
 8009f12:	47d0      	blx	sl
 8009f14:	3001      	adds	r0, #1
 8009f16:	d09b      	beq.n	8009e50 <_printf_i+0x164>
 8009f18:	3501      	adds	r5, #1
 8009f1a:	68e3      	ldr	r3, [r4, #12]
 8009f1c:	9903      	ldr	r1, [sp, #12]
 8009f1e:	1a5b      	subs	r3, r3, r1
 8009f20:	42ab      	cmp	r3, r5
 8009f22:	dcf2      	bgt.n	8009f0a <_printf_i+0x21e>
 8009f24:	e7eb      	b.n	8009efe <_printf_i+0x212>
 8009f26:	2500      	movs	r5, #0
 8009f28:	f104 0619 	add.w	r6, r4, #25
 8009f2c:	e7f5      	b.n	8009f1a <_printf_i+0x22e>
 8009f2e:	bf00      	nop
 8009f30:	0800c92e 	.word	0x0800c92e
 8009f34:	0800c93f 	.word	0x0800c93f

08009f38 <_puts_r>:
 8009f38:	b570      	push	{r4, r5, r6, lr}
 8009f3a:	460e      	mov	r6, r1
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	b118      	cbz	r0, 8009f48 <_puts_r+0x10>
 8009f40:	6983      	ldr	r3, [r0, #24]
 8009f42:	b90b      	cbnz	r3, 8009f48 <_puts_r+0x10>
 8009f44:	f001 f9fc 	bl	800b340 <__sinit>
 8009f48:	69ab      	ldr	r3, [r5, #24]
 8009f4a:	68ac      	ldr	r4, [r5, #8]
 8009f4c:	b913      	cbnz	r3, 8009f54 <_puts_r+0x1c>
 8009f4e:	4628      	mov	r0, r5
 8009f50:	f001 f9f6 	bl	800b340 <__sinit>
 8009f54:	4b2c      	ldr	r3, [pc, #176]	; (800a008 <_puts_r+0xd0>)
 8009f56:	429c      	cmp	r4, r3
 8009f58:	d120      	bne.n	8009f9c <_puts_r+0x64>
 8009f5a:	686c      	ldr	r4, [r5, #4]
 8009f5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f5e:	07db      	lsls	r3, r3, #31
 8009f60:	d405      	bmi.n	8009f6e <_puts_r+0x36>
 8009f62:	89a3      	ldrh	r3, [r4, #12]
 8009f64:	0598      	lsls	r0, r3, #22
 8009f66:	d402      	bmi.n	8009f6e <_puts_r+0x36>
 8009f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f6a:	f001 fa9e 	bl	800b4aa <__retarget_lock_acquire_recursive>
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	0719      	lsls	r1, r3, #28
 8009f72:	d51d      	bpl.n	8009fb0 <_puts_r+0x78>
 8009f74:	6923      	ldr	r3, [r4, #16]
 8009f76:	b1db      	cbz	r3, 8009fb0 <_puts_r+0x78>
 8009f78:	3e01      	subs	r6, #1
 8009f7a:	68a3      	ldr	r3, [r4, #8]
 8009f7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f80:	3b01      	subs	r3, #1
 8009f82:	60a3      	str	r3, [r4, #8]
 8009f84:	bb39      	cbnz	r1, 8009fd6 <_puts_r+0x9e>
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	da38      	bge.n	8009ffc <_puts_r+0xc4>
 8009f8a:	4622      	mov	r2, r4
 8009f8c:	210a      	movs	r1, #10
 8009f8e:	4628      	mov	r0, r5
 8009f90:	f000 f964 	bl	800a25c <__swbuf_r>
 8009f94:	3001      	adds	r0, #1
 8009f96:	d011      	beq.n	8009fbc <_puts_r+0x84>
 8009f98:	250a      	movs	r5, #10
 8009f9a:	e011      	b.n	8009fc0 <_puts_r+0x88>
 8009f9c:	4b1b      	ldr	r3, [pc, #108]	; (800a00c <_puts_r+0xd4>)
 8009f9e:	429c      	cmp	r4, r3
 8009fa0:	d101      	bne.n	8009fa6 <_puts_r+0x6e>
 8009fa2:	68ac      	ldr	r4, [r5, #8]
 8009fa4:	e7da      	b.n	8009f5c <_puts_r+0x24>
 8009fa6:	4b1a      	ldr	r3, [pc, #104]	; (800a010 <_puts_r+0xd8>)
 8009fa8:	429c      	cmp	r4, r3
 8009faa:	bf08      	it	eq
 8009fac:	68ec      	ldreq	r4, [r5, #12]
 8009fae:	e7d5      	b.n	8009f5c <_puts_r+0x24>
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f000 f9a4 	bl	800a300 <__swsetup_r>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d0dd      	beq.n	8009f78 <_puts_r+0x40>
 8009fbc:	f04f 35ff 	mov.w	r5, #4294967295
 8009fc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fc2:	07da      	lsls	r2, r3, #31
 8009fc4:	d405      	bmi.n	8009fd2 <_puts_r+0x9a>
 8009fc6:	89a3      	ldrh	r3, [r4, #12]
 8009fc8:	059b      	lsls	r3, r3, #22
 8009fca:	d402      	bmi.n	8009fd2 <_puts_r+0x9a>
 8009fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fce:	f001 fa6d 	bl	800b4ac <__retarget_lock_release_recursive>
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	bd70      	pop	{r4, r5, r6, pc}
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	da04      	bge.n	8009fe4 <_puts_r+0xac>
 8009fda:	69a2      	ldr	r2, [r4, #24]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	dc06      	bgt.n	8009fee <_puts_r+0xb6>
 8009fe0:	290a      	cmp	r1, #10
 8009fe2:	d004      	beq.n	8009fee <_puts_r+0xb6>
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	1c5a      	adds	r2, r3, #1
 8009fe8:	6022      	str	r2, [r4, #0]
 8009fea:	7019      	strb	r1, [r3, #0]
 8009fec:	e7c5      	b.n	8009f7a <_puts_r+0x42>
 8009fee:	4622      	mov	r2, r4
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f000 f933 	bl	800a25c <__swbuf_r>
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	d1bf      	bne.n	8009f7a <_puts_r+0x42>
 8009ffa:	e7df      	b.n	8009fbc <_puts_r+0x84>
 8009ffc:	6823      	ldr	r3, [r4, #0]
 8009ffe:	250a      	movs	r5, #10
 800a000:	1c5a      	adds	r2, r3, #1
 800a002:	6022      	str	r2, [r4, #0]
 800a004:	701d      	strb	r5, [r3, #0]
 800a006:	e7db      	b.n	8009fc0 <_puts_r+0x88>
 800a008:	0800cb9c 	.word	0x0800cb9c
 800a00c:	0800cbbc 	.word	0x0800cbbc
 800a010:	0800cb7c 	.word	0x0800cb7c

0800a014 <puts>:
 800a014:	4b02      	ldr	r3, [pc, #8]	; (800a020 <puts+0xc>)
 800a016:	4601      	mov	r1, r0
 800a018:	6818      	ldr	r0, [r3, #0]
 800a01a:	f7ff bf8d 	b.w	8009f38 <_puts_r>
 800a01e:	bf00      	nop
 800a020:	200000a4 	.word	0x200000a4

0800a024 <sniprintf>:
 800a024:	b40c      	push	{r2, r3}
 800a026:	b530      	push	{r4, r5, lr}
 800a028:	4b17      	ldr	r3, [pc, #92]	; (800a088 <sniprintf+0x64>)
 800a02a:	1e0c      	subs	r4, r1, #0
 800a02c:	681d      	ldr	r5, [r3, #0]
 800a02e:	b09d      	sub	sp, #116	; 0x74
 800a030:	da08      	bge.n	800a044 <sniprintf+0x20>
 800a032:	238b      	movs	r3, #139	; 0x8b
 800a034:	602b      	str	r3, [r5, #0]
 800a036:	f04f 30ff 	mov.w	r0, #4294967295
 800a03a:	b01d      	add	sp, #116	; 0x74
 800a03c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a040:	b002      	add	sp, #8
 800a042:	4770      	bx	lr
 800a044:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a048:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a04c:	bf14      	ite	ne
 800a04e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a052:	4623      	moveq	r3, r4
 800a054:	9304      	str	r3, [sp, #16]
 800a056:	9307      	str	r3, [sp, #28]
 800a058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a05c:	9002      	str	r0, [sp, #8]
 800a05e:	9006      	str	r0, [sp, #24]
 800a060:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a064:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a066:	ab21      	add	r3, sp, #132	; 0x84
 800a068:	a902      	add	r1, sp, #8
 800a06a:	4628      	mov	r0, r5
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	f001 ff6f 	bl	800bf50 <_svfiprintf_r>
 800a072:	1c43      	adds	r3, r0, #1
 800a074:	bfbc      	itt	lt
 800a076:	238b      	movlt	r3, #139	; 0x8b
 800a078:	602b      	strlt	r3, [r5, #0]
 800a07a:	2c00      	cmp	r4, #0
 800a07c:	d0dd      	beq.n	800a03a <sniprintf+0x16>
 800a07e:	9b02      	ldr	r3, [sp, #8]
 800a080:	2200      	movs	r2, #0
 800a082:	701a      	strb	r2, [r3, #0]
 800a084:	e7d9      	b.n	800a03a <sniprintf+0x16>
 800a086:	bf00      	nop
 800a088:	200000a4 	.word	0x200000a4

0800a08c <strtok>:
 800a08c:	4b16      	ldr	r3, [pc, #88]	; (800a0e8 <strtok+0x5c>)
 800a08e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a090:	681e      	ldr	r6, [r3, #0]
 800a092:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a094:	4605      	mov	r5, r0
 800a096:	b9fc      	cbnz	r4, 800a0d8 <strtok+0x4c>
 800a098:	2050      	movs	r0, #80	; 0x50
 800a09a:	9101      	str	r1, [sp, #4]
 800a09c:	f001 fa6c 	bl	800b578 <malloc>
 800a0a0:	9901      	ldr	r1, [sp, #4]
 800a0a2:	65b0      	str	r0, [r6, #88]	; 0x58
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	b920      	cbnz	r0, 800a0b2 <strtok+0x26>
 800a0a8:	4b10      	ldr	r3, [pc, #64]	; (800a0ec <strtok+0x60>)
 800a0aa:	4811      	ldr	r0, [pc, #68]	; (800a0f0 <strtok+0x64>)
 800a0ac:	2157      	movs	r1, #87	; 0x57
 800a0ae:	f000 f995 	bl	800a3dc <__assert_func>
 800a0b2:	e9c0 4400 	strd	r4, r4, [r0]
 800a0b6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a0ba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a0be:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a0c2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a0c6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a0ca:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a0ce:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a0d2:	6184      	str	r4, [r0, #24]
 800a0d4:	7704      	strb	r4, [r0, #28]
 800a0d6:	6244      	str	r4, [r0, #36]	; 0x24
 800a0d8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4628      	mov	r0, r5
 800a0de:	b002      	add	sp, #8
 800a0e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a0e4:	f000 b806 	b.w	800a0f4 <__strtok_r>
 800a0e8:	200000a4 	.word	0x200000a4
 800a0ec:	0800c950 	.word	0x0800c950
 800a0f0:	0800c967 	.word	0x0800c967

0800a0f4 <__strtok_r>:
 800a0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0f6:	b908      	cbnz	r0, 800a0fc <__strtok_r+0x8>
 800a0f8:	6810      	ldr	r0, [r2, #0]
 800a0fa:	b188      	cbz	r0, 800a120 <__strtok_r+0x2c>
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	4620      	mov	r0, r4
 800a100:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a104:	460f      	mov	r7, r1
 800a106:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a10a:	b91e      	cbnz	r6, 800a114 <__strtok_r+0x20>
 800a10c:	b965      	cbnz	r5, 800a128 <__strtok_r+0x34>
 800a10e:	6015      	str	r5, [r2, #0]
 800a110:	4628      	mov	r0, r5
 800a112:	e005      	b.n	800a120 <__strtok_r+0x2c>
 800a114:	42b5      	cmp	r5, r6
 800a116:	d1f6      	bne.n	800a106 <__strtok_r+0x12>
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1f0      	bne.n	800a0fe <__strtok_r+0xa>
 800a11c:	6014      	str	r4, [r2, #0]
 800a11e:	7003      	strb	r3, [r0, #0]
 800a120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a122:	461c      	mov	r4, r3
 800a124:	e00c      	b.n	800a140 <__strtok_r+0x4c>
 800a126:	b915      	cbnz	r5, 800a12e <__strtok_r+0x3a>
 800a128:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a12c:	460e      	mov	r6, r1
 800a12e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a132:	42ab      	cmp	r3, r5
 800a134:	d1f7      	bne.n	800a126 <__strtok_r+0x32>
 800a136:	2b00      	cmp	r3, #0
 800a138:	d0f3      	beq.n	800a122 <__strtok_r+0x2e>
 800a13a:	2300      	movs	r3, #0
 800a13c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a140:	6014      	str	r4, [r2, #0]
 800a142:	e7ed      	b.n	800a120 <__strtok_r+0x2c>

0800a144 <_strtol_l.constprop.0>:
 800a144:	2b01      	cmp	r3, #1
 800a146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a14a:	d001      	beq.n	800a150 <_strtol_l.constprop.0+0xc>
 800a14c:	2b24      	cmp	r3, #36	; 0x24
 800a14e:	d906      	bls.n	800a15e <_strtol_l.constprop.0+0x1a>
 800a150:	f7ff fa56 	bl	8009600 <__errno>
 800a154:	2316      	movs	r3, #22
 800a156:	6003      	str	r3, [r0, #0]
 800a158:	2000      	movs	r0, #0
 800a15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a244 <_strtol_l.constprop.0+0x100>
 800a162:	460d      	mov	r5, r1
 800a164:	462e      	mov	r6, r5
 800a166:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a16a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a16e:	f017 0708 	ands.w	r7, r7, #8
 800a172:	d1f7      	bne.n	800a164 <_strtol_l.constprop.0+0x20>
 800a174:	2c2d      	cmp	r4, #45	; 0x2d
 800a176:	d132      	bne.n	800a1de <_strtol_l.constprop.0+0x9a>
 800a178:	782c      	ldrb	r4, [r5, #0]
 800a17a:	2701      	movs	r7, #1
 800a17c:	1cb5      	adds	r5, r6, #2
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d05b      	beq.n	800a23a <_strtol_l.constprop.0+0xf6>
 800a182:	2b10      	cmp	r3, #16
 800a184:	d109      	bne.n	800a19a <_strtol_l.constprop.0+0x56>
 800a186:	2c30      	cmp	r4, #48	; 0x30
 800a188:	d107      	bne.n	800a19a <_strtol_l.constprop.0+0x56>
 800a18a:	782c      	ldrb	r4, [r5, #0]
 800a18c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a190:	2c58      	cmp	r4, #88	; 0x58
 800a192:	d14d      	bne.n	800a230 <_strtol_l.constprop.0+0xec>
 800a194:	786c      	ldrb	r4, [r5, #1]
 800a196:	2310      	movs	r3, #16
 800a198:	3502      	adds	r5, #2
 800a19a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a19e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1a2:	f04f 0c00 	mov.w	ip, #0
 800a1a6:	fbb8 f9f3 	udiv	r9, r8, r3
 800a1aa:	4666      	mov	r6, ip
 800a1ac:	fb03 8a19 	mls	sl, r3, r9, r8
 800a1b0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a1b4:	f1be 0f09 	cmp.w	lr, #9
 800a1b8:	d816      	bhi.n	800a1e8 <_strtol_l.constprop.0+0xa4>
 800a1ba:	4674      	mov	r4, lr
 800a1bc:	42a3      	cmp	r3, r4
 800a1be:	dd24      	ble.n	800a20a <_strtol_l.constprop.0+0xc6>
 800a1c0:	f1bc 0f00 	cmp.w	ip, #0
 800a1c4:	db1e      	blt.n	800a204 <_strtol_l.constprop.0+0xc0>
 800a1c6:	45b1      	cmp	r9, r6
 800a1c8:	d31c      	bcc.n	800a204 <_strtol_l.constprop.0+0xc0>
 800a1ca:	d101      	bne.n	800a1d0 <_strtol_l.constprop.0+0x8c>
 800a1cc:	45a2      	cmp	sl, r4
 800a1ce:	db19      	blt.n	800a204 <_strtol_l.constprop.0+0xc0>
 800a1d0:	fb06 4603 	mla	r6, r6, r3, r4
 800a1d4:	f04f 0c01 	mov.w	ip, #1
 800a1d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1dc:	e7e8      	b.n	800a1b0 <_strtol_l.constprop.0+0x6c>
 800a1de:	2c2b      	cmp	r4, #43	; 0x2b
 800a1e0:	bf04      	itt	eq
 800a1e2:	782c      	ldrbeq	r4, [r5, #0]
 800a1e4:	1cb5      	addeq	r5, r6, #2
 800a1e6:	e7ca      	b.n	800a17e <_strtol_l.constprop.0+0x3a>
 800a1e8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a1ec:	f1be 0f19 	cmp.w	lr, #25
 800a1f0:	d801      	bhi.n	800a1f6 <_strtol_l.constprop.0+0xb2>
 800a1f2:	3c37      	subs	r4, #55	; 0x37
 800a1f4:	e7e2      	b.n	800a1bc <_strtol_l.constprop.0+0x78>
 800a1f6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a1fa:	f1be 0f19 	cmp.w	lr, #25
 800a1fe:	d804      	bhi.n	800a20a <_strtol_l.constprop.0+0xc6>
 800a200:	3c57      	subs	r4, #87	; 0x57
 800a202:	e7db      	b.n	800a1bc <_strtol_l.constprop.0+0x78>
 800a204:	f04f 3cff 	mov.w	ip, #4294967295
 800a208:	e7e6      	b.n	800a1d8 <_strtol_l.constprop.0+0x94>
 800a20a:	f1bc 0f00 	cmp.w	ip, #0
 800a20e:	da05      	bge.n	800a21c <_strtol_l.constprop.0+0xd8>
 800a210:	2322      	movs	r3, #34	; 0x22
 800a212:	6003      	str	r3, [r0, #0]
 800a214:	4646      	mov	r6, r8
 800a216:	b942      	cbnz	r2, 800a22a <_strtol_l.constprop.0+0xe6>
 800a218:	4630      	mov	r0, r6
 800a21a:	e79e      	b.n	800a15a <_strtol_l.constprop.0+0x16>
 800a21c:	b107      	cbz	r7, 800a220 <_strtol_l.constprop.0+0xdc>
 800a21e:	4276      	negs	r6, r6
 800a220:	2a00      	cmp	r2, #0
 800a222:	d0f9      	beq.n	800a218 <_strtol_l.constprop.0+0xd4>
 800a224:	f1bc 0f00 	cmp.w	ip, #0
 800a228:	d000      	beq.n	800a22c <_strtol_l.constprop.0+0xe8>
 800a22a:	1e69      	subs	r1, r5, #1
 800a22c:	6011      	str	r1, [r2, #0]
 800a22e:	e7f3      	b.n	800a218 <_strtol_l.constprop.0+0xd4>
 800a230:	2430      	movs	r4, #48	; 0x30
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1b1      	bne.n	800a19a <_strtol_l.constprop.0+0x56>
 800a236:	2308      	movs	r3, #8
 800a238:	e7af      	b.n	800a19a <_strtol_l.constprop.0+0x56>
 800a23a:	2c30      	cmp	r4, #48	; 0x30
 800a23c:	d0a5      	beq.n	800a18a <_strtol_l.constprop.0+0x46>
 800a23e:	230a      	movs	r3, #10
 800a240:	e7ab      	b.n	800a19a <_strtol_l.constprop.0+0x56>
 800a242:	bf00      	nop
 800a244:	0800ca01 	.word	0x0800ca01

0800a248 <strtol>:
 800a248:	4613      	mov	r3, r2
 800a24a:	460a      	mov	r2, r1
 800a24c:	4601      	mov	r1, r0
 800a24e:	4802      	ldr	r0, [pc, #8]	; (800a258 <strtol+0x10>)
 800a250:	6800      	ldr	r0, [r0, #0]
 800a252:	f7ff bf77 	b.w	800a144 <_strtol_l.constprop.0>
 800a256:	bf00      	nop
 800a258:	200000a4 	.word	0x200000a4

0800a25c <__swbuf_r>:
 800a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25e:	460e      	mov	r6, r1
 800a260:	4614      	mov	r4, r2
 800a262:	4605      	mov	r5, r0
 800a264:	b118      	cbz	r0, 800a26e <__swbuf_r+0x12>
 800a266:	6983      	ldr	r3, [r0, #24]
 800a268:	b90b      	cbnz	r3, 800a26e <__swbuf_r+0x12>
 800a26a:	f001 f869 	bl	800b340 <__sinit>
 800a26e:	4b21      	ldr	r3, [pc, #132]	; (800a2f4 <__swbuf_r+0x98>)
 800a270:	429c      	cmp	r4, r3
 800a272:	d12b      	bne.n	800a2cc <__swbuf_r+0x70>
 800a274:	686c      	ldr	r4, [r5, #4]
 800a276:	69a3      	ldr	r3, [r4, #24]
 800a278:	60a3      	str	r3, [r4, #8]
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	071a      	lsls	r2, r3, #28
 800a27e:	d52f      	bpl.n	800a2e0 <__swbuf_r+0x84>
 800a280:	6923      	ldr	r3, [r4, #16]
 800a282:	b36b      	cbz	r3, 800a2e0 <__swbuf_r+0x84>
 800a284:	6923      	ldr	r3, [r4, #16]
 800a286:	6820      	ldr	r0, [r4, #0]
 800a288:	1ac0      	subs	r0, r0, r3
 800a28a:	6963      	ldr	r3, [r4, #20]
 800a28c:	b2f6      	uxtb	r6, r6
 800a28e:	4283      	cmp	r3, r0
 800a290:	4637      	mov	r7, r6
 800a292:	dc04      	bgt.n	800a29e <__swbuf_r+0x42>
 800a294:	4621      	mov	r1, r4
 800a296:	4628      	mov	r0, r5
 800a298:	f000 ffbe 	bl	800b218 <_fflush_r>
 800a29c:	bb30      	cbnz	r0, 800a2ec <__swbuf_r+0x90>
 800a29e:	68a3      	ldr	r3, [r4, #8]
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	60a3      	str	r3, [r4, #8]
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	6022      	str	r2, [r4, #0]
 800a2aa:	701e      	strb	r6, [r3, #0]
 800a2ac:	6963      	ldr	r3, [r4, #20]
 800a2ae:	3001      	adds	r0, #1
 800a2b0:	4283      	cmp	r3, r0
 800a2b2:	d004      	beq.n	800a2be <__swbuf_r+0x62>
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	07db      	lsls	r3, r3, #31
 800a2b8:	d506      	bpl.n	800a2c8 <__swbuf_r+0x6c>
 800a2ba:	2e0a      	cmp	r6, #10
 800a2bc:	d104      	bne.n	800a2c8 <__swbuf_r+0x6c>
 800a2be:	4621      	mov	r1, r4
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	f000 ffa9 	bl	800b218 <_fflush_r>
 800a2c6:	b988      	cbnz	r0, 800a2ec <__swbuf_r+0x90>
 800a2c8:	4638      	mov	r0, r7
 800a2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2cc:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <__swbuf_r+0x9c>)
 800a2ce:	429c      	cmp	r4, r3
 800a2d0:	d101      	bne.n	800a2d6 <__swbuf_r+0x7a>
 800a2d2:	68ac      	ldr	r4, [r5, #8]
 800a2d4:	e7cf      	b.n	800a276 <__swbuf_r+0x1a>
 800a2d6:	4b09      	ldr	r3, [pc, #36]	; (800a2fc <__swbuf_r+0xa0>)
 800a2d8:	429c      	cmp	r4, r3
 800a2da:	bf08      	it	eq
 800a2dc:	68ec      	ldreq	r4, [r5, #12]
 800a2de:	e7ca      	b.n	800a276 <__swbuf_r+0x1a>
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f000 f80c 	bl	800a300 <__swsetup_r>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d0cb      	beq.n	800a284 <__swbuf_r+0x28>
 800a2ec:	f04f 37ff 	mov.w	r7, #4294967295
 800a2f0:	e7ea      	b.n	800a2c8 <__swbuf_r+0x6c>
 800a2f2:	bf00      	nop
 800a2f4:	0800cb9c 	.word	0x0800cb9c
 800a2f8:	0800cbbc 	.word	0x0800cbbc
 800a2fc:	0800cb7c 	.word	0x0800cb7c

0800a300 <__swsetup_r>:
 800a300:	4b32      	ldr	r3, [pc, #200]	; (800a3cc <__swsetup_r+0xcc>)
 800a302:	b570      	push	{r4, r5, r6, lr}
 800a304:	681d      	ldr	r5, [r3, #0]
 800a306:	4606      	mov	r6, r0
 800a308:	460c      	mov	r4, r1
 800a30a:	b125      	cbz	r5, 800a316 <__swsetup_r+0x16>
 800a30c:	69ab      	ldr	r3, [r5, #24]
 800a30e:	b913      	cbnz	r3, 800a316 <__swsetup_r+0x16>
 800a310:	4628      	mov	r0, r5
 800a312:	f001 f815 	bl	800b340 <__sinit>
 800a316:	4b2e      	ldr	r3, [pc, #184]	; (800a3d0 <__swsetup_r+0xd0>)
 800a318:	429c      	cmp	r4, r3
 800a31a:	d10f      	bne.n	800a33c <__swsetup_r+0x3c>
 800a31c:	686c      	ldr	r4, [r5, #4]
 800a31e:	89a3      	ldrh	r3, [r4, #12]
 800a320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a324:	0719      	lsls	r1, r3, #28
 800a326:	d42c      	bmi.n	800a382 <__swsetup_r+0x82>
 800a328:	06dd      	lsls	r5, r3, #27
 800a32a:	d411      	bmi.n	800a350 <__swsetup_r+0x50>
 800a32c:	2309      	movs	r3, #9
 800a32e:	6033      	str	r3, [r6, #0]
 800a330:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a334:	81a3      	strh	r3, [r4, #12]
 800a336:	f04f 30ff 	mov.w	r0, #4294967295
 800a33a:	e03e      	b.n	800a3ba <__swsetup_r+0xba>
 800a33c:	4b25      	ldr	r3, [pc, #148]	; (800a3d4 <__swsetup_r+0xd4>)
 800a33e:	429c      	cmp	r4, r3
 800a340:	d101      	bne.n	800a346 <__swsetup_r+0x46>
 800a342:	68ac      	ldr	r4, [r5, #8]
 800a344:	e7eb      	b.n	800a31e <__swsetup_r+0x1e>
 800a346:	4b24      	ldr	r3, [pc, #144]	; (800a3d8 <__swsetup_r+0xd8>)
 800a348:	429c      	cmp	r4, r3
 800a34a:	bf08      	it	eq
 800a34c:	68ec      	ldreq	r4, [r5, #12]
 800a34e:	e7e6      	b.n	800a31e <__swsetup_r+0x1e>
 800a350:	0758      	lsls	r0, r3, #29
 800a352:	d512      	bpl.n	800a37a <__swsetup_r+0x7a>
 800a354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a356:	b141      	cbz	r1, 800a36a <__swsetup_r+0x6a>
 800a358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a35c:	4299      	cmp	r1, r3
 800a35e:	d002      	beq.n	800a366 <__swsetup_r+0x66>
 800a360:	4630      	mov	r0, r6
 800a362:	f001 fcb9 	bl	800bcd8 <_free_r>
 800a366:	2300      	movs	r3, #0
 800a368:	6363      	str	r3, [r4, #52]	; 0x34
 800a36a:	89a3      	ldrh	r3, [r4, #12]
 800a36c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a370:	81a3      	strh	r3, [r4, #12]
 800a372:	2300      	movs	r3, #0
 800a374:	6063      	str	r3, [r4, #4]
 800a376:	6923      	ldr	r3, [r4, #16]
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	89a3      	ldrh	r3, [r4, #12]
 800a37c:	f043 0308 	orr.w	r3, r3, #8
 800a380:	81a3      	strh	r3, [r4, #12]
 800a382:	6923      	ldr	r3, [r4, #16]
 800a384:	b94b      	cbnz	r3, 800a39a <__swsetup_r+0x9a>
 800a386:	89a3      	ldrh	r3, [r4, #12]
 800a388:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a38c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a390:	d003      	beq.n	800a39a <__swsetup_r+0x9a>
 800a392:	4621      	mov	r1, r4
 800a394:	4630      	mov	r0, r6
 800a396:	f001 f8af 	bl	800b4f8 <__smakebuf_r>
 800a39a:	89a0      	ldrh	r0, [r4, #12]
 800a39c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3a0:	f010 0301 	ands.w	r3, r0, #1
 800a3a4:	d00a      	beq.n	800a3bc <__swsetup_r+0xbc>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	60a3      	str	r3, [r4, #8]
 800a3aa:	6963      	ldr	r3, [r4, #20]
 800a3ac:	425b      	negs	r3, r3
 800a3ae:	61a3      	str	r3, [r4, #24]
 800a3b0:	6923      	ldr	r3, [r4, #16]
 800a3b2:	b943      	cbnz	r3, 800a3c6 <__swsetup_r+0xc6>
 800a3b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3b8:	d1ba      	bne.n	800a330 <__swsetup_r+0x30>
 800a3ba:	bd70      	pop	{r4, r5, r6, pc}
 800a3bc:	0781      	lsls	r1, r0, #30
 800a3be:	bf58      	it	pl
 800a3c0:	6963      	ldrpl	r3, [r4, #20]
 800a3c2:	60a3      	str	r3, [r4, #8]
 800a3c4:	e7f4      	b.n	800a3b0 <__swsetup_r+0xb0>
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	e7f7      	b.n	800a3ba <__swsetup_r+0xba>
 800a3ca:	bf00      	nop
 800a3cc:	200000a4 	.word	0x200000a4
 800a3d0:	0800cb9c 	.word	0x0800cb9c
 800a3d4:	0800cbbc 	.word	0x0800cbbc
 800a3d8:	0800cb7c 	.word	0x0800cb7c

0800a3dc <__assert_func>:
 800a3dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3de:	4614      	mov	r4, r2
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	4b09      	ldr	r3, [pc, #36]	; (800a408 <__assert_func+0x2c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	68d8      	ldr	r0, [r3, #12]
 800a3ea:	b14c      	cbz	r4, 800a400 <__assert_func+0x24>
 800a3ec:	4b07      	ldr	r3, [pc, #28]	; (800a40c <__assert_func+0x30>)
 800a3ee:	9100      	str	r1, [sp, #0]
 800a3f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3f4:	4906      	ldr	r1, [pc, #24]	; (800a410 <__assert_func+0x34>)
 800a3f6:	462b      	mov	r3, r5
 800a3f8:	f001 f820 	bl	800b43c <fiprintf>
 800a3fc:	f002 f868 	bl	800c4d0 <abort>
 800a400:	4b04      	ldr	r3, [pc, #16]	; (800a414 <__assert_func+0x38>)
 800a402:	461c      	mov	r4, r3
 800a404:	e7f3      	b.n	800a3ee <__assert_func+0x12>
 800a406:	bf00      	nop
 800a408:	200000a4 	.word	0x200000a4
 800a40c:	0800c9c4 	.word	0x0800c9c4
 800a410:	0800c9d1 	.word	0x0800c9d1
 800a414:	0800c9ff 	.word	0x0800c9ff

0800a418 <quorem>:
 800a418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41c:	6903      	ldr	r3, [r0, #16]
 800a41e:	690c      	ldr	r4, [r1, #16]
 800a420:	42a3      	cmp	r3, r4
 800a422:	4607      	mov	r7, r0
 800a424:	f2c0 8081 	blt.w	800a52a <quorem+0x112>
 800a428:	3c01      	subs	r4, #1
 800a42a:	f101 0814 	add.w	r8, r1, #20
 800a42e:	f100 0514 	add.w	r5, r0, #20
 800a432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a436:	9301      	str	r3, [sp, #4]
 800a438:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a43c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a440:	3301      	adds	r3, #1
 800a442:	429a      	cmp	r2, r3
 800a444:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a448:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a44c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a450:	d331      	bcc.n	800a4b6 <quorem+0x9e>
 800a452:	f04f 0e00 	mov.w	lr, #0
 800a456:	4640      	mov	r0, r8
 800a458:	46ac      	mov	ip, r5
 800a45a:	46f2      	mov	sl, lr
 800a45c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a460:	b293      	uxth	r3, r2
 800a462:	fb06 e303 	mla	r3, r6, r3, lr
 800a466:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	ebaa 0303 	sub.w	r3, sl, r3
 800a470:	f8dc a000 	ldr.w	sl, [ip]
 800a474:	0c12      	lsrs	r2, r2, #16
 800a476:	fa13 f38a 	uxtah	r3, r3, sl
 800a47a:	fb06 e202 	mla	r2, r6, r2, lr
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	9b00      	ldr	r3, [sp, #0]
 800a482:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a486:	b292      	uxth	r2, r2
 800a488:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a48c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a490:	f8bd 3000 	ldrh.w	r3, [sp]
 800a494:	4581      	cmp	r9, r0
 800a496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a49a:	f84c 3b04 	str.w	r3, [ip], #4
 800a49e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a4a2:	d2db      	bcs.n	800a45c <quorem+0x44>
 800a4a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a4a8:	b92b      	cbnz	r3, 800a4b6 <quorem+0x9e>
 800a4aa:	9b01      	ldr	r3, [sp, #4]
 800a4ac:	3b04      	subs	r3, #4
 800a4ae:	429d      	cmp	r5, r3
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	d32e      	bcc.n	800a512 <quorem+0xfa>
 800a4b4:	613c      	str	r4, [r7, #16]
 800a4b6:	4638      	mov	r0, r7
 800a4b8:	f001 faf6 	bl	800baa8 <__mcmp>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	db24      	blt.n	800a50a <quorem+0xf2>
 800a4c0:	3601      	adds	r6, #1
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	f04f 0c00 	mov.w	ip, #0
 800a4c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a4cc:	f8d0 e000 	ldr.w	lr, [r0]
 800a4d0:	b293      	uxth	r3, r2
 800a4d2:	ebac 0303 	sub.w	r3, ip, r3
 800a4d6:	0c12      	lsrs	r2, r2, #16
 800a4d8:	fa13 f38e 	uxtah	r3, r3, lr
 800a4dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a4e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4ea:	45c1      	cmp	r9, r8
 800a4ec:	f840 3b04 	str.w	r3, [r0], #4
 800a4f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a4f4:	d2e8      	bcs.n	800a4c8 <quorem+0xb0>
 800a4f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4fe:	b922      	cbnz	r2, 800a50a <quorem+0xf2>
 800a500:	3b04      	subs	r3, #4
 800a502:	429d      	cmp	r5, r3
 800a504:	461a      	mov	r2, r3
 800a506:	d30a      	bcc.n	800a51e <quorem+0x106>
 800a508:	613c      	str	r4, [r7, #16]
 800a50a:	4630      	mov	r0, r6
 800a50c:	b003      	add	sp, #12
 800a50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a512:	6812      	ldr	r2, [r2, #0]
 800a514:	3b04      	subs	r3, #4
 800a516:	2a00      	cmp	r2, #0
 800a518:	d1cc      	bne.n	800a4b4 <quorem+0x9c>
 800a51a:	3c01      	subs	r4, #1
 800a51c:	e7c7      	b.n	800a4ae <quorem+0x96>
 800a51e:	6812      	ldr	r2, [r2, #0]
 800a520:	3b04      	subs	r3, #4
 800a522:	2a00      	cmp	r2, #0
 800a524:	d1f0      	bne.n	800a508 <quorem+0xf0>
 800a526:	3c01      	subs	r4, #1
 800a528:	e7eb      	b.n	800a502 <quorem+0xea>
 800a52a:	2000      	movs	r0, #0
 800a52c:	e7ee      	b.n	800a50c <quorem+0xf4>
	...

0800a530 <_dtoa_r>:
 800a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	ed2d 8b04 	vpush	{d8-d9}
 800a538:	ec57 6b10 	vmov	r6, r7, d0
 800a53c:	b093      	sub	sp, #76	; 0x4c
 800a53e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a540:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a544:	9106      	str	r1, [sp, #24]
 800a546:	ee10 aa10 	vmov	sl, s0
 800a54a:	4604      	mov	r4, r0
 800a54c:	9209      	str	r2, [sp, #36]	; 0x24
 800a54e:	930c      	str	r3, [sp, #48]	; 0x30
 800a550:	46bb      	mov	fp, r7
 800a552:	b975      	cbnz	r5, 800a572 <_dtoa_r+0x42>
 800a554:	2010      	movs	r0, #16
 800a556:	f001 f80f 	bl	800b578 <malloc>
 800a55a:	4602      	mov	r2, r0
 800a55c:	6260      	str	r0, [r4, #36]	; 0x24
 800a55e:	b920      	cbnz	r0, 800a56a <_dtoa_r+0x3a>
 800a560:	4ba7      	ldr	r3, [pc, #668]	; (800a800 <_dtoa_r+0x2d0>)
 800a562:	21ea      	movs	r1, #234	; 0xea
 800a564:	48a7      	ldr	r0, [pc, #668]	; (800a804 <_dtoa_r+0x2d4>)
 800a566:	f7ff ff39 	bl	800a3dc <__assert_func>
 800a56a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a56e:	6005      	str	r5, [r0, #0]
 800a570:	60c5      	str	r5, [r0, #12]
 800a572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a574:	6819      	ldr	r1, [r3, #0]
 800a576:	b151      	cbz	r1, 800a58e <_dtoa_r+0x5e>
 800a578:	685a      	ldr	r2, [r3, #4]
 800a57a:	604a      	str	r2, [r1, #4]
 800a57c:	2301      	movs	r3, #1
 800a57e:	4093      	lsls	r3, r2
 800a580:	608b      	str	r3, [r1, #8]
 800a582:	4620      	mov	r0, r4
 800a584:	f001 f84e 	bl	800b624 <_Bfree>
 800a588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a58a:	2200      	movs	r2, #0
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	1e3b      	subs	r3, r7, #0
 800a590:	bfaa      	itet	ge
 800a592:	2300      	movge	r3, #0
 800a594:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a598:	f8c8 3000 	strge.w	r3, [r8]
 800a59c:	4b9a      	ldr	r3, [pc, #616]	; (800a808 <_dtoa_r+0x2d8>)
 800a59e:	bfbc      	itt	lt
 800a5a0:	2201      	movlt	r2, #1
 800a5a2:	f8c8 2000 	strlt.w	r2, [r8]
 800a5a6:	ea33 030b 	bics.w	r3, r3, fp
 800a5aa:	d11b      	bne.n	800a5e4 <_dtoa_r+0xb4>
 800a5ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5b8:	4333      	orrs	r3, r6
 800a5ba:	f000 8592 	beq.w	800b0e2 <_dtoa_r+0xbb2>
 800a5be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5c0:	b963      	cbnz	r3, 800a5dc <_dtoa_r+0xac>
 800a5c2:	4b92      	ldr	r3, [pc, #584]	; (800a80c <_dtoa_r+0x2dc>)
 800a5c4:	e022      	b.n	800a60c <_dtoa_r+0xdc>
 800a5c6:	4b92      	ldr	r3, [pc, #584]	; (800a810 <_dtoa_r+0x2e0>)
 800a5c8:	9301      	str	r3, [sp, #4]
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a5ce:	6013      	str	r3, [r2, #0]
 800a5d0:	9801      	ldr	r0, [sp, #4]
 800a5d2:	b013      	add	sp, #76	; 0x4c
 800a5d4:	ecbd 8b04 	vpop	{d8-d9}
 800a5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5dc:	4b8b      	ldr	r3, [pc, #556]	; (800a80c <_dtoa_r+0x2dc>)
 800a5de:	9301      	str	r3, [sp, #4]
 800a5e0:	3303      	adds	r3, #3
 800a5e2:	e7f3      	b.n	800a5cc <_dtoa_r+0x9c>
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	4650      	mov	r0, sl
 800a5ea:	4659      	mov	r1, fp
 800a5ec:	f7f6 faa4 	bl	8000b38 <__aeabi_dcmpeq>
 800a5f0:	ec4b ab19 	vmov	d9, sl, fp
 800a5f4:	4680      	mov	r8, r0
 800a5f6:	b158      	cbz	r0, 800a610 <_dtoa_r+0xe0>
 800a5f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	6013      	str	r3, [r2, #0]
 800a5fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 856b 	beq.w	800b0dc <_dtoa_r+0xbac>
 800a606:	4883      	ldr	r0, [pc, #524]	; (800a814 <_dtoa_r+0x2e4>)
 800a608:	6018      	str	r0, [r3, #0]
 800a60a:	1e43      	subs	r3, r0, #1
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	e7df      	b.n	800a5d0 <_dtoa_r+0xa0>
 800a610:	ec4b ab10 	vmov	d0, sl, fp
 800a614:	aa10      	add	r2, sp, #64	; 0x40
 800a616:	a911      	add	r1, sp, #68	; 0x44
 800a618:	4620      	mov	r0, r4
 800a61a:	f001 faeb 	bl	800bbf4 <__d2b>
 800a61e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a622:	ee08 0a10 	vmov	s16, r0
 800a626:	2d00      	cmp	r5, #0
 800a628:	f000 8084 	beq.w	800a734 <_dtoa_r+0x204>
 800a62c:	ee19 3a90 	vmov	r3, s19
 800a630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a634:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a638:	4656      	mov	r6, sl
 800a63a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a63e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a642:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a646:	4b74      	ldr	r3, [pc, #464]	; (800a818 <_dtoa_r+0x2e8>)
 800a648:	2200      	movs	r2, #0
 800a64a:	4630      	mov	r0, r6
 800a64c:	4639      	mov	r1, r7
 800a64e:	f7f5 fe53 	bl	80002f8 <__aeabi_dsub>
 800a652:	a365      	add	r3, pc, #404	; (adr r3, 800a7e8 <_dtoa_r+0x2b8>)
 800a654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a658:	f7f6 f806 	bl	8000668 <__aeabi_dmul>
 800a65c:	a364      	add	r3, pc, #400	; (adr r3, 800a7f0 <_dtoa_r+0x2c0>)
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	f7f5 fe4b 	bl	80002fc <__adddf3>
 800a666:	4606      	mov	r6, r0
 800a668:	4628      	mov	r0, r5
 800a66a:	460f      	mov	r7, r1
 800a66c:	f7f5 ff92 	bl	8000594 <__aeabi_i2d>
 800a670:	a361      	add	r3, pc, #388	; (adr r3, 800a7f8 <_dtoa_r+0x2c8>)
 800a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a676:	f7f5 fff7 	bl	8000668 <__aeabi_dmul>
 800a67a:	4602      	mov	r2, r0
 800a67c:	460b      	mov	r3, r1
 800a67e:	4630      	mov	r0, r6
 800a680:	4639      	mov	r1, r7
 800a682:	f7f5 fe3b 	bl	80002fc <__adddf3>
 800a686:	4606      	mov	r6, r0
 800a688:	460f      	mov	r7, r1
 800a68a:	f7f6 fa9d 	bl	8000bc8 <__aeabi_d2iz>
 800a68e:	2200      	movs	r2, #0
 800a690:	9000      	str	r0, [sp, #0]
 800a692:	2300      	movs	r3, #0
 800a694:	4630      	mov	r0, r6
 800a696:	4639      	mov	r1, r7
 800a698:	f7f6 fa58 	bl	8000b4c <__aeabi_dcmplt>
 800a69c:	b150      	cbz	r0, 800a6b4 <_dtoa_r+0x184>
 800a69e:	9800      	ldr	r0, [sp, #0]
 800a6a0:	f7f5 ff78 	bl	8000594 <__aeabi_i2d>
 800a6a4:	4632      	mov	r2, r6
 800a6a6:	463b      	mov	r3, r7
 800a6a8:	f7f6 fa46 	bl	8000b38 <__aeabi_dcmpeq>
 800a6ac:	b910      	cbnz	r0, 800a6b4 <_dtoa_r+0x184>
 800a6ae:	9b00      	ldr	r3, [sp, #0]
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	9b00      	ldr	r3, [sp, #0]
 800a6b6:	2b16      	cmp	r3, #22
 800a6b8:	d85a      	bhi.n	800a770 <_dtoa_r+0x240>
 800a6ba:	9a00      	ldr	r2, [sp, #0]
 800a6bc:	4b57      	ldr	r3, [pc, #348]	; (800a81c <_dtoa_r+0x2ec>)
 800a6be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	ec51 0b19 	vmov	r0, r1, d9
 800a6ca:	f7f6 fa3f 	bl	8000b4c <__aeabi_dcmplt>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d050      	beq.n	800a774 <_dtoa_r+0x244>
 800a6d2:	9b00      	ldr	r3, [sp, #0]
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6de:	1b5d      	subs	r5, r3, r5
 800a6e0:	1e6b      	subs	r3, r5, #1
 800a6e2:	9305      	str	r3, [sp, #20]
 800a6e4:	bf45      	ittet	mi
 800a6e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a6ea:	9304      	strmi	r3, [sp, #16]
 800a6ec:	2300      	movpl	r3, #0
 800a6ee:	2300      	movmi	r3, #0
 800a6f0:	bf4c      	ite	mi
 800a6f2:	9305      	strmi	r3, [sp, #20]
 800a6f4:	9304      	strpl	r3, [sp, #16]
 800a6f6:	9b00      	ldr	r3, [sp, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	db3d      	blt.n	800a778 <_dtoa_r+0x248>
 800a6fc:	9b05      	ldr	r3, [sp, #20]
 800a6fe:	9a00      	ldr	r2, [sp, #0]
 800a700:	920a      	str	r2, [sp, #40]	; 0x28
 800a702:	4413      	add	r3, r2
 800a704:	9305      	str	r3, [sp, #20]
 800a706:	2300      	movs	r3, #0
 800a708:	9307      	str	r3, [sp, #28]
 800a70a:	9b06      	ldr	r3, [sp, #24]
 800a70c:	2b09      	cmp	r3, #9
 800a70e:	f200 8089 	bhi.w	800a824 <_dtoa_r+0x2f4>
 800a712:	2b05      	cmp	r3, #5
 800a714:	bfc4      	itt	gt
 800a716:	3b04      	subgt	r3, #4
 800a718:	9306      	strgt	r3, [sp, #24]
 800a71a:	9b06      	ldr	r3, [sp, #24]
 800a71c:	f1a3 0302 	sub.w	r3, r3, #2
 800a720:	bfcc      	ite	gt
 800a722:	2500      	movgt	r5, #0
 800a724:	2501      	movle	r5, #1
 800a726:	2b03      	cmp	r3, #3
 800a728:	f200 8087 	bhi.w	800a83a <_dtoa_r+0x30a>
 800a72c:	e8df f003 	tbb	[pc, r3]
 800a730:	59383a2d 	.word	0x59383a2d
 800a734:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a738:	441d      	add	r5, r3
 800a73a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a73e:	2b20      	cmp	r3, #32
 800a740:	bfc1      	itttt	gt
 800a742:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a746:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a74a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a74e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a752:	bfda      	itte	le
 800a754:	f1c3 0320 	rsble	r3, r3, #32
 800a758:	fa06 f003 	lslle.w	r0, r6, r3
 800a75c:	4318      	orrgt	r0, r3
 800a75e:	f7f5 ff09 	bl	8000574 <__aeabi_ui2d>
 800a762:	2301      	movs	r3, #1
 800a764:	4606      	mov	r6, r0
 800a766:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a76a:	3d01      	subs	r5, #1
 800a76c:	930e      	str	r3, [sp, #56]	; 0x38
 800a76e:	e76a      	b.n	800a646 <_dtoa_r+0x116>
 800a770:	2301      	movs	r3, #1
 800a772:	e7b2      	b.n	800a6da <_dtoa_r+0x1aa>
 800a774:	900b      	str	r0, [sp, #44]	; 0x2c
 800a776:	e7b1      	b.n	800a6dc <_dtoa_r+0x1ac>
 800a778:	9b04      	ldr	r3, [sp, #16]
 800a77a:	9a00      	ldr	r2, [sp, #0]
 800a77c:	1a9b      	subs	r3, r3, r2
 800a77e:	9304      	str	r3, [sp, #16]
 800a780:	4253      	negs	r3, r2
 800a782:	9307      	str	r3, [sp, #28]
 800a784:	2300      	movs	r3, #0
 800a786:	930a      	str	r3, [sp, #40]	; 0x28
 800a788:	e7bf      	b.n	800a70a <_dtoa_r+0x1da>
 800a78a:	2300      	movs	r3, #0
 800a78c:	9308      	str	r3, [sp, #32]
 800a78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a790:	2b00      	cmp	r3, #0
 800a792:	dc55      	bgt.n	800a840 <_dtoa_r+0x310>
 800a794:	2301      	movs	r3, #1
 800a796:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a79a:	461a      	mov	r2, r3
 800a79c:	9209      	str	r2, [sp, #36]	; 0x24
 800a79e:	e00c      	b.n	800a7ba <_dtoa_r+0x28a>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e7f3      	b.n	800a78c <_dtoa_r+0x25c>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7a8:	9308      	str	r3, [sp, #32]
 800a7aa:	9b00      	ldr	r3, [sp, #0]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	9302      	str	r3, [sp, #8]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	9303      	str	r3, [sp, #12]
 800a7b6:	bfb8      	it	lt
 800a7b8:	2301      	movlt	r3, #1
 800a7ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a7bc:	2200      	movs	r2, #0
 800a7be:	6042      	str	r2, [r0, #4]
 800a7c0:	2204      	movs	r2, #4
 800a7c2:	f102 0614 	add.w	r6, r2, #20
 800a7c6:	429e      	cmp	r6, r3
 800a7c8:	6841      	ldr	r1, [r0, #4]
 800a7ca:	d93d      	bls.n	800a848 <_dtoa_r+0x318>
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f000 fee9 	bl	800b5a4 <_Balloc>
 800a7d2:	9001      	str	r0, [sp, #4]
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	d13b      	bne.n	800a850 <_dtoa_r+0x320>
 800a7d8:	4b11      	ldr	r3, [pc, #68]	; (800a820 <_dtoa_r+0x2f0>)
 800a7da:	4602      	mov	r2, r0
 800a7dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a7e0:	e6c0      	b.n	800a564 <_dtoa_r+0x34>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e7df      	b.n	800a7a6 <_dtoa_r+0x276>
 800a7e6:	bf00      	nop
 800a7e8:	636f4361 	.word	0x636f4361
 800a7ec:	3fd287a7 	.word	0x3fd287a7
 800a7f0:	8b60c8b3 	.word	0x8b60c8b3
 800a7f4:	3fc68a28 	.word	0x3fc68a28
 800a7f8:	509f79fb 	.word	0x509f79fb
 800a7fc:	3fd34413 	.word	0x3fd34413
 800a800:	0800c950 	.word	0x0800c950
 800a804:	0800cb0e 	.word	0x0800cb0e
 800a808:	7ff00000 	.word	0x7ff00000
 800a80c:	0800cb0a 	.word	0x0800cb0a
 800a810:	0800cb01 	.word	0x0800cb01
 800a814:	0800c92d 	.word	0x0800c92d
 800a818:	3ff80000 	.word	0x3ff80000
 800a81c:	0800cc60 	.word	0x0800cc60
 800a820:	0800cb69 	.word	0x0800cb69
 800a824:	2501      	movs	r5, #1
 800a826:	2300      	movs	r3, #0
 800a828:	9306      	str	r3, [sp, #24]
 800a82a:	9508      	str	r5, [sp, #32]
 800a82c:	f04f 33ff 	mov.w	r3, #4294967295
 800a830:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a834:	2200      	movs	r2, #0
 800a836:	2312      	movs	r3, #18
 800a838:	e7b0      	b.n	800a79c <_dtoa_r+0x26c>
 800a83a:	2301      	movs	r3, #1
 800a83c:	9308      	str	r3, [sp, #32]
 800a83e:	e7f5      	b.n	800a82c <_dtoa_r+0x2fc>
 800a840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a842:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a846:	e7b8      	b.n	800a7ba <_dtoa_r+0x28a>
 800a848:	3101      	adds	r1, #1
 800a84a:	6041      	str	r1, [r0, #4]
 800a84c:	0052      	lsls	r2, r2, #1
 800a84e:	e7b8      	b.n	800a7c2 <_dtoa_r+0x292>
 800a850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a852:	9a01      	ldr	r2, [sp, #4]
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	9b03      	ldr	r3, [sp, #12]
 800a858:	2b0e      	cmp	r3, #14
 800a85a:	f200 809d 	bhi.w	800a998 <_dtoa_r+0x468>
 800a85e:	2d00      	cmp	r5, #0
 800a860:	f000 809a 	beq.w	800a998 <_dtoa_r+0x468>
 800a864:	9b00      	ldr	r3, [sp, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	dd32      	ble.n	800a8d0 <_dtoa_r+0x3a0>
 800a86a:	4ab7      	ldr	r2, [pc, #732]	; (800ab48 <_dtoa_r+0x618>)
 800a86c:	f003 030f 	and.w	r3, r3, #15
 800a870:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a874:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a878:	9b00      	ldr	r3, [sp, #0]
 800a87a:	05d8      	lsls	r0, r3, #23
 800a87c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a880:	d516      	bpl.n	800a8b0 <_dtoa_r+0x380>
 800a882:	4bb2      	ldr	r3, [pc, #712]	; (800ab4c <_dtoa_r+0x61c>)
 800a884:	ec51 0b19 	vmov	r0, r1, d9
 800a888:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a88c:	f7f6 f816 	bl	80008bc <__aeabi_ddiv>
 800a890:	f007 070f 	and.w	r7, r7, #15
 800a894:	4682      	mov	sl, r0
 800a896:	468b      	mov	fp, r1
 800a898:	2503      	movs	r5, #3
 800a89a:	4eac      	ldr	r6, [pc, #688]	; (800ab4c <_dtoa_r+0x61c>)
 800a89c:	b957      	cbnz	r7, 800a8b4 <_dtoa_r+0x384>
 800a89e:	4642      	mov	r2, r8
 800a8a0:	464b      	mov	r3, r9
 800a8a2:	4650      	mov	r0, sl
 800a8a4:	4659      	mov	r1, fp
 800a8a6:	f7f6 f809 	bl	80008bc <__aeabi_ddiv>
 800a8aa:	4682      	mov	sl, r0
 800a8ac:	468b      	mov	fp, r1
 800a8ae:	e028      	b.n	800a902 <_dtoa_r+0x3d2>
 800a8b0:	2502      	movs	r5, #2
 800a8b2:	e7f2      	b.n	800a89a <_dtoa_r+0x36a>
 800a8b4:	07f9      	lsls	r1, r7, #31
 800a8b6:	d508      	bpl.n	800a8ca <_dtoa_r+0x39a>
 800a8b8:	4640      	mov	r0, r8
 800a8ba:	4649      	mov	r1, r9
 800a8bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8c0:	f7f5 fed2 	bl	8000668 <__aeabi_dmul>
 800a8c4:	3501      	adds	r5, #1
 800a8c6:	4680      	mov	r8, r0
 800a8c8:	4689      	mov	r9, r1
 800a8ca:	107f      	asrs	r7, r7, #1
 800a8cc:	3608      	adds	r6, #8
 800a8ce:	e7e5      	b.n	800a89c <_dtoa_r+0x36c>
 800a8d0:	f000 809b 	beq.w	800aa0a <_dtoa_r+0x4da>
 800a8d4:	9b00      	ldr	r3, [sp, #0]
 800a8d6:	4f9d      	ldr	r7, [pc, #628]	; (800ab4c <_dtoa_r+0x61c>)
 800a8d8:	425e      	negs	r6, r3
 800a8da:	4b9b      	ldr	r3, [pc, #620]	; (800ab48 <_dtoa_r+0x618>)
 800a8dc:	f006 020f 	and.w	r2, r6, #15
 800a8e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e8:	ec51 0b19 	vmov	r0, r1, d9
 800a8ec:	f7f5 febc 	bl	8000668 <__aeabi_dmul>
 800a8f0:	1136      	asrs	r6, r6, #4
 800a8f2:	4682      	mov	sl, r0
 800a8f4:	468b      	mov	fp, r1
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	2502      	movs	r5, #2
 800a8fa:	2e00      	cmp	r6, #0
 800a8fc:	d17a      	bne.n	800a9f4 <_dtoa_r+0x4c4>
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1d3      	bne.n	800a8aa <_dtoa_r+0x37a>
 800a902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a904:	2b00      	cmp	r3, #0
 800a906:	f000 8082 	beq.w	800aa0e <_dtoa_r+0x4de>
 800a90a:	4b91      	ldr	r3, [pc, #580]	; (800ab50 <_dtoa_r+0x620>)
 800a90c:	2200      	movs	r2, #0
 800a90e:	4650      	mov	r0, sl
 800a910:	4659      	mov	r1, fp
 800a912:	f7f6 f91b 	bl	8000b4c <__aeabi_dcmplt>
 800a916:	2800      	cmp	r0, #0
 800a918:	d079      	beq.n	800aa0e <_dtoa_r+0x4de>
 800a91a:	9b03      	ldr	r3, [sp, #12]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d076      	beq.n	800aa0e <_dtoa_r+0x4de>
 800a920:	9b02      	ldr	r3, [sp, #8]
 800a922:	2b00      	cmp	r3, #0
 800a924:	dd36      	ble.n	800a994 <_dtoa_r+0x464>
 800a926:	9b00      	ldr	r3, [sp, #0]
 800a928:	4650      	mov	r0, sl
 800a92a:	4659      	mov	r1, fp
 800a92c:	1e5f      	subs	r7, r3, #1
 800a92e:	2200      	movs	r2, #0
 800a930:	4b88      	ldr	r3, [pc, #544]	; (800ab54 <_dtoa_r+0x624>)
 800a932:	f7f5 fe99 	bl	8000668 <__aeabi_dmul>
 800a936:	9e02      	ldr	r6, [sp, #8]
 800a938:	4682      	mov	sl, r0
 800a93a:	468b      	mov	fp, r1
 800a93c:	3501      	adds	r5, #1
 800a93e:	4628      	mov	r0, r5
 800a940:	f7f5 fe28 	bl	8000594 <__aeabi_i2d>
 800a944:	4652      	mov	r2, sl
 800a946:	465b      	mov	r3, fp
 800a948:	f7f5 fe8e 	bl	8000668 <__aeabi_dmul>
 800a94c:	4b82      	ldr	r3, [pc, #520]	; (800ab58 <_dtoa_r+0x628>)
 800a94e:	2200      	movs	r2, #0
 800a950:	f7f5 fcd4 	bl	80002fc <__adddf3>
 800a954:	46d0      	mov	r8, sl
 800a956:	46d9      	mov	r9, fp
 800a958:	4682      	mov	sl, r0
 800a95a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a95e:	2e00      	cmp	r6, #0
 800a960:	d158      	bne.n	800aa14 <_dtoa_r+0x4e4>
 800a962:	4b7e      	ldr	r3, [pc, #504]	; (800ab5c <_dtoa_r+0x62c>)
 800a964:	2200      	movs	r2, #0
 800a966:	4640      	mov	r0, r8
 800a968:	4649      	mov	r1, r9
 800a96a:	f7f5 fcc5 	bl	80002f8 <__aeabi_dsub>
 800a96e:	4652      	mov	r2, sl
 800a970:	465b      	mov	r3, fp
 800a972:	4680      	mov	r8, r0
 800a974:	4689      	mov	r9, r1
 800a976:	f7f6 f907 	bl	8000b88 <__aeabi_dcmpgt>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	f040 8295 	bne.w	800aeaa <_dtoa_r+0x97a>
 800a980:	4652      	mov	r2, sl
 800a982:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a986:	4640      	mov	r0, r8
 800a988:	4649      	mov	r1, r9
 800a98a:	f7f6 f8df 	bl	8000b4c <__aeabi_dcmplt>
 800a98e:	2800      	cmp	r0, #0
 800a990:	f040 8289 	bne.w	800aea6 <_dtoa_r+0x976>
 800a994:	ec5b ab19 	vmov	sl, fp, d9
 800a998:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f2c0 8148 	blt.w	800ac30 <_dtoa_r+0x700>
 800a9a0:	9a00      	ldr	r2, [sp, #0]
 800a9a2:	2a0e      	cmp	r2, #14
 800a9a4:	f300 8144 	bgt.w	800ac30 <_dtoa_r+0x700>
 800a9a8:	4b67      	ldr	r3, [pc, #412]	; (800ab48 <_dtoa_r+0x618>)
 800a9aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f280 80d5 	bge.w	800ab64 <_dtoa_r+0x634>
 800a9ba:	9b03      	ldr	r3, [sp, #12]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f300 80d1 	bgt.w	800ab64 <_dtoa_r+0x634>
 800a9c2:	f040 826f 	bne.w	800aea4 <_dtoa_r+0x974>
 800a9c6:	4b65      	ldr	r3, [pc, #404]	; (800ab5c <_dtoa_r+0x62c>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	4640      	mov	r0, r8
 800a9cc:	4649      	mov	r1, r9
 800a9ce:	f7f5 fe4b 	bl	8000668 <__aeabi_dmul>
 800a9d2:	4652      	mov	r2, sl
 800a9d4:	465b      	mov	r3, fp
 800a9d6:	f7f6 f8cd 	bl	8000b74 <__aeabi_dcmpge>
 800a9da:	9e03      	ldr	r6, [sp, #12]
 800a9dc:	4637      	mov	r7, r6
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	f040 8245 	bne.w	800ae6e <_dtoa_r+0x93e>
 800a9e4:	9d01      	ldr	r5, [sp, #4]
 800a9e6:	2331      	movs	r3, #49	; 0x31
 800a9e8:	f805 3b01 	strb.w	r3, [r5], #1
 800a9ec:	9b00      	ldr	r3, [sp, #0]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	e240      	b.n	800ae76 <_dtoa_r+0x946>
 800a9f4:	07f2      	lsls	r2, r6, #31
 800a9f6:	d505      	bpl.n	800aa04 <_dtoa_r+0x4d4>
 800a9f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9fc:	f7f5 fe34 	bl	8000668 <__aeabi_dmul>
 800aa00:	3501      	adds	r5, #1
 800aa02:	2301      	movs	r3, #1
 800aa04:	1076      	asrs	r6, r6, #1
 800aa06:	3708      	adds	r7, #8
 800aa08:	e777      	b.n	800a8fa <_dtoa_r+0x3ca>
 800aa0a:	2502      	movs	r5, #2
 800aa0c:	e779      	b.n	800a902 <_dtoa_r+0x3d2>
 800aa0e:	9f00      	ldr	r7, [sp, #0]
 800aa10:	9e03      	ldr	r6, [sp, #12]
 800aa12:	e794      	b.n	800a93e <_dtoa_r+0x40e>
 800aa14:	9901      	ldr	r1, [sp, #4]
 800aa16:	4b4c      	ldr	r3, [pc, #304]	; (800ab48 <_dtoa_r+0x618>)
 800aa18:	4431      	add	r1, r6
 800aa1a:	910d      	str	r1, [sp, #52]	; 0x34
 800aa1c:	9908      	ldr	r1, [sp, #32]
 800aa1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa26:	2900      	cmp	r1, #0
 800aa28:	d043      	beq.n	800aab2 <_dtoa_r+0x582>
 800aa2a:	494d      	ldr	r1, [pc, #308]	; (800ab60 <_dtoa_r+0x630>)
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	f7f5 ff45 	bl	80008bc <__aeabi_ddiv>
 800aa32:	4652      	mov	r2, sl
 800aa34:	465b      	mov	r3, fp
 800aa36:	f7f5 fc5f 	bl	80002f8 <__aeabi_dsub>
 800aa3a:	9d01      	ldr	r5, [sp, #4]
 800aa3c:	4682      	mov	sl, r0
 800aa3e:	468b      	mov	fp, r1
 800aa40:	4649      	mov	r1, r9
 800aa42:	4640      	mov	r0, r8
 800aa44:	f7f6 f8c0 	bl	8000bc8 <__aeabi_d2iz>
 800aa48:	4606      	mov	r6, r0
 800aa4a:	f7f5 fda3 	bl	8000594 <__aeabi_i2d>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	4640      	mov	r0, r8
 800aa54:	4649      	mov	r1, r9
 800aa56:	f7f5 fc4f 	bl	80002f8 <__aeabi_dsub>
 800aa5a:	3630      	adds	r6, #48	; 0x30
 800aa5c:	f805 6b01 	strb.w	r6, [r5], #1
 800aa60:	4652      	mov	r2, sl
 800aa62:	465b      	mov	r3, fp
 800aa64:	4680      	mov	r8, r0
 800aa66:	4689      	mov	r9, r1
 800aa68:	f7f6 f870 	bl	8000b4c <__aeabi_dcmplt>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d163      	bne.n	800ab38 <_dtoa_r+0x608>
 800aa70:	4642      	mov	r2, r8
 800aa72:	464b      	mov	r3, r9
 800aa74:	4936      	ldr	r1, [pc, #216]	; (800ab50 <_dtoa_r+0x620>)
 800aa76:	2000      	movs	r0, #0
 800aa78:	f7f5 fc3e 	bl	80002f8 <__aeabi_dsub>
 800aa7c:	4652      	mov	r2, sl
 800aa7e:	465b      	mov	r3, fp
 800aa80:	f7f6 f864 	bl	8000b4c <__aeabi_dcmplt>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	f040 80b5 	bne.w	800abf4 <_dtoa_r+0x6c4>
 800aa8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa8c:	429d      	cmp	r5, r3
 800aa8e:	d081      	beq.n	800a994 <_dtoa_r+0x464>
 800aa90:	4b30      	ldr	r3, [pc, #192]	; (800ab54 <_dtoa_r+0x624>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	4650      	mov	r0, sl
 800aa96:	4659      	mov	r1, fp
 800aa98:	f7f5 fde6 	bl	8000668 <__aeabi_dmul>
 800aa9c:	4b2d      	ldr	r3, [pc, #180]	; (800ab54 <_dtoa_r+0x624>)
 800aa9e:	4682      	mov	sl, r0
 800aaa0:	468b      	mov	fp, r1
 800aaa2:	4640      	mov	r0, r8
 800aaa4:	4649      	mov	r1, r9
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f7f5 fdde 	bl	8000668 <__aeabi_dmul>
 800aaac:	4680      	mov	r8, r0
 800aaae:	4689      	mov	r9, r1
 800aab0:	e7c6      	b.n	800aa40 <_dtoa_r+0x510>
 800aab2:	4650      	mov	r0, sl
 800aab4:	4659      	mov	r1, fp
 800aab6:	f7f5 fdd7 	bl	8000668 <__aeabi_dmul>
 800aaba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aabc:	9d01      	ldr	r5, [sp, #4]
 800aabe:	930f      	str	r3, [sp, #60]	; 0x3c
 800aac0:	4682      	mov	sl, r0
 800aac2:	468b      	mov	fp, r1
 800aac4:	4649      	mov	r1, r9
 800aac6:	4640      	mov	r0, r8
 800aac8:	f7f6 f87e 	bl	8000bc8 <__aeabi_d2iz>
 800aacc:	4606      	mov	r6, r0
 800aace:	f7f5 fd61 	bl	8000594 <__aeabi_i2d>
 800aad2:	3630      	adds	r6, #48	; 0x30
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	4640      	mov	r0, r8
 800aada:	4649      	mov	r1, r9
 800aadc:	f7f5 fc0c 	bl	80002f8 <__aeabi_dsub>
 800aae0:	f805 6b01 	strb.w	r6, [r5], #1
 800aae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aae6:	429d      	cmp	r5, r3
 800aae8:	4680      	mov	r8, r0
 800aaea:	4689      	mov	r9, r1
 800aaec:	f04f 0200 	mov.w	r2, #0
 800aaf0:	d124      	bne.n	800ab3c <_dtoa_r+0x60c>
 800aaf2:	4b1b      	ldr	r3, [pc, #108]	; (800ab60 <_dtoa_r+0x630>)
 800aaf4:	4650      	mov	r0, sl
 800aaf6:	4659      	mov	r1, fp
 800aaf8:	f7f5 fc00 	bl	80002fc <__adddf3>
 800aafc:	4602      	mov	r2, r0
 800aafe:	460b      	mov	r3, r1
 800ab00:	4640      	mov	r0, r8
 800ab02:	4649      	mov	r1, r9
 800ab04:	f7f6 f840 	bl	8000b88 <__aeabi_dcmpgt>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d173      	bne.n	800abf4 <_dtoa_r+0x6c4>
 800ab0c:	4652      	mov	r2, sl
 800ab0e:	465b      	mov	r3, fp
 800ab10:	4913      	ldr	r1, [pc, #76]	; (800ab60 <_dtoa_r+0x630>)
 800ab12:	2000      	movs	r0, #0
 800ab14:	f7f5 fbf0 	bl	80002f8 <__aeabi_dsub>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4640      	mov	r0, r8
 800ab1e:	4649      	mov	r1, r9
 800ab20:	f7f6 f814 	bl	8000b4c <__aeabi_dcmplt>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	f43f af35 	beq.w	800a994 <_dtoa_r+0x464>
 800ab2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ab2c:	1e6b      	subs	r3, r5, #1
 800ab2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab34:	2b30      	cmp	r3, #48	; 0x30
 800ab36:	d0f8      	beq.n	800ab2a <_dtoa_r+0x5fa>
 800ab38:	9700      	str	r7, [sp, #0]
 800ab3a:	e049      	b.n	800abd0 <_dtoa_r+0x6a0>
 800ab3c:	4b05      	ldr	r3, [pc, #20]	; (800ab54 <_dtoa_r+0x624>)
 800ab3e:	f7f5 fd93 	bl	8000668 <__aeabi_dmul>
 800ab42:	4680      	mov	r8, r0
 800ab44:	4689      	mov	r9, r1
 800ab46:	e7bd      	b.n	800aac4 <_dtoa_r+0x594>
 800ab48:	0800cc60 	.word	0x0800cc60
 800ab4c:	0800cc38 	.word	0x0800cc38
 800ab50:	3ff00000 	.word	0x3ff00000
 800ab54:	40240000 	.word	0x40240000
 800ab58:	401c0000 	.word	0x401c0000
 800ab5c:	40140000 	.word	0x40140000
 800ab60:	3fe00000 	.word	0x3fe00000
 800ab64:	9d01      	ldr	r5, [sp, #4]
 800ab66:	4656      	mov	r6, sl
 800ab68:	465f      	mov	r7, fp
 800ab6a:	4642      	mov	r2, r8
 800ab6c:	464b      	mov	r3, r9
 800ab6e:	4630      	mov	r0, r6
 800ab70:	4639      	mov	r1, r7
 800ab72:	f7f5 fea3 	bl	80008bc <__aeabi_ddiv>
 800ab76:	f7f6 f827 	bl	8000bc8 <__aeabi_d2iz>
 800ab7a:	4682      	mov	sl, r0
 800ab7c:	f7f5 fd0a 	bl	8000594 <__aeabi_i2d>
 800ab80:	4642      	mov	r2, r8
 800ab82:	464b      	mov	r3, r9
 800ab84:	f7f5 fd70 	bl	8000668 <__aeabi_dmul>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	4639      	mov	r1, r7
 800ab90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ab94:	f7f5 fbb0 	bl	80002f8 <__aeabi_dsub>
 800ab98:	f805 6b01 	strb.w	r6, [r5], #1
 800ab9c:	9e01      	ldr	r6, [sp, #4]
 800ab9e:	9f03      	ldr	r7, [sp, #12]
 800aba0:	1bae      	subs	r6, r5, r6
 800aba2:	42b7      	cmp	r7, r6
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	d135      	bne.n	800ac16 <_dtoa_r+0x6e6>
 800abaa:	f7f5 fba7 	bl	80002fc <__adddf3>
 800abae:	4642      	mov	r2, r8
 800abb0:	464b      	mov	r3, r9
 800abb2:	4606      	mov	r6, r0
 800abb4:	460f      	mov	r7, r1
 800abb6:	f7f5 ffe7 	bl	8000b88 <__aeabi_dcmpgt>
 800abba:	b9d0      	cbnz	r0, 800abf2 <_dtoa_r+0x6c2>
 800abbc:	4642      	mov	r2, r8
 800abbe:	464b      	mov	r3, r9
 800abc0:	4630      	mov	r0, r6
 800abc2:	4639      	mov	r1, r7
 800abc4:	f7f5 ffb8 	bl	8000b38 <__aeabi_dcmpeq>
 800abc8:	b110      	cbz	r0, 800abd0 <_dtoa_r+0x6a0>
 800abca:	f01a 0f01 	tst.w	sl, #1
 800abce:	d110      	bne.n	800abf2 <_dtoa_r+0x6c2>
 800abd0:	4620      	mov	r0, r4
 800abd2:	ee18 1a10 	vmov	r1, s16
 800abd6:	f000 fd25 	bl	800b624 <_Bfree>
 800abda:	2300      	movs	r3, #0
 800abdc:	9800      	ldr	r0, [sp, #0]
 800abde:	702b      	strb	r3, [r5, #0]
 800abe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abe2:	3001      	adds	r0, #1
 800abe4:	6018      	str	r0, [r3, #0]
 800abe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f43f acf1 	beq.w	800a5d0 <_dtoa_r+0xa0>
 800abee:	601d      	str	r5, [r3, #0]
 800abf0:	e4ee      	b.n	800a5d0 <_dtoa_r+0xa0>
 800abf2:	9f00      	ldr	r7, [sp, #0]
 800abf4:	462b      	mov	r3, r5
 800abf6:	461d      	mov	r5, r3
 800abf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abfc:	2a39      	cmp	r2, #57	; 0x39
 800abfe:	d106      	bne.n	800ac0e <_dtoa_r+0x6de>
 800ac00:	9a01      	ldr	r2, [sp, #4]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d1f7      	bne.n	800abf6 <_dtoa_r+0x6c6>
 800ac06:	9901      	ldr	r1, [sp, #4]
 800ac08:	2230      	movs	r2, #48	; 0x30
 800ac0a:	3701      	adds	r7, #1
 800ac0c:	700a      	strb	r2, [r1, #0]
 800ac0e:	781a      	ldrb	r2, [r3, #0]
 800ac10:	3201      	adds	r2, #1
 800ac12:	701a      	strb	r2, [r3, #0]
 800ac14:	e790      	b.n	800ab38 <_dtoa_r+0x608>
 800ac16:	4ba6      	ldr	r3, [pc, #664]	; (800aeb0 <_dtoa_r+0x980>)
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f7f5 fd25 	bl	8000668 <__aeabi_dmul>
 800ac1e:	2200      	movs	r2, #0
 800ac20:	2300      	movs	r3, #0
 800ac22:	4606      	mov	r6, r0
 800ac24:	460f      	mov	r7, r1
 800ac26:	f7f5 ff87 	bl	8000b38 <__aeabi_dcmpeq>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d09d      	beq.n	800ab6a <_dtoa_r+0x63a>
 800ac2e:	e7cf      	b.n	800abd0 <_dtoa_r+0x6a0>
 800ac30:	9a08      	ldr	r2, [sp, #32]
 800ac32:	2a00      	cmp	r2, #0
 800ac34:	f000 80d7 	beq.w	800ade6 <_dtoa_r+0x8b6>
 800ac38:	9a06      	ldr	r2, [sp, #24]
 800ac3a:	2a01      	cmp	r2, #1
 800ac3c:	f300 80ba 	bgt.w	800adb4 <_dtoa_r+0x884>
 800ac40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac42:	2a00      	cmp	r2, #0
 800ac44:	f000 80b2 	beq.w	800adac <_dtoa_r+0x87c>
 800ac48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ac4c:	9e07      	ldr	r6, [sp, #28]
 800ac4e:	9d04      	ldr	r5, [sp, #16]
 800ac50:	9a04      	ldr	r2, [sp, #16]
 800ac52:	441a      	add	r2, r3
 800ac54:	9204      	str	r2, [sp, #16]
 800ac56:	9a05      	ldr	r2, [sp, #20]
 800ac58:	2101      	movs	r1, #1
 800ac5a:	441a      	add	r2, r3
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	9205      	str	r2, [sp, #20]
 800ac60:	f000 fd98 	bl	800b794 <__i2b>
 800ac64:	4607      	mov	r7, r0
 800ac66:	2d00      	cmp	r5, #0
 800ac68:	dd0c      	ble.n	800ac84 <_dtoa_r+0x754>
 800ac6a:	9b05      	ldr	r3, [sp, #20]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	dd09      	ble.n	800ac84 <_dtoa_r+0x754>
 800ac70:	42ab      	cmp	r3, r5
 800ac72:	9a04      	ldr	r2, [sp, #16]
 800ac74:	bfa8      	it	ge
 800ac76:	462b      	movge	r3, r5
 800ac78:	1ad2      	subs	r2, r2, r3
 800ac7a:	9204      	str	r2, [sp, #16]
 800ac7c:	9a05      	ldr	r2, [sp, #20]
 800ac7e:	1aed      	subs	r5, r5, r3
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	9305      	str	r3, [sp, #20]
 800ac84:	9b07      	ldr	r3, [sp, #28]
 800ac86:	b31b      	cbz	r3, 800acd0 <_dtoa_r+0x7a0>
 800ac88:	9b08      	ldr	r3, [sp, #32]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f000 80af 	beq.w	800adee <_dtoa_r+0x8be>
 800ac90:	2e00      	cmp	r6, #0
 800ac92:	dd13      	ble.n	800acbc <_dtoa_r+0x78c>
 800ac94:	4639      	mov	r1, r7
 800ac96:	4632      	mov	r2, r6
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 fe3b 	bl	800b914 <__pow5mult>
 800ac9e:	ee18 2a10 	vmov	r2, s16
 800aca2:	4601      	mov	r1, r0
 800aca4:	4607      	mov	r7, r0
 800aca6:	4620      	mov	r0, r4
 800aca8:	f000 fd8a 	bl	800b7c0 <__multiply>
 800acac:	ee18 1a10 	vmov	r1, s16
 800acb0:	4680      	mov	r8, r0
 800acb2:	4620      	mov	r0, r4
 800acb4:	f000 fcb6 	bl	800b624 <_Bfree>
 800acb8:	ee08 8a10 	vmov	s16, r8
 800acbc:	9b07      	ldr	r3, [sp, #28]
 800acbe:	1b9a      	subs	r2, r3, r6
 800acc0:	d006      	beq.n	800acd0 <_dtoa_r+0x7a0>
 800acc2:	ee18 1a10 	vmov	r1, s16
 800acc6:	4620      	mov	r0, r4
 800acc8:	f000 fe24 	bl	800b914 <__pow5mult>
 800accc:	ee08 0a10 	vmov	s16, r0
 800acd0:	2101      	movs	r1, #1
 800acd2:	4620      	mov	r0, r4
 800acd4:	f000 fd5e 	bl	800b794 <__i2b>
 800acd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acda:	2b00      	cmp	r3, #0
 800acdc:	4606      	mov	r6, r0
 800acde:	f340 8088 	ble.w	800adf2 <_dtoa_r+0x8c2>
 800ace2:	461a      	mov	r2, r3
 800ace4:	4601      	mov	r1, r0
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 fe14 	bl	800b914 <__pow5mult>
 800acec:	9b06      	ldr	r3, [sp, #24]
 800acee:	2b01      	cmp	r3, #1
 800acf0:	4606      	mov	r6, r0
 800acf2:	f340 8081 	ble.w	800adf8 <_dtoa_r+0x8c8>
 800acf6:	f04f 0800 	mov.w	r8, #0
 800acfa:	6933      	ldr	r3, [r6, #16]
 800acfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad00:	6918      	ldr	r0, [r3, #16]
 800ad02:	f000 fcf7 	bl	800b6f4 <__hi0bits>
 800ad06:	f1c0 0020 	rsb	r0, r0, #32
 800ad0a:	9b05      	ldr	r3, [sp, #20]
 800ad0c:	4418      	add	r0, r3
 800ad0e:	f010 001f 	ands.w	r0, r0, #31
 800ad12:	f000 8092 	beq.w	800ae3a <_dtoa_r+0x90a>
 800ad16:	f1c0 0320 	rsb	r3, r0, #32
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	f340 808a 	ble.w	800ae34 <_dtoa_r+0x904>
 800ad20:	f1c0 001c 	rsb	r0, r0, #28
 800ad24:	9b04      	ldr	r3, [sp, #16]
 800ad26:	4403      	add	r3, r0
 800ad28:	9304      	str	r3, [sp, #16]
 800ad2a:	9b05      	ldr	r3, [sp, #20]
 800ad2c:	4403      	add	r3, r0
 800ad2e:	4405      	add	r5, r0
 800ad30:	9305      	str	r3, [sp, #20]
 800ad32:	9b04      	ldr	r3, [sp, #16]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	dd07      	ble.n	800ad48 <_dtoa_r+0x818>
 800ad38:	ee18 1a10 	vmov	r1, s16
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 fe42 	bl	800b9c8 <__lshift>
 800ad44:	ee08 0a10 	vmov	s16, r0
 800ad48:	9b05      	ldr	r3, [sp, #20]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	dd05      	ble.n	800ad5a <_dtoa_r+0x82a>
 800ad4e:	4631      	mov	r1, r6
 800ad50:	461a      	mov	r2, r3
 800ad52:	4620      	mov	r0, r4
 800ad54:	f000 fe38 	bl	800b9c8 <__lshift>
 800ad58:	4606      	mov	r6, r0
 800ad5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d06e      	beq.n	800ae3e <_dtoa_r+0x90e>
 800ad60:	ee18 0a10 	vmov	r0, s16
 800ad64:	4631      	mov	r1, r6
 800ad66:	f000 fe9f 	bl	800baa8 <__mcmp>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	da67      	bge.n	800ae3e <_dtoa_r+0x90e>
 800ad6e:	9b00      	ldr	r3, [sp, #0]
 800ad70:	3b01      	subs	r3, #1
 800ad72:	ee18 1a10 	vmov	r1, s16
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	220a      	movs	r2, #10
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f000 fc73 	bl	800b668 <__multadd>
 800ad82:	9b08      	ldr	r3, [sp, #32]
 800ad84:	ee08 0a10 	vmov	s16, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 81b1 	beq.w	800b0f0 <_dtoa_r+0xbc0>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	4639      	mov	r1, r7
 800ad92:	220a      	movs	r2, #10
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 fc67 	bl	800b668 <__multadd>
 800ad9a:	9b02      	ldr	r3, [sp, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	4607      	mov	r7, r0
 800ada0:	f300 808e 	bgt.w	800aec0 <_dtoa_r+0x990>
 800ada4:	9b06      	ldr	r3, [sp, #24]
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	dc51      	bgt.n	800ae4e <_dtoa_r+0x91e>
 800adaa:	e089      	b.n	800aec0 <_dtoa_r+0x990>
 800adac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800adb2:	e74b      	b.n	800ac4c <_dtoa_r+0x71c>
 800adb4:	9b03      	ldr	r3, [sp, #12]
 800adb6:	1e5e      	subs	r6, r3, #1
 800adb8:	9b07      	ldr	r3, [sp, #28]
 800adba:	42b3      	cmp	r3, r6
 800adbc:	bfbf      	itttt	lt
 800adbe:	9b07      	ldrlt	r3, [sp, #28]
 800adc0:	9607      	strlt	r6, [sp, #28]
 800adc2:	1af2      	sublt	r2, r6, r3
 800adc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800adc6:	bfb6      	itet	lt
 800adc8:	189b      	addlt	r3, r3, r2
 800adca:	1b9e      	subge	r6, r3, r6
 800adcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800adce:	9b03      	ldr	r3, [sp, #12]
 800add0:	bfb8      	it	lt
 800add2:	2600      	movlt	r6, #0
 800add4:	2b00      	cmp	r3, #0
 800add6:	bfb7      	itett	lt
 800add8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800addc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ade0:	1a9d      	sublt	r5, r3, r2
 800ade2:	2300      	movlt	r3, #0
 800ade4:	e734      	b.n	800ac50 <_dtoa_r+0x720>
 800ade6:	9e07      	ldr	r6, [sp, #28]
 800ade8:	9d04      	ldr	r5, [sp, #16]
 800adea:	9f08      	ldr	r7, [sp, #32]
 800adec:	e73b      	b.n	800ac66 <_dtoa_r+0x736>
 800adee:	9a07      	ldr	r2, [sp, #28]
 800adf0:	e767      	b.n	800acc2 <_dtoa_r+0x792>
 800adf2:	9b06      	ldr	r3, [sp, #24]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	dc18      	bgt.n	800ae2a <_dtoa_r+0x8fa>
 800adf8:	f1ba 0f00 	cmp.w	sl, #0
 800adfc:	d115      	bne.n	800ae2a <_dtoa_r+0x8fa>
 800adfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae02:	b993      	cbnz	r3, 800ae2a <_dtoa_r+0x8fa>
 800ae04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae08:	0d1b      	lsrs	r3, r3, #20
 800ae0a:	051b      	lsls	r3, r3, #20
 800ae0c:	b183      	cbz	r3, 800ae30 <_dtoa_r+0x900>
 800ae0e:	9b04      	ldr	r3, [sp, #16]
 800ae10:	3301      	adds	r3, #1
 800ae12:	9304      	str	r3, [sp, #16]
 800ae14:	9b05      	ldr	r3, [sp, #20]
 800ae16:	3301      	adds	r3, #1
 800ae18:	9305      	str	r3, [sp, #20]
 800ae1a:	f04f 0801 	mov.w	r8, #1
 800ae1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f47f af6a 	bne.w	800acfa <_dtoa_r+0x7ca>
 800ae26:	2001      	movs	r0, #1
 800ae28:	e76f      	b.n	800ad0a <_dtoa_r+0x7da>
 800ae2a:	f04f 0800 	mov.w	r8, #0
 800ae2e:	e7f6      	b.n	800ae1e <_dtoa_r+0x8ee>
 800ae30:	4698      	mov	r8, r3
 800ae32:	e7f4      	b.n	800ae1e <_dtoa_r+0x8ee>
 800ae34:	f43f af7d 	beq.w	800ad32 <_dtoa_r+0x802>
 800ae38:	4618      	mov	r0, r3
 800ae3a:	301c      	adds	r0, #28
 800ae3c:	e772      	b.n	800ad24 <_dtoa_r+0x7f4>
 800ae3e:	9b03      	ldr	r3, [sp, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	dc37      	bgt.n	800aeb4 <_dtoa_r+0x984>
 800ae44:	9b06      	ldr	r3, [sp, #24]
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	dd34      	ble.n	800aeb4 <_dtoa_r+0x984>
 800ae4a:	9b03      	ldr	r3, [sp, #12]
 800ae4c:	9302      	str	r3, [sp, #8]
 800ae4e:	9b02      	ldr	r3, [sp, #8]
 800ae50:	b96b      	cbnz	r3, 800ae6e <_dtoa_r+0x93e>
 800ae52:	4631      	mov	r1, r6
 800ae54:	2205      	movs	r2, #5
 800ae56:	4620      	mov	r0, r4
 800ae58:	f000 fc06 	bl	800b668 <__multadd>
 800ae5c:	4601      	mov	r1, r0
 800ae5e:	4606      	mov	r6, r0
 800ae60:	ee18 0a10 	vmov	r0, s16
 800ae64:	f000 fe20 	bl	800baa8 <__mcmp>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	f73f adbb 	bgt.w	800a9e4 <_dtoa_r+0x4b4>
 800ae6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae70:	9d01      	ldr	r5, [sp, #4]
 800ae72:	43db      	mvns	r3, r3
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	f04f 0800 	mov.w	r8, #0
 800ae7a:	4631      	mov	r1, r6
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f000 fbd1 	bl	800b624 <_Bfree>
 800ae82:	2f00      	cmp	r7, #0
 800ae84:	f43f aea4 	beq.w	800abd0 <_dtoa_r+0x6a0>
 800ae88:	f1b8 0f00 	cmp.w	r8, #0
 800ae8c:	d005      	beq.n	800ae9a <_dtoa_r+0x96a>
 800ae8e:	45b8      	cmp	r8, r7
 800ae90:	d003      	beq.n	800ae9a <_dtoa_r+0x96a>
 800ae92:	4641      	mov	r1, r8
 800ae94:	4620      	mov	r0, r4
 800ae96:	f000 fbc5 	bl	800b624 <_Bfree>
 800ae9a:	4639      	mov	r1, r7
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	f000 fbc1 	bl	800b624 <_Bfree>
 800aea2:	e695      	b.n	800abd0 <_dtoa_r+0x6a0>
 800aea4:	2600      	movs	r6, #0
 800aea6:	4637      	mov	r7, r6
 800aea8:	e7e1      	b.n	800ae6e <_dtoa_r+0x93e>
 800aeaa:	9700      	str	r7, [sp, #0]
 800aeac:	4637      	mov	r7, r6
 800aeae:	e599      	b.n	800a9e4 <_dtoa_r+0x4b4>
 800aeb0:	40240000 	.word	0x40240000
 800aeb4:	9b08      	ldr	r3, [sp, #32]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f000 80ca 	beq.w	800b050 <_dtoa_r+0xb20>
 800aebc:	9b03      	ldr	r3, [sp, #12]
 800aebe:	9302      	str	r3, [sp, #8]
 800aec0:	2d00      	cmp	r5, #0
 800aec2:	dd05      	ble.n	800aed0 <_dtoa_r+0x9a0>
 800aec4:	4639      	mov	r1, r7
 800aec6:	462a      	mov	r2, r5
 800aec8:	4620      	mov	r0, r4
 800aeca:	f000 fd7d 	bl	800b9c8 <__lshift>
 800aece:	4607      	mov	r7, r0
 800aed0:	f1b8 0f00 	cmp.w	r8, #0
 800aed4:	d05b      	beq.n	800af8e <_dtoa_r+0xa5e>
 800aed6:	6879      	ldr	r1, [r7, #4]
 800aed8:	4620      	mov	r0, r4
 800aeda:	f000 fb63 	bl	800b5a4 <_Balloc>
 800aede:	4605      	mov	r5, r0
 800aee0:	b928      	cbnz	r0, 800aeee <_dtoa_r+0x9be>
 800aee2:	4b87      	ldr	r3, [pc, #540]	; (800b100 <_dtoa_r+0xbd0>)
 800aee4:	4602      	mov	r2, r0
 800aee6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aeea:	f7ff bb3b 	b.w	800a564 <_dtoa_r+0x34>
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	3202      	adds	r2, #2
 800aef2:	0092      	lsls	r2, r2, #2
 800aef4:	f107 010c 	add.w	r1, r7, #12
 800aef8:	300c      	adds	r0, #12
 800aefa:	f000 fb45 	bl	800b588 <memcpy>
 800aefe:	2201      	movs	r2, #1
 800af00:	4629      	mov	r1, r5
 800af02:	4620      	mov	r0, r4
 800af04:	f000 fd60 	bl	800b9c8 <__lshift>
 800af08:	9b01      	ldr	r3, [sp, #4]
 800af0a:	f103 0901 	add.w	r9, r3, #1
 800af0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800af12:	4413      	add	r3, r2
 800af14:	9305      	str	r3, [sp, #20]
 800af16:	f00a 0301 	and.w	r3, sl, #1
 800af1a:	46b8      	mov	r8, r7
 800af1c:	9304      	str	r3, [sp, #16]
 800af1e:	4607      	mov	r7, r0
 800af20:	4631      	mov	r1, r6
 800af22:	ee18 0a10 	vmov	r0, s16
 800af26:	f7ff fa77 	bl	800a418 <quorem>
 800af2a:	4641      	mov	r1, r8
 800af2c:	9002      	str	r0, [sp, #8]
 800af2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af32:	ee18 0a10 	vmov	r0, s16
 800af36:	f000 fdb7 	bl	800baa8 <__mcmp>
 800af3a:	463a      	mov	r2, r7
 800af3c:	9003      	str	r0, [sp, #12]
 800af3e:	4631      	mov	r1, r6
 800af40:	4620      	mov	r0, r4
 800af42:	f000 fdcd 	bl	800bae0 <__mdiff>
 800af46:	68c2      	ldr	r2, [r0, #12]
 800af48:	f109 3bff 	add.w	fp, r9, #4294967295
 800af4c:	4605      	mov	r5, r0
 800af4e:	bb02      	cbnz	r2, 800af92 <_dtoa_r+0xa62>
 800af50:	4601      	mov	r1, r0
 800af52:	ee18 0a10 	vmov	r0, s16
 800af56:	f000 fda7 	bl	800baa8 <__mcmp>
 800af5a:	4602      	mov	r2, r0
 800af5c:	4629      	mov	r1, r5
 800af5e:	4620      	mov	r0, r4
 800af60:	9207      	str	r2, [sp, #28]
 800af62:	f000 fb5f 	bl	800b624 <_Bfree>
 800af66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800af6a:	ea43 0102 	orr.w	r1, r3, r2
 800af6e:	9b04      	ldr	r3, [sp, #16]
 800af70:	430b      	orrs	r3, r1
 800af72:	464d      	mov	r5, r9
 800af74:	d10f      	bne.n	800af96 <_dtoa_r+0xa66>
 800af76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800af7a:	d02a      	beq.n	800afd2 <_dtoa_r+0xaa2>
 800af7c:	9b03      	ldr	r3, [sp, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	dd02      	ble.n	800af88 <_dtoa_r+0xa58>
 800af82:	9b02      	ldr	r3, [sp, #8]
 800af84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800af88:	f88b a000 	strb.w	sl, [fp]
 800af8c:	e775      	b.n	800ae7a <_dtoa_r+0x94a>
 800af8e:	4638      	mov	r0, r7
 800af90:	e7ba      	b.n	800af08 <_dtoa_r+0x9d8>
 800af92:	2201      	movs	r2, #1
 800af94:	e7e2      	b.n	800af5c <_dtoa_r+0xa2c>
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	db04      	blt.n	800afa6 <_dtoa_r+0xa76>
 800af9c:	9906      	ldr	r1, [sp, #24]
 800af9e:	430b      	orrs	r3, r1
 800afa0:	9904      	ldr	r1, [sp, #16]
 800afa2:	430b      	orrs	r3, r1
 800afa4:	d122      	bne.n	800afec <_dtoa_r+0xabc>
 800afa6:	2a00      	cmp	r2, #0
 800afa8:	ddee      	ble.n	800af88 <_dtoa_r+0xa58>
 800afaa:	ee18 1a10 	vmov	r1, s16
 800afae:	2201      	movs	r2, #1
 800afb0:	4620      	mov	r0, r4
 800afb2:	f000 fd09 	bl	800b9c8 <__lshift>
 800afb6:	4631      	mov	r1, r6
 800afb8:	ee08 0a10 	vmov	s16, r0
 800afbc:	f000 fd74 	bl	800baa8 <__mcmp>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	dc03      	bgt.n	800afcc <_dtoa_r+0xa9c>
 800afc4:	d1e0      	bne.n	800af88 <_dtoa_r+0xa58>
 800afc6:	f01a 0f01 	tst.w	sl, #1
 800afca:	d0dd      	beq.n	800af88 <_dtoa_r+0xa58>
 800afcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800afd0:	d1d7      	bne.n	800af82 <_dtoa_r+0xa52>
 800afd2:	2339      	movs	r3, #57	; 0x39
 800afd4:	f88b 3000 	strb.w	r3, [fp]
 800afd8:	462b      	mov	r3, r5
 800afda:	461d      	mov	r5, r3
 800afdc:	3b01      	subs	r3, #1
 800afde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800afe2:	2a39      	cmp	r2, #57	; 0x39
 800afe4:	d071      	beq.n	800b0ca <_dtoa_r+0xb9a>
 800afe6:	3201      	adds	r2, #1
 800afe8:	701a      	strb	r2, [r3, #0]
 800afea:	e746      	b.n	800ae7a <_dtoa_r+0x94a>
 800afec:	2a00      	cmp	r2, #0
 800afee:	dd07      	ble.n	800b000 <_dtoa_r+0xad0>
 800aff0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aff4:	d0ed      	beq.n	800afd2 <_dtoa_r+0xaa2>
 800aff6:	f10a 0301 	add.w	r3, sl, #1
 800affa:	f88b 3000 	strb.w	r3, [fp]
 800affe:	e73c      	b.n	800ae7a <_dtoa_r+0x94a>
 800b000:	9b05      	ldr	r3, [sp, #20]
 800b002:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b006:	4599      	cmp	r9, r3
 800b008:	d047      	beq.n	800b09a <_dtoa_r+0xb6a>
 800b00a:	ee18 1a10 	vmov	r1, s16
 800b00e:	2300      	movs	r3, #0
 800b010:	220a      	movs	r2, #10
 800b012:	4620      	mov	r0, r4
 800b014:	f000 fb28 	bl	800b668 <__multadd>
 800b018:	45b8      	cmp	r8, r7
 800b01a:	ee08 0a10 	vmov	s16, r0
 800b01e:	f04f 0300 	mov.w	r3, #0
 800b022:	f04f 020a 	mov.w	r2, #10
 800b026:	4641      	mov	r1, r8
 800b028:	4620      	mov	r0, r4
 800b02a:	d106      	bne.n	800b03a <_dtoa_r+0xb0a>
 800b02c:	f000 fb1c 	bl	800b668 <__multadd>
 800b030:	4680      	mov	r8, r0
 800b032:	4607      	mov	r7, r0
 800b034:	f109 0901 	add.w	r9, r9, #1
 800b038:	e772      	b.n	800af20 <_dtoa_r+0x9f0>
 800b03a:	f000 fb15 	bl	800b668 <__multadd>
 800b03e:	4639      	mov	r1, r7
 800b040:	4680      	mov	r8, r0
 800b042:	2300      	movs	r3, #0
 800b044:	220a      	movs	r2, #10
 800b046:	4620      	mov	r0, r4
 800b048:	f000 fb0e 	bl	800b668 <__multadd>
 800b04c:	4607      	mov	r7, r0
 800b04e:	e7f1      	b.n	800b034 <_dtoa_r+0xb04>
 800b050:	9b03      	ldr	r3, [sp, #12]
 800b052:	9302      	str	r3, [sp, #8]
 800b054:	9d01      	ldr	r5, [sp, #4]
 800b056:	ee18 0a10 	vmov	r0, s16
 800b05a:	4631      	mov	r1, r6
 800b05c:	f7ff f9dc 	bl	800a418 <quorem>
 800b060:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b064:	9b01      	ldr	r3, [sp, #4]
 800b066:	f805 ab01 	strb.w	sl, [r5], #1
 800b06a:	1aea      	subs	r2, r5, r3
 800b06c:	9b02      	ldr	r3, [sp, #8]
 800b06e:	4293      	cmp	r3, r2
 800b070:	dd09      	ble.n	800b086 <_dtoa_r+0xb56>
 800b072:	ee18 1a10 	vmov	r1, s16
 800b076:	2300      	movs	r3, #0
 800b078:	220a      	movs	r2, #10
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 faf4 	bl	800b668 <__multadd>
 800b080:	ee08 0a10 	vmov	s16, r0
 800b084:	e7e7      	b.n	800b056 <_dtoa_r+0xb26>
 800b086:	9b02      	ldr	r3, [sp, #8]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	bfc8      	it	gt
 800b08c:	461d      	movgt	r5, r3
 800b08e:	9b01      	ldr	r3, [sp, #4]
 800b090:	bfd8      	it	le
 800b092:	2501      	movle	r5, #1
 800b094:	441d      	add	r5, r3
 800b096:	f04f 0800 	mov.w	r8, #0
 800b09a:	ee18 1a10 	vmov	r1, s16
 800b09e:	2201      	movs	r2, #1
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f000 fc91 	bl	800b9c8 <__lshift>
 800b0a6:	4631      	mov	r1, r6
 800b0a8:	ee08 0a10 	vmov	s16, r0
 800b0ac:	f000 fcfc 	bl	800baa8 <__mcmp>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	dc91      	bgt.n	800afd8 <_dtoa_r+0xaa8>
 800b0b4:	d102      	bne.n	800b0bc <_dtoa_r+0xb8c>
 800b0b6:	f01a 0f01 	tst.w	sl, #1
 800b0ba:	d18d      	bne.n	800afd8 <_dtoa_r+0xaa8>
 800b0bc:	462b      	mov	r3, r5
 800b0be:	461d      	mov	r5, r3
 800b0c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0c4:	2a30      	cmp	r2, #48	; 0x30
 800b0c6:	d0fa      	beq.n	800b0be <_dtoa_r+0xb8e>
 800b0c8:	e6d7      	b.n	800ae7a <_dtoa_r+0x94a>
 800b0ca:	9a01      	ldr	r2, [sp, #4]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d184      	bne.n	800afda <_dtoa_r+0xaaa>
 800b0d0:	9b00      	ldr	r3, [sp, #0]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	2331      	movs	r3, #49	; 0x31
 800b0d8:	7013      	strb	r3, [r2, #0]
 800b0da:	e6ce      	b.n	800ae7a <_dtoa_r+0x94a>
 800b0dc:	4b09      	ldr	r3, [pc, #36]	; (800b104 <_dtoa_r+0xbd4>)
 800b0de:	f7ff ba95 	b.w	800a60c <_dtoa_r+0xdc>
 800b0e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f47f aa6e 	bne.w	800a5c6 <_dtoa_r+0x96>
 800b0ea:	4b07      	ldr	r3, [pc, #28]	; (800b108 <_dtoa_r+0xbd8>)
 800b0ec:	f7ff ba8e 	b.w	800a60c <_dtoa_r+0xdc>
 800b0f0:	9b02      	ldr	r3, [sp, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	dcae      	bgt.n	800b054 <_dtoa_r+0xb24>
 800b0f6:	9b06      	ldr	r3, [sp, #24]
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	f73f aea8 	bgt.w	800ae4e <_dtoa_r+0x91e>
 800b0fe:	e7a9      	b.n	800b054 <_dtoa_r+0xb24>
 800b100:	0800cb69 	.word	0x0800cb69
 800b104:	0800c92c 	.word	0x0800c92c
 800b108:	0800cb01 	.word	0x0800cb01

0800b10c <__sflush_r>:
 800b10c:	898a      	ldrh	r2, [r1, #12]
 800b10e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b112:	4605      	mov	r5, r0
 800b114:	0710      	lsls	r0, r2, #28
 800b116:	460c      	mov	r4, r1
 800b118:	d458      	bmi.n	800b1cc <__sflush_r+0xc0>
 800b11a:	684b      	ldr	r3, [r1, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	dc05      	bgt.n	800b12c <__sflush_r+0x20>
 800b120:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b122:	2b00      	cmp	r3, #0
 800b124:	dc02      	bgt.n	800b12c <__sflush_r+0x20>
 800b126:	2000      	movs	r0, #0
 800b128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b12c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b12e:	2e00      	cmp	r6, #0
 800b130:	d0f9      	beq.n	800b126 <__sflush_r+0x1a>
 800b132:	2300      	movs	r3, #0
 800b134:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b138:	682f      	ldr	r7, [r5, #0]
 800b13a:	602b      	str	r3, [r5, #0]
 800b13c:	d032      	beq.n	800b1a4 <__sflush_r+0x98>
 800b13e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b140:	89a3      	ldrh	r3, [r4, #12]
 800b142:	075a      	lsls	r2, r3, #29
 800b144:	d505      	bpl.n	800b152 <__sflush_r+0x46>
 800b146:	6863      	ldr	r3, [r4, #4]
 800b148:	1ac0      	subs	r0, r0, r3
 800b14a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b14c:	b10b      	cbz	r3, 800b152 <__sflush_r+0x46>
 800b14e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b150:	1ac0      	subs	r0, r0, r3
 800b152:	2300      	movs	r3, #0
 800b154:	4602      	mov	r2, r0
 800b156:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b158:	6a21      	ldr	r1, [r4, #32]
 800b15a:	4628      	mov	r0, r5
 800b15c:	47b0      	blx	r6
 800b15e:	1c43      	adds	r3, r0, #1
 800b160:	89a3      	ldrh	r3, [r4, #12]
 800b162:	d106      	bne.n	800b172 <__sflush_r+0x66>
 800b164:	6829      	ldr	r1, [r5, #0]
 800b166:	291d      	cmp	r1, #29
 800b168:	d82c      	bhi.n	800b1c4 <__sflush_r+0xb8>
 800b16a:	4a2a      	ldr	r2, [pc, #168]	; (800b214 <__sflush_r+0x108>)
 800b16c:	40ca      	lsrs	r2, r1
 800b16e:	07d6      	lsls	r6, r2, #31
 800b170:	d528      	bpl.n	800b1c4 <__sflush_r+0xb8>
 800b172:	2200      	movs	r2, #0
 800b174:	6062      	str	r2, [r4, #4]
 800b176:	04d9      	lsls	r1, r3, #19
 800b178:	6922      	ldr	r2, [r4, #16]
 800b17a:	6022      	str	r2, [r4, #0]
 800b17c:	d504      	bpl.n	800b188 <__sflush_r+0x7c>
 800b17e:	1c42      	adds	r2, r0, #1
 800b180:	d101      	bne.n	800b186 <__sflush_r+0x7a>
 800b182:	682b      	ldr	r3, [r5, #0]
 800b184:	b903      	cbnz	r3, 800b188 <__sflush_r+0x7c>
 800b186:	6560      	str	r0, [r4, #84]	; 0x54
 800b188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b18a:	602f      	str	r7, [r5, #0]
 800b18c:	2900      	cmp	r1, #0
 800b18e:	d0ca      	beq.n	800b126 <__sflush_r+0x1a>
 800b190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b194:	4299      	cmp	r1, r3
 800b196:	d002      	beq.n	800b19e <__sflush_r+0x92>
 800b198:	4628      	mov	r0, r5
 800b19a:	f000 fd9d 	bl	800bcd8 <_free_r>
 800b19e:	2000      	movs	r0, #0
 800b1a0:	6360      	str	r0, [r4, #52]	; 0x34
 800b1a2:	e7c1      	b.n	800b128 <__sflush_r+0x1c>
 800b1a4:	6a21      	ldr	r1, [r4, #32]
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	47b0      	blx	r6
 800b1ac:	1c41      	adds	r1, r0, #1
 800b1ae:	d1c7      	bne.n	800b140 <__sflush_r+0x34>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d0c4      	beq.n	800b140 <__sflush_r+0x34>
 800b1b6:	2b1d      	cmp	r3, #29
 800b1b8:	d001      	beq.n	800b1be <__sflush_r+0xb2>
 800b1ba:	2b16      	cmp	r3, #22
 800b1bc:	d101      	bne.n	800b1c2 <__sflush_r+0xb6>
 800b1be:	602f      	str	r7, [r5, #0]
 800b1c0:	e7b1      	b.n	800b126 <__sflush_r+0x1a>
 800b1c2:	89a3      	ldrh	r3, [r4, #12]
 800b1c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1c8:	81a3      	strh	r3, [r4, #12]
 800b1ca:	e7ad      	b.n	800b128 <__sflush_r+0x1c>
 800b1cc:	690f      	ldr	r7, [r1, #16]
 800b1ce:	2f00      	cmp	r7, #0
 800b1d0:	d0a9      	beq.n	800b126 <__sflush_r+0x1a>
 800b1d2:	0793      	lsls	r3, r2, #30
 800b1d4:	680e      	ldr	r6, [r1, #0]
 800b1d6:	bf08      	it	eq
 800b1d8:	694b      	ldreq	r3, [r1, #20]
 800b1da:	600f      	str	r7, [r1, #0]
 800b1dc:	bf18      	it	ne
 800b1de:	2300      	movne	r3, #0
 800b1e0:	eba6 0807 	sub.w	r8, r6, r7
 800b1e4:	608b      	str	r3, [r1, #8]
 800b1e6:	f1b8 0f00 	cmp.w	r8, #0
 800b1ea:	dd9c      	ble.n	800b126 <__sflush_r+0x1a>
 800b1ec:	6a21      	ldr	r1, [r4, #32]
 800b1ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1f0:	4643      	mov	r3, r8
 800b1f2:	463a      	mov	r2, r7
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	47b0      	blx	r6
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	dc06      	bgt.n	800b20a <__sflush_r+0xfe>
 800b1fc:	89a3      	ldrh	r3, [r4, #12]
 800b1fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b202:	81a3      	strh	r3, [r4, #12]
 800b204:	f04f 30ff 	mov.w	r0, #4294967295
 800b208:	e78e      	b.n	800b128 <__sflush_r+0x1c>
 800b20a:	4407      	add	r7, r0
 800b20c:	eba8 0800 	sub.w	r8, r8, r0
 800b210:	e7e9      	b.n	800b1e6 <__sflush_r+0xda>
 800b212:	bf00      	nop
 800b214:	20400001 	.word	0x20400001

0800b218 <_fflush_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	690b      	ldr	r3, [r1, #16]
 800b21c:	4605      	mov	r5, r0
 800b21e:	460c      	mov	r4, r1
 800b220:	b913      	cbnz	r3, 800b228 <_fflush_r+0x10>
 800b222:	2500      	movs	r5, #0
 800b224:	4628      	mov	r0, r5
 800b226:	bd38      	pop	{r3, r4, r5, pc}
 800b228:	b118      	cbz	r0, 800b232 <_fflush_r+0x1a>
 800b22a:	6983      	ldr	r3, [r0, #24]
 800b22c:	b90b      	cbnz	r3, 800b232 <_fflush_r+0x1a>
 800b22e:	f000 f887 	bl	800b340 <__sinit>
 800b232:	4b14      	ldr	r3, [pc, #80]	; (800b284 <_fflush_r+0x6c>)
 800b234:	429c      	cmp	r4, r3
 800b236:	d11b      	bne.n	800b270 <_fflush_r+0x58>
 800b238:	686c      	ldr	r4, [r5, #4]
 800b23a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d0ef      	beq.n	800b222 <_fflush_r+0xa>
 800b242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b244:	07d0      	lsls	r0, r2, #31
 800b246:	d404      	bmi.n	800b252 <_fflush_r+0x3a>
 800b248:	0599      	lsls	r1, r3, #22
 800b24a:	d402      	bmi.n	800b252 <_fflush_r+0x3a>
 800b24c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b24e:	f000 f92c 	bl	800b4aa <__retarget_lock_acquire_recursive>
 800b252:	4628      	mov	r0, r5
 800b254:	4621      	mov	r1, r4
 800b256:	f7ff ff59 	bl	800b10c <__sflush_r>
 800b25a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b25c:	07da      	lsls	r2, r3, #31
 800b25e:	4605      	mov	r5, r0
 800b260:	d4e0      	bmi.n	800b224 <_fflush_r+0xc>
 800b262:	89a3      	ldrh	r3, [r4, #12]
 800b264:	059b      	lsls	r3, r3, #22
 800b266:	d4dd      	bmi.n	800b224 <_fflush_r+0xc>
 800b268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b26a:	f000 f91f 	bl	800b4ac <__retarget_lock_release_recursive>
 800b26e:	e7d9      	b.n	800b224 <_fflush_r+0xc>
 800b270:	4b05      	ldr	r3, [pc, #20]	; (800b288 <_fflush_r+0x70>)
 800b272:	429c      	cmp	r4, r3
 800b274:	d101      	bne.n	800b27a <_fflush_r+0x62>
 800b276:	68ac      	ldr	r4, [r5, #8]
 800b278:	e7df      	b.n	800b23a <_fflush_r+0x22>
 800b27a:	4b04      	ldr	r3, [pc, #16]	; (800b28c <_fflush_r+0x74>)
 800b27c:	429c      	cmp	r4, r3
 800b27e:	bf08      	it	eq
 800b280:	68ec      	ldreq	r4, [r5, #12]
 800b282:	e7da      	b.n	800b23a <_fflush_r+0x22>
 800b284:	0800cb9c 	.word	0x0800cb9c
 800b288:	0800cbbc 	.word	0x0800cbbc
 800b28c:	0800cb7c 	.word	0x0800cb7c

0800b290 <std>:
 800b290:	2300      	movs	r3, #0
 800b292:	b510      	push	{r4, lr}
 800b294:	4604      	mov	r4, r0
 800b296:	e9c0 3300 	strd	r3, r3, [r0]
 800b29a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b29e:	6083      	str	r3, [r0, #8]
 800b2a0:	8181      	strh	r1, [r0, #12]
 800b2a2:	6643      	str	r3, [r0, #100]	; 0x64
 800b2a4:	81c2      	strh	r2, [r0, #14]
 800b2a6:	6183      	str	r3, [r0, #24]
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	2208      	movs	r2, #8
 800b2ac:	305c      	adds	r0, #92	; 0x5c
 800b2ae:	f7fe f9d1 	bl	8009654 <memset>
 800b2b2:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <std+0x38>)
 800b2b4:	6263      	str	r3, [r4, #36]	; 0x24
 800b2b6:	4b05      	ldr	r3, [pc, #20]	; (800b2cc <std+0x3c>)
 800b2b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2ba:	4b05      	ldr	r3, [pc, #20]	; (800b2d0 <std+0x40>)
 800b2bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2be:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <std+0x44>)
 800b2c0:	6224      	str	r4, [r4, #32]
 800b2c2:	6323      	str	r3, [r4, #48]	; 0x30
 800b2c4:	bd10      	pop	{r4, pc}
 800b2c6:	bf00      	nop
 800b2c8:	0800c425 	.word	0x0800c425
 800b2cc:	0800c447 	.word	0x0800c447
 800b2d0:	0800c47f 	.word	0x0800c47f
 800b2d4:	0800c4a3 	.word	0x0800c4a3

0800b2d8 <_cleanup_r>:
 800b2d8:	4901      	ldr	r1, [pc, #4]	; (800b2e0 <_cleanup_r+0x8>)
 800b2da:	f000 b8c1 	b.w	800b460 <_fwalk_reent>
 800b2de:	bf00      	nop
 800b2e0:	0800b219 	.word	0x0800b219

0800b2e4 <__sfmoreglue>:
 800b2e4:	b570      	push	{r4, r5, r6, lr}
 800b2e6:	2268      	movs	r2, #104	; 0x68
 800b2e8:	1e4d      	subs	r5, r1, #1
 800b2ea:	4355      	muls	r5, r2
 800b2ec:	460e      	mov	r6, r1
 800b2ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b2f2:	f000 fd5d 	bl	800bdb0 <_malloc_r>
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	b140      	cbz	r0, 800b30c <__sfmoreglue+0x28>
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	e9c0 1600 	strd	r1, r6, [r0]
 800b300:	300c      	adds	r0, #12
 800b302:	60a0      	str	r0, [r4, #8]
 800b304:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b308:	f7fe f9a4 	bl	8009654 <memset>
 800b30c:	4620      	mov	r0, r4
 800b30e:	bd70      	pop	{r4, r5, r6, pc}

0800b310 <__sfp_lock_acquire>:
 800b310:	4801      	ldr	r0, [pc, #4]	; (800b318 <__sfp_lock_acquire+0x8>)
 800b312:	f000 b8ca 	b.w	800b4aa <__retarget_lock_acquire_recursive>
 800b316:	bf00      	nop
 800b318:	2000054d 	.word	0x2000054d

0800b31c <__sfp_lock_release>:
 800b31c:	4801      	ldr	r0, [pc, #4]	; (800b324 <__sfp_lock_release+0x8>)
 800b31e:	f000 b8c5 	b.w	800b4ac <__retarget_lock_release_recursive>
 800b322:	bf00      	nop
 800b324:	2000054d 	.word	0x2000054d

0800b328 <__sinit_lock_acquire>:
 800b328:	4801      	ldr	r0, [pc, #4]	; (800b330 <__sinit_lock_acquire+0x8>)
 800b32a:	f000 b8be 	b.w	800b4aa <__retarget_lock_acquire_recursive>
 800b32e:	bf00      	nop
 800b330:	2000054e 	.word	0x2000054e

0800b334 <__sinit_lock_release>:
 800b334:	4801      	ldr	r0, [pc, #4]	; (800b33c <__sinit_lock_release+0x8>)
 800b336:	f000 b8b9 	b.w	800b4ac <__retarget_lock_release_recursive>
 800b33a:	bf00      	nop
 800b33c:	2000054e 	.word	0x2000054e

0800b340 <__sinit>:
 800b340:	b510      	push	{r4, lr}
 800b342:	4604      	mov	r4, r0
 800b344:	f7ff fff0 	bl	800b328 <__sinit_lock_acquire>
 800b348:	69a3      	ldr	r3, [r4, #24]
 800b34a:	b11b      	cbz	r3, 800b354 <__sinit+0x14>
 800b34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b350:	f7ff bff0 	b.w	800b334 <__sinit_lock_release>
 800b354:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b358:	6523      	str	r3, [r4, #80]	; 0x50
 800b35a:	4b13      	ldr	r3, [pc, #76]	; (800b3a8 <__sinit+0x68>)
 800b35c:	4a13      	ldr	r2, [pc, #76]	; (800b3ac <__sinit+0x6c>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	62a2      	str	r2, [r4, #40]	; 0x28
 800b362:	42a3      	cmp	r3, r4
 800b364:	bf04      	itt	eq
 800b366:	2301      	moveq	r3, #1
 800b368:	61a3      	streq	r3, [r4, #24]
 800b36a:	4620      	mov	r0, r4
 800b36c:	f000 f820 	bl	800b3b0 <__sfp>
 800b370:	6060      	str	r0, [r4, #4]
 800b372:	4620      	mov	r0, r4
 800b374:	f000 f81c 	bl	800b3b0 <__sfp>
 800b378:	60a0      	str	r0, [r4, #8]
 800b37a:	4620      	mov	r0, r4
 800b37c:	f000 f818 	bl	800b3b0 <__sfp>
 800b380:	2200      	movs	r2, #0
 800b382:	60e0      	str	r0, [r4, #12]
 800b384:	2104      	movs	r1, #4
 800b386:	6860      	ldr	r0, [r4, #4]
 800b388:	f7ff ff82 	bl	800b290 <std>
 800b38c:	68a0      	ldr	r0, [r4, #8]
 800b38e:	2201      	movs	r2, #1
 800b390:	2109      	movs	r1, #9
 800b392:	f7ff ff7d 	bl	800b290 <std>
 800b396:	68e0      	ldr	r0, [r4, #12]
 800b398:	2202      	movs	r2, #2
 800b39a:	2112      	movs	r1, #18
 800b39c:	f7ff ff78 	bl	800b290 <std>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	61a3      	str	r3, [r4, #24]
 800b3a4:	e7d2      	b.n	800b34c <__sinit+0xc>
 800b3a6:	bf00      	nop
 800b3a8:	0800c918 	.word	0x0800c918
 800b3ac:	0800b2d9 	.word	0x0800b2d9

0800b3b0 <__sfp>:
 800b3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b2:	4607      	mov	r7, r0
 800b3b4:	f7ff ffac 	bl	800b310 <__sfp_lock_acquire>
 800b3b8:	4b1e      	ldr	r3, [pc, #120]	; (800b434 <__sfp+0x84>)
 800b3ba:	681e      	ldr	r6, [r3, #0]
 800b3bc:	69b3      	ldr	r3, [r6, #24]
 800b3be:	b913      	cbnz	r3, 800b3c6 <__sfp+0x16>
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f7ff ffbd 	bl	800b340 <__sinit>
 800b3c6:	3648      	adds	r6, #72	; 0x48
 800b3c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	d503      	bpl.n	800b3d8 <__sfp+0x28>
 800b3d0:	6833      	ldr	r3, [r6, #0]
 800b3d2:	b30b      	cbz	r3, 800b418 <__sfp+0x68>
 800b3d4:	6836      	ldr	r6, [r6, #0]
 800b3d6:	e7f7      	b.n	800b3c8 <__sfp+0x18>
 800b3d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3dc:	b9d5      	cbnz	r5, 800b414 <__sfp+0x64>
 800b3de:	4b16      	ldr	r3, [pc, #88]	; (800b438 <__sfp+0x88>)
 800b3e0:	60e3      	str	r3, [r4, #12]
 800b3e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3e6:	6665      	str	r5, [r4, #100]	; 0x64
 800b3e8:	f000 f85e 	bl	800b4a8 <__retarget_lock_init_recursive>
 800b3ec:	f7ff ff96 	bl	800b31c <__sfp_lock_release>
 800b3f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b3f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b3f8:	6025      	str	r5, [r4, #0]
 800b3fa:	61a5      	str	r5, [r4, #24]
 800b3fc:	2208      	movs	r2, #8
 800b3fe:	4629      	mov	r1, r5
 800b400:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b404:	f7fe f926 	bl	8009654 <memset>
 800b408:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b40c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b410:	4620      	mov	r0, r4
 800b412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b414:	3468      	adds	r4, #104	; 0x68
 800b416:	e7d9      	b.n	800b3cc <__sfp+0x1c>
 800b418:	2104      	movs	r1, #4
 800b41a:	4638      	mov	r0, r7
 800b41c:	f7ff ff62 	bl	800b2e4 <__sfmoreglue>
 800b420:	4604      	mov	r4, r0
 800b422:	6030      	str	r0, [r6, #0]
 800b424:	2800      	cmp	r0, #0
 800b426:	d1d5      	bne.n	800b3d4 <__sfp+0x24>
 800b428:	f7ff ff78 	bl	800b31c <__sfp_lock_release>
 800b42c:	230c      	movs	r3, #12
 800b42e:	603b      	str	r3, [r7, #0]
 800b430:	e7ee      	b.n	800b410 <__sfp+0x60>
 800b432:	bf00      	nop
 800b434:	0800c918 	.word	0x0800c918
 800b438:	ffff0001 	.word	0xffff0001

0800b43c <fiprintf>:
 800b43c:	b40e      	push	{r1, r2, r3}
 800b43e:	b503      	push	{r0, r1, lr}
 800b440:	4601      	mov	r1, r0
 800b442:	ab03      	add	r3, sp, #12
 800b444:	4805      	ldr	r0, [pc, #20]	; (800b45c <fiprintf+0x20>)
 800b446:	f853 2b04 	ldr.w	r2, [r3], #4
 800b44a:	6800      	ldr	r0, [r0, #0]
 800b44c:	9301      	str	r3, [sp, #4]
 800b44e:	f000 fea9 	bl	800c1a4 <_vfiprintf_r>
 800b452:	b002      	add	sp, #8
 800b454:	f85d eb04 	ldr.w	lr, [sp], #4
 800b458:	b003      	add	sp, #12
 800b45a:	4770      	bx	lr
 800b45c:	200000a4 	.word	0x200000a4

0800b460 <_fwalk_reent>:
 800b460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b464:	4606      	mov	r6, r0
 800b466:	4688      	mov	r8, r1
 800b468:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b46c:	2700      	movs	r7, #0
 800b46e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b472:	f1b9 0901 	subs.w	r9, r9, #1
 800b476:	d505      	bpl.n	800b484 <_fwalk_reent+0x24>
 800b478:	6824      	ldr	r4, [r4, #0]
 800b47a:	2c00      	cmp	r4, #0
 800b47c:	d1f7      	bne.n	800b46e <_fwalk_reent+0xe>
 800b47e:	4638      	mov	r0, r7
 800b480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b484:	89ab      	ldrh	r3, [r5, #12]
 800b486:	2b01      	cmp	r3, #1
 800b488:	d907      	bls.n	800b49a <_fwalk_reent+0x3a>
 800b48a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b48e:	3301      	adds	r3, #1
 800b490:	d003      	beq.n	800b49a <_fwalk_reent+0x3a>
 800b492:	4629      	mov	r1, r5
 800b494:	4630      	mov	r0, r6
 800b496:	47c0      	blx	r8
 800b498:	4307      	orrs	r7, r0
 800b49a:	3568      	adds	r5, #104	; 0x68
 800b49c:	e7e9      	b.n	800b472 <_fwalk_reent+0x12>
	...

0800b4a0 <_localeconv_r>:
 800b4a0:	4800      	ldr	r0, [pc, #0]	; (800b4a4 <_localeconv_r+0x4>)
 800b4a2:	4770      	bx	lr
 800b4a4:	200001f8 	.word	0x200001f8

0800b4a8 <__retarget_lock_init_recursive>:
 800b4a8:	4770      	bx	lr

0800b4aa <__retarget_lock_acquire_recursive>:
 800b4aa:	4770      	bx	lr

0800b4ac <__retarget_lock_release_recursive>:
 800b4ac:	4770      	bx	lr

0800b4ae <__swhatbuf_r>:
 800b4ae:	b570      	push	{r4, r5, r6, lr}
 800b4b0:	460e      	mov	r6, r1
 800b4b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b6:	2900      	cmp	r1, #0
 800b4b8:	b096      	sub	sp, #88	; 0x58
 800b4ba:	4614      	mov	r4, r2
 800b4bc:	461d      	mov	r5, r3
 800b4be:	da08      	bge.n	800b4d2 <__swhatbuf_r+0x24>
 800b4c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	602a      	str	r2, [r5, #0]
 800b4c8:	061a      	lsls	r2, r3, #24
 800b4ca:	d410      	bmi.n	800b4ee <__swhatbuf_r+0x40>
 800b4cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4d0:	e00e      	b.n	800b4f0 <__swhatbuf_r+0x42>
 800b4d2:	466a      	mov	r2, sp
 800b4d4:	f001 f814 	bl	800c500 <_fstat_r>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	dbf1      	blt.n	800b4c0 <__swhatbuf_r+0x12>
 800b4dc:	9a01      	ldr	r2, [sp, #4]
 800b4de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4e6:	425a      	negs	r2, r3
 800b4e8:	415a      	adcs	r2, r3
 800b4ea:	602a      	str	r2, [r5, #0]
 800b4ec:	e7ee      	b.n	800b4cc <__swhatbuf_r+0x1e>
 800b4ee:	2340      	movs	r3, #64	; 0x40
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	6023      	str	r3, [r4, #0]
 800b4f4:	b016      	add	sp, #88	; 0x58
 800b4f6:	bd70      	pop	{r4, r5, r6, pc}

0800b4f8 <__smakebuf_r>:
 800b4f8:	898b      	ldrh	r3, [r1, #12]
 800b4fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4fc:	079d      	lsls	r5, r3, #30
 800b4fe:	4606      	mov	r6, r0
 800b500:	460c      	mov	r4, r1
 800b502:	d507      	bpl.n	800b514 <__smakebuf_r+0x1c>
 800b504:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	6123      	str	r3, [r4, #16]
 800b50c:	2301      	movs	r3, #1
 800b50e:	6163      	str	r3, [r4, #20]
 800b510:	b002      	add	sp, #8
 800b512:	bd70      	pop	{r4, r5, r6, pc}
 800b514:	ab01      	add	r3, sp, #4
 800b516:	466a      	mov	r2, sp
 800b518:	f7ff ffc9 	bl	800b4ae <__swhatbuf_r>
 800b51c:	9900      	ldr	r1, [sp, #0]
 800b51e:	4605      	mov	r5, r0
 800b520:	4630      	mov	r0, r6
 800b522:	f000 fc45 	bl	800bdb0 <_malloc_r>
 800b526:	b948      	cbnz	r0, 800b53c <__smakebuf_r+0x44>
 800b528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b52c:	059a      	lsls	r2, r3, #22
 800b52e:	d4ef      	bmi.n	800b510 <__smakebuf_r+0x18>
 800b530:	f023 0303 	bic.w	r3, r3, #3
 800b534:	f043 0302 	orr.w	r3, r3, #2
 800b538:	81a3      	strh	r3, [r4, #12]
 800b53a:	e7e3      	b.n	800b504 <__smakebuf_r+0xc>
 800b53c:	4b0d      	ldr	r3, [pc, #52]	; (800b574 <__smakebuf_r+0x7c>)
 800b53e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b540:	89a3      	ldrh	r3, [r4, #12]
 800b542:	6020      	str	r0, [r4, #0]
 800b544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b548:	81a3      	strh	r3, [r4, #12]
 800b54a:	9b00      	ldr	r3, [sp, #0]
 800b54c:	6163      	str	r3, [r4, #20]
 800b54e:	9b01      	ldr	r3, [sp, #4]
 800b550:	6120      	str	r0, [r4, #16]
 800b552:	b15b      	cbz	r3, 800b56c <__smakebuf_r+0x74>
 800b554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b558:	4630      	mov	r0, r6
 800b55a:	f000 ffe3 	bl	800c524 <_isatty_r>
 800b55e:	b128      	cbz	r0, 800b56c <__smakebuf_r+0x74>
 800b560:	89a3      	ldrh	r3, [r4, #12]
 800b562:	f023 0303 	bic.w	r3, r3, #3
 800b566:	f043 0301 	orr.w	r3, r3, #1
 800b56a:	81a3      	strh	r3, [r4, #12]
 800b56c:	89a0      	ldrh	r0, [r4, #12]
 800b56e:	4305      	orrs	r5, r0
 800b570:	81a5      	strh	r5, [r4, #12]
 800b572:	e7cd      	b.n	800b510 <__smakebuf_r+0x18>
 800b574:	0800b2d9 	.word	0x0800b2d9

0800b578 <malloc>:
 800b578:	4b02      	ldr	r3, [pc, #8]	; (800b584 <malloc+0xc>)
 800b57a:	4601      	mov	r1, r0
 800b57c:	6818      	ldr	r0, [r3, #0]
 800b57e:	f000 bc17 	b.w	800bdb0 <_malloc_r>
 800b582:	bf00      	nop
 800b584:	200000a4 	.word	0x200000a4

0800b588 <memcpy>:
 800b588:	440a      	add	r2, r1
 800b58a:	4291      	cmp	r1, r2
 800b58c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b590:	d100      	bne.n	800b594 <memcpy+0xc>
 800b592:	4770      	bx	lr
 800b594:	b510      	push	{r4, lr}
 800b596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b59a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b59e:	4291      	cmp	r1, r2
 800b5a0:	d1f9      	bne.n	800b596 <memcpy+0xe>
 800b5a2:	bd10      	pop	{r4, pc}

0800b5a4 <_Balloc>:
 800b5a4:	b570      	push	{r4, r5, r6, lr}
 800b5a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	460d      	mov	r5, r1
 800b5ac:	b976      	cbnz	r6, 800b5cc <_Balloc+0x28>
 800b5ae:	2010      	movs	r0, #16
 800b5b0:	f7ff ffe2 	bl	800b578 <malloc>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	6260      	str	r0, [r4, #36]	; 0x24
 800b5b8:	b920      	cbnz	r0, 800b5c4 <_Balloc+0x20>
 800b5ba:	4b18      	ldr	r3, [pc, #96]	; (800b61c <_Balloc+0x78>)
 800b5bc:	4818      	ldr	r0, [pc, #96]	; (800b620 <_Balloc+0x7c>)
 800b5be:	2166      	movs	r1, #102	; 0x66
 800b5c0:	f7fe ff0c 	bl	800a3dc <__assert_func>
 800b5c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5c8:	6006      	str	r6, [r0, #0]
 800b5ca:	60c6      	str	r6, [r0, #12]
 800b5cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b5ce:	68f3      	ldr	r3, [r6, #12]
 800b5d0:	b183      	cbz	r3, 800b5f4 <_Balloc+0x50>
 800b5d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5da:	b9b8      	cbnz	r0, 800b60c <_Balloc+0x68>
 800b5dc:	2101      	movs	r1, #1
 800b5de:	fa01 f605 	lsl.w	r6, r1, r5
 800b5e2:	1d72      	adds	r2, r6, #5
 800b5e4:	0092      	lsls	r2, r2, #2
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f000 fb60 	bl	800bcac <_calloc_r>
 800b5ec:	b160      	cbz	r0, 800b608 <_Balloc+0x64>
 800b5ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5f2:	e00e      	b.n	800b612 <_Balloc+0x6e>
 800b5f4:	2221      	movs	r2, #33	; 0x21
 800b5f6:	2104      	movs	r1, #4
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f000 fb57 	bl	800bcac <_calloc_r>
 800b5fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b600:	60f0      	str	r0, [r6, #12]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1e4      	bne.n	800b5d2 <_Balloc+0x2e>
 800b608:	2000      	movs	r0, #0
 800b60a:	bd70      	pop	{r4, r5, r6, pc}
 800b60c:	6802      	ldr	r2, [r0, #0]
 800b60e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b612:	2300      	movs	r3, #0
 800b614:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b618:	e7f7      	b.n	800b60a <_Balloc+0x66>
 800b61a:	bf00      	nop
 800b61c:	0800c950 	.word	0x0800c950
 800b620:	0800cbdc 	.word	0x0800cbdc

0800b624 <_Bfree>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b628:	4605      	mov	r5, r0
 800b62a:	460c      	mov	r4, r1
 800b62c:	b976      	cbnz	r6, 800b64c <_Bfree+0x28>
 800b62e:	2010      	movs	r0, #16
 800b630:	f7ff ffa2 	bl	800b578 <malloc>
 800b634:	4602      	mov	r2, r0
 800b636:	6268      	str	r0, [r5, #36]	; 0x24
 800b638:	b920      	cbnz	r0, 800b644 <_Bfree+0x20>
 800b63a:	4b09      	ldr	r3, [pc, #36]	; (800b660 <_Bfree+0x3c>)
 800b63c:	4809      	ldr	r0, [pc, #36]	; (800b664 <_Bfree+0x40>)
 800b63e:	218a      	movs	r1, #138	; 0x8a
 800b640:	f7fe fecc 	bl	800a3dc <__assert_func>
 800b644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b648:	6006      	str	r6, [r0, #0]
 800b64a:	60c6      	str	r6, [r0, #12]
 800b64c:	b13c      	cbz	r4, 800b65e <_Bfree+0x3a>
 800b64e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b650:	6862      	ldr	r2, [r4, #4]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b658:	6021      	str	r1, [r4, #0]
 800b65a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b65e:	bd70      	pop	{r4, r5, r6, pc}
 800b660:	0800c950 	.word	0x0800c950
 800b664:	0800cbdc 	.word	0x0800cbdc

0800b668 <__multadd>:
 800b668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b66c:	690d      	ldr	r5, [r1, #16]
 800b66e:	4607      	mov	r7, r0
 800b670:	460c      	mov	r4, r1
 800b672:	461e      	mov	r6, r3
 800b674:	f101 0c14 	add.w	ip, r1, #20
 800b678:	2000      	movs	r0, #0
 800b67a:	f8dc 3000 	ldr.w	r3, [ip]
 800b67e:	b299      	uxth	r1, r3
 800b680:	fb02 6101 	mla	r1, r2, r1, r6
 800b684:	0c1e      	lsrs	r6, r3, #16
 800b686:	0c0b      	lsrs	r3, r1, #16
 800b688:	fb02 3306 	mla	r3, r2, r6, r3
 800b68c:	b289      	uxth	r1, r1
 800b68e:	3001      	adds	r0, #1
 800b690:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b694:	4285      	cmp	r5, r0
 800b696:	f84c 1b04 	str.w	r1, [ip], #4
 800b69a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b69e:	dcec      	bgt.n	800b67a <__multadd+0x12>
 800b6a0:	b30e      	cbz	r6, 800b6e6 <__multadd+0x7e>
 800b6a2:	68a3      	ldr	r3, [r4, #8]
 800b6a4:	42ab      	cmp	r3, r5
 800b6a6:	dc19      	bgt.n	800b6dc <__multadd+0x74>
 800b6a8:	6861      	ldr	r1, [r4, #4]
 800b6aa:	4638      	mov	r0, r7
 800b6ac:	3101      	adds	r1, #1
 800b6ae:	f7ff ff79 	bl	800b5a4 <_Balloc>
 800b6b2:	4680      	mov	r8, r0
 800b6b4:	b928      	cbnz	r0, 800b6c2 <__multadd+0x5a>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	4b0c      	ldr	r3, [pc, #48]	; (800b6ec <__multadd+0x84>)
 800b6ba:	480d      	ldr	r0, [pc, #52]	; (800b6f0 <__multadd+0x88>)
 800b6bc:	21b5      	movs	r1, #181	; 0xb5
 800b6be:	f7fe fe8d 	bl	800a3dc <__assert_func>
 800b6c2:	6922      	ldr	r2, [r4, #16]
 800b6c4:	3202      	adds	r2, #2
 800b6c6:	f104 010c 	add.w	r1, r4, #12
 800b6ca:	0092      	lsls	r2, r2, #2
 800b6cc:	300c      	adds	r0, #12
 800b6ce:	f7ff ff5b 	bl	800b588 <memcpy>
 800b6d2:	4621      	mov	r1, r4
 800b6d4:	4638      	mov	r0, r7
 800b6d6:	f7ff ffa5 	bl	800b624 <_Bfree>
 800b6da:	4644      	mov	r4, r8
 800b6dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6e0:	3501      	adds	r5, #1
 800b6e2:	615e      	str	r6, [r3, #20]
 800b6e4:	6125      	str	r5, [r4, #16]
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ec:	0800cb69 	.word	0x0800cb69
 800b6f0:	0800cbdc 	.word	0x0800cbdc

0800b6f4 <__hi0bits>:
 800b6f4:	0c03      	lsrs	r3, r0, #16
 800b6f6:	041b      	lsls	r3, r3, #16
 800b6f8:	b9d3      	cbnz	r3, 800b730 <__hi0bits+0x3c>
 800b6fa:	0400      	lsls	r0, r0, #16
 800b6fc:	2310      	movs	r3, #16
 800b6fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b702:	bf04      	itt	eq
 800b704:	0200      	lsleq	r0, r0, #8
 800b706:	3308      	addeq	r3, #8
 800b708:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b70c:	bf04      	itt	eq
 800b70e:	0100      	lsleq	r0, r0, #4
 800b710:	3304      	addeq	r3, #4
 800b712:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b716:	bf04      	itt	eq
 800b718:	0080      	lsleq	r0, r0, #2
 800b71a:	3302      	addeq	r3, #2
 800b71c:	2800      	cmp	r0, #0
 800b71e:	db05      	blt.n	800b72c <__hi0bits+0x38>
 800b720:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b724:	f103 0301 	add.w	r3, r3, #1
 800b728:	bf08      	it	eq
 800b72a:	2320      	moveq	r3, #32
 800b72c:	4618      	mov	r0, r3
 800b72e:	4770      	bx	lr
 800b730:	2300      	movs	r3, #0
 800b732:	e7e4      	b.n	800b6fe <__hi0bits+0xa>

0800b734 <__lo0bits>:
 800b734:	6803      	ldr	r3, [r0, #0]
 800b736:	f013 0207 	ands.w	r2, r3, #7
 800b73a:	4601      	mov	r1, r0
 800b73c:	d00b      	beq.n	800b756 <__lo0bits+0x22>
 800b73e:	07da      	lsls	r2, r3, #31
 800b740:	d423      	bmi.n	800b78a <__lo0bits+0x56>
 800b742:	0798      	lsls	r0, r3, #30
 800b744:	bf49      	itett	mi
 800b746:	085b      	lsrmi	r3, r3, #1
 800b748:	089b      	lsrpl	r3, r3, #2
 800b74a:	2001      	movmi	r0, #1
 800b74c:	600b      	strmi	r3, [r1, #0]
 800b74e:	bf5c      	itt	pl
 800b750:	600b      	strpl	r3, [r1, #0]
 800b752:	2002      	movpl	r0, #2
 800b754:	4770      	bx	lr
 800b756:	b298      	uxth	r0, r3
 800b758:	b9a8      	cbnz	r0, 800b786 <__lo0bits+0x52>
 800b75a:	0c1b      	lsrs	r3, r3, #16
 800b75c:	2010      	movs	r0, #16
 800b75e:	b2da      	uxtb	r2, r3
 800b760:	b90a      	cbnz	r2, 800b766 <__lo0bits+0x32>
 800b762:	3008      	adds	r0, #8
 800b764:	0a1b      	lsrs	r3, r3, #8
 800b766:	071a      	lsls	r2, r3, #28
 800b768:	bf04      	itt	eq
 800b76a:	091b      	lsreq	r3, r3, #4
 800b76c:	3004      	addeq	r0, #4
 800b76e:	079a      	lsls	r2, r3, #30
 800b770:	bf04      	itt	eq
 800b772:	089b      	lsreq	r3, r3, #2
 800b774:	3002      	addeq	r0, #2
 800b776:	07da      	lsls	r2, r3, #31
 800b778:	d403      	bmi.n	800b782 <__lo0bits+0x4e>
 800b77a:	085b      	lsrs	r3, r3, #1
 800b77c:	f100 0001 	add.w	r0, r0, #1
 800b780:	d005      	beq.n	800b78e <__lo0bits+0x5a>
 800b782:	600b      	str	r3, [r1, #0]
 800b784:	4770      	bx	lr
 800b786:	4610      	mov	r0, r2
 800b788:	e7e9      	b.n	800b75e <__lo0bits+0x2a>
 800b78a:	2000      	movs	r0, #0
 800b78c:	4770      	bx	lr
 800b78e:	2020      	movs	r0, #32
 800b790:	4770      	bx	lr
	...

0800b794 <__i2b>:
 800b794:	b510      	push	{r4, lr}
 800b796:	460c      	mov	r4, r1
 800b798:	2101      	movs	r1, #1
 800b79a:	f7ff ff03 	bl	800b5a4 <_Balloc>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	b928      	cbnz	r0, 800b7ae <__i2b+0x1a>
 800b7a2:	4b05      	ldr	r3, [pc, #20]	; (800b7b8 <__i2b+0x24>)
 800b7a4:	4805      	ldr	r0, [pc, #20]	; (800b7bc <__i2b+0x28>)
 800b7a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b7aa:	f7fe fe17 	bl	800a3dc <__assert_func>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	6144      	str	r4, [r0, #20]
 800b7b2:	6103      	str	r3, [r0, #16]
 800b7b4:	bd10      	pop	{r4, pc}
 800b7b6:	bf00      	nop
 800b7b8:	0800cb69 	.word	0x0800cb69
 800b7bc:	0800cbdc 	.word	0x0800cbdc

0800b7c0 <__multiply>:
 800b7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c4:	4691      	mov	r9, r2
 800b7c6:	690a      	ldr	r2, [r1, #16]
 800b7c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	bfb8      	it	lt
 800b7d0:	460b      	movlt	r3, r1
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	bfbc      	itt	lt
 800b7d6:	464c      	movlt	r4, r9
 800b7d8:	4699      	movlt	r9, r3
 800b7da:	6927      	ldr	r7, [r4, #16]
 800b7dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b7e0:	68a3      	ldr	r3, [r4, #8]
 800b7e2:	6861      	ldr	r1, [r4, #4]
 800b7e4:	eb07 060a 	add.w	r6, r7, sl
 800b7e8:	42b3      	cmp	r3, r6
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	bfb8      	it	lt
 800b7ee:	3101      	addlt	r1, #1
 800b7f0:	f7ff fed8 	bl	800b5a4 <_Balloc>
 800b7f4:	b930      	cbnz	r0, 800b804 <__multiply+0x44>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	4b44      	ldr	r3, [pc, #272]	; (800b90c <__multiply+0x14c>)
 800b7fa:	4845      	ldr	r0, [pc, #276]	; (800b910 <__multiply+0x150>)
 800b7fc:	f240 115d 	movw	r1, #349	; 0x15d
 800b800:	f7fe fdec 	bl	800a3dc <__assert_func>
 800b804:	f100 0514 	add.w	r5, r0, #20
 800b808:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b80c:	462b      	mov	r3, r5
 800b80e:	2200      	movs	r2, #0
 800b810:	4543      	cmp	r3, r8
 800b812:	d321      	bcc.n	800b858 <__multiply+0x98>
 800b814:	f104 0314 	add.w	r3, r4, #20
 800b818:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b81c:	f109 0314 	add.w	r3, r9, #20
 800b820:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b824:	9202      	str	r2, [sp, #8]
 800b826:	1b3a      	subs	r2, r7, r4
 800b828:	3a15      	subs	r2, #21
 800b82a:	f022 0203 	bic.w	r2, r2, #3
 800b82e:	3204      	adds	r2, #4
 800b830:	f104 0115 	add.w	r1, r4, #21
 800b834:	428f      	cmp	r7, r1
 800b836:	bf38      	it	cc
 800b838:	2204      	movcc	r2, #4
 800b83a:	9201      	str	r2, [sp, #4]
 800b83c:	9a02      	ldr	r2, [sp, #8]
 800b83e:	9303      	str	r3, [sp, #12]
 800b840:	429a      	cmp	r2, r3
 800b842:	d80c      	bhi.n	800b85e <__multiply+0x9e>
 800b844:	2e00      	cmp	r6, #0
 800b846:	dd03      	ble.n	800b850 <__multiply+0x90>
 800b848:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d05a      	beq.n	800b906 <__multiply+0x146>
 800b850:	6106      	str	r6, [r0, #16]
 800b852:	b005      	add	sp, #20
 800b854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b858:	f843 2b04 	str.w	r2, [r3], #4
 800b85c:	e7d8      	b.n	800b810 <__multiply+0x50>
 800b85e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b862:	f1ba 0f00 	cmp.w	sl, #0
 800b866:	d024      	beq.n	800b8b2 <__multiply+0xf2>
 800b868:	f104 0e14 	add.w	lr, r4, #20
 800b86c:	46a9      	mov	r9, r5
 800b86e:	f04f 0c00 	mov.w	ip, #0
 800b872:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b876:	f8d9 1000 	ldr.w	r1, [r9]
 800b87a:	fa1f fb82 	uxth.w	fp, r2
 800b87e:	b289      	uxth	r1, r1
 800b880:	fb0a 110b 	mla	r1, sl, fp, r1
 800b884:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b888:	f8d9 2000 	ldr.w	r2, [r9]
 800b88c:	4461      	add	r1, ip
 800b88e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b892:	fb0a c20b 	mla	r2, sl, fp, ip
 800b896:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b89a:	b289      	uxth	r1, r1
 800b89c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8a0:	4577      	cmp	r7, lr
 800b8a2:	f849 1b04 	str.w	r1, [r9], #4
 800b8a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8aa:	d8e2      	bhi.n	800b872 <__multiply+0xb2>
 800b8ac:	9a01      	ldr	r2, [sp, #4]
 800b8ae:	f845 c002 	str.w	ip, [r5, r2]
 800b8b2:	9a03      	ldr	r2, [sp, #12]
 800b8b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b8b8:	3304      	adds	r3, #4
 800b8ba:	f1b9 0f00 	cmp.w	r9, #0
 800b8be:	d020      	beq.n	800b902 <__multiply+0x142>
 800b8c0:	6829      	ldr	r1, [r5, #0]
 800b8c2:	f104 0c14 	add.w	ip, r4, #20
 800b8c6:	46ae      	mov	lr, r5
 800b8c8:	f04f 0a00 	mov.w	sl, #0
 800b8cc:	f8bc b000 	ldrh.w	fp, [ip]
 800b8d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b8d4:	fb09 220b 	mla	r2, r9, fp, r2
 800b8d8:	4492      	add	sl, r2
 800b8da:	b289      	uxth	r1, r1
 800b8dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b8e0:	f84e 1b04 	str.w	r1, [lr], #4
 800b8e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b8e8:	f8be 1000 	ldrh.w	r1, [lr]
 800b8ec:	0c12      	lsrs	r2, r2, #16
 800b8ee:	fb09 1102 	mla	r1, r9, r2, r1
 800b8f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b8f6:	4567      	cmp	r7, ip
 800b8f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8fc:	d8e6      	bhi.n	800b8cc <__multiply+0x10c>
 800b8fe:	9a01      	ldr	r2, [sp, #4]
 800b900:	50a9      	str	r1, [r5, r2]
 800b902:	3504      	adds	r5, #4
 800b904:	e79a      	b.n	800b83c <__multiply+0x7c>
 800b906:	3e01      	subs	r6, #1
 800b908:	e79c      	b.n	800b844 <__multiply+0x84>
 800b90a:	bf00      	nop
 800b90c:	0800cb69 	.word	0x0800cb69
 800b910:	0800cbdc 	.word	0x0800cbdc

0800b914 <__pow5mult>:
 800b914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b918:	4615      	mov	r5, r2
 800b91a:	f012 0203 	ands.w	r2, r2, #3
 800b91e:	4606      	mov	r6, r0
 800b920:	460f      	mov	r7, r1
 800b922:	d007      	beq.n	800b934 <__pow5mult+0x20>
 800b924:	4c25      	ldr	r4, [pc, #148]	; (800b9bc <__pow5mult+0xa8>)
 800b926:	3a01      	subs	r2, #1
 800b928:	2300      	movs	r3, #0
 800b92a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b92e:	f7ff fe9b 	bl	800b668 <__multadd>
 800b932:	4607      	mov	r7, r0
 800b934:	10ad      	asrs	r5, r5, #2
 800b936:	d03d      	beq.n	800b9b4 <__pow5mult+0xa0>
 800b938:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b93a:	b97c      	cbnz	r4, 800b95c <__pow5mult+0x48>
 800b93c:	2010      	movs	r0, #16
 800b93e:	f7ff fe1b 	bl	800b578 <malloc>
 800b942:	4602      	mov	r2, r0
 800b944:	6270      	str	r0, [r6, #36]	; 0x24
 800b946:	b928      	cbnz	r0, 800b954 <__pow5mult+0x40>
 800b948:	4b1d      	ldr	r3, [pc, #116]	; (800b9c0 <__pow5mult+0xac>)
 800b94a:	481e      	ldr	r0, [pc, #120]	; (800b9c4 <__pow5mult+0xb0>)
 800b94c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b950:	f7fe fd44 	bl	800a3dc <__assert_func>
 800b954:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b958:	6004      	str	r4, [r0, #0]
 800b95a:	60c4      	str	r4, [r0, #12]
 800b95c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b960:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b964:	b94c      	cbnz	r4, 800b97a <__pow5mult+0x66>
 800b966:	f240 2171 	movw	r1, #625	; 0x271
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7ff ff12 	bl	800b794 <__i2b>
 800b970:	2300      	movs	r3, #0
 800b972:	f8c8 0008 	str.w	r0, [r8, #8]
 800b976:	4604      	mov	r4, r0
 800b978:	6003      	str	r3, [r0, #0]
 800b97a:	f04f 0900 	mov.w	r9, #0
 800b97e:	07eb      	lsls	r3, r5, #31
 800b980:	d50a      	bpl.n	800b998 <__pow5mult+0x84>
 800b982:	4639      	mov	r1, r7
 800b984:	4622      	mov	r2, r4
 800b986:	4630      	mov	r0, r6
 800b988:	f7ff ff1a 	bl	800b7c0 <__multiply>
 800b98c:	4639      	mov	r1, r7
 800b98e:	4680      	mov	r8, r0
 800b990:	4630      	mov	r0, r6
 800b992:	f7ff fe47 	bl	800b624 <_Bfree>
 800b996:	4647      	mov	r7, r8
 800b998:	106d      	asrs	r5, r5, #1
 800b99a:	d00b      	beq.n	800b9b4 <__pow5mult+0xa0>
 800b99c:	6820      	ldr	r0, [r4, #0]
 800b99e:	b938      	cbnz	r0, 800b9b0 <__pow5mult+0x9c>
 800b9a0:	4622      	mov	r2, r4
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	f7ff ff0b 	bl	800b7c0 <__multiply>
 800b9aa:	6020      	str	r0, [r4, #0]
 800b9ac:	f8c0 9000 	str.w	r9, [r0]
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	e7e4      	b.n	800b97e <__pow5mult+0x6a>
 800b9b4:	4638      	mov	r0, r7
 800b9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ba:	bf00      	nop
 800b9bc:	0800cd28 	.word	0x0800cd28
 800b9c0:	0800c950 	.word	0x0800c950
 800b9c4:	0800cbdc 	.word	0x0800cbdc

0800b9c8 <__lshift>:
 800b9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	6849      	ldr	r1, [r1, #4]
 800b9d0:	6923      	ldr	r3, [r4, #16]
 800b9d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9d6:	68a3      	ldr	r3, [r4, #8]
 800b9d8:	4607      	mov	r7, r0
 800b9da:	4691      	mov	r9, r2
 800b9dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9e0:	f108 0601 	add.w	r6, r8, #1
 800b9e4:	42b3      	cmp	r3, r6
 800b9e6:	db0b      	blt.n	800ba00 <__lshift+0x38>
 800b9e8:	4638      	mov	r0, r7
 800b9ea:	f7ff fddb 	bl	800b5a4 <_Balloc>
 800b9ee:	4605      	mov	r5, r0
 800b9f0:	b948      	cbnz	r0, 800ba06 <__lshift+0x3e>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	4b2a      	ldr	r3, [pc, #168]	; (800baa0 <__lshift+0xd8>)
 800b9f6:	482b      	ldr	r0, [pc, #172]	; (800baa4 <__lshift+0xdc>)
 800b9f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b9fc:	f7fe fcee 	bl	800a3dc <__assert_func>
 800ba00:	3101      	adds	r1, #1
 800ba02:	005b      	lsls	r3, r3, #1
 800ba04:	e7ee      	b.n	800b9e4 <__lshift+0x1c>
 800ba06:	2300      	movs	r3, #0
 800ba08:	f100 0114 	add.w	r1, r0, #20
 800ba0c:	f100 0210 	add.w	r2, r0, #16
 800ba10:	4618      	mov	r0, r3
 800ba12:	4553      	cmp	r3, sl
 800ba14:	db37      	blt.n	800ba86 <__lshift+0xbe>
 800ba16:	6920      	ldr	r0, [r4, #16]
 800ba18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba1c:	f104 0314 	add.w	r3, r4, #20
 800ba20:	f019 091f 	ands.w	r9, r9, #31
 800ba24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ba2c:	d02f      	beq.n	800ba8e <__lshift+0xc6>
 800ba2e:	f1c9 0e20 	rsb	lr, r9, #32
 800ba32:	468a      	mov	sl, r1
 800ba34:	f04f 0c00 	mov.w	ip, #0
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	fa02 f209 	lsl.w	r2, r2, r9
 800ba3e:	ea42 020c 	orr.w	r2, r2, ip
 800ba42:	f84a 2b04 	str.w	r2, [sl], #4
 800ba46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba4a:	4298      	cmp	r0, r3
 800ba4c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ba50:	d8f2      	bhi.n	800ba38 <__lshift+0x70>
 800ba52:	1b03      	subs	r3, r0, r4
 800ba54:	3b15      	subs	r3, #21
 800ba56:	f023 0303 	bic.w	r3, r3, #3
 800ba5a:	3304      	adds	r3, #4
 800ba5c:	f104 0215 	add.w	r2, r4, #21
 800ba60:	4290      	cmp	r0, r2
 800ba62:	bf38      	it	cc
 800ba64:	2304      	movcc	r3, #4
 800ba66:	f841 c003 	str.w	ip, [r1, r3]
 800ba6a:	f1bc 0f00 	cmp.w	ip, #0
 800ba6e:	d001      	beq.n	800ba74 <__lshift+0xac>
 800ba70:	f108 0602 	add.w	r6, r8, #2
 800ba74:	3e01      	subs	r6, #1
 800ba76:	4638      	mov	r0, r7
 800ba78:	612e      	str	r6, [r5, #16]
 800ba7a:	4621      	mov	r1, r4
 800ba7c:	f7ff fdd2 	bl	800b624 <_Bfree>
 800ba80:	4628      	mov	r0, r5
 800ba82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba86:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	e7c1      	b.n	800ba12 <__lshift+0x4a>
 800ba8e:	3904      	subs	r1, #4
 800ba90:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba94:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba98:	4298      	cmp	r0, r3
 800ba9a:	d8f9      	bhi.n	800ba90 <__lshift+0xc8>
 800ba9c:	e7ea      	b.n	800ba74 <__lshift+0xac>
 800ba9e:	bf00      	nop
 800baa0:	0800cb69 	.word	0x0800cb69
 800baa4:	0800cbdc 	.word	0x0800cbdc

0800baa8 <__mcmp>:
 800baa8:	b530      	push	{r4, r5, lr}
 800baaa:	6902      	ldr	r2, [r0, #16]
 800baac:	690c      	ldr	r4, [r1, #16]
 800baae:	1b12      	subs	r2, r2, r4
 800bab0:	d10e      	bne.n	800bad0 <__mcmp+0x28>
 800bab2:	f100 0314 	add.w	r3, r0, #20
 800bab6:	3114      	adds	r1, #20
 800bab8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800babc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bac0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bac4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bac8:	42a5      	cmp	r5, r4
 800baca:	d003      	beq.n	800bad4 <__mcmp+0x2c>
 800bacc:	d305      	bcc.n	800bada <__mcmp+0x32>
 800bace:	2201      	movs	r2, #1
 800bad0:	4610      	mov	r0, r2
 800bad2:	bd30      	pop	{r4, r5, pc}
 800bad4:	4283      	cmp	r3, r0
 800bad6:	d3f3      	bcc.n	800bac0 <__mcmp+0x18>
 800bad8:	e7fa      	b.n	800bad0 <__mcmp+0x28>
 800bada:	f04f 32ff 	mov.w	r2, #4294967295
 800bade:	e7f7      	b.n	800bad0 <__mcmp+0x28>

0800bae0 <__mdiff>:
 800bae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	460c      	mov	r4, r1
 800bae6:	4606      	mov	r6, r0
 800bae8:	4611      	mov	r1, r2
 800baea:	4620      	mov	r0, r4
 800baec:	4690      	mov	r8, r2
 800baee:	f7ff ffdb 	bl	800baa8 <__mcmp>
 800baf2:	1e05      	subs	r5, r0, #0
 800baf4:	d110      	bne.n	800bb18 <__mdiff+0x38>
 800baf6:	4629      	mov	r1, r5
 800baf8:	4630      	mov	r0, r6
 800bafa:	f7ff fd53 	bl	800b5a4 <_Balloc>
 800bafe:	b930      	cbnz	r0, 800bb0e <__mdiff+0x2e>
 800bb00:	4b3a      	ldr	r3, [pc, #232]	; (800bbec <__mdiff+0x10c>)
 800bb02:	4602      	mov	r2, r0
 800bb04:	f240 2132 	movw	r1, #562	; 0x232
 800bb08:	4839      	ldr	r0, [pc, #228]	; (800bbf0 <__mdiff+0x110>)
 800bb0a:	f7fe fc67 	bl	800a3dc <__assert_func>
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb18:	bfa4      	itt	ge
 800bb1a:	4643      	movge	r3, r8
 800bb1c:	46a0      	movge	r8, r4
 800bb1e:	4630      	mov	r0, r6
 800bb20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb24:	bfa6      	itte	ge
 800bb26:	461c      	movge	r4, r3
 800bb28:	2500      	movge	r5, #0
 800bb2a:	2501      	movlt	r5, #1
 800bb2c:	f7ff fd3a 	bl	800b5a4 <_Balloc>
 800bb30:	b920      	cbnz	r0, 800bb3c <__mdiff+0x5c>
 800bb32:	4b2e      	ldr	r3, [pc, #184]	; (800bbec <__mdiff+0x10c>)
 800bb34:	4602      	mov	r2, r0
 800bb36:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bb3a:	e7e5      	b.n	800bb08 <__mdiff+0x28>
 800bb3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb40:	6926      	ldr	r6, [r4, #16]
 800bb42:	60c5      	str	r5, [r0, #12]
 800bb44:	f104 0914 	add.w	r9, r4, #20
 800bb48:	f108 0514 	add.w	r5, r8, #20
 800bb4c:	f100 0e14 	add.w	lr, r0, #20
 800bb50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb58:	f108 0210 	add.w	r2, r8, #16
 800bb5c:	46f2      	mov	sl, lr
 800bb5e:	2100      	movs	r1, #0
 800bb60:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb68:	fa1f f883 	uxth.w	r8, r3
 800bb6c:	fa11 f18b 	uxtah	r1, r1, fp
 800bb70:	0c1b      	lsrs	r3, r3, #16
 800bb72:	eba1 0808 	sub.w	r8, r1, r8
 800bb76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bb7e:	fa1f f888 	uxth.w	r8, r8
 800bb82:	1419      	asrs	r1, r3, #16
 800bb84:	454e      	cmp	r6, r9
 800bb86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bb8a:	f84a 3b04 	str.w	r3, [sl], #4
 800bb8e:	d8e7      	bhi.n	800bb60 <__mdiff+0x80>
 800bb90:	1b33      	subs	r3, r6, r4
 800bb92:	3b15      	subs	r3, #21
 800bb94:	f023 0303 	bic.w	r3, r3, #3
 800bb98:	3304      	adds	r3, #4
 800bb9a:	3415      	adds	r4, #21
 800bb9c:	42a6      	cmp	r6, r4
 800bb9e:	bf38      	it	cc
 800bba0:	2304      	movcc	r3, #4
 800bba2:	441d      	add	r5, r3
 800bba4:	4473      	add	r3, lr
 800bba6:	469e      	mov	lr, r3
 800bba8:	462e      	mov	r6, r5
 800bbaa:	4566      	cmp	r6, ip
 800bbac:	d30e      	bcc.n	800bbcc <__mdiff+0xec>
 800bbae:	f10c 0203 	add.w	r2, ip, #3
 800bbb2:	1b52      	subs	r2, r2, r5
 800bbb4:	f022 0203 	bic.w	r2, r2, #3
 800bbb8:	3d03      	subs	r5, #3
 800bbba:	45ac      	cmp	ip, r5
 800bbbc:	bf38      	it	cc
 800bbbe:	2200      	movcc	r2, #0
 800bbc0:	441a      	add	r2, r3
 800bbc2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bbc6:	b17b      	cbz	r3, 800bbe8 <__mdiff+0x108>
 800bbc8:	6107      	str	r7, [r0, #16]
 800bbca:	e7a3      	b.n	800bb14 <__mdiff+0x34>
 800bbcc:	f856 8b04 	ldr.w	r8, [r6], #4
 800bbd0:	fa11 f288 	uxtah	r2, r1, r8
 800bbd4:	1414      	asrs	r4, r2, #16
 800bbd6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bbda:	b292      	uxth	r2, r2
 800bbdc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bbe0:	f84e 2b04 	str.w	r2, [lr], #4
 800bbe4:	1421      	asrs	r1, r4, #16
 800bbe6:	e7e0      	b.n	800bbaa <__mdiff+0xca>
 800bbe8:	3f01      	subs	r7, #1
 800bbea:	e7ea      	b.n	800bbc2 <__mdiff+0xe2>
 800bbec:	0800cb69 	.word	0x0800cb69
 800bbf0:	0800cbdc 	.word	0x0800cbdc

0800bbf4 <__d2b>:
 800bbf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bbf8:	4689      	mov	r9, r1
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	ec57 6b10 	vmov	r6, r7, d0
 800bc00:	4690      	mov	r8, r2
 800bc02:	f7ff fccf 	bl	800b5a4 <_Balloc>
 800bc06:	4604      	mov	r4, r0
 800bc08:	b930      	cbnz	r0, 800bc18 <__d2b+0x24>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	4b25      	ldr	r3, [pc, #148]	; (800bca4 <__d2b+0xb0>)
 800bc0e:	4826      	ldr	r0, [pc, #152]	; (800bca8 <__d2b+0xb4>)
 800bc10:	f240 310a 	movw	r1, #778	; 0x30a
 800bc14:	f7fe fbe2 	bl	800a3dc <__assert_func>
 800bc18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bc1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc20:	bb35      	cbnz	r5, 800bc70 <__d2b+0x7c>
 800bc22:	2e00      	cmp	r6, #0
 800bc24:	9301      	str	r3, [sp, #4]
 800bc26:	d028      	beq.n	800bc7a <__d2b+0x86>
 800bc28:	4668      	mov	r0, sp
 800bc2a:	9600      	str	r6, [sp, #0]
 800bc2c:	f7ff fd82 	bl	800b734 <__lo0bits>
 800bc30:	9900      	ldr	r1, [sp, #0]
 800bc32:	b300      	cbz	r0, 800bc76 <__d2b+0x82>
 800bc34:	9a01      	ldr	r2, [sp, #4]
 800bc36:	f1c0 0320 	rsb	r3, r0, #32
 800bc3a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc3e:	430b      	orrs	r3, r1
 800bc40:	40c2      	lsrs	r2, r0
 800bc42:	6163      	str	r3, [r4, #20]
 800bc44:	9201      	str	r2, [sp, #4]
 800bc46:	9b01      	ldr	r3, [sp, #4]
 800bc48:	61a3      	str	r3, [r4, #24]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	bf14      	ite	ne
 800bc4e:	2202      	movne	r2, #2
 800bc50:	2201      	moveq	r2, #1
 800bc52:	6122      	str	r2, [r4, #16]
 800bc54:	b1d5      	cbz	r5, 800bc8c <__d2b+0x98>
 800bc56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc5a:	4405      	add	r5, r0
 800bc5c:	f8c9 5000 	str.w	r5, [r9]
 800bc60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc64:	f8c8 0000 	str.w	r0, [r8]
 800bc68:	4620      	mov	r0, r4
 800bc6a:	b003      	add	sp, #12
 800bc6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc74:	e7d5      	b.n	800bc22 <__d2b+0x2e>
 800bc76:	6161      	str	r1, [r4, #20]
 800bc78:	e7e5      	b.n	800bc46 <__d2b+0x52>
 800bc7a:	a801      	add	r0, sp, #4
 800bc7c:	f7ff fd5a 	bl	800b734 <__lo0bits>
 800bc80:	9b01      	ldr	r3, [sp, #4]
 800bc82:	6163      	str	r3, [r4, #20]
 800bc84:	2201      	movs	r2, #1
 800bc86:	6122      	str	r2, [r4, #16]
 800bc88:	3020      	adds	r0, #32
 800bc8a:	e7e3      	b.n	800bc54 <__d2b+0x60>
 800bc8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc94:	f8c9 0000 	str.w	r0, [r9]
 800bc98:	6918      	ldr	r0, [r3, #16]
 800bc9a:	f7ff fd2b 	bl	800b6f4 <__hi0bits>
 800bc9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bca2:	e7df      	b.n	800bc64 <__d2b+0x70>
 800bca4:	0800cb69 	.word	0x0800cb69
 800bca8:	0800cbdc 	.word	0x0800cbdc

0800bcac <_calloc_r>:
 800bcac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcae:	fba1 2402 	umull	r2, r4, r1, r2
 800bcb2:	b94c      	cbnz	r4, 800bcc8 <_calloc_r+0x1c>
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	9201      	str	r2, [sp, #4]
 800bcb8:	f000 f87a 	bl	800bdb0 <_malloc_r>
 800bcbc:	9a01      	ldr	r2, [sp, #4]
 800bcbe:	4605      	mov	r5, r0
 800bcc0:	b930      	cbnz	r0, 800bcd0 <_calloc_r+0x24>
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	b003      	add	sp, #12
 800bcc6:	bd30      	pop	{r4, r5, pc}
 800bcc8:	220c      	movs	r2, #12
 800bcca:	6002      	str	r2, [r0, #0]
 800bccc:	2500      	movs	r5, #0
 800bcce:	e7f8      	b.n	800bcc2 <_calloc_r+0x16>
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	f7fd fcbf 	bl	8009654 <memset>
 800bcd6:	e7f4      	b.n	800bcc2 <_calloc_r+0x16>

0800bcd8 <_free_r>:
 800bcd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcda:	2900      	cmp	r1, #0
 800bcdc:	d044      	beq.n	800bd68 <_free_r+0x90>
 800bcde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bce2:	9001      	str	r0, [sp, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f1a1 0404 	sub.w	r4, r1, #4
 800bcea:	bfb8      	it	lt
 800bcec:	18e4      	addlt	r4, r4, r3
 800bcee:	f000 fc67 	bl	800c5c0 <__malloc_lock>
 800bcf2:	4a1e      	ldr	r2, [pc, #120]	; (800bd6c <_free_r+0x94>)
 800bcf4:	9801      	ldr	r0, [sp, #4]
 800bcf6:	6813      	ldr	r3, [r2, #0]
 800bcf8:	b933      	cbnz	r3, 800bd08 <_free_r+0x30>
 800bcfa:	6063      	str	r3, [r4, #4]
 800bcfc:	6014      	str	r4, [r2, #0]
 800bcfe:	b003      	add	sp, #12
 800bd00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd04:	f000 bc62 	b.w	800c5cc <__malloc_unlock>
 800bd08:	42a3      	cmp	r3, r4
 800bd0a:	d908      	bls.n	800bd1e <_free_r+0x46>
 800bd0c:	6825      	ldr	r5, [r4, #0]
 800bd0e:	1961      	adds	r1, r4, r5
 800bd10:	428b      	cmp	r3, r1
 800bd12:	bf01      	itttt	eq
 800bd14:	6819      	ldreq	r1, [r3, #0]
 800bd16:	685b      	ldreq	r3, [r3, #4]
 800bd18:	1949      	addeq	r1, r1, r5
 800bd1a:	6021      	streq	r1, [r4, #0]
 800bd1c:	e7ed      	b.n	800bcfa <_free_r+0x22>
 800bd1e:	461a      	mov	r2, r3
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	b10b      	cbz	r3, 800bd28 <_free_r+0x50>
 800bd24:	42a3      	cmp	r3, r4
 800bd26:	d9fa      	bls.n	800bd1e <_free_r+0x46>
 800bd28:	6811      	ldr	r1, [r2, #0]
 800bd2a:	1855      	adds	r5, r2, r1
 800bd2c:	42a5      	cmp	r5, r4
 800bd2e:	d10b      	bne.n	800bd48 <_free_r+0x70>
 800bd30:	6824      	ldr	r4, [r4, #0]
 800bd32:	4421      	add	r1, r4
 800bd34:	1854      	adds	r4, r2, r1
 800bd36:	42a3      	cmp	r3, r4
 800bd38:	6011      	str	r1, [r2, #0]
 800bd3a:	d1e0      	bne.n	800bcfe <_free_r+0x26>
 800bd3c:	681c      	ldr	r4, [r3, #0]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	6053      	str	r3, [r2, #4]
 800bd42:	4421      	add	r1, r4
 800bd44:	6011      	str	r1, [r2, #0]
 800bd46:	e7da      	b.n	800bcfe <_free_r+0x26>
 800bd48:	d902      	bls.n	800bd50 <_free_r+0x78>
 800bd4a:	230c      	movs	r3, #12
 800bd4c:	6003      	str	r3, [r0, #0]
 800bd4e:	e7d6      	b.n	800bcfe <_free_r+0x26>
 800bd50:	6825      	ldr	r5, [r4, #0]
 800bd52:	1961      	adds	r1, r4, r5
 800bd54:	428b      	cmp	r3, r1
 800bd56:	bf04      	itt	eq
 800bd58:	6819      	ldreq	r1, [r3, #0]
 800bd5a:	685b      	ldreq	r3, [r3, #4]
 800bd5c:	6063      	str	r3, [r4, #4]
 800bd5e:	bf04      	itt	eq
 800bd60:	1949      	addeq	r1, r1, r5
 800bd62:	6021      	streq	r1, [r4, #0]
 800bd64:	6054      	str	r4, [r2, #4]
 800bd66:	e7ca      	b.n	800bcfe <_free_r+0x26>
 800bd68:	b003      	add	sp, #12
 800bd6a:	bd30      	pop	{r4, r5, pc}
 800bd6c:	20000550 	.word	0x20000550

0800bd70 <sbrk_aligned>:
 800bd70:	b570      	push	{r4, r5, r6, lr}
 800bd72:	4e0e      	ldr	r6, [pc, #56]	; (800bdac <sbrk_aligned+0x3c>)
 800bd74:	460c      	mov	r4, r1
 800bd76:	6831      	ldr	r1, [r6, #0]
 800bd78:	4605      	mov	r5, r0
 800bd7a:	b911      	cbnz	r1, 800bd82 <sbrk_aligned+0x12>
 800bd7c:	f000 fb42 	bl	800c404 <_sbrk_r>
 800bd80:	6030      	str	r0, [r6, #0]
 800bd82:	4621      	mov	r1, r4
 800bd84:	4628      	mov	r0, r5
 800bd86:	f000 fb3d 	bl	800c404 <_sbrk_r>
 800bd8a:	1c43      	adds	r3, r0, #1
 800bd8c:	d00a      	beq.n	800bda4 <sbrk_aligned+0x34>
 800bd8e:	1cc4      	adds	r4, r0, #3
 800bd90:	f024 0403 	bic.w	r4, r4, #3
 800bd94:	42a0      	cmp	r0, r4
 800bd96:	d007      	beq.n	800bda8 <sbrk_aligned+0x38>
 800bd98:	1a21      	subs	r1, r4, r0
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	f000 fb32 	bl	800c404 <_sbrk_r>
 800bda0:	3001      	adds	r0, #1
 800bda2:	d101      	bne.n	800bda8 <sbrk_aligned+0x38>
 800bda4:	f04f 34ff 	mov.w	r4, #4294967295
 800bda8:	4620      	mov	r0, r4
 800bdaa:	bd70      	pop	{r4, r5, r6, pc}
 800bdac:	20000554 	.word	0x20000554

0800bdb0 <_malloc_r>:
 800bdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb4:	1ccd      	adds	r5, r1, #3
 800bdb6:	f025 0503 	bic.w	r5, r5, #3
 800bdba:	3508      	adds	r5, #8
 800bdbc:	2d0c      	cmp	r5, #12
 800bdbe:	bf38      	it	cc
 800bdc0:	250c      	movcc	r5, #12
 800bdc2:	2d00      	cmp	r5, #0
 800bdc4:	4607      	mov	r7, r0
 800bdc6:	db01      	blt.n	800bdcc <_malloc_r+0x1c>
 800bdc8:	42a9      	cmp	r1, r5
 800bdca:	d905      	bls.n	800bdd8 <_malloc_r+0x28>
 800bdcc:	230c      	movs	r3, #12
 800bdce:	603b      	str	r3, [r7, #0]
 800bdd0:	2600      	movs	r6, #0
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd8:	4e2e      	ldr	r6, [pc, #184]	; (800be94 <_malloc_r+0xe4>)
 800bdda:	f000 fbf1 	bl	800c5c0 <__malloc_lock>
 800bdde:	6833      	ldr	r3, [r6, #0]
 800bde0:	461c      	mov	r4, r3
 800bde2:	bb34      	cbnz	r4, 800be32 <_malloc_r+0x82>
 800bde4:	4629      	mov	r1, r5
 800bde6:	4638      	mov	r0, r7
 800bde8:	f7ff ffc2 	bl	800bd70 <sbrk_aligned>
 800bdec:	1c43      	adds	r3, r0, #1
 800bdee:	4604      	mov	r4, r0
 800bdf0:	d14d      	bne.n	800be8e <_malloc_r+0xde>
 800bdf2:	6834      	ldr	r4, [r6, #0]
 800bdf4:	4626      	mov	r6, r4
 800bdf6:	2e00      	cmp	r6, #0
 800bdf8:	d140      	bne.n	800be7c <_malloc_r+0xcc>
 800bdfa:	6823      	ldr	r3, [r4, #0]
 800bdfc:	4631      	mov	r1, r6
 800bdfe:	4638      	mov	r0, r7
 800be00:	eb04 0803 	add.w	r8, r4, r3
 800be04:	f000 fafe 	bl	800c404 <_sbrk_r>
 800be08:	4580      	cmp	r8, r0
 800be0a:	d13a      	bne.n	800be82 <_malloc_r+0xd2>
 800be0c:	6821      	ldr	r1, [r4, #0]
 800be0e:	3503      	adds	r5, #3
 800be10:	1a6d      	subs	r5, r5, r1
 800be12:	f025 0503 	bic.w	r5, r5, #3
 800be16:	3508      	adds	r5, #8
 800be18:	2d0c      	cmp	r5, #12
 800be1a:	bf38      	it	cc
 800be1c:	250c      	movcc	r5, #12
 800be1e:	4629      	mov	r1, r5
 800be20:	4638      	mov	r0, r7
 800be22:	f7ff ffa5 	bl	800bd70 <sbrk_aligned>
 800be26:	3001      	adds	r0, #1
 800be28:	d02b      	beq.n	800be82 <_malloc_r+0xd2>
 800be2a:	6823      	ldr	r3, [r4, #0]
 800be2c:	442b      	add	r3, r5
 800be2e:	6023      	str	r3, [r4, #0]
 800be30:	e00e      	b.n	800be50 <_malloc_r+0xa0>
 800be32:	6822      	ldr	r2, [r4, #0]
 800be34:	1b52      	subs	r2, r2, r5
 800be36:	d41e      	bmi.n	800be76 <_malloc_r+0xc6>
 800be38:	2a0b      	cmp	r2, #11
 800be3a:	d916      	bls.n	800be6a <_malloc_r+0xba>
 800be3c:	1961      	adds	r1, r4, r5
 800be3e:	42a3      	cmp	r3, r4
 800be40:	6025      	str	r5, [r4, #0]
 800be42:	bf18      	it	ne
 800be44:	6059      	strne	r1, [r3, #4]
 800be46:	6863      	ldr	r3, [r4, #4]
 800be48:	bf08      	it	eq
 800be4a:	6031      	streq	r1, [r6, #0]
 800be4c:	5162      	str	r2, [r4, r5]
 800be4e:	604b      	str	r3, [r1, #4]
 800be50:	4638      	mov	r0, r7
 800be52:	f104 060b 	add.w	r6, r4, #11
 800be56:	f000 fbb9 	bl	800c5cc <__malloc_unlock>
 800be5a:	f026 0607 	bic.w	r6, r6, #7
 800be5e:	1d23      	adds	r3, r4, #4
 800be60:	1af2      	subs	r2, r6, r3
 800be62:	d0b6      	beq.n	800bdd2 <_malloc_r+0x22>
 800be64:	1b9b      	subs	r3, r3, r6
 800be66:	50a3      	str	r3, [r4, r2]
 800be68:	e7b3      	b.n	800bdd2 <_malloc_r+0x22>
 800be6a:	6862      	ldr	r2, [r4, #4]
 800be6c:	42a3      	cmp	r3, r4
 800be6e:	bf0c      	ite	eq
 800be70:	6032      	streq	r2, [r6, #0]
 800be72:	605a      	strne	r2, [r3, #4]
 800be74:	e7ec      	b.n	800be50 <_malloc_r+0xa0>
 800be76:	4623      	mov	r3, r4
 800be78:	6864      	ldr	r4, [r4, #4]
 800be7a:	e7b2      	b.n	800bde2 <_malloc_r+0x32>
 800be7c:	4634      	mov	r4, r6
 800be7e:	6876      	ldr	r6, [r6, #4]
 800be80:	e7b9      	b.n	800bdf6 <_malloc_r+0x46>
 800be82:	230c      	movs	r3, #12
 800be84:	603b      	str	r3, [r7, #0]
 800be86:	4638      	mov	r0, r7
 800be88:	f000 fba0 	bl	800c5cc <__malloc_unlock>
 800be8c:	e7a1      	b.n	800bdd2 <_malloc_r+0x22>
 800be8e:	6025      	str	r5, [r4, #0]
 800be90:	e7de      	b.n	800be50 <_malloc_r+0xa0>
 800be92:	bf00      	nop
 800be94:	20000550 	.word	0x20000550

0800be98 <__ssputs_r>:
 800be98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be9c:	688e      	ldr	r6, [r1, #8]
 800be9e:	429e      	cmp	r6, r3
 800bea0:	4682      	mov	sl, r0
 800bea2:	460c      	mov	r4, r1
 800bea4:	4690      	mov	r8, r2
 800bea6:	461f      	mov	r7, r3
 800bea8:	d838      	bhi.n	800bf1c <__ssputs_r+0x84>
 800beaa:	898a      	ldrh	r2, [r1, #12]
 800beac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800beb0:	d032      	beq.n	800bf18 <__ssputs_r+0x80>
 800beb2:	6825      	ldr	r5, [r4, #0]
 800beb4:	6909      	ldr	r1, [r1, #16]
 800beb6:	eba5 0901 	sub.w	r9, r5, r1
 800beba:	6965      	ldr	r5, [r4, #20]
 800bebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bec4:	3301      	adds	r3, #1
 800bec6:	444b      	add	r3, r9
 800bec8:	106d      	asrs	r5, r5, #1
 800beca:	429d      	cmp	r5, r3
 800becc:	bf38      	it	cc
 800bece:	461d      	movcc	r5, r3
 800bed0:	0553      	lsls	r3, r2, #21
 800bed2:	d531      	bpl.n	800bf38 <__ssputs_r+0xa0>
 800bed4:	4629      	mov	r1, r5
 800bed6:	f7ff ff6b 	bl	800bdb0 <_malloc_r>
 800beda:	4606      	mov	r6, r0
 800bedc:	b950      	cbnz	r0, 800bef4 <__ssputs_r+0x5c>
 800bede:	230c      	movs	r3, #12
 800bee0:	f8ca 3000 	str.w	r3, [sl]
 800bee4:	89a3      	ldrh	r3, [r4, #12]
 800bee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beea:	81a3      	strh	r3, [r4, #12]
 800beec:	f04f 30ff 	mov.w	r0, #4294967295
 800bef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bef4:	6921      	ldr	r1, [r4, #16]
 800bef6:	464a      	mov	r2, r9
 800bef8:	f7ff fb46 	bl	800b588 <memcpy>
 800befc:	89a3      	ldrh	r3, [r4, #12]
 800befe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf06:	81a3      	strh	r3, [r4, #12]
 800bf08:	6126      	str	r6, [r4, #16]
 800bf0a:	6165      	str	r5, [r4, #20]
 800bf0c:	444e      	add	r6, r9
 800bf0e:	eba5 0509 	sub.w	r5, r5, r9
 800bf12:	6026      	str	r6, [r4, #0]
 800bf14:	60a5      	str	r5, [r4, #8]
 800bf16:	463e      	mov	r6, r7
 800bf18:	42be      	cmp	r6, r7
 800bf1a:	d900      	bls.n	800bf1e <__ssputs_r+0x86>
 800bf1c:	463e      	mov	r6, r7
 800bf1e:	6820      	ldr	r0, [r4, #0]
 800bf20:	4632      	mov	r2, r6
 800bf22:	4641      	mov	r1, r8
 800bf24:	f000 fb32 	bl	800c58c <memmove>
 800bf28:	68a3      	ldr	r3, [r4, #8]
 800bf2a:	1b9b      	subs	r3, r3, r6
 800bf2c:	60a3      	str	r3, [r4, #8]
 800bf2e:	6823      	ldr	r3, [r4, #0]
 800bf30:	4433      	add	r3, r6
 800bf32:	6023      	str	r3, [r4, #0]
 800bf34:	2000      	movs	r0, #0
 800bf36:	e7db      	b.n	800bef0 <__ssputs_r+0x58>
 800bf38:	462a      	mov	r2, r5
 800bf3a:	f000 fb4d 	bl	800c5d8 <_realloc_r>
 800bf3e:	4606      	mov	r6, r0
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d1e1      	bne.n	800bf08 <__ssputs_r+0x70>
 800bf44:	6921      	ldr	r1, [r4, #16]
 800bf46:	4650      	mov	r0, sl
 800bf48:	f7ff fec6 	bl	800bcd8 <_free_r>
 800bf4c:	e7c7      	b.n	800bede <__ssputs_r+0x46>
	...

0800bf50 <_svfiprintf_r>:
 800bf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf54:	4698      	mov	r8, r3
 800bf56:	898b      	ldrh	r3, [r1, #12]
 800bf58:	061b      	lsls	r3, r3, #24
 800bf5a:	b09d      	sub	sp, #116	; 0x74
 800bf5c:	4607      	mov	r7, r0
 800bf5e:	460d      	mov	r5, r1
 800bf60:	4614      	mov	r4, r2
 800bf62:	d50e      	bpl.n	800bf82 <_svfiprintf_r+0x32>
 800bf64:	690b      	ldr	r3, [r1, #16]
 800bf66:	b963      	cbnz	r3, 800bf82 <_svfiprintf_r+0x32>
 800bf68:	2140      	movs	r1, #64	; 0x40
 800bf6a:	f7ff ff21 	bl	800bdb0 <_malloc_r>
 800bf6e:	6028      	str	r0, [r5, #0]
 800bf70:	6128      	str	r0, [r5, #16]
 800bf72:	b920      	cbnz	r0, 800bf7e <_svfiprintf_r+0x2e>
 800bf74:	230c      	movs	r3, #12
 800bf76:	603b      	str	r3, [r7, #0]
 800bf78:	f04f 30ff 	mov.w	r0, #4294967295
 800bf7c:	e0d1      	b.n	800c122 <_svfiprintf_r+0x1d2>
 800bf7e:	2340      	movs	r3, #64	; 0x40
 800bf80:	616b      	str	r3, [r5, #20]
 800bf82:	2300      	movs	r3, #0
 800bf84:	9309      	str	r3, [sp, #36]	; 0x24
 800bf86:	2320      	movs	r3, #32
 800bf88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf90:	2330      	movs	r3, #48	; 0x30
 800bf92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c13c <_svfiprintf_r+0x1ec>
 800bf96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf9a:	f04f 0901 	mov.w	r9, #1
 800bf9e:	4623      	mov	r3, r4
 800bfa0:	469a      	mov	sl, r3
 800bfa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfa6:	b10a      	cbz	r2, 800bfac <_svfiprintf_r+0x5c>
 800bfa8:	2a25      	cmp	r2, #37	; 0x25
 800bfaa:	d1f9      	bne.n	800bfa0 <_svfiprintf_r+0x50>
 800bfac:	ebba 0b04 	subs.w	fp, sl, r4
 800bfb0:	d00b      	beq.n	800bfca <_svfiprintf_r+0x7a>
 800bfb2:	465b      	mov	r3, fp
 800bfb4:	4622      	mov	r2, r4
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	4638      	mov	r0, r7
 800bfba:	f7ff ff6d 	bl	800be98 <__ssputs_r>
 800bfbe:	3001      	adds	r0, #1
 800bfc0:	f000 80aa 	beq.w	800c118 <_svfiprintf_r+0x1c8>
 800bfc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfc6:	445a      	add	r2, fp
 800bfc8:	9209      	str	r2, [sp, #36]	; 0x24
 800bfca:	f89a 3000 	ldrb.w	r3, [sl]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	f000 80a2 	beq.w	800c118 <_svfiprintf_r+0x1c8>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfde:	f10a 0a01 	add.w	sl, sl, #1
 800bfe2:	9304      	str	r3, [sp, #16]
 800bfe4:	9307      	str	r3, [sp, #28]
 800bfe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfea:	931a      	str	r3, [sp, #104]	; 0x68
 800bfec:	4654      	mov	r4, sl
 800bfee:	2205      	movs	r2, #5
 800bff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bff4:	4851      	ldr	r0, [pc, #324]	; (800c13c <_svfiprintf_r+0x1ec>)
 800bff6:	f7f4 f92b 	bl	8000250 <memchr>
 800bffa:	9a04      	ldr	r2, [sp, #16]
 800bffc:	b9d8      	cbnz	r0, 800c036 <_svfiprintf_r+0xe6>
 800bffe:	06d0      	lsls	r0, r2, #27
 800c000:	bf44      	itt	mi
 800c002:	2320      	movmi	r3, #32
 800c004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c008:	0711      	lsls	r1, r2, #28
 800c00a:	bf44      	itt	mi
 800c00c:	232b      	movmi	r3, #43	; 0x2b
 800c00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c012:	f89a 3000 	ldrb.w	r3, [sl]
 800c016:	2b2a      	cmp	r3, #42	; 0x2a
 800c018:	d015      	beq.n	800c046 <_svfiprintf_r+0xf6>
 800c01a:	9a07      	ldr	r2, [sp, #28]
 800c01c:	4654      	mov	r4, sl
 800c01e:	2000      	movs	r0, #0
 800c020:	f04f 0c0a 	mov.w	ip, #10
 800c024:	4621      	mov	r1, r4
 800c026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c02a:	3b30      	subs	r3, #48	; 0x30
 800c02c:	2b09      	cmp	r3, #9
 800c02e:	d94e      	bls.n	800c0ce <_svfiprintf_r+0x17e>
 800c030:	b1b0      	cbz	r0, 800c060 <_svfiprintf_r+0x110>
 800c032:	9207      	str	r2, [sp, #28]
 800c034:	e014      	b.n	800c060 <_svfiprintf_r+0x110>
 800c036:	eba0 0308 	sub.w	r3, r0, r8
 800c03a:	fa09 f303 	lsl.w	r3, r9, r3
 800c03e:	4313      	orrs	r3, r2
 800c040:	9304      	str	r3, [sp, #16]
 800c042:	46a2      	mov	sl, r4
 800c044:	e7d2      	b.n	800bfec <_svfiprintf_r+0x9c>
 800c046:	9b03      	ldr	r3, [sp, #12]
 800c048:	1d19      	adds	r1, r3, #4
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	9103      	str	r1, [sp, #12]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	bfbb      	ittet	lt
 800c052:	425b      	neglt	r3, r3
 800c054:	f042 0202 	orrlt.w	r2, r2, #2
 800c058:	9307      	strge	r3, [sp, #28]
 800c05a:	9307      	strlt	r3, [sp, #28]
 800c05c:	bfb8      	it	lt
 800c05e:	9204      	strlt	r2, [sp, #16]
 800c060:	7823      	ldrb	r3, [r4, #0]
 800c062:	2b2e      	cmp	r3, #46	; 0x2e
 800c064:	d10c      	bne.n	800c080 <_svfiprintf_r+0x130>
 800c066:	7863      	ldrb	r3, [r4, #1]
 800c068:	2b2a      	cmp	r3, #42	; 0x2a
 800c06a:	d135      	bne.n	800c0d8 <_svfiprintf_r+0x188>
 800c06c:	9b03      	ldr	r3, [sp, #12]
 800c06e:	1d1a      	adds	r2, r3, #4
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	9203      	str	r2, [sp, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	bfb8      	it	lt
 800c078:	f04f 33ff 	movlt.w	r3, #4294967295
 800c07c:	3402      	adds	r4, #2
 800c07e:	9305      	str	r3, [sp, #20]
 800c080:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c14c <_svfiprintf_r+0x1fc>
 800c084:	7821      	ldrb	r1, [r4, #0]
 800c086:	2203      	movs	r2, #3
 800c088:	4650      	mov	r0, sl
 800c08a:	f7f4 f8e1 	bl	8000250 <memchr>
 800c08e:	b140      	cbz	r0, 800c0a2 <_svfiprintf_r+0x152>
 800c090:	2340      	movs	r3, #64	; 0x40
 800c092:	eba0 000a 	sub.w	r0, r0, sl
 800c096:	fa03 f000 	lsl.w	r0, r3, r0
 800c09a:	9b04      	ldr	r3, [sp, #16]
 800c09c:	4303      	orrs	r3, r0
 800c09e:	3401      	adds	r4, #1
 800c0a0:	9304      	str	r3, [sp, #16]
 800c0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0a6:	4826      	ldr	r0, [pc, #152]	; (800c140 <_svfiprintf_r+0x1f0>)
 800c0a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0ac:	2206      	movs	r2, #6
 800c0ae:	f7f4 f8cf 	bl	8000250 <memchr>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	d038      	beq.n	800c128 <_svfiprintf_r+0x1d8>
 800c0b6:	4b23      	ldr	r3, [pc, #140]	; (800c144 <_svfiprintf_r+0x1f4>)
 800c0b8:	bb1b      	cbnz	r3, 800c102 <_svfiprintf_r+0x1b2>
 800c0ba:	9b03      	ldr	r3, [sp, #12]
 800c0bc:	3307      	adds	r3, #7
 800c0be:	f023 0307 	bic.w	r3, r3, #7
 800c0c2:	3308      	adds	r3, #8
 800c0c4:	9303      	str	r3, [sp, #12]
 800c0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0c8:	4433      	add	r3, r6
 800c0ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c0cc:	e767      	b.n	800bf9e <_svfiprintf_r+0x4e>
 800c0ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	2001      	movs	r0, #1
 800c0d6:	e7a5      	b.n	800c024 <_svfiprintf_r+0xd4>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	3401      	adds	r4, #1
 800c0dc:	9305      	str	r3, [sp, #20]
 800c0de:	4619      	mov	r1, r3
 800c0e0:	f04f 0c0a 	mov.w	ip, #10
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0ea:	3a30      	subs	r2, #48	; 0x30
 800c0ec:	2a09      	cmp	r2, #9
 800c0ee:	d903      	bls.n	800c0f8 <_svfiprintf_r+0x1a8>
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d0c5      	beq.n	800c080 <_svfiprintf_r+0x130>
 800c0f4:	9105      	str	r1, [sp, #20]
 800c0f6:	e7c3      	b.n	800c080 <_svfiprintf_r+0x130>
 800c0f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0fc:	4604      	mov	r4, r0
 800c0fe:	2301      	movs	r3, #1
 800c100:	e7f0      	b.n	800c0e4 <_svfiprintf_r+0x194>
 800c102:	ab03      	add	r3, sp, #12
 800c104:	9300      	str	r3, [sp, #0]
 800c106:	462a      	mov	r2, r5
 800c108:	4b0f      	ldr	r3, [pc, #60]	; (800c148 <_svfiprintf_r+0x1f8>)
 800c10a:	a904      	add	r1, sp, #16
 800c10c:	4638      	mov	r0, r7
 800c10e:	f7fd fb49 	bl	80097a4 <_printf_float>
 800c112:	1c42      	adds	r2, r0, #1
 800c114:	4606      	mov	r6, r0
 800c116:	d1d6      	bne.n	800c0c6 <_svfiprintf_r+0x176>
 800c118:	89ab      	ldrh	r3, [r5, #12]
 800c11a:	065b      	lsls	r3, r3, #25
 800c11c:	f53f af2c 	bmi.w	800bf78 <_svfiprintf_r+0x28>
 800c120:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c122:	b01d      	add	sp, #116	; 0x74
 800c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c128:	ab03      	add	r3, sp, #12
 800c12a:	9300      	str	r3, [sp, #0]
 800c12c:	462a      	mov	r2, r5
 800c12e:	4b06      	ldr	r3, [pc, #24]	; (800c148 <_svfiprintf_r+0x1f8>)
 800c130:	a904      	add	r1, sp, #16
 800c132:	4638      	mov	r0, r7
 800c134:	f7fd fdda 	bl	8009cec <_printf_i>
 800c138:	e7eb      	b.n	800c112 <_svfiprintf_r+0x1c2>
 800c13a:	bf00      	nop
 800c13c:	0800cd34 	.word	0x0800cd34
 800c140:	0800cd3e 	.word	0x0800cd3e
 800c144:	080097a5 	.word	0x080097a5
 800c148:	0800be99 	.word	0x0800be99
 800c14c:	0800cd3a 	.word	0x0800cd3a

0800c150 <__sfputc_r>:
 800c150:	6893      	ldr	r3, [r2, #8]
 800c152:	3b01      	subs	r3, #1
 800c154:	2b00      	cmp	r3, #0
 800c156:	b410      	push	{r4}
 800c158:	6093      	str	r3, [r2, #8]
 800c15a:	da08      	bge.n	800c16e <__sfputc_r+0x1e>
 800c15c:	6994      	ldr	r4, [r2, #24]
 800c15e:	42a3      	cmp	r3, r4
 800c160:	db01      	blt.n	800c166 <__sfputc_r+0x16>
 800c162:	290a      	cmp	r1, #10
 800c164:	d103      	bne.n	800c16e <__sfputc_r+0x1e>
 800c166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c16a:	f7fe b877 	b.w	800a25c <__swbuf_r>
 800c16e:	6813      	ldr	r3, [r2, #0]
 800c170:	1c58      	adds	r0, r3, #1
 800c172:	6010      	str	r0, [r2, #0]
 800c174:	7019      	strb	r1, [r3, #0]
 800c176:	4608      	mov	r0, r1
 800c178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <__sfputs_r>:
 800c17e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c180:	4606      	mov	r6, r0
 800c182:	460f      	mov	r7, r1
 800c184:	4614      	mov	r4, r2
 800c186:	18d5      	adds	r5, r2, r3
 800c188:	42ac      	cmp	r4, r5
 800c18a:	d101      	bne.n	800c190 <__sfputs_r+0x12>
 800c18c:	2000      	movs	r0, #0
 800c18e:	e007      	b.n	800c1a0 <__sfputs_r+0x22>
 800c190:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c194:	463a      	mov	r2, r7
 800c196:	4630      	mov	r0, r6
 800c198:	f7ff ffda 	bl	800c150 <__sfputc_r>
 800c19c:	1c43      	adds	r3, r0, #1
 800c19e:	d1f3      	bne.n	800c188 <__sfputs_r+0xa>
 800c1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c1a4 <_vfiprintf_r>:
 800c1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a8:	460d      	mov	r5, r1
 800c1aa:	b09d      	sub	sp, #116	; 0x74
 800c1ac:	4614      	mov	r4, r2
 800c1ae:	4698      	mov	r8, r3
 800c1b0:	4606      	mov	r6, r0
 800c1b2:	b118      	cbz	r0, 800c1bc <_vfiprintf_r+0x18>
 800c1b4:	6983      	ldr	r3, [r0, #24]
 800c1b6:	b90b      	cbnz	r3, 800c1bc <_vfiprintf_r+0x18>
 800c1b8:	f7ff f8c2 	bl	800b340 <__sinit>
 800c1bc:	4b89      	ldr	r3, [pc, #548]	; (800c3e4 <_vfiprintf_r+0x240>)
 800c1be:	429d      	cmp	r5, r3
 800c1c0:	d11b      	bne.n	800c1fa <_vfiprintf_r+0x56>
 800c1c2:	6875      	ldr	r5, [r6, #4]
 800c1c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1c6:	07d9      	lsls	r1, r3, #31
 800c1c8:	d405      	bmi.n	800c1d6 <_vfiprintf_r+0x32>
 800c1ca:	89ab      	ldrh	r3, [r5, #12]
 800c1cc:	059a      	lsls	r2, r3, #22
 800c1ce:	d402      	bmi.n	800c1d6 <_vfiprintf_r+0x32>
 800c1d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1d2:	f7ff f96a 	bl	800b4aa <__retarget_lock_acquire_recursive>
 800c1d6:	89ab      	ldrh	r3, [r5, #12]
 800c1d8:	071b      	lsls	r3, r3, #28
 800c1da:	d501      	bpl.n	800c1e0 <_vfiprintf_r+0x3c>
 800c1dc:	692b      	ldr	r3, [r5, #16]
 800c1de:	b9eb      	cbnz	r3, 800c21c <_vfiprintf_r+0x78>
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	f7fe f88c 	bl	800a300 <__swsetup_r>
 800c1e8:	b1c0      	cbz	r0, 800c21c <_vfiprintf_r+0x78>
 800c1ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1ec:	07dc      	lsls	r4, r3, #31
 800c1ee:	d50e      	bpl.n	800c20e <_vfiprintf_r+0x6a>
 800c1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f4:	b01d      	add	sp, #116	; 0x74
 800c1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1fa:	4b7b      	ldr	r3, [pc, #492]	; (800c3e8 <_vfiprintf_r+0x244>)
 800c1fc:	429d      	cmp	r5, r3
 800c1fe:	d101      	bne.n	800c204 <_vfiprintf_r+0x60>
 800c200:	68b5      	ldr	r5, [r6, #8]
 800c202:	e7df      	b.n	800c1c4 <_vfiprintf_r+0x20>
 800c204:	4b79      	ldr	r3, [pc, #484]	; (800c3ec <_vfiprintf_r+0x248>)
 800c206:	429d      	cmp	r5, r3
 800c208:	bf08      	it	eq
 800c20a:	68f5      	ldreq	r5, [r6, #12]
 800c20c:	e7da      	b.n	800c1c4 <_vfiprintf_r+0x20>
 800c20e:	89ab      	ldrh	r3, [r5, #12]
 800c210:	0598      	lsls	r0, r3, #22
 800c212:	d4ed      	bmi.n	800c1f0 <_vfiprintf_r+0x4c>
 800c214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c216:	f7ff f949 	bl	800b4ac <__retarget_lock_release_recursive>
 800c21a:	e7e9      	b.n	800c1f0 <_vfiprintf_r+0x4c>
 800c21c:	2300      	movs	r3, #0
 800c21e:	9309      	str	r3, [sp, #36]	; 0x24
 800c220:	2320      	movs	r3, #32
 800c222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c226:	f8cd 800c 	str.w	r8, [sp, #12]
 800c22a:	2330      	movs	r3, #48	; 0x30
 800c22c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c3f0 <_vfiprintf_r+0x24c>
 800c230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c234:	f04f 0901 	mov.w	r9, #1
 800c238:	4623      	mov	r3, r4
 800c23a:	469a      	mov	sl, r3
 800c23c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c240:	b10a      	cbz	r2, 800c246 <_vfiprintf_r+0xa2>
 800c242:	2a25      	cmp	r2, #37	; 0x25
 800c244:	d1f9      	bne.n	800c23a <_vfiprintf_r+0x96>
 800c246:	ebba 0b04 	subs.w	fp, sl, r4
 800c24a:	d00b      	beq.n	800c264 <_vfiprintf_r+0xc0>
 800c24c:	465b      	mov	r3, fp
 800c24e:	4622      	mov	r2, r4
 800c250:	4629      	mov	r1, r5
 800c252:	4630      	mov	r0, r6
 800c254:	f7ff ff93 	bl	800c17e <__sfputs_r>
 800c258:	3001      	adds	r0, #1
 800c25a:	f000 80aa 	beq.w	800c3b2 <_vfiprintf_r+0x20e>
 800c25e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c260:	445a      	add	r2, fp
 800c262:	9209      	str	r2, [sp, #36]	; 0x24
 800c264:	f89a 3000 	ldrb.w	r3, [sl]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f000 80a2 	beq.w	800c3b2 <_vfiprintf_r+0x20e>
 800c26e:	2300      	movs	r3, #0
 800c270:	f04f 32ff 	mov.w	r2, #4294967295
 800c274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c278:	f10a 0a01 	add.w	sl, sl, #1
 800c27c:	9304      	str	r3, [sp, #16]
 800c27e:	9307      	str	r3, [sp, #28]
 800c280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c284:	931a      	str	r3, [sp, #104]	; 0x68
 800c286:	4654      	mov	r4, sl
 800c288:	2205      	movs	r2, #5
 800c28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c28e:	4858      	ldr	r0, [pc, #352]	; (800c3f0 <_vfiprintf_r+0x24c>)
 800c290:	f7f3 ffde 	bl	8000250 <memchr>
 800c294:	9a04      	ldr	r2, [sp, #16]
 800c296:	b9d8      	cbnz	r0, 800c2d0 <_vfiprintf_r+0x12c>
 800c298:	06d1      	lsls	r1, r2, #27
 800c29a:	bf44      	itt	mi
 800c29c:	2320      	movmi	r3, #32
 800c29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2a2:	0713      	lsls	r3, r2, #28
 800c2a4:	bf44      	itt	mi
 800c2a6:	232b      	movmi	r3, #43	; 0x2b
 800c2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c2b0:	2b2a      	cmp	r3, #42	; 0x2a
 800c2b2:	d015      	beq.n	800c2e0 <_vfiprintf_r+0x13c>
 800c2b4:	9a07      	ldr	r2, [sp, #28]
 800c2b6:	4654      	mov	r4, sl
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	f04f 0c0a 	mov.w	ip, #10
 800c2be:	4621      	mov	r1, r4
 800c2c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2c4:	3b30      	subs	r3, #48	; 0x30
 800c2c6:	2b09      	cmp	r3, #9
 800c2c8:	d94e      	bls.n	800c368 <_vfiprintf_r+0x1c4>
 800c2ca:	b1b0      	cbz	r0, 800c2fa <_vfiprintf_r+0x156>
 800c2cc:	9207      	str	r2, [sp, #28]
 800c2ce:	e014      	b.n	800c2fa <_vfiprintf_r+0x156>
 800c2d0:	eba0 0308 	sub.w	r3, r0, r8
 800c2d4:	fa09 f303 	lsl.w	r3, r9, r3
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	9304      	str	r3, [sp, #16]
 800c2dc:	46a2      	mov	sl, r4
 800c2de:	e7d2      	b.n	800c286 <_vfiprintf_r+0xe2>
 800c2e0:	9b03      	ldr	r3, [sp, #12]
 800c2e2:	1d19      	adds	r1, r3, #4
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	9103      	str	r1, [sp, #12]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	bfbb      	ittet	lt
 800c2ec:	425b      	neglt	r3, r3
 800c2ee:	f042 0202 	orrlt.w	r2, r2, #2
 800c2f2:	9307      	strge	r3, [sp, #28]
 800c2f4:	9307      	strlt	r3, [sp, #28]
 800c2f6:	bfb8      	it	lt
 800c2f8:	9204      	strlt	r2, [sp, #16]
 800c2fa:	7823      	ldrb	r3, [r4, #0]
 800c2fc:	2b2e      	cmp	r3, #46	; 0x2e
 800c2fe:	d10c      	bne.n	800c31a <_vfiprintf_r+0x176>
 800c300:	7863      	ldrb	r3, [r4, #1]
 800c302:	2b2a      	cmp	r3, #42	; 0x2a
 800c304:	d135      	bne.n	800c372 <_vfiprintf_r+0x1ce>
 800c306:	9b03      	ldr	r3, [sp, #12]
 800c308:	1d1a      	adds	r2, r3, #4
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	9203      	str	r2, [sp, #12]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	bfb8      	it	lt
 800c312:	f04f 33ff 	movlt.w	r3, #4294967295
 800c316:	3402      	adds	r4, #2
 800c318:	9305      	str	r3, [sp, #20]
 800c31a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c400 <_vfiprintf_r+0x25c>
 800c31e:	7821      	ldrb	r1, [r4, #0]
 800c320:	2203      	movs	r2, #3
 800c322:	4650      	mov	r0, sl
 800c324:	f7f3 ff94 	bl	8000250 <memchr>
 800c328:	b140      	cbz	r0, 800c33c <_vfiprintf_r+0x198>
 800c32a:	2340      	movs	r3, #64	; 0x40
 800c32c:	eba0 000a 	sub.w	r0, r0, sl
 800c330:	fa03 f000 	lsl.w	r0, r3, r0
 800c334:	9b04      	ldr	r3, [sp, #16]
 800c336:	4303      	orrs	r3, r0
 800c338:	3401      	adds	r4, #1
 800c33a:	9304      	str	r3, [sp, #16]
 800c33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c340:	482c      	ldr	r0, [pc, #176]	; (800c3f4 <_vfiprintf_r+0x250>)
 800c342:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c346:	2206      	movs	r2, #6
 800c348:	f7f3 ff82 	bl	8000250 <memchr>
 800c34c:	2800      	cmp	r0, #0
 800c34e:	d03f      	beq.n	800c3d0 <_vfiprintf_r+0x22c>
 800c350:	4b29      	ldr	r3, [pc, #164]	; (800c3f8 <_vfiprintf_r+0x254>)
 800c352:	bb1b      	cbnz	r3, 800c39c <_vfiprintf_r+0x1f8>
 800c354:	9b03      	ldr	r3, [sp, #12]
 800c356:	3307      	adds	r3, #7
 800c358:	f023 0307 	bic.w	r3, r3, #7
 800c35c:	3308      	adds	r3, #8
 800c35e:	9303      	str	r3, [sp, #12]
 800c360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c362:	443b      	add	r3, r7
 800c364:	9309      	str	r3, [sp, #36]	; 0x24
 800c366:	e767      	b.n	800c238 <_vfiprintf_r+0x94>
 800c368:	fb0c 3202 	mla	r2, ip, r2, r3
 800c36c:	460c      	mov	r4, r1
 800c36e:	2001      	movs	r0, #1
 800c370:	e7a5      	b.n	800c2be <_vfiprintf_r+0x11a>
 800c372:	2300      	movs	r3, #0
 800c374:	3401      	adds	r4, #1
 800c376:	9305      	str	r3, [sp, #20]
 800c378:	4619      	mov	r1, r3
 800c37a:	f04f 0c0a 	mov.w	ip, #10
 800c37e:	4620      	mov	r0, r4
 800c380:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c384:	3a30      	subs	r2, #48	; 0x30
 800c386:	2a09      	cmp	r2, #9
 800c388:	d903      	bls.n	800c392 <_vfiprintf_r+0x1ee>
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d0c5      	beq.n	800c31a <_vfiprintf_r+0x176>
 800c38e:	9105      	str	r1, [sp, #20]
 800c390:	e7c3      	b.n	800c31a <_vfiprintf_r+0x176>
 800c392:	fb0c 2101 	mla	r1, ip, r1, r2
 800c396:	4604      	mov	r4, r0
 800c398:	2301      	movs	r3, #1
 800c39a:	e7f0      	b.n	800c37e <_vfiprintf_r+0x1da>
 800c39c:	ab03      	add	r3, sp, #12
 800c39e:	9300      	str	r3, [sp, #0]
 800c3a0:	462a      	mov	r2, r5
 800c3a2:	4b16      	ldr	r3, [pc, #88]	; (800c3fc <_vfiprintf_r+0x258>)
 800c3a4:	a904      	add	r1, sp, #16
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	f7fd f9fc 	bl	80097a4 <_printf_float>
 800c3ac:	4607      	mov	r7, r0
 800c3ae:	1c78      	adds	r0, r7, #1
 800c3b0:	d1d6      	bne.n	800c360 <_vfiprintf_r+0x1bc>
 800c3b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3b4:	07d9      	lsls	r1, r3, #31
 800c3b6:	d405      	bmi.n	800c3c4 <_vfiprintf_r+0x220>
 800c3b8:	89ab      	ldrh	r3, [r5, #12]
 800c3ba:	059a      	lsls	r2, r3, #22
 800c3bc:	d402      	bmi.n	800c3c4 <_vfiprintf_r+0x220>
 800c3be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3c0:	f7ff f874 	bl	800b4ac <__retarget_lock_release_recursive>
 800c3c4:	89ab      	ldrh	r3, [r5, #12]
 800c3c6:	065b      	lsls	r3, r3, #25
 800c3c8:	f53f af12 	bmi.w	800c1f0 <_vfiprintf_r+0x4c>
 800c3cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3ce:	e711      	b.n	800c1f4 <_vfiprintf_r+0x50>
 800c3d0:	ab03      	add	r3, sp, #12
 800c3d2:	9300      	str	r3, [sp, #0]
 800c3d4:	462a      	mov	r2, r5
 800c3d6:	4b09      	ldr	r3, [pc, #36]	; (800c3fc <_vfiprintf_r+0x258>)
 800c3d8:	a904      	add	r1, sp, #16
 800c3da:	4630      	mov	r0, r6
 800c3dc:	f7fd fc86 	bl	8009cec <_printf_i>
 800c3e0:	e7e4      	b.n	800c3ac <_vfiprintf_r+0x208>
 800c3e2:	bf00      	nop
 800c3e4:	0800cb9c 	.word	0x0800cb9c
 800c3e8:	0800cbbc 	.word	0x0800cbbc
 800c3ec:	0800cb7c 	.word	0x0800cb7c
 800c3f0:	0800cd34 	.word	0x0800cd34
 800c3f4:	0800cd3e 	.word	0x0800cd3e
 800c3f8:	080097a5 	.word	0x080097a5
 800c3fc:	0800c17f 	.word	0x0800c17f
 800c400:	0800cd3a 	.word	0x0800cd3a

0800c404 <_sbrk_r>:
 800c404:	b538      	push	{r3, r4, r5, lr}
 800c406:	4d06      	ldr	r5, [pc, #24]	; (800c420 <_sbrk_r+0x1c>)
 800c408:	2300      	movs	r3, #0
 800c40a:	4604      	mov	r4, r0
 800c40c:	4608      	mov	r0, r1
 800c40e:	602b      	str	r3, [r5, #0]
 800c410:	f7f5 fec4 	bl	800219c <_sbrk>
 800c414:	1c43      	adds	r3, r0, #1
 800c416:	d102      	bne.n	800c41e <_sbrk_r+0x1a>
 800c418:	682b      	ldr	r3, [r5, #0]
 800c41a:	b103      	cbz	r3, 800c41e <_sbrk_r+0x1a>
 800c41c:	6023      	str	r3, [r4, #0]
 800c41e:	bd38      	pop	{r3, r4, r5, pc}
 800c420:	20000558 	.word	0x20000558

0800c424 <__sread>:
 800c424:	b510      	push	{r4, lr}
 800c426:	460c      	mov	r4, r1
 800c428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c42c:	f000 f904 	bl	800c638 <_read_r>
 800c430:	2800      	cmp	r0, #0
 800c432:	bfab      	itete	ge
 800c434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c436:	89a3      	ldrhlt	r3, [r4, #12]
 800c438:	181b      	addge	r3, r3, r0
 800c43a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c43e:	bfac      	ite	ge
 800c440:	6563      	strge	r3, [r4, #84]	; 0x54
 800c442:	81a3      	strhlt	r3, [r4, #12]
 800c444:	bd10      	pop	{r4, pc}

0800c446 <__swrite>:
 800c446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c44a:	461f      	mov	r7, r3
 800c44c:	898b      	ldrh	r3, [r1, #12]
 800c44e:	05db      	lsls	r3, r3, #23
 800c450:	4605      	mov	r5, r0
 800c452:	460c      	mov	r4, r1
 800c454:	4616      	mov	r6, r2
 800c456:	d505      	bpl.n	800c464 <__swrite+0x1e>
 800c458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c45c:	2302      	movs	r3, #2
 800c45e:	2200      	movs	r2, #0
 800c460:	f000 f870 	bl	800c544 <_lseek_r>
 800c464:	89a3      	ldrh	r3, [r4, #12]
 800c466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c46a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c46e:	81a3      	strh	r3, [r4, #12]
 800c470:	4632      	mov	r2, r6
 800c472:	463b      	mov	r3, r7
 800c474:	4628      	mov	r0, r5
 800c476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c47a:	f000 b817 	b.w	800c4ac <_write_r>

0800c47e <__sseek>:
 800c47e:	b510      	push	{r4, lr}
 800c480:	460c      	mov	r4, r1
 800c482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c486:	f000 f85d 	bl	800c544 <_lseek_r>
 800c48a:	1c43      	adds	r3, r0, #1
 800c48c:	89a3      	ldrh	r3, [r4, #12]
 800c48e:	bf15      	itete	ne
 800c490:	6560      	strne	r0, [r4, #84]	; 0x54
 800c492:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c496:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c49a:	81a3      	strheq	r3, [r4, #12]
 800c49c:	bf18      	it	ne
 800c49e:	81a3      	strhne	r3, [r4, #12]
 800c4a0:	bd10      	pop	{r4, pc}

0800c4a2 <__sclose>:
 800c4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a6:	f000 b81b 	b.w	800c4e0 <_close_r>
	...

0800c4ac <_write_r>:
 800c4ac:	b538      	push	{r3, r4, r5, lr}
 800c4ae:	4d07      	ldr	r5, [pc, #28]	; (800c4cc <_write_r+0x20>)
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	4608      	mov	r0, r1
 800c4b4:	4611      	mov	r1, r2
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	602a      	str	r2, [r5, #0]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	f7f5 fe1d 	bl	80020fa <_write>
 800c4c0:	1c43      	adds	r3, r0, #1
 800c4c2:	d102      	bne.n	800c4ca <_write_r+0x1e>
 800c4c4:	682b      	ldr	r3, [r5, #0]
 800c4c6:	b103      	cbz	r3, 800c4ca <_write_r+0x1e>
 800c4c8:	6023      	str	r3, [r4, #0]
 800c4ca:	bd38      	pop	{r3, r4, r5, pc}
 800c4cc:	20000558 	.word	0x20000558

0800c4d0 <abort>:
 800c4d0:	b508      	push	{r3, lr}
 800c4d2:	2006      	movs	r0, #6
 800c4d4:	f000 f8ea 	bl	800c6ac <raise>
 800c4d8:	2001      	movs	r0, #1
 800c4da:	f7f5 fde7 	bl	80020ac <_exit>
	...

0800c4e0 <_close_r>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	4d06      	ldr	r5, [pc, #24]	; (800c4fc <_close_r+0x1c>)
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	4608      	mov	r0, r1
 800c4ea:	602b      	str	r3, [r5, #0]
 800c4ec:	f7f5 fe21 	bl	8002132 <_close>
 800c4f0:	1c43      	adds	r3, r0, #1
 800c4f2:	d102      	bne.n	800c4fa <_close_r+0x1a>
 800c4f4:	682b      	ldr	r3, [r5, #0]
 800c4f6:	b103      	cbz	r3, 800c4fa <_close_r+0x1a>
 800c4f8:	6023      	str	r3, [r4, #0]
 800c4fa:	bd38      	pop	{r3, r4, r5, pc}
 800c4fc:	20000558 	.word	0x20000558

0800c500 <_fstat_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	4d07      	ldr	r5, [pc, #28]	; (800c520 <_fstat_r+0x20>)
 800c504:	2300      	movs	r3, #0
 800c506:	4604      	mov	r4, r0
 800c508:	4608      	mov	r0, r1
 800c50a:	4611      	mov	r1, r2
 800c50c:	602b      	str	r3, [r5, #0]
 800c50e:	f7f5 fe1c 	bl	800214a <_fstat>
 800c512:	1c43      	adds	r3, r0, #1
 800c514:	d102      	bne.n	800c51c <_fstat_r+0x1c>
 800c516:	682b      	ldr	r3, [r5, #0]
 800c518:	b103      	cbz	r3, 800c51c <_fstat_r+0x1c>
 800c51a:	6023      	str	r3, [r4, #0]
 800c51c:	bd38      	pop	{r3, r4, r5, pc}
 800c51e:	bf00      	nop
 800c520:	20000558 	.word	0x20000558

0800c524 <_isatty_r>:
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	4d06      	ldr	r5, [pc, #24]	; (800c540 <_isatty_r+0x1c>)
 800c528:	2300      	movs	r3, #0
 800c52a:	4604      	mov	r4, r0
 800c52c:	4608      	mov	r0, r1
 800c52e:	602b      	str	r3, [r5, #0]
 800c530:	f7f5 fe1b 	bl	800216a <_isatty>
 800c534:	1c43      	adds	r3, r0, #1
 800c536:	d102      	bne.n	800c53e <_isatty_r+0x1a>
 800c538:	682b      	ldr	r3, [r5, #0]
 800c53a:	b103      	cbz	r3, 800c53e <_isatty_r+0x1a>
 800c53c:	6023      	str	r3, [r4, #0]
 800c53e:	bd38      	pop	{r3, r4, r5, pc}
 800c540:	20000558 	.word	0x20000558

0800c544 <_lseek_r>:
 800c544:	b538      	push	{r3, r4, r5, lr}
 800c546:	4d07      	ldr	r5, [pc, #28]	; (800c564 <_lseek_r+0x20>)
 800c548:	4604      	mov	r4, r0
 800c54a:	4608      	mov	r0, r1
 800c54c:	4611      	mov	r1, r2
 800c54e:	2200      	movs	r2, #0
 800c550:	602a      	str	r2, [r5, #0]
 800c552:	461a      	mov	r2, r3
 800c554:	f7f5 fe14 	bl	8002180 <_lseek>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d102      	bne.n	800c562 <_lseek_r+0x1e>
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	b103      	cbz	r3, 800c562 <_lseek_r+0x1e>
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	bd38      	pop	{r3, r4, r5, pc}
 800c564:	20000558 	.word	0x20000558

0800c568 <__ascii_mbtowc>:
 800c568:	b082      	sub	sp, #8
 800c56a:	b901      	cbnz	r1, 800c56e <__ascii_mbtowc+0x6>
 800c56c:	a901      	add	r1, sp, #4
 800c56e:	b142      	cbz	r2, 800c582 <__ascii_mbtowc+0x1a>
 800c570:	b14b      	cbz	r3, 800c586 <__ascii_mbtowc+0x1e>
 800c572:	7813      	ldrb	r3, [r2, #0]
 800c574:	600b      	str	r3, [r1, #0]
 800c576:	7812      	ldrb	r2, [r2, #0]
 800c578:	1e10      	subs	r0, r2, #0
 800c57a:	bf18      	it	ne
 800c57c:	2001      	movne	r0, #1
 800c57e:	b002      	add	sp, #8
 800c580:	4770      	bx	lr
 800c582:	4610      	mov	r0, r2
 800c584:	e7fb      	b.n	800c57e <__ascii_mbtowc+0x16>
 800c586:	f06f 0001 	mvn.w	r0, #1
 800c58a:	e7f8      	b.n	800c57e <__ascii_mbtowc+0x16>

0800c58c <memmove>:
 800c58c:	4288      	cmp	r0, r1
 800c58e:	b510      	push	{r4, lr}
 800c590:	eb01 0402 	add.w	r4, r1, r2
 800c594:	d902      	bls.n	800c59c <memmove+0x10>
 800c596:	4284      	cmp	r4, r0
 800c598:	4623      	mov	r3, r4
 800c59a:	d807      	bhi.n	800c5ac <memmove+0x20>
 800c59c:	1e43      	subs	r3, r0, #1
 800c59e:	42a1      	cmp	r1, r4
 800c5a0:	d008      	beq.n	800c5b4 <memmove+0x28>
 800c5a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5aa:	e7f8      	b.n	800c59e <memmove+0x12>
 800c5ac:	4402      	add	r2, r0
 800c5ae:	4601      	mov	r1, r0
 800c5b0:	428a      	cmp	r2, r1
 800c5b2:	d100      	bne.n	800c5b6 <memmove+0x2a>
 800c5b4:	bd10      	pop	{r4, pc}
 800c5b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5be:	e7f7      	b.n	800c5b0 <memmove+0x24>

0800c5c0 <__malloc_lock>:
 800c5c0:	4801      	ldr	r0, [pc, #4]	; (800c5c8 <__malloc_lock+0x8>)
 800c5c2:	f7fe bf72 	b.w	800b4aa <__retarget_lock_acquire_recursive>
 800c5c6:	bf00      	nop
 800c5c8:	2000054c 	.word	0x2000054c

0800c5cc <__malloc_unlock>:
 800c5cc:	4801      	ldr	r0, [pc, #4]	; (800c5d4 <__malloc_unlock+0x8>)
 800c5ce:	f7fe bf6d 	b.w	800b4ac <__retarget_lock_release_recursive>
 800c5d2:	bf00      	nop
 800c5d4:	2000054c 	.word	0x2000054c

0800c5d8 <_realloc_r>:
 800c5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5dc:	4680      	mov	r8, r0
 800c5de:	4614      	mov	r4, r2
 800c5e0:	460e      	mov	r6, r1
 800c5e2:	b921      	cbnz	r1, 800c5ee <_realloc_r+0x16>
 800c5e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	f7ff bbe1 	b.w	800bdb0 <_malloc_r>
 800c5ee:	b92a      	cbnz	r2, 800c5fc <_realloc_r+0x24>
 800c5f0:	f7ff fb72 	bl	800bcd8 <_free_r>
 800c5f4:	4625      	mov	r5, r4
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5fc:	f000 f87f 	bl	800c6fe <_malloc_usable_size_r>
 800c600:	4284      	cmp	r4, r0
 800c602:	4607      	mov	r7, r0
 800c604:	d802      	bhi.n	800c60c <_realloc_r+0x34>
 800c606:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c60a:	d812      	bhi.n	800c632 <_realloc_r+0x5a>
 800c60c:	4621      	mov	r1, r4
 800c60e:	4640      	mov	r0, r8
 800c610:	f7ff fbce 	bl	800bdb0 <_malloc_r>
 800c614:	4605      	mov	r5, r0
 800c616:	2800      	cmp	r0, #0
 800c618:	d0ed      	beq.n	800c5f6 <_realloc_r+0x1e>
 800c61a:	42bc      	cmp	r4, r7
 800c61c:	4622      	mov	r2, r4
 800c61e:	4631      	mov	r1, r6
 800c620:	bf28      	it	cs
 800c622:	463a      	movcs	r2, r7
 800c624:	f7fe ffb0 	bl	800b588 <memcpy>
 800c628:	4631      	mov	r1, r6
 800c62a:	4640      	mov	r0, r8
 800c62c:	f7ff fb54 	bl	800bcd8 <_free_r>
 800c630:	e7e1      	b.n	800c5f6 <_realloc_r+0x1e>
 800c632:	4635      	mov	r5, r6
 800c634:	e7df      	b.n	800c5f6 <_realloc_r+0x1e>
	...

0800c638 <_read_r>:
 800c638:	b538      	push	{r3, r4, r5, lr}
 800c63a:	4d07      	ldr	r5, [pc, #28]	; (800c658 <_read_r+0x20>)
 800c63c:	4604      	mov	r4, r0
 800c63e:	4608      	mov	r0, r1
 800c640:	4611      	mov	r1, r2
 800c642:	2200      	movs	r2, #0
 800c644:	602a      	str	r2, [r5, #0]
 800c646:	461a      	mov	r2, r3
 800c648:	f7f5 fd3a 	bl	80020c0 <_read>
 800c64c:	1c43      	adds	r3, r0, #1
 800c64e:	d102      	bne.n	800c656 <_read_r+0x1e>
 800c650:	682b      	ldr	r3, [r5, #0]
 800c652:	b103      	cbz	r3, 800c656 <_read_r+0x1e>
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	bd38      	pop	{r3, r4, r5, pc}
 800c658:	20000558 	.word	0x20000558

0800c65c <_raise_r>:
 800c65c:	291f      	cmp	r1, #31
 800c65e:	b538      	push	{r3, r4, r5, lr}
 800c660:	4604      	mov	r4, r0
 800c662:	460d      	mov	r5, r1
 800c664:	d904      	bls.n	800c670 <_raise_r+0x14>
 800c666:	2316      	movs	r3, #22
 800c668:	6003      	str	r3, [r0, #0]
 800c66a:	f04f 30ff 	mov.w	r0, #4294967295
 800c66e:	bd38      	pop	{r3, r4, r5, pc}
 800c670:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c672:	b112      	cbz	r2, 800c67a <_raise_r+0x1e>
 800c674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c678:	b94b      	cbnz	r3, 800c68e <_raise_r+0x32>
 800c67a:	4620      	mov	r0, r4
 800c67c:	f000 f830 	bl	800c6e0 <_getpid_r>
 800c680:	462a      	mov	r2, r5
 800c682:	4601      	mov	r1, r0
 800c684:	4620      	mov	r0, r4
 800c686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c68a:	f000 b817 	b.w	800c6bc <_kill_r>
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d00a      	beq.n	800c6a8 <_raise_r+0x4c>
 800c692:	1c59      	adds	r1, r3, #1
 800c694:	d103      	bne.n	800c69e <_raise_r+0x42>
 800c696:	2316      	movs	r3, #22
 800c698:	6003      	str	r3, [r0, #0]
 800c69a:	2001      	movs	r0, #1
 800c69c:	e7e7      	b.n	800c66e <_raise_r+0x12>
 800c69e:	2400      	movs	r4, #0
 800c6a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	4798      	blx	r3
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	e7e0      	b.n	800c66e <_raise_r+0x12>

0800c6ac <raise>:
 800c6ac:	4b02      	ldr	r3, [pc, #8]	; (800c6b8 <raise+0xc>)
 800c6ae:	4601      	mov	r1, r0
 800c6b0:	6818      	ldr	r0, [r3, #0]
 800c6b2:	f7ff bfd3 	b.w	800c65c <_raise_r>
 800c6b6:	bf00      	nop
 800c6b8:	200000a4 	.word	0x200000a4

0800c6bc <_kill_r>:
 800c6bc:	b538      	push	{r3, r4, r5, lr}
 800c6be:	4d07      	ldr	r5, [pc, #28]	; (800c6dc <_kill_r+0x20>)
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	4608      	mov	r0, r1
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	602b      	str	r3, [r5, #0]
 800c6ca:	f7f5 fcdf 	bl	800208c <_kill>
 800c6ce:	1c43      	adds	r3, r0, #1
 800c6d0:	d102      	bne.n	800c6d8 <_kill_r+0x1c>
 800c6d2:	682b      	ldr	r3, [r5, #0]
 800c6d4:	b103      	cbz	r3, 800c6d8 <_kill_r+0x1c>
 800c6d6:	6023      	str	r3, [r4, #0]
 800c6d8:	bd38      	pop	{r3, r4, r5, pc}
 800c6da:	bf00      	nop
 800c6dc:	20000558 	.word	0x20000558

0800c6e0 <_getpid_r>:
 800c6e0:	f7f5 bccc 	b.w	800207c <_getpid>

0800c6e4 <__ascii_wctomb>:
 800c6e4:	b149      	cbz	r1, 800c6fa <__ascii_wctomb+0x16>
 800c6e6:	2aff      	cmp	r2, #255	; 0xff
 800c6e8:	bf85      	ittet	hi
 800c6ea:	238a      	movhi	r3, #138	; 0x8a
 800c6ec:	6003      	strhi	r3, [r0, #0]
 800c6ee:	700a      	strbls	r2, [r1, #0]
 800c6f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c6f4:	bf98      	it	ls
 800c6f6:	2001      	movls	r0, #1
 800c6f8:	4770      	bx	lr
 800c6fa:	4608      	mov	r0, r1
 800c6fc:	4770      	bx	lr

0800c6fe <_malloc_usable_size_r>:
 800c6fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c702:	1f18      	subs	r0, r3, #4
 800c704:	2b00      	cmp	r3, #0
 800c706:	bfbc      	itt	lt
 800c708:	580b      	ldrlt	r3, [r1, r0]
 800c70a:	18c0      	addlt	r0, r0, r3
 800c70c:	4770      	bx	lr
	...

0800c710 <_init>:
 800c710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c712:	bf00      	nop
 800c714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c716:	bc08      	pop	{r3}
 800c718:	469e      	mov	lr, r3
 800c71a:	4770      	bx	lr

0800c71c <_fini>:
 800c71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71e:	bf00      	nop
 800c720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c722:	bc08      	pop	{r3}
 800c724:	469e      	mov	lr, r3
 800c726:	4770      	bx	lr
